 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 3/22/2021 4:15:49


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT SHINRINX
       4/       0 :                     ; 
       5/       0 :                     ; Started on 16/01/2020
       6/       0 :                     ; +-----------------------------------------------------------------+
       7/       0 :                     
       8/       0 :                     		include	"system/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; AS Main settings
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     		!org 0				; Start at 0
(1)   11/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later
(1)   12/       0 :                     		padding		off		; Dont pad dc.b
(1)   13/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   14/       0 :                     		supmode 	on 		; Supervisor mode
(1)   15/       0 :                     		dottedstructs	off		; If needed
(1)   16/       0 :                     		page 		0
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ---------------------------------------------
(1)   20/       0 :                     ; Functions
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   24/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; for cells w/h use doubleword
(1)   25/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   26/       0 :                     
(1)   27/       0 :                     ; ====================================================================
(1)   28/       0 :                     ; ---------------------------------------------
(1)   29/       0 :                     ; Macros
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; -------------------------------------
(1)   33/       0 :                     ; Reserve memory section
(1)   34/       0 :                     ;
(1)   35/       0 :                     ; NOTE: this doesn't work if
(1)   36/       0 :                     ; the current CPU is set to Z80
(1)   37/       0 :                     ; -------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	set *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     GLBL_LASTORG	set *
(1)   43/       0 :                     		phase thisinput
(1)   44/       0 :                     		endm
(1)   45/       0 :                     		
(1)   46/       0 :                     ; -------------------------------------
(1)   47/       0 :                     ; Finish
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     
(1)   50/       0 :                     finish		macro				; Then finish custom struct.
(1)   51/       0 :                     		!org GLBL_LASTORG
(1)   52/       0 :                     		phase GLBL_LASTPC
(1)   53/       0 :                     		endm
(1)   54/       0 :                     
(1)   55/       0 :                     ; -------------------------------------
(1)   56/       0 :                     ; Custom ORG
(1)   57/       0 :                     ;
(1)   58/       0 :                     ; (from s2disasm)
(1)   59/       0 :                     ; -------------------------------------
(1)   60/       0 :                     
(1)   61/       0 : =$0                 paddingSoFar set 0
(1)   62/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   63/       0 :                     org macro address
(1)   64/       0 :                     	if notZ80(MOMCPU)
(1)   65/       0 :                     		if address < *
(1)   66/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   67/       0 :                     		elseif address > *
(1)   68/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   69/       0 :                     			!org address
(1)   70/       0 :                     		endif
(1)   71/       0 :                     	else
(1)   72/       0 :                     		if address < $
(1)   73/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			while address > $
(1)   76/       0 :                     				db 0
(1)   77/       0 :                     			endm
(1)   78/       0 :                     		endif
(1)   79/       0 :                     	endif
(1)   80/       0 :                         endm
(1)   81/       0 :                     
       9/       0 :                     		include	"system/md/const.asm"	; MD and MARS Variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/MARS shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; MD to MARS custom FIFO section
(1)    7/       0 : =$8                 MAX_MDTSKARG	equ 8			; MAX MD task arguments (LONGS)
(1)    8/       0 : =$10                MAX_MDTASKS	equ 16			; MAX requests from MD to here
(1)    9/       0 :                     
(1)   10/       0 :                     ; ====================================================================
(1)   11/       0 :                     ; ----------------------------------------------------------------
(1)   12/       0 :                     ; MD Video
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; ------------------------------------------------
(1)   16/       0 :                     ; vdp_ctrl READ bits
(1)   17/       0 :                     ; ------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 : =$2                 bitHint		equ 2
(1)   20/       0 : =$3                 bitVint		equ 3
(1)   21/       0 : =$1                 bitDma		equ 1
(1)   22/       0 :                     
(1)   23/       0 :                     ; ------------------------------------------------
(1)   24/       0 :                     ; VDP register variables
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; Register $80
(1)   28/       0 : =$2                 HVStop		equ $02
(1)   29/       0 : =$10                HintEnbl	equ $10
(1)   30/       0 : =$1                 bitHVStop	equ 1
(1)   31/       0 : =$4                 bitHintEnbl	equ 4
(1)   32/       0 :                     
(1)   33/       0 :                     ; Register $81
(1)   34/       0 : =$40                DispEnbl 	equ $40
(1)   35/       0 : =$20                VintEnbl 	equ $20
(1)   36/       0 : =$10                DmaEnbl		equ $10
(1)   37/       0 : =$6                 bitDispEnbl	equ 6
(1)   38/       0 : =$5                 bitVintEnbl	equ 5
(1)   39/       0 : =$4                 bitDmaEnbl	equ 4
(1)   40/       0 : =$3                 bitV30		equ 3
(1)   41/       0 :                     
(1)   42/       0 :                     ; ====================================================================
(1)   43/       0 :                     ; --------------------------------------------------------
(1)   44/       0 :                     ; Contoller reading (call System_Input first)
(1)   45/       0 :                     ; --------------------------------------------------------
(1)   46/       0 :                     
(1)   47/       0 :                     ; call System_Input first, structure is below
(1)   48/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   49/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   50/       0 :                     
(1)   51/       0 :                     ; full WORD
(1)   52/       0 : =$1                 JoyUp		equ $0001
(1)   53/       0 : =$2                 JoyDown		equ $0002
(1)   54/       0 : =$4                 JoyLeft		equ $0004
(1)   55/       0 : =$8                 JoyRight	equ $0008
(1)   56/       0 : =$10                JoyB		equ $0010
(1)   57/       0 : =$20                JoyC		equ $0020
(1)   58/       0 : =$40                JoyA		equ $0040
(1)   59/       0 : =$80                JoyStart	equ $0080
(1)   60/       0 : =$100               JoyZ		equ $0100
(1)   61/       0 : =$200               JoyY		equ $0200
(1)   62/       0 : =$400               JoyX		equ $0400
(1)   63/       0 : =$800               JoyMode		equ $0800
(1)   64/       0 :                     
(1)   65/       0 :                     ; right byte $00xx
(1)   66/       0 : =$0                 bitJoyUp	equ 0
(1)   67/       0 : =$1                 bitJoyDown	equ 1
(1)   68/       0 : =$2                 bitJoyLeft	equ 2
(1)   69/       0 : =$3                 bitJoyRight	equ 3
(1)   70/       0 : =$4                 bitJoyB		equ 4
(1)   71/       0 : =$5                 bitJoyC		equ 5
(1)   72/       0 : =$6                 bitJoyA		equ 6
(1)   73/       0 : =$7                 bitJoyStart	equ 7
(1)   74/       0 :                     
(1)   75/       0 :                     ; left byte $xx00
(1)   76/       0 : =$0                 bitJoyZ		equ 0
(1)   77/       0 : =$1                 bitJoyY		equ 1
(1)   78/       0 : =$2                 bitJoyX		equ 2
(1)   79/       0 : =$3                 bitJoyMode	equ 3
(1)   80/       0 :                     
(1)   81/       0 :                     ; ====================================================================
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Settings
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : =$FFFF8800          MDRAM_START	equ $FFFF8800		; Start of working MD RAM (below it is free for CODE or decompression output)
(1)   87/       0 : =$800               MAX_MDERAM	equ $800		; MAX RAM for current screen mode (title,menu,or gameplay...)
(1)   88/       0 : =$7FF               varNullVram	equ $7FF		; Used in some Video routines
(1)   89/       0 :                     
(1)   90/       0 :                     ; ====================================================================
(1)   91/       0 :                     ; ----------------------------------------------------------------
(1)   92/       0 :                     ; Structures
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Controller buffer data (after calling System_Input)
(1)   96/       0 : (MACRO)             		struct 0
(1)   96/       0 : =$0                 GLBL_LASTPC     set *
(1)   96/       0 :                                     dephase
(1)   96/       0 : =$0                 GLBL_LASTORG    set *
(1)   96/       0 :                                     phase 0
(1)   97/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   98/       1 :                     pad_ver		ds.b 1			; Controller type/revision: 0-3button 1-6button
(1)   99/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)  100/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)  101/       6 :                     sizeof_input	ds.l 0
(1)  102/       8 : (MACRO)             		finish
(1)  102/       0 :                                     !org GLBL_LASTORG
(1)  102/       0 :                                     phase GLBL_LASTPC
(1)  103/       0 :                     
(1)  104/       0 :                     ; ====================================================================
(1)  105/       0 :                     ; ----------------------------------------------------------------
(1)  106/       0 :                     ; System RAM
(1)  107/       0 :                     ; ----------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 : (MACRO)             		struct RAM_MdSystem
(1)  109/       0 : =$0                 GLBL_LASTPC     set *
(1)  109/       0 :                                     dephase
(1)  109/       0 : =$0                 GLBL_LASTORG    set *
(1)  109/FFFFFFFFFFFF9000 :                                     phase RAM_MDSYSTEM
(1)  110/FFFFFFFFFFFF9000 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)  111/FFFFFFFFFFFF9018 :                     RAM_SaveData	ds.b $200			; Save data cache (if using SRAM)
(1)  112/FFFFFFFFFFFF9218 :                     RAM_MdMarsTskM	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Queue task list for MASTER SH2
(1)  113/FFFFFFFFFFFF9418 :                     RAM_MdMarsTskS	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Queue task list for SLAVE SH2
(1)  114/FFFFFFFFFFFF9618 :                     RAM_MdMarsTsSgl	ds.l MAX_MDTSKARG		; Single task request for 32X, shared for both Mst and Slv
(1)  115/FFFFFFFFFFFF9638 :                     RAM_FrameCount	ds.l 1				; Frame counter
(1)  116/FFFFFFFFFFFF963C :                     RAM_SysRandVal	ds.l 1				; Random value
(1)  117/FFFFFFFFFFFF9640 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)  118/FFFFFFFFFFFF9644 :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)  119/FFFFFFFFFFFF9648 :                     RAM_MdMarsTCntM	ds.w 1				; Counter for MASTER CPU's task list
(1)  120/FFFFFFFFFFFF964A :                     RAM_MdMarsTCntS	ds.w 1				; Counter for SLAVE CPU's task list
(1)  121/FFFFFFFFFFFF964C :                     RAM_FifoMarsWrt	ds.w 1				; mid-write flag
(1)  122/FFFFFFFFFFFF964E :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)  123/FFFFFFFFFFFF9650 :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  124/FFFFFFFFFFFF9656 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  125/FFFFFFFFFFFF965C :                     sizeof_mdsys	ds.l 0
(1)  126/FFFFFFFFFFFF965C : (MACRO)             		finish
(1)  126/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  126/       0 :                                     phase GLBL_LASTPC
(1)  127/       0 :                     
(1)  128/       0 :                     ; ====================================================================
(1)  129/       0 :                     ; ----------------------------------------------------------------
(1)  130/       0 :                     ; Sound 68k RAM
(1)  131/       0 :                     ; ----------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 : (MACRO)             		struct RAM_MdSound
(1)  133/       0 : =$0                 GLBL_LASTPC     set *
(1)  133/       0 :                                     dephase
(1)  133/       0 : =$0                 GLBL_LASTORG    set *
(1)  133/FFFFFFFFFFFF965C :                                     phase RAM_MDSOUND
(1)  134/FFFFFFFFFFFF965C :                     RAM_SndInsCopy	ds.b $100
(1)  135/FFFFFFFFFFFF975C :                     RAM_SndSaveReg	ds.l 4
(1)  136/FFFFFFFFFFFF976C :                     sizeof_mdsnd	ds.l 0
(1)  137/FFFFFFFFFFFF976C : (MACRO)             		finish
(1)  137/FFFFFFFFFFFF965C :                                     !org GLBL_LASTORG
(1)  137/       0 :                                     phase GLBL_LASTPC
(1)  138/       0 :                     		
(1)  139/       0 :                     ; ====================================================================
(1)  140/       0 :                     ; ----------------------------------------------------------------
(1)  141/       0 :                     ; Video RAM
(1)  142/       0 :                     ; ----------------------------------------------------------------
(1)  143/       0 :                     
(1)  144/       0 : (MACRO)             		struct RAM_MdVideo
(1)  144/       0 : =$0                 GLBL_LASTPC     set *
(1)  144/       0 :                                     dephase
(1)  144/       0 : =$0                 GLBL_LASTORG    set *
(1)  144/FFFFFFFFFFFF976C :                                     phase RAM_MDVIDEO
(1)  145/FFFFFFFFFFFF976C :                     RAM_VidPrntVram	ds.w 1		; Default VRAM location for ASCII text used by Video_Print
(1)  146/FFFFFFFFFFFF976E :                     RAM_VidPrntList	ds.w 3*64	; Video_Print list: Address, Type
(1)  147/FFFFFFFFFFFF98EE :                     RAM_VdpRegs	ds.b 24		; VDP Register cache
(1)  148/FFFFFFFFFFFF9906 :                     sizeof_mdvid	ds.l 0
(1)  149/FFFFFFFFFFFF9908 : (MACRO)             		finish
(1)  149/FFFFFFFFFFFF976C :                                     !org GLBL_LASTORG
(1)  149/       0 :                                     phase GLBL_LASTPC
(1)  150/       0 :                     
(1)  151/       0 :                     ; ====================================================================
(1)  152/       0 :                     ; ----------------------------------------------------------------
(1)  153/       0 :                     ; MD RAM
(1)  154/       0 :                     ;
(1)  155/       0 :                     ; NOTE: If using MCD Uses $FFFD00-$FFFDFF, and
(1)  156/       0 :                     ; stack point is $FFFD00
(1)  157/       0 :                     ; ----------------------------------------------------------------
(1)  158/       0 :                     
(1)  159/       0 : (MACRO)             		struct MDRAM_START
(1)  159/       0 : =$0                 GLBL_LASTPC     set *
(1)  159/       0 :                                     dephase
(1)  159/       0 : =$0                 GLBL_LASTORG    set *
(1)  159/FFFFFFFFFFFF8800 :                                     phase MDRAM_START
(1)  169/FFFFFFFFFFFF8800 :                     RAM_ModeBuff	ds.b MAX_MDERAM			; Second pass: sizes are set
(1)  170/FFFFFFFFFFFF9000 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  171/FFFFFFFFFFFF965C :                     RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  172/FFFFFFFFFFFF976C :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  173/FFFFFFFFFFFF9906 :                     RAM_ExRamSub	ds.w $300			; (MANUAL SIZE) DMA routines that set RV=1
(1)  174/FFFFFFFFFFFF9F06 :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal
(1)  175/FFFFFFFFFFFF8828 :                     sizeof_mdram	ds.l 0
(1)  177/FFFFFFFFFFFF8828 :                     
MD RAM ends at: FF8828
(1)  179/FFFFFFFFFFFF8828 :                     		message "MD RAM ends at: \{((sizeof_mdram)&$FFFFFF)}"
(1)  181/FFFFFFFFFFFF8828 : (MACRO)             		finish
(1)  181/FFFFFFFFFFFF8800 :                                     !org GLBL_LASTORG
(1)  181/       0 :                                     phase GLBL_LASTPC
(1)  182/       0 :                     
      10/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; External RAM (Ex. Save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   20/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   21/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   22/       0 : =$A130EC            md_mars_id	equ	$A130EC		; MARS ID "MARS"
(1)   23/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   24/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   25/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   26/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   27/       0 :                     
(1)   28/       0 :                     ; ----------------------------------------------------------------
(1)   29/       0 :                     ; Genesis / Mega drive Z80 map
(1)   30/       0 :                     ; ----------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   33/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   34/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   35/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   36/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK 24bits %XXXXXXXX X0000000 00000000
(1)   37/       0 : =$7F00              zvdp_data	equ	$7F00		; video data port
(1)   38/       0 : =$7F04              zvdp_ctrl	equ	$7F04		; video control port
(1)   39/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; 32X registers
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$A130EC            sysmars_ID	equ	$A130EC		; MARS ID "MARS" identifier
(1)   46/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   47/       0 :                     
      11/       0 :                     		include	"system/mars/map.asm"	; MARS map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot rom & system registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data (all 4MB), Locked if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer section
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; Cache-thru OR|value
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers, for MD: sysmars_reg
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer, first 240 are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite, $00-byte writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register
(1)   31/       0 : =$1                 intmask		equ	$01		; interrupts mask
(1)   32/       0 : =$2                 standby		equ	$02		; CMD interrupt request bit by MD side (slave|master)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports
(1)   45/       0 : =$22                comm2		equ	$22		; (If 2 CPUs either SH2 or 68K writes to
(1)   46/       0 : =$24                comm4		equ	$24		; the same location, it will freeze the
(1)   47/       0 : =$26                comm6		equ	$26		; system)
(1)   48/       0 : =$28                comm8		equ	$28		;
(1)   49/       0 : =$2A                comm10		equ	$2A		;
(1)   50/       0 : =$2C                comm12		equ	$2C		;
(1)   51/       0 : =$2E                comm14		equ	$2E		;
(1)   52/       0 : =$2F                comm15		equ	$2F		;
(1)   53/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   54/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   55/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   56/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   57/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   58/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   59/       0 :                     
(1)   60/       0 :                     ; _sysreg
(1)   61/       0 :                     ; adapter
(1)   62/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   63/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   64/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   65/       0 :                     ; framectl
(1)   66/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   67/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   68/       0 :                     ; vdpsts
(1)   69/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   70/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   71/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   72/       0 :                     ; intmask
(1)   73/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   74/       0 : =$4                 HIRQ_ON		equ	$04
(1)   75/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   76/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   77/       0 :                     
(1)   78/       0 :                     ; _vdpreg
(1)   79/       0 : =$0                 tvmode		equ	$00		; TV mode register
(1)   80/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode register
(1)   81/       0 : =$3                 shift		equ	$03		; Shift Control register
(1)   82/       0 : =$5                 filllength	equ	$05		; Auto Fill Length register
(1)   83/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   84/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   85/       0 : =$A                 vdpsts		equ	$0a		; VDP Status register
(1)   86/       0 : =$B                 framectl	equ	$0b		; Frame Buffer Control register
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   90/       0 :                     ; --------------------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     ; DMA Channel 0: General data transfer
(1)   93/       0 :                     ; DMA Channel 1: PWM exclusive
(1)   94/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)   95/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)   96/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)   97/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)   98/       0 : =$2                 _FRC_H		equ	$02		; free running counter High
(1)   99/       0 : =$3                 _FRC_L		equ	$03		; free running counter Low
(1)  100/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  101/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  102/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  103/       0 : =$7                 _TOCR		equ	$07		; timer output compare control register
(1)  104/       0 : =$FFFFFE92          _CCR:		equ	$FFFFFE92
(1)  105/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  106/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or LOW Result if read
(1)  107/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result, HIGH
(1)  108/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result, LOW
(1)  109/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  110/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  111/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  112/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  113/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  114/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  115/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  116/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  117/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  118/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  119/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  120/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  121/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  122/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  123/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  124/       0 :                     
      12/       0 :                     		
      13/       0 :                     ; ====================================================================
      14/       0 :                     ; ----------------------------------------------------------------
      15/       0 :                     ; Header
      16/       0 :                     ; ----------------------------------------------------------------
      17/       0 :                     
      18/       0 :                     		include	"system/head.asm"	; 32X Header and boot sequence
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEADER FOR 32X
(1)    4/       0 :                     ; 
(1)    5/       0 :                     ; These labels work even if the 32X isn't present
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point
(1)    9/       4 : 0000 03F0           		dc.l $3F0			; Entry point (always $3F0)
(1)   10/       8 : 0000 0930           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0930           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0930           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0930           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0930           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0930           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0930           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0930           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0930           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0930           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0930           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0930           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0930           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0930           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0930           		dc.l MD_ErrorEx	
(1)   25/      44 : 0000 0930           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0930           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0930           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0930           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0930           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0930           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0930           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0930           		dc.l MD_ErrorEx		
(1)   33/      64 : 0000 0930           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0930           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0930           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF 9656           		dc.l RAM_MdMarsHInt		; RAM jump for HBlank (JMP xxxx xxxx)
(1)   37/      74 : 0000 0930           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF 9650           		dc.l RAM_MdMarsVInt		; RAM jump for VBlank (JMP xxxx xxxx)
(1)   39/      7C : 0000 0930           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0930           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0930           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0930           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0930           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0930           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0930           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0930           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0930           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0930           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0930           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0930           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0930           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0930           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0930           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0930           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0930           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0930           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0930           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0930           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0930           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0930           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0930           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0930           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0930           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0930           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0930           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0930           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0930           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0930           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0930           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0930           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0930           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2021.???"
                    3230 3231 2E3F 3F3F 
(1)   74/     120 : 5072 6F79 6563 746F 		dc.b "Proyecto Chirinx                                "
                    2043 6869 7269 6E78 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5072 6F6A 6563 7420 		dc.b "Project Shinrinx                                "
                    5368 696E 7269 6E78 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0
(1)   80/     1A4 : 0026 0568           		dc.l ROM_END
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   83/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   84/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   85/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   86/     1BC :                     		align $1F0
(1)   87/     1F0 : 5520 2020 2020 2020 		dc.b "U               "
                    2020 2020 2020 2020 
(1)   88/     200 :                     
(1)   89/     200 :                     ; ====================================================================
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     ; Second header for 32X
(1)   92/     200 :                     ; 
(1)   93/     200 :                     ; These new jumps are for the 68K if the 32X is currently
(1)   94/     200 :                     ; active.
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   98/     206 : 4EF9 0088 0930      		jmp	($880000|MD_ErrBus).l			; Bus error
(1)   99/     20C : 4EF9 0088 0930      		jmp	($880000|MD_ErrAddr).l			; Address error
(1)  100/     212 : 4EF9 0088 0930      		jmp	($880000|MD_ErrIll).l			; ILLEGAL Instruction
(1)  101/     218 : 4EF9 0088 0930      		jmp	($880000|MD_ErrZDiv).l			; Divide by 0
(1)  102/     21E : 4EF9 0088 0930      		jmp	($880000|MD_ErrChk).l			; CHK Instruction
(1)  103/     224 : 4EF9 0088 0930      		jmp	($880000|MD_ErrTrapV).l			; TRAPV Instruction
(1)  104/     22A : 4EF9 0088 0930      		jmp	($880000|MD_ErrPrivl).l			; Privilege violation
(1)  105/     230 : 4EF9 0088 0930      		jmp	($880000|MD_Trace).l			; Trace
(1)  106/     236 : 4EF9 0088 0930      		jmp	($880000|MD_Line1010).l			; Line 1010 Emulator
(1)  107/     23C : 4EF9 0088 0930      		jmp	($880000|MD_Line1111).l			; Line 1111 Emulator
(1)  108/     242 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l			; Error exception
(1)  109/     248 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  110/     24E : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  111/     254 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  112/     25A : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l	
(1)  113/     260 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  114/     266 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  115/     26C : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  116/     272 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  117/     278 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  118/     27E : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  119/     284 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l
(1)  120/     28A : 4EF9 0088 0930      		jmp	($880000|MD_ErrorEx).l		
(1)  121/     290 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  122/     296 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     29C : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2A2 : 4EF9 FFFF 9656      		jmp	(RAM_MdMarsHInt).l			; RAM jump for HBlank (JMP xxxx xxxx)
(1)  125/     2A8 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2AE : 4EF9 FFFF 9650      		jmp	(RAM_MdMarsVInt).l			; RAM jump for VBlank (JMP xxxx xxxx)
(1)  127/     2B4 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2BA : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2C0 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2C6 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2CC : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2D2 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2D8 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2DE : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     2E4 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     2EA : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     2F0 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     2F6 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     2FC : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     302 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     308 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     30E : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     314 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     31A : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     320 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     326 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     32C : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     332 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     338 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     33E : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     344 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     34A : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     350 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     356 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     35C : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  156/     362 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  157/     368 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  158/     36E : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  159/     374 : 4EF9 0088 0930      		jmp	($880000|MD_ErrorTrap).l
(1)  160/     37A :                     
(1)  161/     37A :                     ; ----------------------------------------------------------------
(1)  162/     37A :                     
(1)  163/     37A :                     		align $3C0
(1)  164/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  165/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  166/     3D4 : 0000 4778           		dc.l MARS_RAMDATA			; Set to 0 if SH2 code points to ROM
(1)  167/     3D8 : 0000 0000           		dc.l 0					; No info, set to zero.
(1)  168/     3DC : 0000 5828           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; Set to 4 if SH2 code points to ROM
(1)  169/     3E0 : 0600 10A4           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 map area)
(1)  170/     3E4 : 0600 125C           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 map area)
(1)  171/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR (Vector table)
(1)  172/     3EC : 0600 0124           		dc.l SH2_Slave				; Slave SH2 default VBR (Vector table)
(1)  173/     3F0 :                     		binclude "system/mars/data/security.bin"
(1)  174/     800 :                     
(1)  175/     800 :                     ; ====================================================================
(1)  176/     800 :                     ; ----------------------------------------------------------------
(1)  177/     800 :                     ; Entry point, this must be located at $3F0
(1)  178/     800 :                     ; 
(1)  179/     800 :                     ; After the 32X's internal initialization finishes,
(1)  180/     800 :                     ; It returns the following stuff:
(1)  181/     800 :                     ; 
(1)  182/     800 :                     ; d0: %h0000000 rsc000ti
(1)  183/     800 :                     ; 	h - Cold start / Hot Start
(1)  184/     800 :                     ; 	r - SDRAM Self Check pass or error
(1)  185/     800 :                     ; 	s - Security check pass or error
(1)  186/     800 :                     ; 	c - Checksum pass or error
(1)  187/     800 :                     ; 	t - TV mode pass or error
(1)  188/     800 :                     ; 	i - MARS ID pass or error
(1)  189/     800 :                     ; 
(1)  190/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  191/     800 :                     ; 	m - MARS TV mode
(1)  192/     800 :                     ; 	j - Country: Japan / Overseas
(1)  193/     800 :                     ; 	d - MD TV mode
(1)  194/     800 :                     ; 	k - DISK connected: Yes / No
(1)  195/     800 :                     ; 	v - Version
(1)  196/     800 :                     ; 
(1)  197/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  198/     800 :                     ; 	cc: Test passed
(1)  199/     800 :                     ; 	cs: Test failed
(1)  200/     800 :                     ; ----------------------------------------------------------------
(1)  201/     800 :                     
(1)  202/     800 :                     MARS_Entry:
(1)  203/     800 : 6500 0116           		bcs	.no_mars			; if Carry set, 32X is not present
(1)  204/     804 : 23FC 0000 0000 FFFF 		move.l	#0,(RAM_initflug).l		; Reset "INIT" flag
                    9644                
(1)  205/     80E : 0800 000F           		btst	#15,d0				; Soft reset?	
(1)  206/     812 : 676C                		beq.s	.init
(1)  207/     814 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5		; a5 - MARS register
(1)  208/     81A : 0815 0000           		btst.b	#0,adapter(a5)			; 32X enabled?
(1)  209/     81E : 6652                		bne	.adapterenable			; If yes, start booting
(1)  210/     820 : 2B7C 0000 0000 0028 		move.l	#0,comm8(a5)			; If not, we can't use 32X or something went wrong
(1)  211/     828 : 41FA 0020           		lea	.ramcode(pc),a0			; Copy the adapter-retry code to RAM
(1)  212/     82C : 43F9 00FF 0000      		lea	($FF0000).l,a1			; and jump there.
(1)  213/     832 : 22D8                		move.l	(a0)+,(a1)+
(1)  214/     834 : 22D8                		move.l	(a0)+,(a1)+
(1)  215/     836 : 22D8                		move.l	(a0)+,(a1)+
(1)  216/     838 : 22D8                		move.l	(a0)+,(a1)+
(1)  217/     83A : 22D8                		move.l	(a0)+,(a1)+
(1)  218/     83C : 22D8                		move.l	(a0)+,(a1)+
(1)  219/     83E : 22D8                		move.l	(a0)+,(a1)+
(1)  220/     840 : 22D8                		move.l	(a0)+,(a1)+
(1)  221/     842 : 41F9 00FF 0000      		lea	($FF0000).l,a0
(1)  222/     848 : 4ED0                		jmp	(a0)
(1)  223/     84A :                     .ramcode:
(1)  224/     84A : 1ABC 0001           		move.b	#1,adapter(a5)			; Enable adapter.
(1)  225/     84E : 41FA 000A           		lea	.restarticd(pc),a0		; JUMP to the following code in
(1)  226/     852 : D1FC 0088 0000      		adda.l	#$880000,a0			; the new 68k location
(1)  227/     858 : 4ED0                		jmp	(a0)
(1)  228/     85A :                     .restarticd:
(1)  229/     85A : 4BF9 00A1 0000      		lea	($A10000).l,a5			; a5 - MD's I/O area base
(1)  230/     860 : 287C FFFF FFC0      		move.l	#-64,a4				; a4 - $FFFFFF9C
(1)  231/     866 : 3E3C 0F3C           		move.w	#3900,d7			; d7 - loop this many times
(1)  232/     86A : 43F9 0088 06E4      		lea	($880000+$6E4),a1		; Jump to ?res_wait (check ICD_MARS.PRG for detail)
(1)  233/     870 : 4ED1                		jmp	(a1)
(1)  234/     872 :                     .adapterenable:
(1)  235/     872 : 4BF9 00A1 5100      		lea	(sysmars_reg),a5
(1)  236/     878 : 0815 0001           		btst.b	#1,adapter(a5)			; SH2 Reset request?
(1)  237/     87C : 6640                		bne.s	.hotstart			; If not, we are on hotstart
(1)  238/     87E : 60DA                		bra.s	.restarticd
(1)  239/     880 :                     
(1)  240/     880 :                     ; ------------------------------------------------
(1)  241/     880 :                     ; Init
(1)  242/     880 :                     ; ------------------------------------------------
(1)  243/     880 :                     
(1)  244/     880 :                     .init:
(1)  245/     880 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  246/     884 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  247/     88A : 2B7C 3638 5550 002C 		move.l	#"68UP",comm12(a5)		; comm12: Report to every CPU we are active.
(1)  248/     892 : 0CAD 4D5F 4F4B 0020 .wm:		cmp.l	#"M_OK",comm0(a5)		; SH2 Master active?
(1)  249/     89A : 66F6                		bne.s	.wm
(1)  250/     89C : 0CAD 535F 4F4B 0024 .ws:		cmp.l	#"S_OK",comm4(a5)		; SH2 Slave active?
(1)  251/     8A4 : 66F6                		bne.s	.ws
(1)  252/     8A6 : 7000                		moveq	#0,d0				; Reset comm values
(1)  253/     8A8 : 2B40 0020           		move.l	d0,comm0(a5)
(1)  254/     8AC : 2B40 0024           		move.l	d0,comm4(a5)
(1)  255/     8B0 : 2B40 002C           		move.l	d0,comm12(a5)
(1)  256/     8B4 : 23FC 494E 4954 FFFF 		move.l	#"INIT",(RAM_initflug).l	; Set "INIT" as our boot flag
                    9644                
(1)  257/     8BE :                     .hotstart:
(1)  258/     8BE : 0CB9 494E 4954 FFFF 		cmp.l	#"INIT",(RAM_initflug).l	; Did it write?
                    9644                
(1)  259/     8C8 : 66B6                		bne.s	.init				; If not, restart everything and try again.
(1)  260/     8CA :                     		
(1)  261/     8CA :                     	; Initialize Genesis
(1)  262/     8CA : 7000                		moveq	#0,d0				; Clear USP
(1)  263/     8CC : 2C40                		movea.l	d0,a6
(1)  264/     8CE : 4E66                		move.l	a6,usp
(1)  265/     8D0 : 3039 00C0 0004      .waitframe:	move.w	(vdp_ctrl).l,d0			; Wait a frame
(1)  266/     8D6 : 0800 0003           		btst	#bitVint,d0
(1)  267/     8DA : 67F4                		beq.s	.waitframe
(1)  268/     8DC : 23FC 8004 8144 00C0 		move.l	#$80048144,(vdp_ctrl).l		; Keep display
                    0004                
(1)  269/     8E6 : 41F9 00FF 0000      		lea	($FF0000),a0			; Clear RAM until $FFFF00
(1)  270/     8EC : 303C 3BFF           		move.w	#($F000/4)-1,d0
(1)  271/     8F0 :                     .clrram:
(1)  272/     8F0 : 4298                		clr.l	(a0)+
(1)  273/     8F2 : 51C8 FFFC           		dbf	d0,.clrram
(1)  274/     8F6 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6			; Clear registers (using zeros from RAM)
(1)  275/     8FE : 41FA 0032           		lea	Engine_Code(pc),a0		; Now copy ALL our 68k code to RAM, to prevent
(1)  276/     902 : 43F9 00FF 0000      		lea	($FF0000),a1			; BUS-fighthing the ROM area (speed-up purposes)
(1)  277/     908 : 303C 3E45           		move.w	#((Engine_Code_end-Engine_Code))-1,d0
(1)  278/     90C :                     .copyme:
(1)  279/     90C : 12D8                		move.b	(a0)+,(a1)+
(1)  280/     90E : 51C8 FFFC           		dbf	d0,.copyme
(1)  281/     912 : 4EF9 00FF 3B0E      		jmp	(MD_Main).l			; MD_Main located in ram
(1)  282/     918 :                     
(1)  283/     918 :                     ; ====================================================================
(1)  284/     918 :                     ; ----------------------------------------------------------------
(1)  285/     918 :                     ; If 32X is not detected... 
(1)  286/     918 :                     ; 
(1)  287/     918 :                     ; This only works in emulators, though.
(1)  288/     918 :                     ; ----------------------------------------------------------------
(1)  289/     918 :                     
(1)  290/     918 :                     .no_mars:
(1)  291/     918 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  292/     91C : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  293/     926 : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l		; Write blue
(1)  294/     92E : 60FE                		bra.s	*				; Infinite loop.
(1)  295/     930 :                     
(1)  296/     930 :                     ; ====================================================================
(1)  297/     930 :                     ; ----------------------------------------------------------------
(1)  298/     930 :                     ; Error traps
(1)  299/     930 :                     ; ----------------------------------------------------------------
(1)  300/     930 :                     
(1)  301/     930 :                     MD_ErrBus:		; Bus error
(1)  302/     930 :                     MD_ErrAddr:		; Address error
(1)  303/     930 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  304/     930 :                     MD_ErrZDiv:		; Divide by 0
(1)  305/     930 :                     MD_ErrChk:		; CHK Instruction
(1)  306/     930 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  307/     930 :                     MD_ErrPrivl:		; Privilege violation
(1)  308/     930 :                     MD_Trace:		; Trace
(1)  309/     930 :                     MD_Line1010:		; Line 1010 Emulator
(1)  310/     930 :                     MD_Line1111:		; Line 1111 Emulator
(1)  311/     930 :                     MD_ErrorEx:		; Error exception
(1)  312/     930 :                     MD_ErrorTrap:
(1)  313/     930 : 4E73                		rte
(1)  314/     932 :                     
      19/     932 :                     
      20/     932 :                     ; ====================================================================
      21/     932 :                     ; ----------------------------------------------------------------
      22/     932 :                     ; 68K RAMCODE Section
      23/     932 :                     ; Stored on RAM to prevent BUS fighting (Kolibri-style)
      24/     932 :                     ; 
      25/     932 :                     ; MAX size: $8000
      26/     932 :                     ; ----------------------------------------------------------------
      27/     932 :                     
      28/     932 :                     Engine_Code:
      29/  FF0000 :                     		phase $FF0000
      30/  FF0000 :                     ; --------------------------------------------------------
      31/  FF0000 :                     ; Include system features
      32/  FF0000 :                     ; --------------------------------------------------------
      33/  FF0000 :                     
      34/  FF0000 :                     		include	"system/md/system.asm"
(1)    1/  FF0000 :                     ; ====================================================================
(1)    2/  FF0000 :                     ; ----------------------------------------------------------------
(1)    3/  FF0000 :                     ; System
(1)    4/  FF0000 :                     ; ----------------------------------------------------------------
(1)    5/  FF0000 :                     
(1)    6/  FF0000 :                     ; --------------------------------------------------------
(1)    7/  FF0000 :                     ; Init System
(1)    8/  FF0000 :                     ; 
(1)    9/  FF0000 :                     ; Uses:
(1)   10/  FF0000 :                     ; a0-a2,d0-d1
(1)   11/  FF0000 :                     ; --------------------------------------------------------
(1)   12/  FF0000 :                     
(1)   13/  FF0000 :                     System_Init:
(1)   14/  FF0000 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   15/  FF0004 : 40E7                		move.w	sr,-(sp)
(1)   16/  FF0006 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   17/  FF000E :                     .wait:
(1)   18/  FF000E : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   19/  FF0016 : 66F6                		bne.s	.wait
(1)   20/  FF0018 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   21/  FF001A : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   22/  FF0020 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   23/  FF0026 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   24/  FF002C : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   25/  FF0034 : 41F8 9000           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   26/  FF0038 : 323C 0006           		move.w	#sizeof_input-1/2,d1
(1)   27/  FF003C : 7000                		moveq	#0,d0
(1)   28/  FF003E :                     .clrinput:
(1)   29/  FF003E : 30FC 0000           		move.w	#0,(a0)+
(1)   30/  FF0042 : 51C9 FFFA           		dbf	d1,.clrinput
(1)   31/  FF0046 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   32/  FF004A : 33C0 FFFF 9650       		move.w	d0,(RAM_MdMarsVInt).l
(1)   33/  FF0050 : 33C0 FFFF 9656      		move.w	d0,(RAM_MdMarsHInt).l
(1)   34/  FF0056 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)   35/  FF005C : 223C 9511 6102      		move.l	#$95116102,d1
(1)   36/  FF0062 : 23C0 FFFF 963C      		move.l	d0,(RAM_SysRandVal).l
(1)   37/  FF0068 : 23C1 FFFF 9640      		move.l	d1,(RAM_SysRandSeed).l
(1)   38/  FF006E : 203C 00FF 039C      		move.l	#VInt_Default,d0	; Set default ints
(1)   39/  FF0074 : 223C 00FF 03B8      		move.l	#Hint_Default,d1
(1)   40/  FF007A : 6100 013E           		bsr	System_SetInts
(1)   41/  FF007E : 46DF                		move.w	(sp)+,sr
(1)   42/  FF0080 : 4E75                		rts
(1)   43/  FF0082 :                     
(1)   44/  FF0082 :                     ; ====================================================================
(1)   45/  FF0082 :                     ; --------------------------------------------------------
(1)   46/  FF0082 :                     ; System_Input (VBLANK ONLY)
(1)   47/  FF0082 :                     ; 
(1)   48/  FF0082 :                     ; Uses:
(1)   49/  FF0082 :                     ; d4-d6,a4-a5
(1)   50/  FF0082 :                     ; --------------------------------------------------------
(1)   51/  FF0082 :                     
(1)   52/  FF0082 :                     ; TODO: check if it still required to turn OFF the Z80
(1)   53/  FF0082 :                     ; while reading the controller
(1)   54/  FF0082 :                     
(1)   55/  FF0082 :                     System_Input:
(1)   56/  FF0082 :                     ; 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   57/  FF0082 :                     .wait:
(1)   58/  FF0082 :                     ; 		btst	#0,(z80_bus).l		; Wait for it
(1)   59/  FF0082 :                     ; 		bne.s	.wait
(1)   60/  FF0082 : 49F9 00A1 0003      		lea	($A10003),a4
(1)   61/  FF0088 : 4BF8 9000           		lea	(RAM_InputData),a5
(1)   62/  FF008C : 6108                		bsr.s	.this_one
(1)   63/  FF008E : D8FC 0002           		adda	#2,a4
(1)   64/  FF0092 : DAFC 0006           		adda	#sizeof_input,a5
(1)   65/  FF0096 :                     ; 		bsr.s	.this_one
(1)   66/  FF0096 :                     ; 		move.w	#0,(z80_bus).l
(1)   67/  FF0096 :                     ; 		rts
(1)   68/  FF0096 :                     
(1)   69/  FF0096 :                     ; --------------------------------------------------------	
(1)   70/  FF0096 :                     ; Read port
(1)   71/  FF0096 :                     ; 
(1)   72/  FF0096 :                     ; a4 - Current port
(1)   73/  FF0096 :                     ; a5 - Output data
(1)   74/  FF0096 :                     ; --------------------------------------------------------
(1)   75/  FF0096 :                     
(1)   76/  FF0096 :                     .this_one:
(1)   77/  FF0096 : 6100 00D4           		bsr	.pick_id
(1)   78/  FF009A : 1A84                		move.b	d4,pad_id(a5)
(1)   79/  FF009C : B87C 000F           		cmp.w	#$F,d4
(1)   80/  FF00A0 : 670E                		beq.s	.exit
(1)   81/  FF00A2 : C87C 000F           		and.w	#$F,d4
(1)   82/  FF00A6 : D844                		add.w	d4,d4
(1)   83/  FF00A8 : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)   84/  FF00AC : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)   85/  FF00B0 :                     .exit:
(1)   86/  FF00B0 : 422D 0001           		clr.b	pad_ver(a5)
(1)   87/  FF00B4 : 4E75                		rts
(1)   88/  FF00B6 :                     
(1)   89/  FF00B6 :                     ; --------------------------------------------------------
(1)   90/  FF00B6 :                     ; Grab ID
(1)   91/  FF00B6 :                     ; --------------------------------------------------------
(1)   92/  FF00B6 :                     
(1)   93/  FF00B6 : FFFA                .list:		dc.w .exit-.list	; $0
(1)   94/  FF00B8 : FFFA                		dc.w .exit-.list
(1)   95/  FF00BA : FFFA                		dc.w .exit-.list
(1)   96/  FF00BC : FFFA                		dc.w .exit-.list
(1)   97/  FF00BE : FFFA                		dc.w .exit-.list	; $4
(1)   98/  FF00C0 : FFFA                		dc.w .exit-.list
(1)   99/  FF00C2 : FFFA                		dc.w .exit-.list
(1)  100/  FF00C4 : FFFA                		dc.w .exit-.list
(1)  101/  FF00C6 : FFFA                		dc.w .exit-.list	; $8
(1)  102/  FF00C8 : FFFA                		dc.w .exit-.list
(1)  103/  FF00CA : FFFA                		dc.w .exit-.list
(1)  104/  FF00CC : FFFA                		dc.w .exit-.list
(1)  105/  FF00CE : FFFA                		dc.w .exit-.list	; $C
(1)  106/  FF00D0 : 0020                		dc.w .id_0D-.list
(1)  107/  FF00D2 : FFFA                		dc.w .exit-.list
(1)  108/  FF00D4 : FFFA                		dc.w .exit-.list
(1)  109/  FF00D6 :                     
(1)  110/  FF00D6 :                     ; --------------------------------------------------------
(1)  111/  FF00D6 :                     ; ID $0D
(1)  112/  FF00D6 :                     ; 
(1)  113/  FF00D6 :                     ; Normal controller, Old or New
(1)  114/  FF00D6 :                     ; --------------------------------------------------------
(1)  115/  FF00D6 :                     
(1)  116/  FF00D6 :                     .id_0D:
(1)  117/  FF00D6 : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  118/  FF00DA : 4E71                		nop
(1)  119/  FF00DC : 4E71                		nop
(1)  120/  FF00DE : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  121/  FF00E2 : 4E71                		nop
(1)  122/  FF00E4 : 4E71                		nop
(1)  123/  FF00E6 : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  124/  FF00EA : 4E71                		nop
(1)  125/  FF00EC : 4E71                		nop
(1)  126/  FF00EE : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  127/  FF00F2 : 4E71                		nop
(1)  128/  FF00F4 : 4E71                		nop
(1)  129/  FF00F6 : 18BC 0040           		move.b	#$40,(a4)	; 6 button responds
(1)  130/  FF00FA : 4E71                		nop
(1)  131/  FF00FC : 4E71                		nop
(1)  132/  FF00FE : 1814                		move.b	(a4),d4		; Grab ??|MXYZ
(1)  133/  FF0100 : 18BC 0000            		move.b	#$00,(a4)
(1)  134/  FF0104 : 4E71                  		nop
(1)  135/  FF0106 : 4E71                  		nop
(1)  136/  FF0108 : 1C14                 		move.b	(a4),d6		; Type: $03 old, $0F new
(1)  137/  FF010A : 18BC 0040            		move.b	#$40,(a4)
(1)  138/  FF010E : 4E71                 		nop
(1)  139/  FF0110 : 4E71                 		nop
(1)  140/  FF0112 : CC7C 000F           		and.w	#$F,d6
(1)  141/  FF0116 : E44E                		lsr.w	#2,d6
(1)  142/  FF0118 : CC7C 0001           		and.w	#1,d6
(1)  143/  FF011C : 6716                		beq.s	.oldpad
(1)  144/  FF011E : 4604                		not.b	d4
(1)  145/  FF0120 : C87C 000F            		and.w	#%1111,d4
(1)  146/  FF0124 : 1A2D 0002           		move.b	on_hold(a5),d5
(1)  147/  FF0128 : B905                		eor.b	d4,d5
(1)  148/  FF012A : 1B44 0002           		move.b	d4,on_hold(a5)
(1)  149/  FF012E : CA04                		and.b	d4,d5
(1)  150/  FF0130 : 1B45 0004           		move.b	d5,on_press(a5)
(1)  151/  FF0134 :                     .oldpad:
(1)  152/  FF0134 : 1B46 0001           		move.b	d6,pad_ver(a5)
(1)  153/  FF0138 :                     		
(1)  154/  FF0138 : 18BC 0000           		move.b	#$00,(a4)	; Show SA??|RLDU
(1)  155/  FF013C : 4E71                		nop
(1)  156/  FF013E : 4E71                		nop
(1)  157/  FF0140 : 1814                		move.b	(a4),d4
(1)  158/  FF0142 : E50C                		lsl.b	#2,d4
(1)  159/  FF0144 : C83C 00C0           		and.b	#%11000000,d4
(1)  160/  FF0148 : 18BC 0040           		move.b	#$40,(a4)	; Show ??CB|RLDU
(1)  161/  FF014C : 4E71                		nop
(1)  162/  FF014E : 4E71                		nop
(1)  163/  FF0150 : 1A14                		move.b	(a4),d5
(1)  164/  FF0152 : CA3C 003F           		and.b	#%00111111,d5
(1)  165/  FF0156 : 8805                		or.b	d5,d4
(1)  166/  FF0158 : 4604                		not.b	d4
(1)  167/  FF015A : 1A2D 0003           		move.b	on_hold+1(a5),d5
(1)  168/  FF015E : B905                		eor.b	d4,d5
(1)  169/  FF0160 : 1B44 0003           		move.b	d4,on_hold+1(a5)
(1)  170/  FF0164 : CA04                		and.b	d4,d5
(1)  171/  FF0166 : 1B45 0005           		move.b	d5,on_press+1(a5)
(1)  172/  FF016A : 4E75                		rts
(1)  173/  FF016C :                     		
(1)  174/  FF016C :                     ; --------------------------------------------------------
(1)  175/  FF016C :                     ; Grab ID
(1)  176/  FF016C :                     ; --------------------------------------------------------
(1)  177/  FF016C :                     
(1)  178/  FF016C :                     .pick_id:
(1)  179/  FF016C : 7800                		moveq	#0,d4
(1)  180/  FF016E : 18BC 0070           		move.b	#%01110000,(a4)		; TH=1,TR=1,TL=1
(1)  181/  FF0172 : 4E71                		nop
(1)  182/  FF0174 : 4E71                		nop
(1)  183/  FF0176 : 610A                		bsr.s	.get_id
(1)  184/  FF0178 : 18BC 0030           		move.b	#%00110000,(a4)		; TH=0,TR=1,TL=1
(1)  185/  FF017C : 4E71                		nop
(1)  186/  FF017E : 4E71                		nop
(1)  187/  FF0180 : D844                		add.w	d4,d4
(1)  188/  FF0182 :                     .get_id:
(1)  189/  FF0182 : 1A14                		move.b	(a4),d5
(1)  190/  FF0184 : 1C05                		move.b	d5,d6
(1)  191/  FF0186 : CC3C 000C           		and.b	#$C,d6
(1)  192/  FF018A : 6702                		beq.s	.step_1
(1)  193/  FF018C : 5244                		addq.w	#1,d4
(1)  194/  FF018E :                     .step_1:
(1)  195/  FF018E : D844                		add.w	d4,d4
(1)  196/  FF0190 : 1C05                		move.b	d5,d6
(1)  197/  FF0192 : CC7C 0003           		and.w	#3,d6
(1)  198/  FF0196 : 6702                		beq.s	.step_2
(1)  199/  FF0198 : 5244                		addq.w	#1,d4
(1)  200/  FF019A :                     .step_2:
(1)  201/  FF019A : 4E75                		rts
(1)  202/  FF019C :                     		
(1)  203/  FF019C :                     ; 		moveq	#0,d0
(1)  204/  FF019C :                     ; 		bsr.s	System_ReadPad
(1)  205/  FF019C :                     ; 		lea	(RAM_Control+(16*4)),a5
(1)  206/  FF019C :                     ; 		moveq	#1,d0
(1)  207/  FF019C :                     ; 		bsr.s	System_ReadPad
(1)  208/  FF019C :                     ; 		
(1)  209/  FF019C :                     ; 		lea	($A10003).l,a6
(1)  210/  FF019C :                     ; 		lsl.w	#1,d0
(1)  211/  FF019C :                     ; 		add.w	d0,a6		; Add result to port
(1)  212/  FF019C :                     ; 		bsr.s	.srch_pad
(1)  213/  FF019C :                     ; 		move.b	d0,(a5)
(1)  214/  FF019C :                     ; 		move.w	#0,(z80_bus).l
(1)  215/  FF019C :                     ; 		rts
(1)  216/  FF019C :                     
(1)  217/  FF019C :                     ; --------------------------------------------------------
(1)  218/  FF019C :                     ; System_Random
(1)  219/  FF019C :                     ; 
(1)  220/  FF019C :                     ; Set random value
(1)  221/  FF019C :                     ; 
(1)  222/  FF019C :                     ; Output:
(1)  223/  FF019C :                     ; d0 | LONG
(1)  224/  FF019C :                     ; --------------------------------------------------------
(1)  225/  FF019C :                     
(1)  226/  FF019C :                     ; TODO: rewrite this
(1)  227/  FF019C :                     System_Random:
(1)  228/  FF019C : 2A38 9640           		move.l	(RAM_SysRandSeed),d5
(1)  229/  FF01A0 : 2838 963C           		move.l	(RAM_SysRandVal),d4
(1)  230/  FF01A4 : E39D                		rol.l	#1,d5
(1)  231/  FF01A6 : E284                		asr.l	#1,d4
(1)  232/  FF01A8 : D885                		add.l	d5,d4
(1)  233/  FF01AA : 23C5 FFFF 9640      		move.l	d5,(RAM_SysRandSeed).l
(1)  234/  FF01B0 : 23C4 FFFF 963C      		move.l	d4,(RAM_SysRandVal).l
(1)  235/  FF01B6 : 2004                		move.l	d4,d0
(1)  236/  FF01B8 : 4E75                		rts
(1)  237/  FF01BA :                     		
(1)  238/  FF01BA :                     ; --------------------------------------------------------
(1)  239/  FF01BA :                     ; System_SetInts
(1)  240/  FF01BA :                     ; 
(1)  241/  FF01BA :                     ; Set new interrputs
(1)  242/  FF01BA :                     ; 
(1)  243/  FF01BA :                     ; d0 | LONG - VBlank
(1)  244/  FF01BA :                     ; d1 | LONG - HBlank
(1)  245/  FF01BA :                     ;
(1)  246/  FF01BA :                     ; Uses:
(1)  247/  FF01BA :                     ; d4
(1)  248/  FF01BA :                     ; 
(1)  249/  FF01BA :                     ; Notes:
(1)  250/  FF01BA :                     ; setting 0 or negative number will skip change
(1)  251/  FF01BA :                     ; --------------------------------------------------------
(1)  252/  FF01BA :                     
(1)  253/  FF01BA :                     System_SetInts:
(1)  254/  FF01BA : 2800                		move.l	d0,d4
(1)  255/  FF01BC : 670E                		beq.s	.novint
(1)  256/  FF01BE : 6B0C                		bmi.s	.novint
(1)  257/  FF01C0 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  258/  FF01C6 : 23C4 FFFF 9652       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  259/  FF01CC :                     .novint:
(1)  260/  FF01CC : 2801                		move.l	d1,d4
(1)  261/  FF01CE : 670E                		beq.s	.nohint
(1)  262/  FF01D0 : 6B0C                		bmi.s	.nohint
(1)  263/  FF01D2 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  264/  FF01D8 : 23C4 FFFF 9658      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  265/  FF01DE :                     .nohint:
(1)  266/  FF01DE : 4E75                		rts
(1)  267/  FF01E0 :                     
(1)  268/  FF01E0 :                     ; --------------------------------------------------------
(1)  269/  FF01E0 :                     ; System_SramInit
(1)  270/  FF01E0 :                     ; 
(1)  271/  FF01E0 :                     ; Init save data
(1)  272/  FF01E0 :                     ; 
(1)  273/  FF01E0 :                     ; Uses:
(1)  274/  FF01E0 :                     ; a4,d4-d5
(1)  275/  FF01E0 :                     ; --------------------------------------------------------
(1)  276/  FF01E0 :                     
(1)  277/  FF01E0 :                     ; TODO: Check if RV bit is required here...
(1)  278/  FF01E0 :                     System_SramInit:
(1)  279/  FF01E0 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  280/  FF01E8 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  281/  FF01EE : 7800                		moveq	#0,d4
(1)  282/  FF01F0 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  283/  FF01F4 :                     .initsave:
(1)  284/  FF01F4 : 1884                		move.b	d4,(a4)
(1)  285/  FF01F6 : D8FC 0002           		adda	#2,a4
(1)  286/  FF01FA : 51CD FFF8           		dbf	d5,.initsave
(1)  287/  FF01FE : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  288/  FF0206 : 4E75                		rts
(1)  289/  FF0208 :                     
(1)  290/  FF0208 :                     ; --------------------------------------------------------
(1)  291/  FF0208 :                     ; System_VSync
(1)  292/  FF0208 :                     ; 
(1)  293/  FF0208 :                     ; Waits for VBlank manually
(1)  294/  FF0208 :                     ; 
(1)  295/  FF0208 :                     ; Uses:
(1)  296/  FF0208 :                     ; d4
(1)  297/  FF0208 :                     ; --------------------------------------------------------
(1)  298/  FF0208 :                     
(1)  299/  FF0208 :                     System_VSync:
(1)  300/  FF0208 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)  301/  FF020E : 0804 0003           		btst	#bitVint,d4
(1)  302/  FF0212 : 67F4                		beq.s	System_VSync
(1)  303/  FF0214 : 6100 FE6C           		bsr	System_Input
(1)  304/  FF0218 : 6100 18B4           		bsr	Sound_Update
(1)  305/  FF021C : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9638                
(1)  306/  FF0226 : 3839 00C0 0004      .inside:	move.w	(vdp_ctrl),d4
(1)  307/  FF022C : 0804 0003           		btst	#bitVint,d4
(1)  308/  FF0230 : 66F4                		bne.s	.inside
(1)  309/  FF0232 : 4E75                		rts
(1)  310/  FF0234 :                     
(1)  311/  FF0234 :                     ; ====================================================================
(1)  312/  FF0234 :                     ; --------------------------------------------------------
(1)  313/  FF0234 :                     ; Routines to send task request from here to 32X
(1)  314/  FF0234 :                     ; ARGUMENTS (d1-d7) MUST BE LONGWORDS (move.l) OR MOVEQ's
(1)  315/  FF0234 :                     ; 
(1)  316/  FF0234 :                     ; Uses comm8,comm10,comm12, shared for both SH2s
(1)  317/  FF0234 :                     ; --------------------------------------------------------
(1)  318/  FF0234 :                     
(1)  319/  FF0234 :                     ; ------------------------------------------------
(1)  320/  FF0234 :                     ; Add new task to the list
(1)  321/  FF0234 :                     ; ------------------------------------------------
(1)  322/  FF0234 :                     
(1)  323/  FF0234 :                     System_MdMars_MstAddTask:
(1)  324/  FF0234 : 41F8 9218           		lea	(RAM_MdMarsTskM).w,a0
(1)  325/  FF0238 : 43F8 9648           		lea	(RAM_MdMarsTCntM).w,a1
(1)  326/  FF023C : 6000 00BE           		bra	sysMdMars_instask
(1)  327/  FF0240 :                     
(1)  328/  FF0240 :                     System_MdMars_SlvAddTask:
(1)  329/  FF0240 : 41F8 9418           		lea	(RAM_MdMarsTskS).w,a0
(1)  330/  FF0244 : 43F8 964A           		lea	(RAM_MdMarsTCntS).w,a1
(1)  331/  FF0248 : 6000 00B2           		bra	sysMdMars_instask
(1)  332/  FF024C :                     
(1)  333/  FF024C :                     ; ------------------------------------------------
(1)  334/  FF024C :                     ; Single task
(1)  335/  FF024C :                     ; ------------------------------------------------
(1)  336/  FF024C :                     
(1)  337/  FF024C :                     System_MdMars_MstTask:
(1)  338/  FF024C : 41F8 9618           		lea	(RAM_MdMarsTsSgl),a0
(1)  339/  FF0250 : 43F9 00A1 512E      		lea	(sysmars_reg+comm14),a1
(1)  340/  FF0256 : 48D0 00FF           		movem.l	d0-d7,(a0)
(1)  341/  FF025A : 303C 0020           		move.w	#(MAX_MDTSKARG*4),d0
(1)  342/  FF025E : 7201                		moveq	#1,d1			; Task transfer mode
(1)  343/  FF0260 : 7400                		moveq	#0,d2
(1)  344/  FF0262 : 6000 00AA           		bra	sysMdMars_Transfer
(1)  345/  FF0266 :                     
(1)  346/  FF0266 :                     System_MdMars_SlvTask:
(1)  347/  FF0266 : 41F8 9618           		lea	(RAM_MdMarsTsSgl),a0
(1)  348/  FF026A : 43F9 00A1 512F      		lea	(sysmars_reg+comm15),a1
(1)  349/  FF0270 : 48D0 00FF           		movem.l	d0-d7,(a0)
(1)  350/  FF0274 : 303C 0020           		move.w	#(MAX_MDTSKARG*4),d0
(1)  351/  FF0278 : 7201                		moveq	#1,d1			; Task transfer mode
(1)  352/  FF027A : 7401                		moveq	#1,d2
(1)  353/  FF027C : 6000 0090           		bra	sysMdMars_Transfer
(1)  354/  FF0280 :                     
(1)  355/  FF0280 :                     ; ------------------------------------------------
(1)  356/  FF0280 :                     ; Queued tasks
(1)  357/  FF0280 :                     ; ------------------------------------------------
(1)  358/  FF0280 :                     
(1)  359/  FF0280 :                     System_MdMars_MstSendAll:
(1)  360/  FF0280 : 41F8 9218           		lea	(RAM_MdMarsTskM),a0
(1)  361/  FF0284 : 43F9 00A1 512E      		lea	(sysmars_reg+comm14),a1
(1)  362/  FF028A : 3038 9648           		move.w	(RAM_MdMarsTCntM).w,d0
(1)  363/  FF028E : 4278 9648           		clr.w	(RAM_MdMarsTCntM).w
(1)  364/  FF0292 : 7201                		moveq	#1,d1			; Task transfer mode
(1)  365/  FF0294 : 7400                		moveq	#0,d2
(1)  366/  FF0296 : 6076                		bra	sysMdMars_Transfer
(1)  367/  FF0298 :                     
(1)  368/  FF0298 :                     System_MdMars_SlvSendAll:
(1)  369/  FF0298 : 41F8 9418           		lea	(RAM_MdMarsTskS),a0
(1)  370/  FF029C : 43F9 00A1 512F      		lea	(sysmars_reg+comm15),a1
(1)  371/  FF02A2 : 3038 964A           		move.w	(RAM_MdMarsTCntS).w,d0
(1)  372/  FF02A6 : 4278 964A           		clr.w	(RAM_MdMarsTCntS).w
(1)  373/  FF02AA : 7201                		moveq	#1,d1			; Task transfer mode
(1)  374/  FF02AC : 7401                		moveq	#1,d2
(1)  375/  FF02AE : 605E                		bra.s	sysMdMars_Transfer
(1)  376/  FF02B0 :                     
(1)  377/  FF02B0 :                     System_MdMars_MstSendDrop:
(1)  378/  FF02B0 : 41F8 9218           		lea	(RAM_MdMarsTskM),a0
(1)  379/  FF02B4 : 43F9 00A1 512E      		lea	(sysmars_reg+comm14),a1
(1)  380/  FF02BA : 3038 9648           		move.w	(RAM_MdMarsTCntM).w,d0
(1)  381/  FF02BE : 7201                		moveq	#1,d1			; Task transfer mode
(1)  382/  FF02C0 : 7400                		moveq	#0,d2
(1)  383/  FF02C2 : 4E71                		nop
(1)  384/  FF02C4 : 4E71                		nop
(1)  385/  FF02C6 : 1E11                		move.b	(a1),d7
(1)  386/  FF02C8 : CE7C 0080           		and.w	#$80,d7
(1)  387/  FF02CC : 6702                		beq.s	.go_m
(1)  388/  FF02CE : 4E75                		rts
(1)  389/  FF02D0 : 4278 9648           .go_m:		clr.w	(RAM_MdMarsTCntM).w
(1)  390/  FF02D4 : 6038                		bra	sysMdMars_Transfer
(1)  391/  FF02D6 :                     
(1)  392/  FF02D6 :                     System_MdMars_SlvSendDrop:
(1)  393/  FF02D6 : 41F8 9418           		lea	(RAM_MdMarsTskS),a0
(1)  394/  FF02DA : 43F9 00A1 512F      		lea	(sysmars_reg+comm15),a1
(1)  395/  FF02E0 : 3038 964A           		move.w	(RAM_MdMarsTCntS).w,d0
(1)  396/  FF02E4 : 7201                		moveq	#1,d1			; Task transfer mode
(1)  397/  FF02E6 : 7401                		moveq	#1,d2
(1)  398/  FF02E8 : 4E71                		nop
(1)  399/  FF02EA : 4E71                		nop
(1)  400/  FF02EC : 1E11                		move.b	(a1),d7
(1)  401/  FF02EE : CE7C 0080           		and.w	#$80,d7
(1)  402/  FF02F2 : 6702                		beq.s	.go_s
(1)  403/  FF02F4 : 4E75                		rts
(1)  404/  FF02F6 : 4278 964A           .go_s:		clr.w	(RAM_MdMarsTCntS).w
(1)  405/  FF02FA : 6012                		bra	sysMdMars_Transfer
(1)  406/  FF02FC :                     		
(1)  407/  FF02FC :                     ; a0 - task pointer and args
(1)  408/  FF02FC :                     ; a1 - task list counter
(1)  409/  FF02FC :                     sysMdMars_instask:
(1)  410/  FF02FC : 0C51 0200           		cmp.w	#(MAX_MDTSKARG*MAX_MDTASKS)*4,(a1)
(1)  411/  FF0300 : 6C0A                		bge.s	.ran_out
(1)  412/  FF0302 :                     ; 		move.w	#1,(RAM_FifoMarsWrt).w
(1)  413/  FF0302 : D0D1                		adda.w	(a1),a0
(1)  414/  FF0304 : 48D0 00FF           		movem.l	d0-d7,(a0)		; Set variables to RAM (d0 is label to jump)
(1)  415/  FF0308 : 0651 0020           		add.w	#MAX_MDTSKARG*4,(a1)
(1)  416/  FF030C :                     ; 		move.w	#0,(RAM_FifoMarsWrt).w
(1)  417/  FF030C :                     .ran_out:
(1)  418/  FF030C : 4E75                		rts
(1)  419/  FF030E :                     
(1)  420/  FF030E :                     ; ------------------------------------------------
(1)  421/  FF030E :                     ; sysMdMars_Transfer
(1)  422/  FF030E :                     ; 
(1)  423/  FF030E :                     ; a0 - Data to transfer
(1)  424/  FF030E :                     ; a1 - Status byte from the target CPU
(1)  425/  FF030E :                     ; d0 - Num of LONGS(4bytes) to transfer
(1)  426/  FF030E :                     ; d1 - Transfer type:
(1)  427/  FF030E :                     ; 	1-Task list
(1)  428/  FF030E :                     ; 	2-Sound
(1)  429/  FF030E :                     ; d2 - CMD Interrupt bitset value
(1)  430/  FF030E :                     ; 	($00-Master/$01-Slave)
(1)  431/  FF030E :                     ; ------------------------------------------------
(1)  432/  FF030E :                     
(1)  433/  FF030E :                     sysMdMars_Transfer:
(1)  434/  FF030E : 4E71                		nop
(1)  435/  FF0310 : 4E71                		nop
(1)  436/  FF0312 : 1811                		move.b	(a1),d4
(1)  437/  FF0314 : C87C 0080           		and.w	#$80,d4
(1)  438/  FF0318 : 66F4                		bne.s	sysMdMars_Transfer
(1)  439/  FF031A : 49F9 00A1 5100      		lea	(sysmars_reg),a4
(1)  440/  FF0320 : 4A42                		tst.w	d2			; CMD bit for Slave?
(1)  441/  FF0322 : 6606                		bne.s	.slv_safe
(1)  442/  FF0324 : 182C 0024           .w_z80:		move.b	comm4(a4),d4		; Z80 made it first?
(1)  443/  FF0328 : 66FA                		bne.s	.w_z80
(1)  444/  FF032A :                     .slv_safe:
(1)  445/  FF032A : 40C5                		move.w	sr,d5
(1)  446/  FF032C : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  447/  FF0330 : 47EC 0028           		lea	comm8(a4),a3		; comm transfer method	
(1)  448/  FF0334 : 1681                		move.b	d1,(a3)			; Set MD task ID
(1)  449/  FF0336 : 177C 0001 0001      		move.b	#$01,1(a3)		; Set SH as busy first
(1)  450/  FF033C : 382C 0002           		move.w	standby(a4),d4		; Request CMD interrupt
(1)  451/  FF0340 : 05C4                		bset	d2,d4
(1)  452/  FF0342 : 3944 0002           		move.w	d4,standby(a4)
(1)  453/  FF0346 : 382C 0002           .wait_cmd:	move.w	standby(a4),d4		; CMD cleared?
(1)  454/  FF034A : 0504                		btst    d2,d4
(1)  455/  FF034C : 66F8                		bne.s   .wait_cmd
(1)  456/  FF034E :                     .loop:
(1)  457/  FF034E : 0C2B 0002 0001      		cmpi.b	#2,1(a3)		; SH ready?
(1)  458/  FF0354 : 66F8                		bne.s	.loop
(1)  459/  FF0356 : 3801                		move.w	d1,d4
(1)  460/  FF0358 : 887C 0080           		or.w	#$80,d4
(1)  461/  FF035C : 1684                		move.b	d4,(a3)			; MD is busy
(1)  462/  FF035E : 4A40                		tst.w	d0
(1)  463/  FF0360 : 671E                		beq.s	.exit
(1)  464/  FF0362 : 6B1C                		bmi.s	.exit
(1)  465/  FF0364 : 2810                		move.l	(a0),d4
(1)  466/  FF0366 : 4298                		clr.l	(a0)+
(1)  467/  FF0368 : 3744 0004           		move.w	d4,4(a3)
(1)  468/  FF036C : 4844                		swap	d4
(1)  469/  FF036E : 3744 0002           		move.w	d4,2(a3)
(1)  470/  FF0372 : 3801                		move.w	d1,d4
(1)  471/  FF0374 : 887C 0040           		or.w	#$40,d4
(1)  472/  FF0378 : 1684                		move.b	d4,(a3)			; MD is ready
(1)  473/  FF037A : 907C 0004           		sub.w	#4,d0
(1)  474/  FF037E : 60CE                		bra.s	.loop
(1)  475/  FF0380 :                     .exit:	
(1)  476/  FF0380 : 16BC 0000           		move.b	#0,(a3)			; MD finished
(1)  477/  FF0384 : 46C5                		move.w	d5,sr
(1)  478/  FF0386 :                     .mid_write:
(1)  479/  FF0386 : 4E75                		rts
(1)  480/  FF0388 :                     
(1)  481/  FF0388 :                     ; ====================================================================
(1)  482/  FF0388 :                     ; ----------------------------------------------------------------
(1)  483/  FF0388 :                     ; Game modes
(1)  484/  FF0388 :                     ; ----------------------------------------------------------------
(1)  485/  FF0388 :                     
(1)  486/  FF0388 :                     ; Initialize current screen mode
(1)  487/  FF0388 :                     Mode_Init:
(1)  488/  FF0388 : 617A                		bsr	Video_Clear
(1)  489/  FF038A : 49F8 8800           		lea	(RAM_ModeBuff),a4
(1)  490/  FF038E : 3A3C 03FF           		move.w	#(MAX_MDERAM/2)-1,d5
(1)  491/  FF0392 : 7800                		moveq	#0,d4
(1)  492/  FF0394 :                     .clr:
(1)  493/  FF0394 : 38C4                		move.w	d4,(a4)+
(1)  494/  FF0396 : 51CD FFFC           		dbf	d5,.clr
(1)  495/  FF039A : 4E75                		rts
(1)  496/  FF039C :                     		
(1)  497/  FF039C :                     ; ====================================================================
(1)  498/  FF039C :                     ; ----------------------------------------------------------------
(1)  499/  FF039C :                     ; Default interrupts
(1)  500/  FF039C :                     ; ----------------------------------------------------------------
(1)  501/  FF039C :                     
(1)  502/  FF039C :                     ; --------------------------------------------------------
(1)  503/  FF039C :                     ; VBlank
(1)  504/  FF039C :                     ; --------------------------------------------------------
(1)  505/  FF039C :                     
(1)  506/  FF039C :                     VInt_Default:
(1)  507/  FF039C : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  508/  FF03A0 : 6100 FCE0           		bsr	System_Input
(1)  509/  FF03A4 : 6100 1728           		bsr	Sound_Update
(1)  510/  FF03A8 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9638                
(1)  511/  FF03B2 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  512/  FF03B6 : 4E73                		rte
(1)  513/  FF03B8 :                     
(1)  514/  FF03B8 :                     ; --------------------------------------------------------
(1)  515/  FF03B8 :                     ; HBlank
(1)  516/  FF03B8 :                     ; --------------------------------------------------------
(1)  517/  FF03B8 :                     
(1)  518/  FF03B8 :                     HInt_Default:
(1)  519/  FF03B8 : 4E73                		rte
(1)  520/  FF03BA :                     		
(1)  521/  FF03BA :                     ; ====================================================================
(1)  522/  FF03BA :                     ; ----------------------------------------------------------------
(1)  523/  FF03BA :                     ; System data
(1)  524/  FF03BA :                     ; ----------------------------------------------------------------
(1)  525/  FF03BA :                     
(1)  526/  FF03BA :                     ; Stuff like Sinewave data for MD will go here.
(1)  527/  FF03BA :                     
      35/  FF03BA :                     		include	"system/md/video.asm"
(1)    1/  FF03BA :                     ; ====================================================================
(1)    2/  FF03BA :                     ; ----------------------------------------------------------------
(1)    3/  FF03BA :                     ; MD Video
(1)    4/  FF03BA :                     ; ----------------------------------------------------------------
(1)    5/  FF03BA :                     
(1)    6/  FF03BA :                     ; --------------------------------------------------------
(1)    7/  FF03BA :                     ; Init Video
(1)    8/  FF03BA :                     ; 
(1)    9/  FF03BA :                     ; Uses:
(1)   10/  FF03BA :                     ; a0-a2,d0-d1
(1)   11/  FF03BA :                     ; --------------------------------------------------------
(1)   12/  FF03BA :                     
(1)   13/  FF03BA :                     Video_Init:		
(1)   14/  FF03BA : 41F8 976C           		lea	(RAM_MdVideo),a0	; Clear RAM
(1)   15/  FF03BE : 7000                		moveq	#0,d0
(1)   16/  FF03C0 : 323C 0199           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d1
(1)   17/  FF03C4 :                     .clrram:
(1)   18/  FF03C4 : 10C0                		move.b	d0,(a0)+
(1)   19/  FF03C6 : 51C9 FFFC           		dbf	d1,.clrram
(1)   20/  FF03CA :                     
(1)   21/  FF03CA : 41FA 05B2           		lea	list_vdpregs(pc),a0	; Init registers
(1)   22/  FF03CE : 43F8 98EE           		lea	(RAM_VdpRegs).w,a1
(1)   23/  FF03D2 : 45F9 00C0 0004      		lea	(vdp_ctrl),a2
(1)   24/  FF03D8 : 303C 8000           		move.w	#$8000,d0
(1)   25/  FF03DC : 323C 0012           		move.w	#19-1,d1
(1)   26/  FF03E0 :                     .loop:
(1)   27/  FF03E0 : 1018                		move.b	(a0)+,d0
(1)   28/  FF03E2 : 12C0                		move.b	d0,(a1)+
(1)   29/  FF03E4 : 3480                		move.w	d0,(a2)
(1)   30/  FF03E6 : D07C 0100           		add.w	#$100,d0
(1)   31/  FF03EA : 51C9 FFF4           		dbf	d1,.loop
(1)   32/  FF03EE :                     .exit:
(1)   33/  FF03EE :                     
(1)   34/  FF03EE :                     	; Transfer the DMA tasks to RAM
(1)   35/  FF03EE :                     	; TODO: change this later, we are on RAM already...
(1)   36/  FF03EE : 41FA 04AE           		lea	Video_RamCode(pc),a0
(1)   37/  FF03F2 : 43F8 9906           		lea	(RAM_ExRamSub).w,a1
(1)   38/  FF03F6 : 303C 006F           		move.w	#((Video_RamCode_e-Video_RamCode)/2)-1,d0
(1)   39/  FF03FA :                     .copy:
(1)   40/  FF03FA : 3218                		move.w	(a0)+,d1
(1)   41/  FF03FC : 32C1                		move.w	d1,(a1)+
(1)   42/  FF03FE : 51C8 FFFA           		dbf	d0,.copy
(1)   43/  FF0402 : 4E75                		rts
(1)   44/  FF0404 :                     
(1)   45/  FF0404 :                     ; ====================================================================
(1)   46/  FF0404 :                     ; ----------------------------------------------------------------
(1)   47/  FF0404 :                     ; Video subroutines
(1)   48/  FF0404 :                     ; ----------------------------------------------------------------
(1)   49/  FF0404 :                     
(1)   50/  FF0404 :                     ; --------------------------------------------------------
(1)   51/  FF0404 :                     ; Video_Clear
(1)   52/  FF0404 :                     ; 
(1)   53/  FF0404 :                     ; Clear all video data
(1)   54/  FF0404 :                     ; --------------------------------------------------------
(1)   55/  FF0404 :                     
(1)   56/  FF0404 :                     Video_Clear:
(1)   57/  FF0404 : 303C 0000           		move.w	#0,d0			; Clear until $57F
(1)   58/  FF0408 : 323C AFE0           		move.w	#$57F*$20,d1
(1)   59/  FF040C : 343C 0000           		move.w	#0,d2
(1)   60/  FF0410 : 6100 038C           		bsr	Video_Fill
(1)   61/  FF0414 : 323C 0FFF           		move.w	#$FFF,d1		; FG/BG size
(1)   62/  FF0418 : 1439 FFFF 98F0      		move.b	(RAM_VdpRegs+2).l,d2	; FG
(1)   63/  FF041E : 0242 0038           		andi.w	#%111000,d2
(1)   64/  FF0422 : E14A                		lsl.w	#8,d2
(1)   65/  FF0424 : E54A                		lsl.w	#2,d2
(1)   66/  FF0426 : 6100 0376           		bsr	Video_Fill
(1)   67/  FF042A : 1439 FFFF 98F1      		move.b	(RAM_VdpRegs+3).l,d2	; BG
(1)   68/  FF0430 : 0242 0007           		andi.w	#%000111,d2
(1)   69/  FF0434 : E14A                		lsl.w	#8,d2
(1)   70/  FF0436 : EB4A                		lsl.w	#5,d2
(1)   71/  FF0438 : 6100 0364           		bsr	Video_Fill	
(1)   72/  FF043C : 323C 0FFF           		move.w	#$FFF,d1		; WD Size
(1)   73/  FF0440 : 1439 FFFF 98F2      		move.b	(RAM_VdpRegs+4).l,d2	; Window
(1)   74/  FF0446 : 0242 003E           		andi.w	#%111110,d2
(1)   75/  FF044A : E14A                		lsl.w	#8,d2
(1)   76/  FF044C : E54A                		lsl.w	#2,d2
(1)   77/  FF044E : 6000 034E           		bra	Video_Fill
(1)   78/  FF0452 :                     		
(1)   79/  FF0452 :                     ; ---------------------------------
(1)   80/  FF0452 :                     ; Video_Update
(1)   81/  FF0452 :                     ; 
(1)   82/  FF0452 :                     ; Copy our RAM reg settings to
(1)   83/  FF0452 :                     ; VDP from $80 to $90
(1)   84/  FF0452 :                     ; 
(1)   85/  FF0452 :                     ; Uses:
(1)   86/  FF0452 :                     ; d4-d5,a4-a5
(1)   87/  FF0452 :                     ; ---------------------------------
(1)   88/  FF0452 :                     
(1)   89/  FF0452 :                     Video_Update:
(1)   90/  FF0452 : 49F8 98EE           		lea	(RAM_VdpRegs).w,a4
(1)   91/  FF0456 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)   92/  FF045C : 383C 8000           		move.w	#$8000,d4
(1)   93/  FF0460 : 3A3C 0010           		move.w	#17-1,d5
(1)   94/  FF0464 :                     .loop:
(1)   95/  FF0464 : 181C                		move.b	(a4)+,d4
(1)   96/  FF0466 : 3A84                		move.w	d4,(a5)
(1)   97/  FF0468 : D87C 0100           		add.w	#$100,d4
(1)   98/  FF046C : 51CD FFF6           		dbf	d5,.loop
(1)   99/  FF0470 :                     .exit:
(1)  100/  FF0470 : 4E75                		rts
(1)  101/  FF0472 :                     		
(1)  102/  FF0472 :                     ; --------------------------------------------------------
(1)  103/  FF0472 :                     ; Video_LoadPal
(1)  104/  FF0472 :                     ; Load palette to VDP directly, waits VBLANK
(1)  105/  FF0472 :                     ; 
(1)  106/  FF0472 :                     ; Input:
(1)  107/  FF0472 :                     ; a0 - Palette data
(1)  108/  FF0472 :                     ; d0 - Start at
(1)  109/  FF0472 :                     ; d1 - Num of colors - 1
(1)  110/  FF0472 :                     ; 
(1)  111/  FF0472 :                     ; Uses:
(1)  112/  FF0472 :                     ; a4,d4
(1)  113/  FF0472 :                     ; 
(1)  114/  FF0472 :                     ; Note:
(1)  115/  FF0472 :                     ; It will show dots on screen
(1)  116/  FF0472 :                     ; --------------------------------------------------------
(1)  117/  FF0472 :                     
(1)  118/  FF0472 :                     Video_LoadPal:
(1)  119/  FF0472 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  120/  FF0478 : 7800                		moveq	#0,d4
(1)  121/  FF047A : 3800                		move.w	d0,d4
(1)  122/  FF047C : D844                		add.w	d4,d4
(1)  123/  FF047E : 0044 C000           		ori.w	#$C000,d4
(1)  124/  FF0482 : 4844                		swap	d4
(1)  125/  FF0484 : 2944 0004           		move.l	d4,4(a4)
(1)  126/  FF0488 : 3801                		move.w	d1,d4
(1)  127/  FF048A : 3A2C 0004           .outv: 		move.w	4(a4),d5
(1)  128/  FF048E : 0805 0003           		btst	#bitVint,d5
(1)  129/  FF0492 : 67F6                		beq.s	.outv
(1)  130/  FF0494 :                     .loop:
(1)  131/  FF0494 : 3898                		move.w	(a0)+,(a4)
(1)  132/  FF0496 : 51CC FFFC           		dbf	d4,.loop
(1)  133/  FF049A : 4E75                		rts
(1)  134/  FF049C :                     		
(1)  135/  FF049C :                     ; --------------------------------------------------------
(1)  136/  FF049C :                     ; Video_LoadMap
(1)  137/  FF049C :                     ; 
(1)  138/  FF049C :                     ; Load map data, Horizontal order
(1)  139/  FF049C :                     ; 
(1)  140/  FF049C :                     ; a0 - Map data
(1)  141/  FF049C :                     ; d0 | LONG - 00|Layer|X|Y, locate(lyr,x,y)  
(1)  142/  FF049C :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  143/  FF049C :                     ; d2 | WORD - VRAM
(1)  144/  FF049C :                     
(1)  145/  FF049C :                     ; Uses:
(1)  146/  FF049C :                     ; a4-a5,d4-d7
(1)  147/  FF049C :                     ; --------------------------------------------------------
(1)  148/  FF049C :                     
(1)  149/  FF049C :                     Video_LoadMap:
(1)  150/  FF049C : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  151/  FF04A2 : 6100 025E           		bsr	vid_PickLayer
(1)  152/  FF04A6 : 3A01                		move.w	d1,d5		; Start here
(1)  153/  FF04A8 :                     .yloop:
(1)  154/  FF04A8 : 4845                		swap	d5
(1)  155/  FF04AA : 2944 0004           		move.l	d4,4(a4)
(1)  156/  FF04AE : 2E01                		move.l	d1,d7
(1)  157/  FF04B0 : 4847                		swap	d7
(1)  158/  FF04B2 :                     .xloop:
(1)  159/  FF04B2 : 3A18                		move.w	(a0)+,d5
(1)  160/  FF04B4 : BA7C FFFF           		cmp.w	#-1,d5
(1)  161/  FF04B8 : 6606                		bne.s	.nonull
(1)  162/  FF04BA : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  163/  FF04BE : 6002                		bra.s	.cont
(1)  164/  FF04C0 :                     .nonull:
(1)  165/  FF04C0 : DA42                		add.w	d2,d5
(1)  166/  FF04C2 :                     .cont:
(1)  167/  FF04C2 : 4847                		swap	d7
(1)  168/  FF04C4 : 1E39 FFFF 98FA      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  169/  FF04CA : CE7C 0006           		and.w	#%110,d7
(1)  170/  FF04CE : BE7C 0006           		cmp.w	#%110,d7
(1)  171/  FF04D2 : 660E                		bne.s	.nodble
(1)  172/  FF04D4 : 3E05                		move.w	d5,d7
(1)  173/  FF04D6 : E24F                		lsr.w	#1,d7
(1)  174/  FF04D8 : CE7C 07FF           		and.w	#$7FF,d7
(1)  175/  FF04DC : CA7C F800           		and.w	#$F800,d5
(1)  176/  FF04E0 : 8A47                		or.w	d7,d5
(1)  177/  FF04E2 :                     .nodble:
(1)  178/  FF04E2 : 4847                		swap	d7
(1)  179/  FF04E4 : 3885                		move.w	d5,(a4)
(1)  180/  FF04E6 : 51CF FFCA           		dbf	d7,.xloop
(1)  181/  FF04EA : D886                		add.l	d6,d4
(1)  182/  FF04EC : 4845                		swap	d5
(1)  183/  FF04EE : 51CD FFB8           		dbf	d5,.yloop
(1)  184/  FF04F2 : 4E75                		rts
(1)  185/  FF04F4 :                     
(1)  186/  FF04F4 :                     ; --------------------------------------------------------
(1)  187/  FF04F4 :                     ; Video_LoadMap_Vert
(1)  188/  FF04F4 :                     ; 
(1)  189/  FF04F4 :                     ; Load map data, Vertical order
(1)  190/  FF04F4 :                     ; 
(1)  191/  FF04F4 :                     ; a0 - Map data
(1)  192/  FF04F4 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  193/  FF04F4 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  194/  FF04F4 :                     ; d2 | WORD - VRAM
(1)  195/  FF04F4 :                     
(1)  196/  FF04F4 :                     ; Uses:
(1)  197/  FF04F4 :                     ; a4-a5,d4-d7
(1)  198/  FF04F4 :                     ; --------------------------------------------------------
(1)  199/  FF04F4 :                     
(1)  200/  FF04F4 :                     Video_LoadMap_Vert:
(1)  201/  FF04F4 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  202/  FF04FA : 6100 0206           		bsr	vid_PickLayer
(1)  203/  FF04FE : 2A01                		move.l	d1,d5		; Start here
(1)  204/  FF0500 : 4845                		swap	d5
(1)  205/  FF0502 :                     .xloop:
(1)  206/  FF0502 : 4845                		swap	d5
(1)  207/  FF0504 : 2F04                		move.l	d4,-(sp)
(1)  208/  FF0506 : 3E01                		move.w	d1,d7
(1)  209/  FF0508 : 0839 0002 FFFF 98FA 		btst	#2,(RAM_VdpRegs+$C).l
(1)  210/  FF0510 : 6702                		beq.s	.yloop
(1)  211/  FF0512 : E24F                		lsr.w	#1,d7
(1)  212/  FF0514 :                     .yloop:
(1)  213/  FF0514 : 2944 0004           		move.l	d4,4(a4)
(1)  214/  FF0518 : 3A10                		move.w	(a0),d5
(1)  215/  FF051A : BA7C FFFF           		cmp.w	#-1,d5
(1)  216/  FF051E : 6606                		bne.s	.nonull
(1)  217/  FF0520 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  218/  FF0524 : 6002                		bra.s	.cont
(1)  219/  FF0526 :                     .nonull:
(1)  220/  FF0526 : DA42                		add.w	d2,d5
(1)  221/  FF0528 :                     .cont:
(1)  222/  FF0528 : 4847                		swap	d7
(1)  223/  FF052A : D0FC 0002           		adda	#2,a0
(1)  224/  FF052E : 0839 0002 FFFF 98FA 		btst	#2,(RAM_VdpRegs+$C).l
(1)  225/  FF0536 : 6712                		beq.s	.nodble
(1)  226/  FF0538 : D0FC 0002           		adda	#2,a0
(1)  227/  FF053C : 3E05                		move.w	d5,d7
(1)  228/  FF053E : E24F                		lsr.w	#1,d7
(1)  229/  FF0540 : CE7C 07FF           		and.w	#$7FF,d7
(1)  230/  FF0544 : CA7C F800           		and.w	#$F800,d5
(1)  231/  FF0548 : 8A47                		or.w	d7,d5
(1)  232/  FF054A :                     .nodble:
(1)  233/  FF054A : 4847                		swap	d7
(1)  234/  FF054C : 3885                		move.w	d5,(a4)
(1)  235/  FF054E : D886                		add.l	d6,d4
(1)  236/  FF0550 : 51CF FFC2           		dbf	d7,.yloop
(1)  237/  FF0554 :                     .outdbl:
(1)  238/  FF0554 : 281F                		move.l	(sp)+,d4
(1)  239/  FF0556 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  240/  FF055C : 4845                		swap	d5
(1)  241/  FF055E : 51CD FFA2           		dbf	d5,.xloop
(1)  242/  FF0562 : 4E75                		rts
(1)  243/  FF0564 :                     		
(1)  244/  FF0564 :                     ; --------------------------------------------------------
(1)  245/  FF0564 :                     ; Video_AutoMap_Vert
(1)  246/  FF0564 :                     ; 
(1)  247/  FF0564 :                     ; Make automatic map, Vertical order
(1)  248/  FF0564 :                     ; 
(1)  249/  FF0564 :                     ; MCD: Use this to make a virtual screen
(1)  250/  FF0564 :                     ; for Stamps
(1)  251/  FF0564 :                     ; 
(1)  252/  FF0564 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  253/  FF0564 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  254/  FF0564 :                     ; d2 | WORD - VRAM
(1)  255/  FF0564 :                     
(1)  256/  FF0564 :                     ; Uses:
(1)  257/  FF0564 :                     ; a4-a5,d4-d7
(1)  258/  FF0564 :                     ; --------------------------------------------------------
(1)  259/  FF0564 :                     
(1)  260/  FF0564 :                     ; TODO: double interlace
(1)  261/  FF0564 :                     Video_AutoMap_Vert:
(1)  262/  FF0564 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  263/  FF056A : 6100 0196           		bsr	vid_PickLayer
(1)  264/  FF056E : 3E02                		move.w	d2,d7		; Start here
(1)  265/  FF0570 : 2A01                		move.l	d1,d5
(1)  266/  FF0572 : 4845                		swap	d5
(1)  267/  FF0574 :                     .xloop:
(1)  268/  FF0574 : 4845                		swap	d5
(1)  269/  FF0576 : 2F04                		move.l	d4,-(sp)
(1)  270/  FF0578 : 3A01                		move.w	d1,d5
(1)  271/  FF057A : 0839 0002 FFFF 98FA 		btst	#2,(RAM_VdpRegs+$C).l
(1)  272/  FF0582 : 6702                		beq.s	.yloop
(1)  273/  FF0584 : E24D                		lsr.w	#1,d5
(1)  274/  FF0586 :                     .yloop:
(1)  275/  FF0586 : 2944 0004           		move.l	d4,4(a4)
(1)  276/  FF058A : 3887                		move.w	d7,(a4)
(1)  277/  FF058C : DE7C 0001           		add.w	#1,d7
(1)  278/  FF0590 : D886                		add.l	d6,d4
(1)  279/  FF0592 : 51CD FFF2           		dbf	d5,.yloop
(1)  280/  FF0596 :                     
(1)  281/  FF0596 : 281F                		move.l	(sp)+,d4
(1)  282/  FF0598 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  283/  FF059E : 4845                		swap	d5
(1)  284/  FF05A0 : 51CD FFD2           		dbf	d5,.xloop
(1)  285/  FF05A4 : 4E75                		rts
(1)  286/  FF05A6 :                     
(1)  287/  FF05A6 :                     ; --------------------------------------------------------
(1)  288/  FF05A6 :                     ; Video_PrintInit
(1)  289/  FF05A6 :                     ; 
(1)  290/  FF05A6 :                     ; Load palette and font for printing text
(1)  291/  FF05A6 :                     ; --------------------------------------------------------
(1)  292/  FF05A6 :                     
(1)  293/  FF05A6 :                     Video_PrintInit:
(1)  294/  FF05A6 : 41FA 03EA           		lea	ASCII_PAL(pc),a0
(1)  295/  FF05AA : 7030                		moveq	#$30,d0
(1)  296/  FF05AC : 323C 000F           		move.w	#$F,d1
(1)  297/  FF05B0 : 6100 FEC0           		bsr	Video_LoadPal
(1)  298/  FF05B4 : 203C 00FF 09B2      		move.l	#ASCII_FONT,d0
(1)  299/  FF05BA : 323C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d1
(1)  300/  FF05BE : 343C 6580           		move.w	#$580|$6000,d2
(1)  301/  FF05C2 : 31C2 976C           		move.w	d2,(RAM_VidPrntVram).w
(1)  302/  FF05C6 : 6000 02D0           		bra	Video_LoadArt
(1)  303/  FF05CA :                     
(1)  304/  FF05CA :                     ; --------------------------------------------------------
(1)  305/  FF05CA :                     ; Video_Print
(1)  306/  FF05CA :                     ; 
(1)  307/  FF05CA :                     ; Prints string to layer
(1)  308/  FF05CA :                     ; requires ASCII font
(1)  309/  FF05CA :                     ; 
(1)  310/  FF05CA :                     ; a0 - string data
(1)  311/  FF05CA :                     ; d0 | LONG - 00|Lyr|X|Y, locate(lyr,x,y)
(1)  312/  FF05CA :                     ; 
(1)  313/  FF05CA :                     ; Notes:
(1)  314/  FF05CA :                     ; "//b" - Show BYTE value
(1)  315/  FF05CA :                     ; "//w" - Show WORD value
(1)  316/  FF05CA :                     ; "//l" - Show LONG value
(1)  317/  FF05CA :                     ;   $0A - Next line
(1)  318/  FF05CA :                     ;   $00 - End of line
(1)  319/  FF05CA :                     ; 
(1)  320/  FF05CA :                     ; Uses:
(1)  321/  FF05CA :                     ; a4-a6,d4-d7
(1)  322/  FF05CA :                     ; --------------------------------------------------------
(1)  323/  FF05CA :                     
(1)  324/  FF05CA :                     Video_Print:
(1)  325/  FF05CA :                     ; 		movem.l	d3-d7,-(sp)
(1)  326/  FF05CA :                     ; 		movem.l	a4-a6,-(sp)
(1)  327/  FF05CA :                     		
(1)  328/  FF05CA : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  329/  FF05D0 : 6100 0130           		bsr	vid_PickLayer
(1)  330/  FF05D4 : 4BF8 976E           		lea	(RAM_VidPrntList),a5
(1)  331/  FF05D8 :                     .newjump:
(1)  332/  FF05D8 : 2D44 0004           		move.l	d4,4(a6)
(1)  333/  FF05DC : 2A04                		move.l	d4,d5
(1)  334/  FF05DE :                     .loop:
(1)  335/  FF05DE : 1E18                		move.b	(a0)+,d7
(1)  336/  FF05E0 : 6772                		beq	.exit
(1)  337/  FF05E2 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  338/  FF05E6 : 6718                		beq.s	.next
(1)  339/  FF05E8 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  340/  FF05EC : 6716                		beq.s	.special
(1)  341/  FF05EE : 0247 00FF           		andi.w	#$FF,d7
(1)  342/  FF05F2 :                     .puttext:
(1)  343/  FF05F2 : DE78 976C           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  344/  FF05F6 : 3C87                		move.w	d7,(a6)
(1)  345/  FF05F8 : DABC 0002 0000      		add.l	#$20000,d5
(1)  346/  FF05FE : 60DE                		bra.s	.loop
(1)  347/  FF0600 :                     ; Next line
(1)  348/  FF0600 :                     .next:
(1)  349/  FF0600 : D886                		add.l	d6,d4
(1)  350/  FF0602 : 60D4                		bra.s	.newjump
(1)  351/  FF0604 :                     
(1)  352/  FF0604 :                     ; Specials
(1)  353/  FF0604 :                     .special:
(1)  354/  FF0604 : 1E18                		move.b	(a0)+,d7
(1)  355/  FF0606 : 0C07 0062           		cmpi.b	#"b",d7
(1)  356/  FF060A : 6712                		beq.s	.isbyte
(1)  357/  FF060C : 0C07 0077           		cmpi.b	#"w",d7
(1)  358/  FF0610 : 671E                		beq.s	.isword
(1)  359/  FF0612 : 0C07 006C           		cmpi.b	#"l",d7
(1)  360/  FF0616 : 672A                		beq.s	.islong
(1)  361/  FF0618 : 3E3C 005C           		move.w	#"\\",d7			; nothing to do
(1)  362/  FF061C : 60D4                		bra.s	.puttext
(1)  363/  FF061E :                     		
(1)  364/  FF061E :                     	; TEMPORAL VALUES
(1)  365/  FF061E :                     .isbyte:
(1)  366/  FF061E : 2AC5                		move.l	d5,(a5)+
(1)  367/  FF0620 : 3AFC 0001           		move.w	#1,(a5)+
(1)  368/  FF0624 : DABC 0004 0000      		add.l	#$40000,d5
(1)  369/  FF062A : 2D45 0004           		move.l	d5,4(a6)
(1)  370/  FF062E : 60AE                		bra	.loop
(1)  371/  FF0630 :                     .isword:
(1)  372/  FF0630 : 2AC5                		move.l	d5,(a5)+
(1)  373/  FF0632 : 3AFC 0002           		move.w	#2,(a5)+
(1)  374/  FF0636 : DABC 0008 0000      		add.l	#$80000,d5
(1)  375/  FF063C : 2D45 0004           		move.l	d5,4(a6)
(1)  376/  FF0640 : 609C                		bra	.loop
(1)  377/  FF0642 :                     .islong:
(1)  378/  FF0642 : 2AC5                		move.l	d5,(a5)+
(1)  379/  FF0644 : 3AFC 0003           		move.w	#3,(a5)+
(1)  380/  FF0648 : DABC 0010 0000      		add.l	#$100000,d5
(1)  381/  FF064E : 2D45 0004           		move.l	d5,4(a6)
(1)  382/  FF0652 : 608A                		bra	.loop
(1)  383/  FF0654 :                     .exit:
(1)  384/  FF0654 :                     
(1)  385/  FF0654 :                     ; --------------------------------------------------------
(1)  386/  FF0654 :                     ; Print values
(1)  387/  FF0654 :                     ; 
(1)  388/  FF0654 :                     ; vvvv vvvv tttt
(1)  389/  FF0654 :                     ; v - vdp pos
(1)  390/  FF0654 :                     ; t - value type
(1)  391/  FF0654 :                     ; --------------------------------------------------------
(1)  392/  FF0654 :                     
(1)  393/  FF0654 : 7800                		moveq	#0,d4
(1)  394/  FF0656 : 7A00                		moveq	#0,d5
(1)  395/  FF0658 : 7C00                		moveq	#0,d6
(1)  396/  FF065A : 4BF8 976E           		lea	(RAM_VidPrntList),a5
(1)  397/  FF065E :                     .nextv:
(1)  398/  FF065E : 4A95                		tst.l	(a5)
(1)  399/  FF0660 : 6700 009E           		beq	.nothing
(1)  400/  FF0664 :                     
(1)  401/  FF0664 :                     	; grab value
(1)  402/  FF0664 : 7800                		moveq	#0,d4
(1)  403/  FF0666 : 1818                		move.b	(a0)+,d4
(1)  404/  FF0668 : E19C                		rol.l	#8,d4
(1)  405/  FF066A : 1818                		move.b	(a0)+,d4
(1)  406/  FF066C : E19C                		rol.l	#8,d4
(1)  407/  FF066E : 1818                		move.b	(a0)+,d4
(1)  408/  FF0670 : E19C                		rol.l	#8,d4
(1)  409/  FF0672 : 1818                		move.b	(a0)+,d4
(1)  410/  FF0674 : 2844                		movea.l	d4,a4
(1)  411/  FF0676 : 7800                		moveq	#0,d4
(1)  412/  FF0678 :                     
(1)  413/  FF0678 :                     	; get value
(1)  414/  FF0678 : 3C2D 0004           		move.w	4(a5),d6
(1)  415/  FF067C :                     		
(1)  416/  FF067C : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  417/  FF0680 : 660E                		bne.s	.vbyte
(1)  418/  FF0682 : 1814                		move.b	(a4),d4
(1)  419/  FF0684 : 2D55 0004           		move.l	(a5),4(a6)
(1)  420/  FF0688 : E91C                		rol.b	#4,d4
(1)  421/  FF068A : 6158                		bsr.s	.donibl
(1)  422/  FF068C : E91C                		rol.b	#4,d4
(1)  423/  FF068E : 6154                		bsr.s	.donibl
(1)  424/  FF0690 :                     .vbyte:
(1)  425/  FF0690 : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  426/  FF0694 : 661C                		bne.s	.vword
(1)  427/  FF0696 : 1814                		move.b	(a4),d4
(1)  428/  FF0698 : E15C                		rol.w	#8,d4
(1)  429/  FF069A : 182C 0001           		move.b	1(a4),d4
(1)  430/  FF069E : 2D55 0004           		move.l	(a5),4(a6)
(1)  431/  FF06A2 : E95C                		rol.w	#4,d4
(1)  432/  FF06A4 : 613E                		bsr.s	.donibl
(1)  433/  FF06A6 : E95C                		rol.w	#4,d4
(1)  434/  FF06A8 : 613A                		bsr.s	.donibl
(1)  435/  FF06AA : E95C                		rol.w	#4,d4
(1)  436/  FF06AC : 6136                		bsr.s	.donibl
(1)  437/  FF06AE : E95C                		rol.w	#4,d4
(1)  438/  FF06B0 : 6132                		bsr.s	.donibl
(1)  439/  FF06B2 :                     .vword:
(1)  440/  FF06B2 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  441/  FF06B6 : 6624                		bne.s	.vlong
(1)  442/  FF06B8 : 1814                		move.b	(a4),d4
(1)  443/  FF06BA : E19C                		rol.l	#8,d4
(1)  444/  FF06BC : 182C 0001           		move.b	1(a4),d4
(1)  445/  FF06C0 : E19C                		rol.l	#8,d4
(1)  446/  FF06C2 : 182C 0002           		move.b	2(a4),d4
(1)  447/  FF06C6 : E19C                		rol.l	#8,d4
(1)  448/  FF06C8 : 182C 0003           		move.b	3(a4),d4
(1)  449/  FF06CC : 2D55 0004           		move.l	(a5),4(a6)
(1)  450/  FF06D0 : 3C3C 0007           		move.w	#7,d6
(1)  451/  FF06D4 : E99C                .lngloop:	rol.l	#4,d4
(1)  452/  FF06D6 : 610C                		bsr.s	.donibl
(1)  453/  FF06D8 : 51CE FFFA           		dbf	d6,.lngloop
(1)  454/  FF06DC :                     .vlong:
(1)  455/  FF06DC : 429D                		clr.l	(a5)+
(1)  456/  FF06DE : 425D                		clr.w	(a5)+
(1)  457/  FF06E0 : 6000 FF7C           		bra	.nextv
(1)  458/  FF06E4 :                     
(1)  459/  FF06E4 :                     ; make nibble byte
(1)  460/  FF06E4 :                     .donibl:
(1)  461/  FF06E4 : 3A04                		move.w	d4,d5
(1)  462/  FF06E6 : 0245 000F           		andi.w	#%1111,d5
(1)  463/  FF06EA : BA3C 000A           		cmp.b	#$A,d5
(1)  464/  FF06EE : 6D04                		blt.s	.lowr
(1)  465/  FF06F0 : DA3C 0007           		add.b	#7,d5
(1)  466/  FF06F4 :                     .lowr:
(1)  467/  FF06F4 : DA7C 0030           		add.w	#"0",d5
(1)  468/  FF06F8 : DA78 976C           		add.w	(RAM_VidPrntVram),d5
(1)  469/  FF06FC : 3C85                		move.w	d5,(a6)
(1)  470/  FF06FE : 4E75                		rts
(1)  471/  FF0700 :                     ; exit
(1)  472/  FF0700 :                     .nothing:
(1)  473/  FF0700 :                     ; 		movem.l	(sp)+,a4-a6
(1)  474/  FF0700 :                     ; 		movem.l	(sp)+,d3-d7
(1)  475/  FF0700 : 4E75                		rts
(1)  476/  FF0702 :                     
(1)  477/  FF0702 :                     ; --------------------------------------------------------
(1)  478/  FF0702 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  479/  FF0702 :                     ; --------------------------------------------------------
(1)  480/  FF0702 :                     
(1)  481/  FF0702 :                     vid_PickLayer:
(1)  482/  FF0702 : 2C00                		move.l	d0,d6			; Pick layer
(1)  483/  FF0704 : 4846                		swap	d6
(1)  484/  FF0706 : 0806 0000           		btst	#0,d6
(1)  485/  FF070A : 671E                		beq.s	.plawnd
(1)  486/  FF070C : 1839 FFFF 98F2      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  487/  FF0712 : 3A04                		move.w	d4,d5
(1)  488/  FF0714 : E24D                		lsr.w	#1,d5
(1)  489/  FF0716 : 0245 0003           		andi.w	#%11,d5
(1)  490/  FF071A : 4844                		swap	d4
(1)  491/  FF071C : 3805                		move.w	d5,d4
(1)  492/  FF071E : 4844                		swap	d4
(1)  493/  FF0720 : 0244 0001           		andi.w	#1,d4
(1)  494/  FF0724 : E14C                		lsl.w	#8,d4
(1)  495/  FF0726 : EB4C                		lsl.w	#5,d4
(1)  496/  FF0728 : 6028                		bra.s	.golyr
(1)  497/  FF072A :                     .plawnd:
(1)  498/  FF072A : 1839 FFFF 98F0      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  499/  FF0730 : 0806 0001           		btst	#1,d6
(1)  500/  FF0734 : 6706                		beq.s	.nowd
(1)  501/  FF0736 : 1839 FFFF 98F1      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  502/  FF073C :                     .nowd:		
(1)  503/  FF073C : 3A04                		move.w	d4,d5
(1)  504/  FF073E : E84D                		lsr.w	#4,d5
(1)  505/  FF0740 : 0245 0003           		andi.w	#%11,d5
(1)  506/  FF0744 : 4844                		swap	d4
(1)  507/  FF0746 : 3805                		move.w	d5,d4
(1)  508/  FF0748 : 4844                		swap	d4
(1)  509/  FF074A : 0244 000E           		andi.w	#%00001110,d4
(1)  510/  FF074E : E14C                		lsl.w	#8,d4
(1)  511/  FF0750 : E54C                		lsl.w	#2,d4
(1)  512/  FF0752 :                     .golyr:
(1)  513/  FF0752 : 0044 4000           		ori.w	#$4000,d4
(1)  514/  FF0756 : 3A00                		move.w	d0,d5			; Y start pos
(1)  515/  FF0758 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  516/  FF075C : ED4D                		lsl.w	#6,d5			
(1)  517/  FF075E : 1C38 98FE           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  518/  FF0762 : 0246 0003           		andi.w	#%11,d6
(1)  519/  FF0766 : 670A                		beq.s	.thissz
(1)  520/  FF0768 : DA45                		add.w	d5,d5			; H64
(1)  521/  FF076A : 0246 0002           		andi.w	#%10,d6
(1)  522/  FF076E : 6702                		beq.s	.thissz
(1)  523/  FF0770 : DA45                		add.w	d5,d5			; H128		
(1)  524/  FF0772 :                     .thissz:
(1)  525/  FF0772 : D845                		add.w	d5,d4
(1)  526/  FF0774 : 3A00                		move.w	d0,d5
(1)  527/  FF0776 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  528/  FF077A : EE4D                		lsr.w	#7,d5
(1)  529/  FF077C : D845                		add.w	d5,d4			; X add
(1)  530/  FF077E : 4844                		swap	d4
(1)  531/  FF0780 : 7C00                		moveq	#0,d6
(1)  532/  FF0782 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  533/  FF0786 : 1A38 98FE           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  534/  FF078A : 0245 0003           		andi.w	#%11,d5
(1)  535/  FF078E : 670A                		beq.s	.thisszj
(1)  536/  FF0790 : DC46                		add.w	d6,d6			; H64
(1)  537/  FF0792 : 0245 0002           		andi.w	#%10,d5
(1)  538/  FF0796 : 6702                		beq.s	.thisszj
(1)  539/  FF0798 : DC46                		add.w	d6,d6			; H128		
(1)  540/  FF079A :                     .thisszj:
(1)  541/  FF079A : 4846                		swap	d6
(1)  542/  FF079C : 4E75                		rts
(1)  543/  FF079E :                     		
(1)  544/  FF079E :                     ; --------------------------------------------------------
(1)  545/  FF079E :                     ; Video_Fill
(1)  546/  FF079E :                     ; 
(1)  547/  FF079E :                     ; Fill data to VRAM
(1)  548/  FF079E :                     ;
(1)  549/  FF079E :                     ; d0 | WORD - Fill data
(1)  550/  FF079E :                     ; d1 | WORD - Size
(1)  551/  FF079E :                     ; d2 | WORD - VRAM
(1)  552/  FF079E :                     ; --------------------------------------------------------
(1)  553/  FF079E :                     
(1)  554/  FF079E :                     Video_Fill:
(1)  555/  FF079E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  556/  FF07A4 :                     		
(1)  557/  FF07A4 : 383C 8100           		move.w	#$8100,d4
(1)  558/  FF07A8 : 1838 98EF           		move.b	(RAM_VdpRegs+1),d4
(1)  559/  FF07AC : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  560/  FF07B0 : 3884                		move.w	d4,(a4)
(1)  561/  FF07B2 : 3814                .dmaw:		move.w	(a4),d4
(1)  562/  FF07B4 : 0804 0001           		btst	#bitDma,d4
(1)  563/  FF07B8 : 66F8                		bne.s	.dmaw
(1)  564/  FF07BA : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  565/  FF07BE :                     
(1)  566/  FF07BE :                     	; SIZE
(1)  567/  FF07BE : 3801                		move.w	d1,d4
(1)  568/  FF07C0 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  569/  FF07C6 : E24C                		lsr.w	#1,d4
(1)  570/  FF07C8 : 1A04                		move.b	d4,d5
(1)  571/  FF07CA : 4845                		swap	d5
(1)  572/  FF07CC : E04C                		lsr.w	#8,d4
(1)  573/  FF07CE : 1A04                		move.b	d4,d5
(1)  574/  FF07D0 : 4845                		swap	d5
(1)  575/  FF07D2 : 2885                		move.l	d5,(a4)
(1)  576/  FF07D4 : 38BC 9780           		move.w	#$9780,(a4)		; DMA Fill bit
(1)  577/  FF07D8 :                     
(1)  578/  FF07D8 :                     	; DESTINATION
(1)  579/  FF07D8 : 2802                		move.l	d2,d4
(1)  580/  FF07DA :                     ; 		lsl.w	#5,d4
(1)  581/  FF07DA : 3A04                		move.w	d4,d5
(1)  582/  FF07DC : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  583/  FF07E0 : 0045 4000           		ori.w	#$4000,d5
(1)  584/  FF07E4 : 4845                		swap	d5
(1)  585/  FF07E6 : 3A04                		move.w	d4,d5
(1)  586/  FF07E8 : E04D                		lsr.w	#8,d5
(1)  587/  FF07EA : EC4D                		lsr.w	#6,d5
(1)  588/  FF07EC : 0245 0003           		andi.w	#%11,d5
(1)  589/  FF07F0 : 0045 0080           		ori.w	#$80,d5
(1)  590/  FF07F4 : 2885                		move.l	d5,(a4)
(1)  591/  FF07F6 : 3940 FFFC           		move.w	d0,-4(a4)
(1)  592/  FF07FA : 3814                .dmawe:		move.w	(a4),d4
(1)  593/  FF07FC : 0804 0001           		btst	#bitDma,d4
(1)  594/  FF0800 : 66F8                		bne.s	.dmawe
(1)  595/  FF0802 :                     
(1)  596/  FF0802 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  597/  FF0806 : 383C 8100           		move.w	#$8100,d4
(1)  598/  FF080A : 1838 98EF           		move.b	(RAM_VdpRegs+1),d4
(1)  599/  FF080E : 3884                		move.w	d4,(a4)
(1)  600/  FF0810 : 4E75                		rts
(1)  601/  FF0812 :                     
(1)  602/  FF0812 :                     ; --------------------------------------------------------
(1)  603/  FF0812 :                     ; Video_Copy
(1)  604/  FF0812 :                     ; 
(1)  605/  FF0812 :                     ; Copy VRAM data to another location
(1)  606/  FF0812 :                     ;
(1)  607/  FF0812 :                     ; d0 | WORD - VRAM Source
(1)  608/  FF0812 :                     ; d1 | WORD - Size
(1)  609/  FF0812 :                     ; d2 | WORD - VRAM Destination
(1)  610/  FF0812 :                     ; --------------------------------------------------------
(1)  611/  FF0812 :                     
(1)  612/  FF0812 :                     Video_Copy:
(1)  613/  FF0812 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  614/  FF0818 :                     		
(1)  615/  FF0818 : 383C 8100           		move.w	#$8100,d4
(1)  616/  FF081C : 1838 98EF           		move.b	(RAM_VdpRegs+1),d4
(1)  617/  FF0820 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  618/  FF0824 : 3884                		move.w	d4,(a4)
(1)  619/  FF0826 : 3814                .dmaw:		move.w	(a4),d4
(1)  620/  FF0828 : 0804 0001           		btst	#bitDma,d4
(1)  621/  FF082C : 66F8                		bne.s	.dmaw
(1)  622/  FF082E : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  623/  FF0832 :                     
(1)  624/  FF0832 :                     	; SIZE
(1)  625/  FF0832 : 3801                		move.w	d1,d4
(1)  626/  FF0834 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  627/  FF083A : E24C                		lsr.w	#1,d4
(1)  628/  FF083C : 1A04                		move.b	d4,d5
(1)  629/  FF083E : 4845                		swap	d5
(1)  630/  FF0840 : E04C                		lsr.w	#8,d4
(1)  631/  FF0842 : 1A04                		move.b	d4,d5
(1)  632/  FF0844 : 4845                		swap	d5
(1)  633/  FF0846 : 2885                		move.l	d5,(a4)
(1)  634/  FF0848 :                     	
(1)  635/  FF0848 :                     	; SOURCE
(1)  636/  FF0848 : 2A3C 9600 9500      		move.l	#$96009500,d5
(1)  637/  FF084E : 3800                		move.w	d0,d4
(1)  638/  FF0850 : 1A04                		move.b	d4,d5
(1)  639/  FF0852 : 4845                		swap	d5
(1)  640/  FF0854 : E04C                		lsr.w	#8,d4
(1)  641/  FF0856 : 1A04                		move.b	d4,d5
(1)  642/  FF0858 : 2885                		move.l	d5,(a4)
(1)  643/  FF085A : 38BC 97C0           		move.w	#$97C0,(a4)		; DMA Fill bit
(1)  644/  FF085E :                     		
(1)  645/  FF085E :                     	; DESTINATION
(1)  646/  FF085E : 2802                		move.l	d2,d4
(1)  647/  FF0860 :                     ; 		lsl.w	#5,d4
(1)  648/  FF0860 : 3A04                		move.w	d4,d5
(1)  649/  FF0862 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  650/  FF0866 : 0045 4000           		ori.w	#$4000,d5
(1)  651/  FF086A : 4845                		swap	d5
(1)  652/  FF086C : 3A04                		move.w	d4,d5
(1)  653/  FF086E : E04D                		lsr.w	#8,d5
(1)  654/  FF0870 : EC4D                		lsr.w	#6,d5
(1)  655/  FF0872 : 0245 0003           		andi.w	#%11,d5
(1)  656/  FF0876 : 0045 00C0           		ori.w	#$C0,d5
(1)  657/  FF087A : 2885                		move.l	d5,(a4)
(1)  658/  FF087C : 3940 FFFC           		move.w	d0,-4(a4)
(1)  659/  FF0880 : 3814                .dmawe:		move.w	(a4),d4
(1)  660/  FF0882 : 0804 0001           		btst	#bitDma,d4
(1)  661/  FF0886 : 66F8                		bne.s	.dmawe
(1)  662/  FF0888 :                     
(1)  663/  FF0888 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  664/  FF088C : 383C 8100           		move.w	#$8100,d4
(1)  665/  FF0890 : 1838 98EF           		move.b	(RAM_VdpRegs+1),d4
(1)  666/  FF0894 : 3884                		move.w	d4,(a4)
(1)  667/  FF0896 : 4E75                		rts
(1)  668/  FF0898 :                     
(1)  669/  FF0898 :                     ; --------------------------------------------------------
(1)  670/  FF0898 :                     ; Video_LoadArt
(1)  671/  FF0898 :                     ; 
(1)  672/  FF0898 :                     ; notes below
(1)  673/  FF0898 :                     ; --------------------------------------------------------
(1)  674/  FF0898 :                     
(1)  675/  FF0898 :                     Video_LoadArt:
(1)  676/  FF0898 : 4EF9 FFFF 9906      		jmp	(RAM_ExRamSub).l	; (first routine)
(1)  677/  FF089E :                     
(1)  678/  FF089E :                     ; ====================================================================
(1)  679/  FF089E :                     ; --------------------------------------------------------
(1)  680/  FF089E :                     ; DMA ROM to VDP Transfers, sets RV=1
(1)  681/  FF089E :                     ; --------------------------------------------------------
(1)  682/  FF089E :                     
(1)  683/  FF089E :                     Video_RamCode:
(1)  684/  FF089E : 6000 000E           		bra.w	.load_art
(1)  685/  FF08A2 : 6000 000A           		bra.w	.load_art
(1)  686/  FF08A6 : 6000 0006           		bra.w	.load_art
(1)  687/  FF08AA : 6000 0002           		bra.w	.load_art
(1)  688/  FF08AE :                     
(1)  689/  FF08AE :                     ; --------------------------------------------------------
(1)  690/  FF08AE :                     ; Load graphics using DMA
(1)  691/  FF08AE :                     ;
(1)  692/  FF08AE :                     ; d0 | LONG - Art data
(1)  693/  FF08AE :                     ; d1 | WORD - Size
(1)  694/  FF08AE :                     ; d2 | WORD - VRAM (cell)
(1)  695/  FF08AE :                     ; 
(1)  696/  FF08AE :                     ; Uses:
(1)  697/  FF08AE :                     ; d4-d5,a4
(1)  698/  FF08AE :                     ;
(1)  699/  FF08AE :                     ; NOTES:
(1)  700/  FF08AE :                     ; RV bit must be set before starting DMA
(1)  701/  FF08AE :                     ; --------------------------------------------------------
(1)  702/  FF08AE :                     
(1)  703/  FF08AE :                     .load_art:
(1)  704/  FF08AE : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  705/  FF08B4 : 383C 8100           		move.w	#$8100,d4
(1)  706/  FF08B8 : 1838 98EF           		move.b	(RAM_VdpRegs+1),d4
(1)  707/  FF08BC : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  708/  FF08C0 : 3884                		move.w	d4,(a4)
(1)  709/  FF08C2 :                     
(1)  710/  FF08C2 :                     	; SIZE
(1)  711/  FF08C2 : 3801                		move.w	d1,d4
(1)  712/  FF08C4 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  713/  FF08CA : E24C                		lsr.w	#1,d4
(1)  714/  FF08CC : 1A04                		move.b	d4,d5
(1)  715/  FF08CE : 4845                		swap	d5
(1)  716/  FF08D0 : E04C                		lsr.w	#8,d4
(1)  717/  FF08D2 : 1A04                		move.b	d4,d5
(1)  718/  FF08D4 : 4845                		swap	d5
(1)  719/  FF08D6 : 2885                		move.l	d5,(a4)
(1)  720/  FF08D8 :                     
(1)  721/  FF08D8 :                     	; SOURCE
(1)  722/  FF08D8 : 2800                		move.l	d0,d4
(1)  723/  FF08DA : E28C                  		lsr.l	#1,d4
(1)  724/  FF08DC : 2A3C 9600 9500       		move.l	#$96009500,d5
(1)  725/  FF08E2 : 1A04                 		move.b	d4,d5
(1)  726/  FF08E4 : E08C                 		lsr.l	#8,d4
(1)  727/  FF08E6 : 4845                 		swap	d5
(1)  728/  FF08E8 : 1A04                 		move.b	d4,d5
(1)  729/  FF08EA : 2885                 		move.l	d5,(a4)
(1)  730/  FF08EC : 3A3C 9700            		move.w	#$9700,d5
(1)  731/  FF08F0 : E08C                 		lsr.l	#8,d4
(1)  732/  FF08F2 : 1A04                 		move.b	d4,d5
(1)  733/  FF08F4 : 3885                 		move.w	d5,(a4)
(1)  734/  FF08F6 :                      		
(1)  735/  FF08F6 :                     	; DESTINATION
(1)  736/  FF08F6 : 3802                		move.w	d2,d4
(1)  737/  FF08F8 : C87C 07FF           		and.w	#$7FF,d4
(1)  738/  FF08FC : EB4C                		lsl.w	#5,d4
(1)  739/  FF08FE : 3A04                		move.w	d4,d5
(1)  740/  FF0900 : C8BC 0000 3FE0      		and.l	#$3FE0,d4
(1)  741/  FF0906 : 0044 4000           		ori.w	#$4000,d4
(1)  742/  FF090A : 3884                		move.w	d4,(a4)				; First write
(1)  743/  FF090C : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)  744/  FF0914 : E04D                		lsr.w	#8,d5
(1)  745/  FF0916 : EC4D                		lsr.w	#6,d5
(1)  746/  FF0918 : 0245 0003           		andi.w	#%11,d5
(1)  747/  FF091C : 0045 0080           		ori.w	#$80,d5
(1)  748/  FF0920 :                     .wait:
(1)  749/  FF0920 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for cpu
(1)  750/  FF0928 : 66F6                		bne.s	.wait
(1)  751/  FF092A : 2800                		move.l	d0,d4
(1)  752/  FF092C : 4844                		swap	d4
(1)  753/  FF092E : E04C                		lsr.w	#8,d4
(1)  754/  FF0930 : B83C 00FF           		cmp.b	#$FF,d4
(1)  755/  FF0934 : 6738                		beq.s	.from_ram
(1)  756/  FF0936 : 3839 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d4	; Set RV=1
(1)  757/  FF093C : 887C 0001           		or.w	#1,d4				; (68k ROM map moves to $000000)
(1)  758/  FF0940 : 33C4 00A1 5106      		move.w	d4,(sysmars_reg+dreqctl).l	; Make sure SH2 isn't touching ROM
(1)  759/  FF0946 : 3F05                 		move.w	d5,-(sp)
(1)  760/  FF0948 : 389F                		move.w	(sp)+,(a4)			; Second write
(1)  761/  FF094A : 3839 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d4	; Set RV=0
(1)  762/  FF0950 : C87C 00FE           		and.w	#%11111110,d4			; (68k ROM map returns to $880000)
(1)  763/  FF0954 : 33C4 00A1 5106      		move.w	d4,(sysmars_reg+dreqctl).l
(1)  764/  FF095A : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  765/  FF0962 : 383C 8100           		move.w	#$8100,d4
(1)  766/  FF0966 : 1838 98EF           		move.b	(RAM_VdpRegs+1),d4
(1)  767/  FF096A : 3884                		move.w	d4,(a4)
(1)  768/  FF096C : 4E75                		rts
(1)  769/  FF096E :                     .from_ram:
(1)  770/  FF096E : 3F05                 		move.w	d5,-(sp)
(1)  771/  FF0970 : 389F                		move.w	(sp)+,(a4)			; Second write
(1)  772/  FF0972 : 383C 8100           		move.w	#$8100,d4
(1)  773/  FF0976 : 1838 98EF           		move.b	(RAM_VdpRegs+1),d4
(1)  774/  FF097A : 3884                		move.w	d4,(a4)
(1)  775/  FF097C : 4E75                		rts
(1)  776/  FF097E :                     		
(1)  777/  FF097E :                     ; --------------------------------------------------------
(1)  778/  FF097E :                     
(1)  779/  FF097E :                     Video_RamCode_e:
(1)  780/  FF097E :                     		align 2
(1)  781/  FF097E :                     
(1)  782/  FF097E :                     ; ====================================================================
(1)  783/  FF097E :                     ; --------------------------------------------------------
(1)  784/  FF097E :                     ; Video data
(1)  785/  FF097E :                     ; --------------------------------------------------------
(1)  786/  FF097E :                     
(1)  787/  FF097E :                     list_vdpregs:
(1)  788/  FF097E : 04                  		dc.b $04			; HBlank int off, HV Counter on
(1)  789/  FF097F : 44                  		dc.b $44			; Display ON, VBlank int off
(1)  790/  FF0980 : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(1)  791/  FF0981 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  792/  FF0982 : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(1)  793/  FF0983 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  794/  FF0984 : 00                  		dc.b $00			; Nothing
(1)  795/  FF0985 : 00                  		dc.b $00			; Background color: 0
(1)  796/  FF0986 : 00                  		dc.b $00			; Nothing
(1)  797/  FF0987 : 00                  		dc.b $00			; Nothing
(1)  798/  FF0988 : 00                  		dc.b $00			; HInt value
(1)  799/  FF0989 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  800/  FF098A : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  801/  FF098B : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  802/  FF098C : 00                  		dc.b $00			; Nothing
(1)  803/  FF098D : 02                  		dc.b $02			; VDP Auto increment by $02
(1)  804/  FF098E : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  805/  FF098F : 00                  		dc.b $00
(1)  806/  FF0990 : 00                  		dc.b $00
(1)  807/  FF0991 :                     		align 2
(1)  808/  FF0992 :                     ASCII_PAL:	;binclude "engine/shared/ascii_pal.bin"
(1)  809/  FF0992 : 0000 0EEE 0CCC 0AAA 		dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  810/  FF09A2 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  811/  FF09B2 :                     ASCII_PAL_e:
(1)  812/  FF09B2 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)  813/  FF19B2 :                     ASCII_FONT_e:
(1)  814/  FF19B2 :                     		align 2
(1)  815/  FF19B2 :                     
      36/  FF19B2 :                     		include	"system/md/sound.asm"
(1)    1/  FF19B2 :                     ; ====================================================================
(1)    2/  FF19B2 :                     ; ----------------------------------------------------------------
(1)    3/  FF19B2 :                     ; MD Sound
(1)    4/  FF19B2 :                     ; ----------------------------------------------------------------
(1)    5/  FF19B2 :                     		
(1)    6/  FF19B2 :                     ; ====================================================================
(1)    7/  FF19B2 :                     ; ----------------------------------------------------------------
(1)    8/  FF19B2 :                     ; Subroutines
(1)    9/  FF19B2 :                     ; ----------------------------------------------------------------
(1)   10/  FF19B2 :                     
(1)   11/  FF19B2 :                     ; --------------------------------------------------------
(1)   12/  FF19B2 :                     ; Init Sound
(1)   13/  FF19B2 :                     ; 
(1)   14/  FF19B2 :                     ; Uses:
(1)   15/  FF19B2 :                     ; a0-a1,d0-d1
(1)   16/  FF19B2 :                     ; --------------------------------------------------------
(1)   17/  FF19B2 :                     
(1)   18/  FF19B2 :                     Sound_Init:
(1)   19/  FF19B2 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   20/  FF19BA : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   21/  FF19C2 :                     .wait:
(1)   22/  FF19C2 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)   23/  FF19CA : 66F6                		bne.s	.wait
(1)   24/  FF19CC : 41F9 00A0 0000      		lea	(z80_cpu).l,a0
(1)   25/  FF19D2 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   26/  FF19D6 : 7200                		moveq	#0,d1
(1)   27/  FF19D8 :                     .cleanup:
(1)   28/  FF19D8 : 10C1                		move.b	d1,(a0)+
(1)   29/  FF19DA : 51C8 FFFC           		dbf	d0,.cleanup
(1)   30/  FF19DE : 41F9 00FF 1CCE      		lea	(Z80_CODE).l,a0			; Send sound code
(1)   31/  FF19E4 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1
(1)   32/  FF19EA : 303C 1E3F           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0
(1)   33/  FF19EE :                     .copy:
(1)   34/  FF19EE : 12D8                		move.b	(a0)+,(a1)+
(1)   35/  FF19F0 : 51C8 FFFC           		dbf	d0,.copy
(1)   36/  FF19F4 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   37/  FF19FC : 4E71                		nop 
(1)   38/  FF19FE : 4E71                		nop 
(1)   39/  FF1A00 : 4E71                		nop 
(1)   40/  FF1A02 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   41/  FF1A0A : 4E75                		rts
(1)   42/  FF1A0C :                     
(1)   43/  FF1A0C :                     ; --------------------------------------------------------
(1)   44/  FF1A0C :                     ; Routine to check if Z80 wants something from here
(1)   45/  FF1A0C :                     ; 
(1)   46/  FF1A0C :                     ; Call this on VBlank only.
(1)   47/  FF1A0C :                     ; --------------------------------------------------------
(1)   48/  FF1A0C :                     
(1)   49/  FF1A0C :                     		align $100			; ASL's fault for this
(1)   50/  FF1ACE :                     Sound_Update:
(1)   51/  FF1ACE :                     
(1)   52/  FF1ACE :                     	; Special check to transfer a copy
(1)   53/  FF1ACE :                     	; of a track's instrument list
(1)   54/  FF1ACE :                     	; from Z80 to 68k then to SH2
(1)   55/  FF1ACE :                     	; for PWM playback
(1)   56/  FF1ACE :                     ; 		bsr	sndLockZ80
(1)   57/  FF1ACE :                     ; 		lea	(z80_cpu),a0
(1)   58/  FF1ACE :                     ; 		lea	(z80_cpu+reqMarsTrnf),a1
(1)   59/  FF1ACE :                     ; 		moveq	#0,d4
(1)   60/  FF1ACE :                     ; 		move.b	1(a1),d4
(1)   61/  FF1ACE :                     ; 		lsl.l	#8,d4
(1)   62/  FF1ACE :                     ; 		move.b	(a1),d4
(1)   63/  FF1ACE :                     ; 		bsr	sndUnlockZ80
(1)   64/  FF1ACE :                     ; 		tst.w	d4
(1)   65/  FF1ACE :                     ; 		beq.s	.no_req
(1)   66/  FF1ACE :                     ; 		lea	(a0,d4.w),a0
(1)   67/  FF1ACE :                     ; 		lea	(RAM_SndInsCopy),a2
(1)   68/  FF1ACE :                     ; 		move.w	#$80-1,d1
(1)   69/  FF1ACE :                     ; 		bsr	sndLockZ80
(1)   70/  FF1ACE :                     ; .copydata:
(1)   71/  FF1ACE :                     ; 		move.b	(a0)+,d0
(1)   72/  FF1ACE :                     ; 		move.b	d0,(a2)+
(1)   73/  FF1ACE :                     ; 		dbf	d1,.copydata
(1)   74/  FF1ACE :                     ; 		move.b	#0,(a1)
(1)   75/  FF1ACE :                     ; 		move.b	#0,1(a1)
(1)   76/  FF1ACE :                     ; 		bsr	sndUnlockZ80
(1)   77/  FF1ACE :                     ; 		lea	(RAM_SndInsCopy),a0
(1)   78/  FF1ACE :                     ; 		lea	(sysmars_reg+comm14),a1
(1)   79/  FF1ACE :                     ; 		move.w	#$80*2,d0
(1)   80/  FF1ACE :                     ; 		moveq	#2,d1			; Transfer mode 2: Instrument copy
(1)   81/  FF1ACE :                     ; 		moveq	#0,d2
(1)   82/  FF1ACE :                     ; 		bra	sysMdMars_Transfer
(1)   83/  FF1ACE :                     ; .no_req:
(1)   84/  FF1ACE : 4E75                		rts
(1)   85/  FF1AD0 :                     
(1)   86/  FF1AD0 :                     ; --------------------------------------------------------
(1)   87/  FF1AD0 :                     ; Sound_DMA_Pause
(1)   88/  FF1AD0 :                     ; 
(1)   89/  FF1AD0 :                     ; Call this before doing any DMA task
(1)   90/  FF1AD0 :                     ; --------------------------------------------------------
(1)   91/  FF1AD0 :                     
(1)   92/  FF1AD0 :                     Sound_DMA_Pause:
(1)   93/  FF1AD0 : 40E7                		move.w	sr,-(sp)
(1)   94/  FF1AD2 : 007C 0700           		or.w	#$700,sr
(1)   95/  FF1AD6 :                     .retry:
(1)   96/  FF1AD6 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   97/  FF1ADE :                     .wait:
(1)   98/  FF1ADE : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)   99/  FF1AE6 : 66F6                		bne.s	.wait
(1)  100/  FF1AE8 : 1039 00A0 002E      		move.b	(z80_cpu+commZRomRd),d0		; Get mid-read bit
(1)  101/  FF1AEE : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Resume Z80
(1)  102/  FF1AF6 : 4A00                		tst.b	d0
(1)  103/  FF1AF8 : 6708                		beq.s	.safe
(1)  104/  FF1AFA : 7044                		moveq	#68,d0
(1)  105/  FF1AFC : 51C8 FFFE           		dbf	d0,*
(1)  106/  FF1B00 : 60D4                		bra.s	.retry
(1)  107/  FF1B02 :                     .safe:
(1)  108/  FF1B02 : 13FC 0001 00A0 002D 		move.b	#1,(z80_cpu+commZRomBlk)	; Block flag for Z80
(1)  109/  FF1B0A : 46DF                		move.w	(sp)+,sr
(1)  110/  FF1B0C : 4E75                		rts
(1)  111/  FF1B0E :                     
(1)  112/  FF1B0E :                     ; --------------------------------------------------------
(1)  113/  FF1B0E :                     ; Sound_DMA_Resume
(1)  114/  FF1B0E :                     ; 
(1)  115/  FF1B0E :                     ; Call this after finishing DMA
(1)  116/  FF1B0E :                     ; --------------------------------------------------------
(1)  117/  FF1B0E :                     
(1)  118/  FF1B0E :                     Sound_DMA_Resume:
(1)  119/  FF1B0E : 40E7                		move.w	sr,-(sp)
(1)  120/  FF1B10 : 007C 0700           		or.w	#$700,sr
(1)  121/  FF1B14 : 617A                		bsr	sndLockZ80
(1)  122/  FF1B16 : 13FC 0000 00A0 002D 		move.b	#0,(z80_cpu+commZRomBlk)
(1)  123/  FF1B1E : 6100 0084           		bsr	sndUnlockZ80
(1)  124/  FF1B22 : 46DF                		move.w	(sp)+,sr
(1)  125/  FF1B24 : 4E75                		rts
(1)  126/  FF1B26 :                     
(1)  127/  FF1B26 :                     ; --------------------------------------------------------
(1)  128/  FF1B26 :                     ; Sound_Request_Word
(1)  129/  FF1B26 :                     ; 
(1)  130/  FF1B26 :                     ; d0    - request id
(1)  131/  FF1B26 :                     ; d1    - argument
(1)  132/  FF1B26 :                     ; --------------------------------------------------------
(1)  133/  FF1B26 :                     
(1)  134/  FF1B26 :                     Sound_Request:
(1)  135/  FF1B26 : 6100 0088           		bsr	sndReq_Enter
(1)  136/  FF1B2A : 3E00                		move.w	d0,d7
(1)  137/  FF1B2C : 6100 00CE           		bsr	sndReq_scmd
(1)  138/  FF1B30 : 2E01                		move.l	d1,d7
(1)  139/  FF1B32 : 6100 00DE           		bsr	sndReq_sword
(1)  140/  FF1B36 : 6000 00AE           		bra 	sndReq_Exit
(1)  141/  FF1B3A :                     
(1)  142/  FF1B3A :                     ; --------------------------------------------------------
(1)  143/  FF1B3A :                     ; SoundReq_SetTrack
(1)  144/  FF1B3A :                     ; 
(1)  145/  FF1B3A :                     ; d0 - Pattern data pointer
(1)  146/  FF1B3A :                     ; d1 - Block data pointer
(1)  147/  FF1B3A :                     ; d2 - Instrument data pointer
(1)  148/  FF1B3A :                     ; d3 - Ticks (Tempo is set separately)
(1)  149/  FF1B3A :                     ; d4 - Slot (0-2)
(1)  150/  FF1B3A :                     ; --------------------------------------------------------
(1)  151/  FF1B3A :                     
(1)  152/  FF1B3A :                     SoundReq_SetTrack:
(1)  153/  FF1B3A : 6174                		bsr	sndReq_Enter
(1)  154/  FF1B3C : 3E3C 0000           		move.w	#$00,d7			; Command $00
(1)  155/  FF1B40 : 6100 00BA           		bsr	sndReq_scmd
(1)  156/  FF1B44 : 1E04                		move.b	d4,d7			; d4 - Slot
(1)  157/  FF1B46 : 6100 00CE           		bsr	sndReq_sbyte
(1)  158/  FF1B4A : 1E03                		move.b	d3,d7			; d3 - Ticks
(1)  159/  FF1B4C : 6100 00C8           		bsr	sndReq_sbyte
(1)  160/  FF1B50 : 2E00                		move.l	d0,d7			; d0 - Patt data point
(1)  161/  FF1B52 : 6100 00BA           		bsr	sndReq_saddr
(1)  162/  FF1B56 : 2E01                		move.l	d1,d7			; d1 - Block data point
(1)  163/  FF1B58 : 6100 00B4           		bsr	sndReq_saddr
(1)  164/  FF1B5C : 2E02                		move.l	d2,d7			; d2 - Intrument data
(1)  165/  FF1B5E : 6100 00AE           		bsr	sndReq_saddr
(1)  166/  FF1B62 : 6000 0082           		bra 	sndReq_Exit
(1)  167/  FF1B66 :                     		
(1)  168/  FF1B66 :                     ; --------------------------------------------------------
(1)  169/  FF1B66 :                     ; SoundReq_SetSample
(1)  170/  FF1B66 :                     ; 
(1)  171/  FF1B66 :                     ; d0 - Sample pointer
(1)  172/  FF1B66 :                     ; d1 - length
(1)  173/  FF1B66 :                     ; d2 - loop point
(1)  174/  FF1B66 :                     ; d3 - Pitch ($01.00)
(1)  175/  FF1B66 :                     ; d4 - Flags (%00l l-loop enable)
(1)  176/  FF1B66 :                     ; --------------------------------------------------------
(1)  177/  FF1B66 :                     
(1)  178/  FF1B66 :                     SoundReq_SetSample:
(1)  179/  FF1B66 : 6148                		bsr	sndReq_Enter
(1)  180/  FF1B68 : 3E3C 0021           		move.w	#$21,d7			; Command $21
(1)  181/  FF1B6C : 6100 008E           		bsr	sndReq_scmd
(1)  182/  FF1B70 : 2E00                		move.l	d0,d7
(1)  183/  FF1B72 : 6100 009A           		bsr	sndReq_saddr
(1)  184/  FF1B76 : 2E01                		move.l	d1,d7
(1)  185/  FF1B78 : 6100 0094           		bsr	sndReq_saddr
(1)  186/  FF1B7C : 2E02                		move.l	d2,d7
(1)  187/  FF1B7E : 6100 008E           		bsr	sndReq_saddr
(1)  188/  FF1B82 : 2E03                		move.l	d3,d7
(1)  189/  FF1B84 : 6100 008C           		bsr	sndReq_sword
(1)  190/  FF1B88 : 2E04                		move.l	d4,d7
(1)  191/  FF1B8A : 6100 008A           		bsr	sndReq_sbyte
(1)  192/  FF1B8E : 6056                		bra 	sndReq_Exit
(1)  193/  FF1B90 :                     
(1)  194/  FF1B90 :                     ; ------------------------------------------------
(1)  195/  FF1B90 :                     ; Lock Z80, get bus
(1)  196/  FF1B90 :                     ; ------------------------------------------------
(1)  197/  FF1B90 :                     
(1)  198/  FF1B90 :                     sndLockZ80:
(1)  199/  FF1B90 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)  200/  FF1B98 :                     .wait:
(1)  201/  FF1B98 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)  202/  FF1BA0 : 66F6                		bne.s	.wait
(1)  203/  FF1BA2 : 4E75                		rts
(1)  204/  FF1BA4 :                     		
(1)  205/  FF1BA4 :                     ; ------------------------------------------------
(1)  206/  FF1BA4 :                     ; Unlock Z80, return bus
(1)  207/  FF1BA4 :                     ; ------------------------------------------------
(1)  208/  FF1BA4 :                     
(1)  209/  FF1BA4 :                     sndUnlockZ80:
(1)  210/  FF1BA4 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  211/  FF1BAC : 4E75                		rts
(1)  212/  FF1BAE :                     sndSendCmd:
(1)  213/  FF1BAE : 4E75                		rts
(1)  214/  FF1BB0 :                     
(1)  215/  FF1BB0 :                     ; ------------------------------------------------
(1)  216/  FF1BB0 :                     ; 68k-to-z80 Sound request
(1)  217/  FF1BB0 :                     ; enter/exit routines
(1)  218/  FF1BB0 :                     ; ------------------------------------------------
(1)  219/  FF1BB0 :                     
(1)  220/  FF1BB0 :                     sndReq_Enter:
(1)  221/  FF1BB0 : 48F9 60C0 FFFF 975C 		movem.l	d6-d7/a5-a6,(RAM_SndSaveReg).l
(1)  222/  FF1BB8 : 7C00                		moveq	#0,d6
(1)  223/  FF1BBA : 40C6                		move.w	sr,d6
(1)  224/  FF1BBC : 4846                		swap	d6
(1)  225/  FF1BBE : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)  226/  FF1BC6 : 007C 0700           		or.w	#$0700,sr			; disable ints
(1)  227/  FF1BCA : 4BF9 00A0 002C      		lea	(z80_cpu+commZWrite),a5		; a5 - commZWrite
(1)  228/  FF1BD0 : 4DF9 00A0 1E00      		lea	(z80_cpu+commZfifo),a6		; a6 - fifo command list
(1)  229/  FF1BD6 :                     .wait:
(1)  230/  FF1BD6 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  231/  FF1BDE : 66F6                		bne.s	.wait
(1)  232/  FF1BE0 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  233/  FF1BE2 : 4886                		ext.w	d6				; extend to 16 bits
(1)  234/  FF1BE4 : 4E75                		rts
(1)  235/  FF1BE6 :                     ; JUMP ONLY
(1)  236/  FF1BE6 :                     sndReq_Exit:
(1)  237/  FF1BE6 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  238/  FF1BEE : 4846                		swap	d6
(1)  239/  FF1BF0 : 46C6                		move.w	d6,sr
(1)  240/  FF1BF2 : 4CF9 60C0 FFFF 975C 		movem.l	(RAM_SndSaveReg).l,d6-d7/a5-a6
(1)  241/  FF1BFA : 4E75                		rts
(1)  242/  FF1BFC :                     		
(1)  243/  FF1BFC :                     ; ------------------------------------------------
(1)  244/  FF1BFC :                     ; Send request id and arguments
(1)  245/  FF1BFC :                     ;
(1)  246/  FF1BFC :                     ; Input:
(1)  247/  FF1BFC :                     ; d7 - byte to write
(1)  248/  FF1BFC :                     ; d6 - index pointer
(1)  249/  FF1BFC :                     ; a5 - commZWrite, update index
(1)  250/  FF1BFC :                     ; a6 - commZfifo command list
(1)  251/  FF1BFC :                     ; 
(1)  252/  FF1BFC :                     ; *** CALL sndReq_Enter FIRST ***
(1)  253/  FF1BFC :                     ; ------------------------------------------------
(1)  254/  FF1BFC :                     
(1)  255/  FF1BFC :                     sndReq_scmd:
(1)  256/  FF1BFC : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  257/  FF1C02 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  258/  FF1C04 : 0206 003F           		andi.b	#$3F,d6
(1)  259/  FF1C08 : 600C                		bra.s	sndReq_sbyte
(1)  260/  FF1C0A :                     sndReq_slong:
(1)  261/  FF1C0A : 610A                		bsr	sndReq_sbyte
(1)  262/  FF1C0C : E09F                		ror.l	#8,d7
(1)  263/  FF1C0E :                     sndReq_saddr:
(1)  264/  FF1C0E : 6106                		bsr	sndReq_sbyte
(1)  265/  FF1C10 : E09F                		ror.l	#8,d7
(1)  266/  FF1C12 :                     sndReq_sword:
(1)  267/  FF1C12 : 6102                		bsr	sndReq_sbyte
(1)  268/  FF1C14 : E09F                		ror.l	#8,d7
(1)  269/  FF1C16 :                     sndReq_sbyte:
(1)  270/  FF1C16 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  271/  FF1C1A : 5206                		addq.b	#1,d6				; next fifo pos
(1)  272/  FF1C1C : 0206 003F           		andi.b	#$3F,d6
(1)  273/  FF1C20 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  274/  FF1C22 : 4E75                		rts
(1)  275/  FF1C24 :                     
(1)  276/  FF1C24 :                     ; ====================================================================
(1)  277/  FF1C24 :                     ; ----------------------------------------------------------------
(1)  278/  FF1C24 :                     ; Z80 Code
(1)  279/  FF1C24 :                     ; 
(1)  280/  FF1C24 :                     ; GEMA sound driver, inspired by GEMS
(1)  281/  FF1C24 :                     ; 
(1)  282/  FF1C24 :                     ; WARNING: The sample playback is sync'd manually on every
(1)  283/  FF1C24 :                     ; code change, DAC sample rate is 16000hz base
(1)  284/  FF1C24 :                     ; ----------------------------------------------------------------
(1)  285/  FF1C24 :                     
(1)  286/  FF1C24 :                     		align $100
(1)  287/  FF1CCE :                     Z80_CODE:
(1)  288/  FF1CCE :                     		cpu Z80			; Set Z80 here
(1)  289/       0 :                     		phase 0			; And set PC to 0
(1)  290/       0 :                     
(1)  291/       0 :                     ; --------------------------------------------------------
(1)  292/       0 :                     ; Structs
(1)  293/       0 :                     ; 
(1)  294/       0 :                     ; NOTE: struct doesn't work properly here. use
(1)  295/       0 :                     ; equs instead
(1)  296/       0 :                     ; --------------------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     ; trkBuff struct
(1)  299/       0 :                     ; LIMIT: 10h bytes
(1)  300/       0 : =0H                 trk_romBlk	equ 0			; 24-bit base block data
(1)  301/       0 : =3H                 trk_romPatt	equ 3			; 24-bit base patt data
(1)  302/       0 : =6H                 trk_romIns	equ 6			; 24-bit ROM instrument pointers
(1)  303/       0 : =9H                 trk_romPattRd	equ 9			; same but for reading
(1)  304/       0 : =CH                 trk_Read	equ 12			; Current track position (in cache)
(1)  305/       0 : =EH                 trk_Rows	equ 14			; Current track length
(1)  306/       0 : =10H                trk_Halfway	equ 16			; Only 00h or 80h
(1)  307/       0 : =11H                trk_currBlk	equ 17			; Current block
(1)  308/       0 : =12H                trk_setBlk	equ 18			; Start on this block
(1)  309/       0 : =13H                trk_status	equ 19			; %ERSx xxxx | E-enabled / R-Init or Restart track
(1)  310/       0 :                     					;	       S-sfx mode
(1)  311/       0 : =14H                trk_tickTmr	equ 20			; Ticks timer
(1)  312/       0 : =15H                trk_tickSet	equ 21			; Ticks set for this track
(1)  313/       0 :                     		
(1)  314/       0 :                     ; chnBuff
(1)  315/       0 :                     ; 8 bytes
(1)  316/       0 : =0H                 chnl_Chip	equ 0			; Channel chip: etti iiii | e-enable t-type i-chip channel
(1)  317/       0 : =1H                 chnl_Type	equ 1			; Current type
(1)  318/       0 : =2H                 chnl_Note	equ 2
(1)  319/       0 : =3H                 chnl_Ins	equ 3
(1)  320/       0 : =4H                 chnl_Vol	equ 4
(1)  321/       0 : =5H                 chnl_EffId	equ 5
(1)  322/       0 : =6H                 chnl_EffArg	equ 6
(1)  323/       0 : =7H                 chnl_Status	equ 7			; 000e uuuu | p-priority overwrite, u-update bits from Tracker
(1)  324/       0 :                     
(1)  325/       0 :                     ; --------------------------------------------------------
(1)  326/       0 :                     ; Variables
(1)  327/       0 :                     ; --------------------------------------------------------
(1)  328/       0 :                     
(1)  329/       0 : =2H                 MAX_TRKS	equ	2		; Max tracks to read
(1)  330/       0 : =12H                MAX_TRKCHN	equ	18		; Max internal tracker channels
(1)  331/       0 :                     
(1)  332/       0 :                     ; To brute force DAC playback
(1)  333/       0 :                     ; on or off
(1)  334/       0 : =8H                 zopcEx		equ	08h
(1)  335/       0 : =0H                 zopcNop		equ	00h
(1)  336/       0 : =C9H                zopcRet		equ 	0C9h
(1)  337/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)  338/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)  339/       0 :                     
(1)  340/       0 :                     ; PSG external control
(1)  341/       0 : =0H                 COM		equ	0
(1)  342/       0 : =4H                 LEV		equ	4
(1)  343/       0 : =8H                 ATK		equ	8
(1)  344/       0 : =CH                 DKY		equ	12
(1)  345/       0 : =10H                SLV		equ	16
(1)  346/       0 : =14H                RRT		equ	20
(1)  347/       0 : =18H                MODE		equ	24
(1)  348/       0 : =1CH                DTL		equ	28
(1)  349/       0 : =20H                DTH		equ	32
(1)  350/       0 : =24H                ALV		equ	36
(1)  351/       0 : =28H                FLG		equ	40
(1)  352/       0 : =2CH                TMR		equ	44
(1)  353/       0 :                     
(1)  354/       0 :                     ; ====================================================================
(1)  355/       0 :                     ; --------------------------------------------------------
(1)  356/       0 :                     ; Code starts here
(1)  357/       0 :                     ; --------------------------------------------------------
(1)  358/       0 :                     
(1)  359/       0 : F3                  		di			; Disable interrputs
(1)  360/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  361/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  362/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  363/       8 :                     
(1)  364/       8 :                     ; --------------------------------------------------------
(1)  365/       8 :                     
(1)  366/       8 : 00 00               wave_Start	dw 0;TEST_WAV&0FFFFh	; START: 68k direct pointer ($00xxxxxx)
(1)  367/       A : 00                  		db 0;TEST_WAV>>16&0FFh
(1)  368/       B : 00 00               wave_End	dw 0;(TEST_WAV_E-TEST_WAV)&0FFFFh
(1)  369/       D : 00                  		db 0;(TEST_WAV_E-TEST_WAV)>>16
(1)  370/       E : 00 00               wave_Loop	dw 0
(1)  371/      10 : 00                  		db 0
(1)  372/      11 : 00 01               wave_Pitch	dw 100h			; 01.00h
(1)  373/      13 : 04                  wav_Flags	db 100b			; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1)  374/      14 : 00 00               currTrkBlkHd	dw 0
(1)  375/      16 : 00 00               currTrkData	dw 0
(1)  376/      18 : 00 00               currInsData	dw 0
(1)  377/      1A : 00 00               tickFlag	dw 0			; Tick flag from VBlank, Read as (tickFlag+1) for reading/reseting
(1)  378/      1C : 00                  tickCnt		db 0			; Tick counter (PUT THIS TAG AFTER tickFlag)
(1)  379/      1D : CC 00               sbeatPtck	dw 204			; Sub beats per tick (8frac), default is 120bpm
(1)  380/      1F : 00 00               sbeatAcc	dw 0			; Accumulates ^^ each tick to track sub beats
(1)  381/      21 : 00                  currTickBits	db 0			; Current Tick/Tempo bitflags (000000BTb B-beat, T-tick)
(1)  382/      22 : 00 00 00            dDacPntr	db 0,0,0		; WAVE play current ROM position
(1)  383/      25 : 00 00 00            dDacCntr	db 0,0,0		; WAVE play length counter
(1)  384/      28 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1)  385/      29 : 00                  x68ksrclsb	db 0			; transferRom temporal LSB
(1)  386/      2A : 00                  x68ksrcmid	db 0			; transferRom temporal MID
(1)  387/      2B : 00                  commZRead	db 0			; read pointer (here)
(1)  388/      2C : 00                  commZWrite	db 0			; cmd fifo wptr (from 68k)
(1)  389/      2D : 00                  commZRomBlk	db 0			; 68k ROM block flag
(1)  390/      2E : 00                  commZRomRd	db 0			; Z80 is reading ROM bit
(1)  391/      2F : 00 00 00            psgHatMode	db 0,0,0		; noise mode bits + linked channel
(1)  392/      32 : 00 00               currTblSrch	dw 0
(1)  393/      34 : 00 00               reqMarsTrnf	dw 0			; Request instrument transfer to SH2
(1)  394/      36 :                     
(1)  395/      36 :                     ; --------------------------------------------------------
(1)  396/      36 :                     ; Z80 Interrupt at 0038h
(1)  397/      36 :                     ; 
(1)  398/      36 :                     ; Sets the TICK flag
(1)  399/      36 :                     ; --------------------------------------------------------
(1)  400/      36 :                     
(1)  401/      36 : (MACRO)             		org 0038h		; Align to 0038h
(1)  401/      36 : 00                                                  db 0
(1)  401/      37 : 00                                                  db 0
(1)  401/      38 :                     
(1)  402/      38 : ED 73 1A 00         		ld	(tickFlag),sp	; Use sp to set TICK flag (xx1F, check for tickFlag+1)
(1)  403/      3C : F3                  		di			; Disable interrupt until next request
(1)  404/      3D : C9                  		ret
(1)  405/      3E :                     
(1)  406/      3E :                     ; --------------------------------------------------------
(1)  407/      3E :                     ; Initilize
(1)  408/      3E :                     ; --------------------------------------------------------
(1)  409/      3E :                     
(1)  410/      3E :                     z80_init:
(1)  411/      3E : CD AC 0B            		call	gema_init	; Initilize VBLANK sound driver
(1)  412/      41 : FB                  		ei
(1)  413/      42 :                     		
(1)  414/      42 :                     ; --------------------------------------------------------
(1)  415/      42 :                     ; MAIN LOOP
(1)  416/      42 :                     ; --------------------------------------------------------
(1)  417/      42 :                     
(1)  418/      42 :                     drv_loop:
(1)  419/      42 : CD 03 0F            		call	dac_me
(1)  420/      45 : CD 2A 0C            		call	check_tick	; Check for tick on VBlank
(1)  421/      48 : CD 17 0F            		call	dac_fill
(1)  422/      4B : CD 03 0F            		call	dac_me
(1)  423/      4E :                     
(1)  424/      4E :                     	; Check for tick and tempo	
(1)  425/      4E : 06 00               		ld	b,0		; b - Reset current flags (beat|tick)
(1)  426/      50 : 3A 1C 00            		ld	a,(tickCnt)		
(1)  427/      53 : D6 01               		sub	1
(1)  428/      55 : 38 0B               		jr	c,.noticks
(1)  429/      57 : 32 1C 00            		ld	(tickCnt),a
(1)  430/      5A : CD 6B 0D            		call	psg_env		; Process PSG volume and freqs manually
(1)  431/      5D : CD 2A 0C            		call	check_tick	; Check for another tick
(1)  432/      60 : 06 01               		ld 	b,01b		; Set TICK (01b) flag, and clear BEAT
(1)  433/      62 :                     .noticks:
(1)  434/      62 : CD 03 0F            		call	dac_me
(1)  435/      65 : 3A 20 00            		ld	a,(sbeatAcc+1)	; check beat counter (scaled by tempo)
(1)  436/      68 : D6 01               		sub	1
(1)  437/      6A : 38 0E               		jr	c,.nobeats
(1)  438/      6C : 32 20 00            		ld	(sbeatAcc+1),a	; 1/24 beat passed.
(1)  439/      6F : CB C8               		set	1,b		; Set BEAT (10b) flag
(1)  440/      71 : CD 03 0F            		call	dac_me		; painful desync here, play 3 WAV bytes
(1)  441/      74 : CD 03 0F            		call	dac_me
(1)  442/      77 : CD 03 0F            		call	dac_me
(1)  443/      7A :                     .nobeats:
(1)  444/      7A : 78                  		ld	a,b
(1)  445/      7B : B7                  		or	a
(1)  446/      7C : 28 15               		jr	z,.neither
(1)  447/      7E : CD 03 0F            		call	dac_me
(1)  448/      81 : 32 21 00            		ld	(currTickBits),a; Save BEAT/TICK bits
(1)  449/      84 :                     ; 		call	doenvelope	; TODO: not doing this until channels are fully working
(1)  450/      84 : CD 2A 0C            		call	check_tick
(1)  451/      87 : CD EF 01            		call	playonchip	; Set channels to their respective sound chips
(1)  452/      8A : CD 2A 0C            		call	check_tick
(1)  453/      8D : CD 35 07            		call	updtrack	; Update track data
(1)  454/      90 : CD 2A 0C            		call	check_tick
(1)  455/      93 :                     .neither:
(1)  456/      93 : CD 06 0B            		call	mars_scomm
(1)  457/      96 : CD 03 0F            		call	dac_me
(1)  458/      99 :                     
(1)  459/      99 :                     .next_cmd:
(1)  460/      99 : CD 17 0F            		call	dac_fill
(1)  461/      9C : CD 03 0F            		call	dac_me
(1)  462/      9F : 3A 2C 00            		ld	a,(commZWrite)
(1)  463/      A2 : 47                  		ld	b,a
(1)  464/      A3 : 3A 2B 00            		ld	a,(commZRead)
(1)  465/      A6 : B8                  		cp	b
(1)  466/      A7 : CA 42 00            		jp	z,drv_loop
(1)  467/      AA : CD 01 0C            		call	get_cmdbyte
(1)  468/      AD : FE FF               		cp	-1			; Read -1 (Start of command)
(1)  469/      AF : C2 42 00            		jp	nz,drv_loop
(1)  470/      B2 : CD 01 0C            		call	get_cmdbyte		; Read cmd number
(1)  471/      B5 : 87                  		add	a,a
(1)  472/      B6 : 21 C8 00            		ld	hl,.list
(1)  473/      B9 : 16 00               		ld	d,0
(1)  474/      BB : 5F                  		ld	e,a
(1)  475/      BC : 19                  		add	hl,de
(1)  476/      BD : CD 17 0F            		call	dac_fill
(1)  477/      C0 : CD 03 0F            		call	dac_me
(1)  478/      C3 : 7E                  		ld	a,(hl)
(1)  479/      C4 : 23                  		inc	hl
(1)  480/      C5 : 66                  		ld	h,(hl)
(1)  481/      C6 : 6F                  		ld	l,a
(1)  482/      C7 : E9                  		jp	(hl)
(1)  483/      C8 :                     .list:
(1)  484/      C8 : 13 01               		dw .cmnd_trkplay	; $00
(1)  485/      CA : 0E 01               		dw .cmnd_0
(1)  486/      CC : 0E 01               		dw .cmnd_0
(1)  487/      CE : 0E 01               		dw .cmnd_0
(1)  488/      D0 : 0E 01               		dw .cmnd_0		; $04
(1)  489/      D2 : 0E 01               		dw .cmnd_0
(1)  490/      D4 : 0E 01               		dw .cmnd_0
(1)  491/      D6 : 0E 01               		dw .cmnd_0
(1)  492/      D8 : 0E 01               		dw .cmnd_0		; $08
(1)  493/      DA : 0E 01               		dw .cmnd_0
(1)  494/      DC : 0E 01               		dw .cmnd_0
(1)  495/      DE : 0E 01               		dw .cmnd_0
(1)  496/      E0 : 0E 01               		dw .cmnd_0		; $0C
(1)  497/      E2 : 0E 01               		dw .cmnd_0
(1)  498/      E4 : 0E 01               		dw .cmnd_0
(1)  499/      E6 : 0E 01               		dw .cmnd_0
(1)  500/      E8 : 0E 01               		dw .cmnd_0		; $10
(1)  501/      EA : 0E 01               		dw .cmnd_0
(1)  502/      EC : 0E 01               		dw .cmnd_0
(1)  503/      EE : 0E 01               		dw .cmnd_0
(1)  504/      F0 : 0E 01               		dw .cmnd_0		; $14
(1)  505/      F2 : 0E 01               		dw .cmnd_0
(1)  506/      F4 : 0E 01               		dw .cmnd_0
(1)  507/      F6 : 0E 01               		dw .cmnd_0
(1)  508/      F8 : 0E 01               		dw .cmnd_0		; $18
(1)  509/      FA : 0E 01               		dw .cmnd_0
(1)  510/      FC : 0E 01               		dw .cmnd_0
(1)  511/      FE : 0E 01               		dw .cmnd_0
(1)  512/     100 : 0E 01               		dw .cmnd_0		; $1C
(1)  513/     102 : 0E 01               		dw .cmnd_0
(1)  514/     104 : 0E 01               		dw .cmnd_0
(1)  515/     106 : 0E 01               		dw .cmnd_0
(1)  516/     108 : 0E 01               		dw .cmnd_0		; $20
(1)  517/     10A : 6C 01               		dw .cmnd_wav_set	; $21
(1)  518/     10C : D6 01               		dw .cmnd_wav_pitch	; $22	
(1)  519/     10E :                     
(1)  520/     10E :                     ; --------------------------------------------------------
(1)  521/     10E :                     ; Command list
(1)  522/     10E :                     ; --------------------------------------------------------
(1)  523/     10E :                     
(1)  524/     10E :                     .cmnd_0:
(1)  525/     10E : 18 FE               		jr	$
(1)  526/     110 : C3 99 00            		jp	.next_cmd
(1)  527/     113 :                     
(1)  528/     113 :                     ; --------------------------------------------------------
(1)  529/     113 :                     ; $01 - change current wave pitch
(1)  530/     113 :                     ; --------------------------------------------------------
(1)  531/     113 :                     
(1)  532/     113 :                     ; Slot
(1)  533/     113 :                     ; Ticks
(1)  534/     113 :                     ; 24-bit patt data
(1)  535/     113 :                     ; 24-bit block data
(1)  536/     113 :                     
(1)  537/     113 :                     .cmnd_trkplay:
(1)  538/     113 : CD 01 0C            		call	get_cmdbyte		; Get slot position
(1)  539/     116 : FD 21 00 19         		ld	iy,trkBuff
(1)  540/     11A : 11 00 00            		ld	de,0			; Get $0x00
(1)  541/     11D : 57                  		ld	d,a
(1)  542/     11E : FD 19               		add	iy,de
(1)  543/     120 : CD 01 0C            		call	get_cmdbyte		; Get ticks
(1)  544/     123 : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  545/     126 : CD 01 0C            		call	get_cmdbyte		; Pattern data
(1)  546/     129 : FD 77 03            		ld	(iy+trk_romPatt),a
(1)  547/     12C : CD 01 0C            		call	get_cmdbyte
(1)  548/     12F : FD 77 04            		ld	(iy+(trk_romPatt+1)),a
(1)  549/     132 : CD 01 0C            		call	get_cmdbyte
(1)  550/     135 : FD 77 05            		ld	(iy+(trk_romPatt+2)),a
(1)  551/     138 : CD 01 0C            		call	get_cmdbyte		; Block data
(1)  552/     13B : FD 77 00            		ld	(iy+trk_romBlk),a
(1)  553/     13E : CD 01 0C            		call	get_cmdbyte
(1)  554/     141 : FD 77 01            		ld	(iy+(trk_romBlk+1)),a
(1)  555/     144 : CD 01 0C            		call	get_cmdbyte
(1)  556/     147 : FD 77 02            		ld	(iy+(trk_romBlk+2)),a
(1)  557/     14A : CD 01 0C            		call	get_cmdbyte		; Instrument data
(1)  558/     14D : FD 77 06            		ld	(iy+trk_romIns),a
(1)  559/     150 : CD 01 0C            		call	get_cmdbyte
(1)  560/     153 : FD 77 07            		ld	(iy+(trk_romIns+1)),a
(1)  561/     156 : CD 01 0C            		call	get_cmdbyte
(1)  562/     159 : FD 77 08            		ld	(iy+(trk_romIns+2)),a
(1)  563/     15C : 3E 01               		ld	a,1
(1)  564/     15E : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  565/     161 : FD 7E 13            		ld	a,(iy+trk_status)
(1)  566/     164 : F6 C0               		or	0C0h			; Set Enable + REFILL flags
(1)  567/     166 : FD 77 13            		ld	(iy+trk_status),a
(1)  568/     169 : C3 99 00            		jp	.next_cmd
(1)  569/     16C :                     		
(1)  570/     16C :                     ; --------------------------------------------------------
(1)  571/     16C :                     ; $21 - change current wave pitch
(1)  572/     16C :                     ; --------------------------------------------------------
(1)  573/     16C :                     
(1)  574/     16C :                     .cmnd_wav_set:
(1)  575/     16C : FD 21 08 00         		ld	iy,wave_Start
(1)  576/     170 : CD 01 0C            		call	get_cmdbyte		; Start address
(1)  577/     173 : FD 77 00            		ld	(iy),a
(1)  578/     176 : FD 23               		inc	iy
(1)  579/     178 : CD 01 0C            		call	get_cmdbyte
(1)  580/     17B : FD 77 00            		ld	(iy),a
(1)  581/     17E : FD 23               		inc	iy
(1)  582/     180 : CD 01 0C            		call	get_cmdbyte
(1)  583/     183 : FD 77 00            		ld	(iy),a
(1)  584/     186 : FD 23               		inc	iy
(1)  585/     188 : CD 01 0C            		call	get_cmdbyte		; Length
(1)  586/     18B : FD 77 00            		ld	(iy),a
(1)  587/     18E : FD 23               		inc	iy
(1)  588/     190 : CD 01 0C            		call	get_cmdbyte
(1)  589/     193 : FD 77 00            		ld	(iy),a
(1)  590/     196 : FD 23               		inc	iy
(1)  591/     198 : CD 01 0C            		call	get_cmdbyte
(1)  592/     19B : FD 77 00            		ld	(iy),a
(1)  593/     19E : FD 23               		inc	iy
(1)  594/     1A0 : CD 01 0C            		call	get_cmdbyte		; Loop point
(1)  595/     1A3 : FD 77 00            		ld	(iy),a
(1)  596/     1A6 : FD 23               		inc	iy
(1)  597/     1A8 : CD 01 0C            		call	get_cmdbyte
(1)  598/     1AB : FD 77 00            		ld	(iy),a
(1)  599/     1AE : FD 23               		inc	iy
(1)  600/     1B0 : CD 01 0C            		call	get_cmdbyte
(1)  601/     1B3 : FD 77 00            		ld	(iy),a
(1)  602/     1B6 : FD 23               		inc	iy
(1)  603/     1B8 : CD 01 0C            		call	get_cmdbyte		; Pitch
(1)  604/     1BB : FD 77 00            		ld	(iy),a
(1)  605/     1BE : FD 23               		inc	iy
(1)  606/     1C0 : CD 01 0C            		call	get_cmdbyte
(1)  607/     1C3 : FD 77 00            		ld	(iy),a
(1)  608/     1C6 : FD 23               		inc	iy
(1)  609/     1C8 : CD 01 0C            		call	get_cmdbyte		; Flags
(1)  610/     1CB : FD 77 00            		ld	(iy),a
(1)  611/     1CE : FD 23               		inc	iy
(1)  612/     1D0 : CD CF 0E            		call	dac_play
(1)  613/     1D3 : C3 99 00            		jp	.next_cmd
(1)  614/     1D6 :                     
(1)  615/     1D6 :                     ; --------------------------------------------------------
(1)  616/     1D6 :                     ; $22 - change current wave pitch
(1)  617/     1D6 :                     ; --------------------------------------------------------
(1)  618/     1D6 :                     
(1)  619/     1D6 :                     .cmnd_wav_pitch:
(1)  620/     1D6 : D9                  		exx
(1)  621/     1D7 : D5                  		push	de
(1)  622/     1D8 : D9                  		exx
(1)  623/     1D9 : E1                  		pop	hl
(1)  624/     1DA : CD 03 0F            		call	dac_me
(1)  625/     1DD : CD 01 0C            		call	get_cmdbyte	; $00xx
(1)  626/     1E0 : 5F                  		ld	e,a
(1)  627/     1E1 : CD 01 0C            		call	get_cmdbyte	; $xx00
(1)  628/     1E4 : 57                  		ld	d,a
(1)  629/     1E5 : D5                  		push	de
(1)  630/     1E6 : CD 03 0F            		call	dac_me
(1)  631/     1E9 : D9                  		exx
(1)  632/     1EA : D1                  		pop	de
(1)  633/     1EB : D9                  		exx
(1)  634/     1EC : C3 42 00            		jp	drv_loop
(1)  635/     1EF :                     
(1)  636/     1EF :                     ; ====================================================================
(1)  637/     1EF :                     ; ----------------------------------------------------------------
(1)  638/     1EF :                     ; Sound playback code
(1)  639/     1EF :                     ; ----------------------------------------------------------------
(1)  640/     1EF :                     
(1)  641/     1EF :                     ; --------------------------------------------------------
(1)  642/     1EF :                     ; Set and play instruments in their respective channels
(1)  643/     1EF :                     ; --------------------------------------------------------
(1)  644/     1EF :                     
(1)  645/     1EF :                     playonchip
(1)  646/     1EF : CD 17 0F            		call	dac_fill
(1)  647/     1F2 : CD 03 0F            		call	dac_me
(1)  648/     1F5 :                     		
(1)  649/     1F5 :                     	; Play new notes
(1)  650/     1F5 : 0E 02               		ld	c,MAX_TRKS
(1)  651/     1F7 : 21 00 1D            		ld	hl,insDataC
(1)  652/     1FA : 22 18 00            		ld	(currInsData),hl
(1)  653/     1FD : FD 21 20 19         		ld	iy,trkBuff+20h		; Point to channels
(1)  654/     201 :                     .nxt_track:
(1)  655/     201 : 06 12               		ld	b,MAX_TRKCHN
(1)  656/     203 : FD E5               		push	iy
(1)  657/     205 :                     .nxt_chnl:
(1)  658/     205 : C5                  		push	bc
(1)  659/     206 : FD 7E 07            		ld	a,(iy+chnl_Status)
(1)  660/     209 : B7                  		or	a
(1)  661/     20A : C4 30 02            		call	nz,.do_chnl
(1)  662/     20D : 00                  		nop
(1)  663/     20E : 00                  		nop
(1)  664/     20F : CD 03 0F            		call	dac_me
(1)  665/     212 : C1                  		pop	bc
(1)  666/     213 : 11 08 00            		ld	de,8
(1)  667/     216 : FD 19               		add	iy,de
(1)  668/     218 : 10 EB               		djnz	.nxt_chnl
(1)  669/     21A : FD E1               		pop	iy
(1)  670/     21C : 11 00 01            		ld	de,100h
(1)  671/     21F : FD 19               		add	iy,de
(1)  672/     221 :                     
(1)  673/     221 : 11 80 00            		ld	de,80h
(1)  674/     224 : 2A 18 00            		ld	hl,(currInsData)
(1)  675/     227 : 19                  		add	hl,de
(1)  676/     228 : 22 18 00            		ld	(currInsData),hl
(1)  677/     22B : 0D                  		dec	c
(1)  678/     22C : C2 01 02            		jp	nz,.nxt_track
(1)  679/     22F : C9                  		ret
(1)  680/     230 :                     
(1)  681/     230 :                     ; ----------------------------------------
(1)  682/     230 :                     ; Channel wants to update
(1)  683/     230 :                     ; ----------------------------------------
(1)  684/     230 :                     
(1)  685/     230 :                     .do_chnl:
(1)  686/     230 : CD 17 0F            		call	dac_fill
(1)  687/     233 : CD 03 0F            		call	dac_me
(1)  688/     236 : FD CB 07 4E         		bit	1,(iy+chnl_Status)		; Update instrument first
(1)  689/     23A : C4 9B 02            		call	nz,.req_ins
(1)  690/     23D : FD CB 07 56         		bit	2,(iy+chnl_Status)
(1)  691/     241 : C4 99 03            		call	nz,.req_vol
(1)  692/     244 : CD 03 0F            		call	dac_me
(1)  693/     247 : FD CB 07 5E         		bit	3,(iy+chnl_Status)
(1)  694/     24B : C4 61 02            		call	nz,.req_eff
(1)  695/     24E : FD CB 07 46         		bit	0,(iy+chnl_Status)
(1)  696/     252 : C4 76 04            		call	nz,.req_note
(1)  697/     255 : CD 03 0F            		call	dac_me
(1)  698/     258 : FD 7E 07            		ld	a,(iy+chnl_Status)		; clear update flags
(1)  699/     25B : E6 F0               		and	11110000b
(1)  700/     25D : FD 77 07            		ld	(iy+chnl_Status),a
(1)  701/     260 : C9                  		ret
(1)  702/     261 :                     		
(1)  703/     261 :                     ; ----------------------------------------
(1)  704/     261 :                     ; Set new instrument
(1)  705/     261 :                     ; ----------------------------------------
(1)  706/     261 :                     
(1)  707/     261 :                     .req_eff:
(1)  708/     261 : CD 97 06            		call	.get_instype
(1)  709/     264 : FE FF               		cp	-1
(1)  710/     266 : C8                  		ret	z
(1)  711/     267 : FE 00               		cp	0
(1)  712/     269 : C8                  		ret	z
(1)  713/     26A : FE 01               		cp	1
(1)  714/     26C : C8                  		ret	z
(1)  715/     26D : FE 05               		cp	5
(1)  716/     26F : C8                  		ret	z
(1)  717/     270 :                     
(1)  718/     270 :                     	; TODO: a list
(1)  719/     270 : FD 7E 05            		ld	a,(iy+chnl_EffId)	; Eff X?
(1)  720/     273 : FE 18               		cp	24
(1)  721/     275 : CA 79 02            		jp	z,.eff_X
(1)  722/     278 : C9                  		ret
(1)  723/     279 :                     .eff_X:
(1)  724/     279 : CD BB 06            		call	.srch_fm
(1)  725/     27C : E5                  		push	hl
(1)  726/     27D : DD E1               		pop	ix
(1)  727/     27F : FD 7E 06            		ld	a,(iy+chnl_EffArg)
(1)  728/     282 : 07                  		rlca
(1)  729/     283 : 07                  		rlca
(1)  730/     284 : E6 03               		and	00000011b
(1)  731/     286 : 11 97 02            		ld	de,.fmpan_list
(1)  732/     289 : 83                  		add 	a,e
(1)  733/     28A : 5F                  		ld	e,a
(1)  734/     28B : DD 7E 07            		ld	a,(ix+7)
(1)  735/     28E : E6 3F               		and	00111111b
(1)  736/     290 : 47                  		ld	b,a
(1)  737/     291 : 1A                  		ld	a,(de)
(1)  738/     292 : B0                  		or	b
(1)  739/     293 : DD 77 07            		ld	(ix+7),a
(1)  740/     296 : C9                  		ret
(1)  741/     297 :                     
(1)  742/     297 :                     .fmpan_list:
(1)  743/     297 : 80                  		db 080h		; 000h
(1)  744/     298 : 80                  		db 080h		; 040h
(1)  745/     299 : C0                  		db 0C0h		; 080h
(1)  746/     29A : 40                  		db 040h		; 0C0h
(1)  747/     29B :                     		
(1)  748/     29B :                     ; ----------------------------------------
(1)  749/     29B :                     ; Set new instrument
(1)  750/     29B :                     ; ----------------------------------------
(1)  751/     29B :                     
(1)  752/     29B :                     .req_ins:
(1)  753/     29B : CD 97 06            		call	.get_instype
(1)  754/     29E : FE FF               		cp	-1		; Null
(1)  755/     2A0 : C8                  		ret	z
(1)  756/     2A1 : FE 00               		cp	0		; PSG normal
(1)  757/     2A3 : 28 14               		jr	z,.ins_psg
(1)  758/     2A5 : FE 01               		cp	1		; PSG noise
(1)  759/     2A7 : 28 21               		jr	z,.ins_ns
(1)  760/     2A9 : FE 02               		cp	2		; FM normal
(1)  761/     2AB : 28 63               		jr	z,.fm_ins
(1)  762/     2AD : FE 03               		cp	3		; FM special
(1)  763/     2AF : C8                  		ret	z
(1)  764/     2B0 : FE 04               		cp	4		; DAC
(1)  765/     2B2 : C8                  		ret	z
(1)  766/     2B3 : FE 05               		cp	5		; PWM
(1)  767/     2B5 : CA 6E 03            		jp	z,.pwm_ins
(1)  768/     2B8 : C9                  		ret
(1)  769/     2B9 :                     
(1)  770/     2B9 :                     ; PSG instrument
(1)  771/     2B9 :                     .ins_psg:
(1)  772/     2B9 : E5                  		push	hl
(1)  773/     2BA : CD 03 0F            		call	dac_me
(1)  774/     2BD : CD B3 06            		call	.srch_psg	; Type 0: PSG
(1)  775/     2C0 : D1                  		pop	de
(1)  776/     2C1 : FE FF               		cp	-1
(1)  777/     2C3 : C8                  		ret	z
(1)  778/     2C4 : 1A                  		ld	a,(de)
(1)  779/     2C5 : 4F                  		ld	c,a
(1)  780/     2C6 : 13                  		inc	de
(1)  781/     2C7 : 13                  		inc	de
(1)  782/     2C8 : 18 0C               		jr	.cont_psg
(1)  783/     2CA :                     .ins_ns:
(1)  784/     2CA : E5                  		push	hl
(1)  785/     2CB : CD AB 06            		call	.srch_psgn	; Type 1: PSG Noise
(1)  786/     2CE : D1                  		pop	de
(1)  787/     2CF : FE FF               		cp	-1
(1)  788/     2D1 : C8                  		ret	z
(1)  789/     2D2 : 7E                  		ld	a,(hl)
(1)  790/     2D3 : 4F                  		ld	c,a
(1)  791/     2D4 : 13                  		inc	de
(1)  792/     2D5 : 13                  		inc	de
(1)  793/     2D6 :                     .cont_psg:
(1)  794/     2D6 : 23                  		inc	hl
(1)  795/     2D7 : 23                  		inc 	hl
(1)  796/     2D8 : 23                  		inc	hl
(1)  797/     2D9 : CD 03 0F            		call	dac_me
(1)  798/     2DC : 1A                  		ld	a,(de)
(1)  799/     2DD : 47                  		ld	b,a
(1)  800/     2DE : 13                  		inc	de
(1)  801/     2DF : 1A                  		ld	a,(de)
(1)  802/     2E0 : 13                  		inc	de
(1)  803/     2E1 : D5                  		push	de
(1)  804/     2E2 : 57                  		ld	d,a
(1)  805/     2E3 : 58                  		ld	e,b
(1)  806/     2E4 :                     	rept 5				; copypaste to psduochnl
(1)  807/     2E4 :                     		ld	a,(de)	
(1)  808/     2E4 :                      		ld	(hl),a
(1)  809/     2E4 :                      		inc	de
(1)  810/     2E4 :                     		inc	hl
(1)  811/     2E4 :                     		call	dac_me
(1)  812/     2E4 :                     		nop
(1)  813/     2E4 :                     	endm
(1)  807/     2E4 : 1A                  		ld	a,(de)	
(1)  808/     2E5 : 77                   		ld	(hl),a
(1)  809/     2E6 : 13                   		inc	de
(1)  810/     2E7 : 23                  		inc	hl
(1)  811/     2E8 : CD 03 0F            		call	dac_me
(1)  812/     2EB : 00                  		nop
(1)  807/     2EC : 1A                  		ld	a,(de)	
(1)  808/     2ED : 77                   		ld	(hl),a
(1)  809/     2EE : 13                   		inc	de
(1)  810/     2EF : 23                  		inc	hl
(1)  811/     2F0 : CD 03 0F            		call	dac_me
(1)  812/     2F3 : 00                  		nop
(1)  807/     2F4 : 1A                  		ld	a,(de)	
(1)  808/     2F5 : 77                   		ld	(hl),a
(1)  809/     2F6 : 13                   		inc	de
(1)  810/     2F7 : 23                  		inc	hl
(1)  811/     2F8 : CD 03 0F            		call	dac_me
(1)  812/     2FB : 00                  		nop
(1)  807/     2FC : 1A                  		ld	a,(de)	
(1)  808/     2FD : 77                   		ld	(hl),a
(1)  809/     2FE : 13                   		inc	de
(1)  810/     2FF : 23                  		inc	hl
(1)  811/     300 : CD 03 0F            		call	dac_me
(1)  812/     303 : 00                  		nop
(1)  807/     304 : 1A                  		ld	a,(de)	
(1)  808/     305 : 77                   		ld	(hl),a
(1)  809/     306 : 13                   		inc	de
(1)  810/     307 : 23                  		inc	hl
(1)  811/     308 : CD 03 0F            		call	dac_me
(1)  812/     30B : 00                  		nop
(1)  814/     30C : D1                  		pop	de
(1)  815/     30D : 1A                  		ld	a,(de)
(1)  816/     30E : 77                  		ld	(hl),a
(1)  817/     30F : C9                  		ret
(1)  818/     310 :                     ; Type 2
(1)  819/     310 :                     .fm_ins:
(1)  820/     310 : E5                  		push	hl
(1)  821/     311 : CD BB 06            		call	.srch_fm
(1)  822/     314 : FE FF               		cp	-1
(1)  823/     316 : C8                  		ret	z
(1)  824/     317 : E5                  		push	hl
(1)  825/     318 : DD E1               		pop	ix
(1)  826/     31A : E1                  		pop	hl
(1)  827/     31B : CD 03 0F            		call	dac_me
(1)  828/     31E : 23                  		inc	hl
(1)  829/     31F : 7E                  		ld	a,(hl)
(1)  830/     320 : DD 77 05            		ld	(ix+5),a
(1)  831/     323 : 23                  		inc	hl
(1)  832/     324 : 7E                  		ld	a,(hl)
(1)  833/     325 : 23                  		inc	hl
(1)  834/     326 : 66                  		ld	h,(hl)
(1)  835/     327 : 6F                  		ld	l,a
(1)  836/     328 : DD 75 03            		ld	(ix+3),l
(1)  837/     32B : DD 74 04            		ld	(ix+4),h
(1)  838/     32E : DD 7E 00            		ld	a,(ix)		; Prepare first FM reg
(1)  839/     331 : E6 03               		and	11b
(1)  840/     333 : F6 30               		or	30h
(1)  841/     335 : 57                  		ld	d,a
(1)  842/     336 : 06 1C               		ld	b,4*7
(1)  843/     338 :                     .setlv:
(1)  844/     338 : CD 03 0F            		call	dac_me
(1)  845/     33B : 5E                  		ld	e,(hl)
(1)  846/     33C : CD B2 0E            		call	fm_autoset
(1)  847/     33F : 14                  		inc 	d
(1)  848/     340 : 14                  		inc 	d
(1)  849/     341 : 14                  		inc 	d
(1)  850/     342 : 14                  		inc 	d
(1)  851/     343 : 23                  		inc	hl
(1)  852/     344 : 10 F2               		djnz	.setlv
(1)  853/     346 :                     
(1)  854/     346 : 7A                  		ld	a,d
(1)  855/     347 : E6 03               		and	11b
(1)  856/     349 : F6 B0               		or	0B0h
(1)  857/     34B : 57                  		ld	d,a
(1)  858/     34C : 5E                  		ld	e,(hl)			; 0B0h
(1)  859/     34D : DD 73 06            		ld	(ix+6),e
(1)  860/     350 : CD B2 0E            		call	fm_autoset
(1)  861/     353 : 23                  		inc 	hl
(1)  862/     354 : 14                  		inc	d
(1)  863/     355 : 14                  		inc	d
(1)  864/     356 : 14                  		inc	d
(1)  865/     357 : 14                  		inc	d
(1)  866/     358 : CD 03 0F            		call	dac_me
(1)  867/     35B : DD 7E 07            		ld	a,(ix+7)		; 0B4h
(1)  868/     35E : 46                  		ld	b,(hl)
(1)  869/     35F : B0                  		or	b
(1)  870/     360 : DD 77 07            		ld	(ix+7),a
(1)  871/     363 : 5F                  		ld	e,a
(1)  872/     364 : CD B2 0E            		call	fm_autoset
(1)  873/     367 : 23                  		inc	hl			; TODO: FM3 enable bit
(1)  874/     368 : 23                  		inc	hl
(1)  875/     369 : 7E                  		ld	a,(hl)			; Keys (xxxx0000b)
(1)  876/     36A : DD 77 08            		ld	(ix+8),a
(1)  877/     36D : C9                  		ret
(1)  878/     36E :                     
(1)  879/     36E :                     ; Type 5
(1)  880/     36E :                     .pwm_ins:
(1)  881/     36E : E5                  		push	hl
(1)  882/     36F : CD D3 06            		call	.srch_pwm
(1)  883/     372 : FE FF               		cp	-1
(1)  884/     374 : C8                  		ret	z
(1)  885/     375 : E5                  		push	hl
(1)  886/     376 : DD E1               		pop	ix
(1)  887/     378 : E1                  		pop	hl
(1)  888/     379 :                     		
(1)  889/     379 : 23                  		inc	hl
(1)  890/     37A : 23                  		inc	hl
(1)  891/     37B : CD 03 0F            		call	dac_me
(1)  892/     37E : 7E                  		ld	a,(hl)
(1)  893/     37F : 23                  		inc	hl
(1)  894/     380 : 66                  		ld	h,(hl)
(1)  895/     381 : 6F                  		ld	l,a
(1)  896/     382 : DD E5               		push	ix
(1)  897/     384 : D1                  		pop	de
(1)  898/     385 : 13                  		inc	de
(1)  899/     386 : 13                  		inc	de
(1)  900/     387 : 13                  		inc	de
(1)  901/     388 : 06 0C               		ld	b,12
(1)  902/     38A :                     	; Copy-paste start/end/loop
(1)  903/     38A :                     .copypste_p:
(1)  904/     38A : 7E                  		ld	a,(hl)
(1)  905/     38B : 12                  		ld	(de),a
(1)  906/     38C : 23                  		inc	hl
(1)  907/     38D : 13                  		inc	de
(1)  908/     38E : 00                  		nop
(1)  909/     38F : CD 03 0F            		call	dac_me
(1)  910/     392 : 10 F6               		djnz	.copypste_p
(1)  911/     394 : 7E                  		ld	a,(hl)
(1)  912/     395 : DD 77 10            		ld	(ix+16),a
(1)  913/     398 :                     ; 		jr	$
(1)  914/     398 : C9                  		ret
(1)  915/     399 :                     
(1)  916/     399 :                     ; ----------------------------------------
(1)  917/     399 :                     ; Volume request
(1)  918/     399 :                     ; ----------------------------------------
(1)  919/     399 :                     
(1)  920/     399 :                     .req_vol:
(1)  921/     399 : CD 97 06            		call	.get_instype
(1)  922/     39C : FE FF               		cp	-1
(1)  923/     39E : C8                  		ret	z
(1)  924/     39F : FE 02               		cp	2
(1)  925/     3A1 : CA CF 03            		jp	z,.vol_fm
(1)  926/     3A4 : FE 03               		cp	3
(1)  927/     3A6 : C8                  		ret	z
(1)  928/     3A7 : FE 04               		cp	4
(1)  929/     3A9 : C8                  		ret	z
(1)  930/     3AA : FE 05               		cp	5
(1)  931/     3AC : C8                  		ret	z
(1)  932/     3AD :                     	
(1)  933/     3AD :                     	; PSG volume
(1)  934/     3AD : FE 01               		cp	1
(1)  935/     3AF : 20 05               		jr	nz,.notnsev
(1)  936/     3B1 : CD AB 06            		call	.srch_psgn
(1)  937/     3B4 : 18 03               		jr	.pvcont
(1)  938/     3B6 :                     .notnsev:
(1)  939/     3B6 : CD B3 06            		call	.srch_psg	; Type 0: PSG
(1)  940/     3B9 :                     .pvcont:
(1)  941/     3B9 : FE FF               		cp	-1
(1)  942/     3BB : C8                  		ret	z
(1)  943/     3BC : 23                  		inc	hl
(1)  944/     3BD : 23                  		inc 	hl
(1)  945/     3BE : 23                  		inc 	hl		; Point to Attack level
(1)  946/     3BF : FD 7E 04            		ld	a,(iy+chnl_Vol)
(1)  947/     3C2 : D6 40               		sub	a,40h
(1)  948/     3C4 : 87                  		add	a,a
(1)  949/     3C5 : CD 03 0F            		call	dac_me
(1)  950/     3C8 : 47                  		ld	b,a
(1)  951/     3C9 : 7E                  		ld	a,(hl)
(1)  952/     3CA : 90                  		sub	b
(1)  953/     3CB : 77                  		ld	(hl),a
(1)  954/     3CC : 23                  		inc	hl
(1)  955/     3CD : 23                  		inc	hl
(1)  956/     3CE : C9                  		ret
(1)  957/     3CF :                     		
(1)  958/     3CF :                     .vol_fm:
(1)  959/     3CF : CD BB 06            		call	.srch_fm
(1)  960/     3D2 : FE FF               		cp	-1
(1)  961/     3D4 : C8                  		ret	z
(1)  962/     3D5 : E5                  		push	hl
(1)  963/     3D6 : DD E1               		pop	ix
(1)  964/     3D8 : 23                  		inc	hl
(1)  965/     3D9 : 23                  		inc	hl
(1)  966/     3DA : 23                  		inc	hl
(1)  967/     3DB : CD 03 0F            		call	dac_me
(1)  968/     3DE : 7E                  		ld	a,(hl)
(1)  969/     3DF : 23                  		inc	hl
(1)  970/     3E0 : 66                  		ld	h,(hl)
(1)  971/     3E1 : 6F                  		ld	l,a
(1)  972/     3E2 : 11 04 00            		ld	de,4
(1)  973/     3E5 : 19                  		add	hl,de		; Point to 40h's
(1)  974/     3E6 :                     
(1)  975/     3E6 :                     	; copy-pasted from PulseMini
(1)  976/     3E6 :                     	; b - 0B0h
(1)  977/     3E6 :                     	; c - Volume
(1)  978/     3E6 : CD 17 0F            		call	dac_fill
(1)  979/     3E9 : CD 03 0F            		call	dac_me
(1)  980/     3EC : FD 7E 04            		ld	a,(iy+chnl_Vol)
(1)  981/     3EF : D6 40               		sub	a,40h
(1)  982/     3F1 : ED 44               		neg	a
(1)  983/     3F3 : 4F                  		ld	c,a
(1)  984/     3F4 : DD 7E 06            		ld	a,(ix+6)
(1)  985/     3F7 : E6 07               		and	111b
(1)  986/     3F9 : 47                  		ld	b,a
(1)  987/     3FA : 16 40               		ld	d,40h
(1)  988/     3FC : DD 7E 00            		ld	a,(ix)
(1)  989/     3FF : E6 03               		and	11b
(1)  990/     401 : B2                  		or	d
(1)  991/     402 : 57                  		ld	d,a
(1)  992/     403 : CD 03 0F            		call	dac_me
(1)  993/     406 : 5E                  		ld	e,(hl)
(1)  994/     407 : 23                  		inc 	hl
(1)  995/     408 : 78                  		ld	a,b
(1)  996/     409 : FE 07               		cp	7
(1)  997/     40B : C2 17 04            		jp	nz,.tlv_lv1
(1)  998/     40E : 7B                  		ld	a,e
(1)  999/     40F : 81                  		add 	a,c
(1) 1000/     410 : 5F                  		ld	e,a
(1) 1001/     411 : B7                  		or	a
(1) 1002/     412 : F2 17 04            		jp	p,.tlv_lv1
(1) 1003/     415 : 1E 7F               		ld	e,7Fh
(1) 1004/     417 :                     .tlv_lv1:
(1) 1005/     417 : CD B2 0E            		call	fm_autoset
(1) 1006/     41A : 14                  		inc 	d
(1) 1007/     41B : 14                  		inc 	d
(1) 1008/     41C : 14                  		inc 	d
(1) 1009/     41D : 14                  		inc 	d
(1) 1010/     41E : CD 03 0F            		call	dac_me
(1) 1011/     421 : 5E                  		ld	e,(hl)
(1) 1012/     422 : 78                  		ld	a,b
(1) 1013/     423 : FE 07               		cp	7
(1) 1014/     425 : CA 35 04            		jp	z,.tlv_lv2_ok
(1) 1015/     428 : FE 06               		cp	6
(1) 1016/     42A : CA 35 04            		jp	z,.tlv_lv2_ok
(1) 1017/     42D : FE 05               		cp	5
(1) 1018/     42F : C2 3E 04            		jp	nz,.tlv_lv2
(1) 1019/     432 : CD 03 0F            		call	dac_me
(1) 1020/     435 :                     .tlv_lv2_ok:
(1) 1021/     435 : 7B                  		ld	a,e
(1) 1022/     436 : 81                  		add 	a,c
(1) 1023/     437 : 5F                  		ld	e,a
(1) 1024/     438 : B7                  		or	a
(1) 1025/     439 : F2 3E 04            		jp	p,.tlv_lv2
(1) 1026/     43C : 1E 7F               		ld	e,7Fh
(1) 1027/     43E :                     .tlv_lv2:
(1) 1028/     43E : CD B2 0E            		call	fm_autoset
(1) 1029/     441 : 23                  		inc 	hl
(1) 1030/     442 : 14                  		inc 	d
(1) 1031/     443 : 14                  		inc 	d
(1) 1032/     444 : 14                  		inc 	d
(1) 1033/     445 : 14                  		inc 	d
(1) 1034/     446 : CD 03 0F            		call	dac_me
(1) 1035/     449 : 5E                  		ld	e,(hl)
(1) 1036/     44A : 78                  		ld	a,b
(1) 1037/     44B : E6 04               		and	100b
(1) 1038/     44D : B7                  		or	a
(1) 1039/     44E : CA 5D 04            		jp	z,.tlv_lv3
(1) 1040/     451 : 7B                  		ld	a,e
(1) 1041/     452 : 81                  		add 	a,c
(1) 1042/     453 : 5F                  		ld	e,a
(1) 1043/     454 : B7                  		or	a
(1) 1044/     455 : F2 5D 04            		jp	p,.tlv_lv3
(1) 1045/     458 : CD 03 0F            		call	dac_me
(1) 1046/     45B : 3E 7F               		ld	a,7Fh
(1) 1047/     45D :                     .tlv_lv3:
(1) 1048/     45D : CD B2 0E            		call	fm_autoset
(1) 1049/     460 : 23                  		inc 	hl
(1) 1050/     461 : 14                  		inc 	d
(1) 1051/     462 : 14                  		inc 	d
(1) 1052/     463 : 14                  		inc 	d
(1) 1053/     464 : 14                  		inc 	d
(1) 1054/     465 : CD 03 0F            		call	dac_me
(1) 1055/     468 : 7E                  		ld	a,(hl)
(1) 1056/     469 : 81                  		add 	a,c
(1) 1057/     46A : B7                  		or	a
(1) 1058/     46B : F2 70 04            		jp	p,.tlv_lv4
(1) 1059/     46E : 3E 7F               		ld	a,7Fh
(1) 1060/     470 :                     .tlv_lv4:
(1) 1061/     470 : 5F                  		ld	e,a
(1) 1062/     471 : 23                  		inc 	hl
(1) 1063/     472 : CD B2 0E            		call	fm_autoset
(1) 1064/     475 : C9                  		ret 
(1) 1065/     476 :                     
(1) 1066/     476 :                     ; ----------------------------------------
(1) 1067/     476 :                     ; Note request
(1) 1068/     476 :                     ; ----------------------------------------
(1) 1069/     476 :                     
(1) 1070/     476 :                     .req_note:
(1) 1071/     476 : CD 97 06            		call	.get_instype
(1) 1072/     479 : FE FF               		cp	-1
(1) 1073/     47B : C8                  		ret	z
(1) 1074/     47C : FE 02               		cp	2
(1) 1075/     47E : CA 8E 05            		jp	z,.note_fm
(1) 1076/     481 : FE 03               		cp	3
(1) 1077/     483 : CA 56 06            		jp	z,.note_fm3
(1) 1078/     486 : FE 04               		cp	4
(1) 1079/     488 : CA 56 06            		jp	z,.note_fm6
(1) 1080/     48B : FE 05               		cp	5
(1) 1081/     48D : CA 57 06            		jp	z,.note_pwm
(1) 1082/     490 : CD 03 0F            		call	dac_me
(1) 1083/     493 :                     		
(1) 1084/     493 :                     	; PSG mode 0 and 1
(1) 1085/     493 : FE 01               		cp	1
(1) 1086/     495 : 20 05               		jr	nz,.notnse
(1) 1087/     497 : CD AB 06            		call	.srch_psgn
(1) 1088/     49A : 18 03               		jr	.pncont
(1) 1089/     49C :                     .notnse:
(1) 1090/     49C : CD B3 06            		call	.srch_psg	; Type 0: PSG
(1) 1091/     49F :                     .pncont:
(1) 1092/     49F : FE FF               		cp	-1
(1) 1093/     4A1 : C8                  		ret	z
(1) 1094/     4A2 : 7E                  		ld	a,(hl)		; Get pseudo channel slot
(1) 1095/     4A3 : FE FF               		cp	-1
(1) 1096/     4A5 : C8                  		ret	z
(1) 1097/     4A6 : E5                  		push	hl		; save this hl
(1) 1098/     4A7 : E6 03               		and	11b
(1) 1099/     4A9 : CD 03 0F            		call	dac_me
(1) 1100/     4AC : DD 21 00 13         		ld	ix,psgcom
(1) 1101/     4B0 : 11 00 00            		ld	de,0
(1) 1102/     4B3 : 5F                  		ld	e,a
(1) 1103/     4B4 : DD 19               		add	ix,de
(1) 1104/     4B6 : 11 00 00            		ld	de,0		; Read freq
(1) 1105/     4B9 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 1106/     4BC : FE FE               		cp	-2
(1) 1107/     4BE : CA 5E 05            		jp	z,.pstop
(1) 1108/     4C1 : FE FF               		cp	-1
(1) 1109/     4C3 : CA 76 05            		jp	z,.poff
(1) 1110/     4C6 : 21 FB 10            		ld	hl,psgFreq_List
(1) 1111/     4C9 : 87                  		add	a,a
(1) 1112/     4CA : 5F                  		ld	e,a
(1) 1113/     4CB : 19                  		add	hl,de
(1) 1114/     4CC : CD 03 0F            		call	dac_me
(1) 1115/     4CF : 7E                  		ld	a,(hl)
(1) 1116/     4D0 : E6 0F               		and	0Fh
(1) 1117/     4D2 : DD 77 1C            		ld	(ix+DTL),a
(1) 1118/     4D5 : 7E                  		ld	a,(hl)
(1) 1119/     4D6 : CB 2F               		sra	a
(1) 1120/     4D8 : CB 2F               		sra	a
(1) 1121/     4DA : CB 2F               		sra	a
(1) 1122/     4DC : CB 2F               		sra	a
(1) 1123/     4DE : E6 0F               		and	0Fh
(1) 1124/     4E0 : CD 03 0F            		call	dac_me
(1) 1125/     4E3 : 47                  		ld	b,a
(1) 1126/     4E4 : 23                  		inc	hl
(1) 1127/     4E5 : 7E                  		ld	a,(hl)
(1) 1128/     4E6 : CB 27               		sla	a
(1) 1129/     4E8 : CB 27               		sla	a
(1) 1130/     4EA : CB 27               		sla	a
(1) 1131/     4EC : CB 27               		sla	a
(1) 1132/     4EE : E6 F0               		and	0F0h
(1) 1133/     4F0 : B0                  		or	b
(1) 1134/     4F1 : CD 03 0F            		call	dac_me
(1) 1135/     4F4 : DD 77 20            		ld	(ix+DTH),a
(1) 1136/     4F7 : E1                  		pop	hl		; get hl back
(1) 1137/     4F8 : 46                  		ld	b,(hl)
(1) 1138/     4F9 : 23                  		inc	hl
(1) 1139/     4FA : 23                  		inc	hl
(1) 1140/     4FB : 23                  		inc 	hl		; Point to our PSG ins data
(1) 1141/     4FC : 7E                  		ld	a,(hl)
(1) 1142/     4FD : 23                  		inc	hl
(1) 1143/     4FE : DD 77 24            		ld	(ix+ALV),a	; attack level
(1) 1144/     501 : 7E                  		ld	a,(hl)
(1) 1145/     502 : 23                  		inc	hl
(1) 1146/     503 : CD 03 0F            		call	dac_me
(1) 1147/     506 : DD 77 08            		ld	(ix+ATK),a	; attack rate
(1) 1148/     509 : 7E                  		ld	a,(hl)
(1) 1149/     50A : 23                  		inc	hl
(1) 1150/     50B : DD 77 10            		ld	(ix+SLV),a	; sustain
(1) 1151/     50E : 7E                  		ld	a,(hl)
(1) 1152/     50F : 23                  		inc	hl
(1) 1153/     510 : DD 77 0C            		ld	(ix+DKY),a	; decay rate
(1) 1154/     513 : 7E                  		ld	a,(hl)
(1) 1155/     514 : 23                  		inc	hl
(1) 1156/     515 : DD 77 14            		ld	(ix+RRT),a	; release rate
(1) 1157/     518 : 78                  		ld	a,b
(1) 1158/     519 : E6 83               		and	10000011b
(1) 1159/     51B : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 1160/     51E : CD 03 0F            		call	dac_me
(1) 1161/     521 : E6 03               		and	11b
(1) 1162/     523 : FE 02               		cp	2
(1) 1163/     525 : CA 4E 05            		jp	z,.psgchnl3
(1) 1164/     528 : FE 03               		cp	3
(1) 1165/     52A : C2 59 05            		jp	nz,.normlpsg
(1) 1166/     52D : 11 2F 00            		ld	de,psgHatMode	; if chnl uses NOISE
(1) 1167/     530 : 7E                  		ld	a,(hl)
(1) 1168/     531 : FD E5               		push	iy
(1) 1169/     533 : E1                  		pop	hl
(1) 1170/     534 : 4F                  		ld	c,a
(1) 1171/     535 : 12                  		ld	(de),a		; NOISE mode
(1) 1172/     536 : 13                  		inc	de
(1) 1173/     537 : 7D                  		ld	a,l
(1) 1174/     538 : 12                  		ld	(de),a
(1) 1175/     539 : CD 03 0F            		call	dac_me
(1) 1176/     53C : 13                  		inc 	de
(1) 1177/     53D : 7C                  		ld	a,h
(1) 1178/     53E : 12                  		ld	(de),a
(1) 1179/     53F : 79                  		ld	a,c		; Auto-silence PSG3
(1) 1180/     540 : E6 03               		and	11b		; is Tone3 is active
(1) 1181/     542 : FE 03               		cp	3
(1) 1182/     544 : C2 59 05            		jp	nz,.normlpsg
(1) 1183/     547 : 3E 04               		ld	a,100b		; Send stop com directly
(1) 1184/     549 : 32 02 13            		ld	(psgcom+2),a	; To PSG3
(1) 1185/     54C : 18 0B               		jr	.normlpsg
(1) 1186/     54E :                     	; if chnl uses PSG3
(1) 1187/     54E :                     .psgchnl3:
(1) 1188/     54E : 3A 2F 00            		ld	a,(psgHatMode)
(1) 1189/     551 : E6 03               		and	11b
(1) 1190/     553 : FE 03               		cp	11b
(1) 1191/     555 : C8                  		ret	z
(1) 1192/     556 : CD 03 0F            		call	dac_me
(1) 1193/     559 :                     .normlpsg:
(1) 1194/     559 : DD 36 00 01         		ld	(ix+COM),001b	; Key on.
(1) 1195/     55D : C9                  		ret
(1) 1196/     55E :                     ; full stop
(1) 1197/     55E :                     .pstop:
(1) 1198/     55E : E1                  		pop	hl
(1) 1199/     55F : 7E                  		ld	a,(hl)		; Unlock this channel
(1) 1200/     560 : E6 7F               		and	07Fh
(1) 1201/     562 : 77                  		ld	(hl),a
(1) 1202/     563 : 23                  		inc 	hl
(1) 1203/     564 : 36 00               		ld	(hl),0
(1) 1204/     566 : CD 03 0F            		call	dac_me
(1) 1205/     569 : 23                  		inc 	hl
(1) 1206/     56A : 36 00               		ld	(hl),0
(1) 1207/     56C : 23                  		inc 	hl
(1) 1208/     56D : DD 36 00 04         		ld	(ix+COM),100b	; Full stop
(1) 1209/     571 : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 1210/     575 : C9                  		ret
(1) 1211/     576 :                     ; key off
(1) 1212/     576 :                     .poff:
(1) 1213/     576 : E1                  		pop	hl
(1) 1214/     577 : 7E                  		ld	a,(hl)		; unlock this channel
(1) 1215/     578 : E6 7F               		and	07Fh
(1) 1216/     57A : 77                  		ld	(hl),a
(1) 1217/     57B : 23                  		inc 	hl
(1) 1218/     57C : 36 00               		ld	(hl),0
(1) 1219/     57E : CD 03 0F            		call	dac_me
(1) 1220/     581 : 23                  		inc 	hl
(1) 1221/     582 : 36 00               		ld	(hl),0
(1) 1222/     584 : 23                  		inc 	hl
(1) 1223/     585 : DD 36 00 02         		ld	(ix+COM),010b	; Key off ===
(1) 1224/     589 : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 1225/     58D : C9                  		ret
(1) 1226/     58E :                     
(1) 1227/     58E :                     ; ----------------------------------------
(1) 1228/     58E :                     ; FM
(1) 1229/     58E :                     ; ----------------------------------------
(1) 1230/     58E :                     
(1) 1231/     58E :                     .note_fm:
(1) 1232/     58E : CD BB 06            		call	.srch_fm
(1) 1233/     591 : FE FF               		cp	-1
(1) 1234/     593 : C8                  		ret	z
(1) 1235/     594 : E5                  		push	hl
(1) 1236/     595 : DD E1               		pop	ix
(1) 1237/     597 : 23                  		inc	hl
(1) 1238/     598 : 23                  		inc	hl
(1) 1239/     599 : 23                  		inc	hl
(1) 1240/     59A : 23                  		inc	hl
(1) 1241/     59B : 23                  		inc	hl
(1) 1242/     59C : CD 17 0F            		call	dac_fill
(1) 1243/     59F : CD 03 0F            		call	dac_me
(1) 1244/     5A2 :                     
(1) 1245/     5A2 : DD 7E 00            		ld	a,(ix)		; Keys off
(1) 1246/     5A5 : E6 87               		and	10000111b
(1) 1247/     5A7 : F6 20               		or	00100000b	; Mark as FM
(1) 1248/     5A9 : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 1249/     5AC : E6 07               		and	111b
(1) 1250/     5AE : 5F                  		ld	e,a
(1) 1251/     5AF : 16 28               		ld	d,28h
(1) 1252/     5B1 : CD B9 0E            		call	fm_send_1
(1) 1253/     5B4 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 1254/     5B7 : FE FF               		cp	-1		; Key off.
(1) 1255/     5B9 : C8                  		ret	z
(1) 1256/     5BA : FE FE               		cp	-2		; TODO: Total level force off
(1) 1257/     5BC : C8                  		ret	z
(1) 1258/     5BD : DD 46 05            		ld	b,(ix+5)
(1) 1259/     5C0 : 80                  		add	a,b
(1) 1260/     5C1 : 06 00               		ld	b,0
(1) 1261/     5C3 :                     	rept 7				; Separate as octave(b) and note(c)
(1) 1262/     5C3 :                     		ld	c,a
(1) 1263/     5C3 :                     		sub	12
(1) 1264/     5C3 :                     		or	a
(1) 1265/     5C3 :                     		jp	m,.getoct
(1) 1266/     5C3 :                     		inc	b
(1) 1267/     5C3 :                     	endm
(1) 1262/     5C3 : 4F                  		ld	c,a
(1) 1263/     5C4 : D6 0C               		sub	12
(1) 1264/     5C6 : B7                  		or	a
(1) 1265/     5C7 : FA FB 05            		jp	m,.getoct
(1) 1266/     5CA : 04                  		inc	b
(1) 1262/     5CB : 4F                  		ld	c,a
(1) 1263/     5CC : D6 0C               		sub	12
(1) 1264/     5CE : B7                  		or	a
(1) 1265/     5CF : FA FB 05            		jp	m,.getoct
(1) 1266/     5D2 : 04                  		inc	b
(1) 1262/     5D3 : 4F                  		ld	c,a
(1) 1263/     5D4 : D6 0C               		sub	12
(1) 1264/     5D6 : B7                  		or	a
(1) 1265/     5D7 : FA FB 05            		jp	m,.getoct
(1) 1266/     5DA : 04                  		inc	b
(1) 1262/     5DB : 4F                  		ld	c,a
(1) 1263/     5DC : D6 0C               		sub	12
(1) 1264/     5DE : B7                  		or	a
(1) 1265/     5DF : FA FB 05            		jp	m,.getoct
(1) 1266/     5E2 : 04                  		inc	b
(1) 1262/     5E3 : 4F                  		ld	c,a
(1) 1263/     5E4 : D6 0C               		sub	12
(1) 1264/     5E6 : B7                  		or	a
(1) 1265/     5E7 : FA FB 05            		jp	m,.getoct
(1) 1266/     5EA : 04                  		inc	b
(1) 1262/     5EB : 4F                  		ld	c,a
(1) 1263/     5EC : D6 0C               		sub	12
(1) 1264/     5EE : B7                  		or	a
(1) 1265/     5EF : FA FB 05            		jp	m,.getoct
(1) 1266/     5F2 : 04                  		inc	b
(1) 1262/     5F3 : 4F                  		ld	c,a
(1) 1263/     5F4 : D6 0C               		sub	12
(1) 1264/     5F6 : B7                  		or	a
(1) 1265/     5F7 : FA FB 05            		jp	m,.getoct
(1) 1266/     5FA : 04                  		inc	b
(1) 1268/     5FB :                     .getoct:
(1) 1269/     5FB : CD 03 0F            		call	dac_me
(1) 1270/     5FE : 11 00 00            		ld	de,0
(1) 1271/     601 : DD 7E 00            		ld	a,(ix)
(1) 1272/     604 : E6 03               		and	11b
(1) 1273/     606 : F6 A4               		or	0A4h
(1) 1274/     608 : 57                  		ld	d,a
(1) 1275/     609 : 79                  		ld	a,c		; c - Note
(1) 1276/     60A : 87                  		add	a,a
(1) 1277/     60B : 4F                  		ld	c,a
(1) 1278/     60C : 78                  		ld	a,b
(1) 1279/     60D : 87                  		add	a,a
(1) 1280/     60E : 87                  		add	a,a
(1) 1281/     60F : 87                  		add	a,a		; a - Octave
(1) 1282/     610 : 06 00               		ld	b,0
(1) 1283/     612 : CD 03 0F            		call	dac_me
(1) 1284/     615 : 21 E3 10            		ld	hl,fmFreq_List
(1) 1285/     618 : 09                  		add	hl,bc
(1) 1286/     619 : 23                  		inc	hl
(1) 1287/     61A : 5F                  		ld	e,a
(1) 1288/     61B : 7E                  		ld	a,(hl)
(1) 1289/     61C : B3                  		or	e
(1) 1290/     61D : 5F                  		ld	e,a
(1) 1291/     61E : DD 77 09            		ld	(ix+9),a
(1) 1292/     621 : CD B2 0E            		call	fm_autoset
(1) 1293/     624 : 15                  		dec	d
(1) 1294/     625 : 15                  		dec	d
(1) 1295/     626 : 15                  		dec	d
(1) 1296/     627 : 15                  		dec	d
(1) 1297/     628 : 2B                  		dec	hl
(1) 1298/     629 : 5E                  		ld	e,(hl)
(1) 1299/     62A : DD 73 0A            		ld	(ix+10),e
(1) 1300/     62D : CD B2 0E            		call	fm_autoset
(1) 1301/     630 : CD 03 0F            		call	dac_me
(1) 1302/     633 : DD 7E 00            		ld	a,(ix)		; 0B4h
(1) 1303/     636 : E6 07               		and	111b
(1) 1304/     638 : 16 B4               		ld	d,0B4h
(1) 1305/     63A : B2                  		or	d
(1) 1306/     63B : 57                  		ld	d,a
(1) 1307/     63C : DD 7E 07            		ld	a,(ix+7)
(1) 1308/     63F : 5F                  		ld	e,a
(1) 1309/     640 : CD B2 0E            		call	fm_autoset
(1) 1310/     643 : CD 03 0F            		call	dac_me
(1) 1311/     646 : DD 7E 00            		ld	a,(ix)		; Keys
(1) 1312/     649 : E6 07               		and	111b
(1) 1313/     64B : DD 5E 08            		ld	e,(ix+8)
(1) 1314/     64E : B3                  		or	e
(1) 1315/     64F : 5F                  		ld	e,a
(1) 1316/     650 : 16 28               		ld	d,28h
(1) 1317/     652 : CD B9 0E            		call	fm_send_1
(1) 1318/     655 : C9                  		ret
(1) 1319/     656 :                     .note_fm3:
(1) 1320/     656 :                     .note_fm6:
(1) 1321/     656 : C9                  		ret
(1) 1322/     657 :                     
(1) 1323/     657 :                     ; ----------------------------------------
(1) 1324/     657 :                     ; PWM
(1) 1325/     657 :                     ; ----------------------------------------
(1) 1326/     657 :                     
(1) 1327/     657 :                     .note_pwm:
(1) 1328/     657 : E5                  		push	hl
(1) 1329/     658 : CD D3 06            		call	.srch_pwm
(1) 1330/     65B : E5                  		push	hl
(1) 1331/     65C : DD E1               		pop	ix
(1) 1332/     65E : E1                  		pop	hl
(1) 1333/     65F : 23                  		inc	hl
(1) 1334/     660 :                     		
(1) 1335/     660 : CD 03 0F            		call	dac_me
(1) 1336/     663 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 1337/     666 : FE FF               		cp	-1
(1) 1338/     668 : 28 24               		jr	z,.pwm_stop
(1) 1339/     66A : FE FE               		cp	-2
(1) 1340/     66C : 28 20               		jr	z,.pwm_stop
(1) 1341/     66E : 6E                  		ld	l,(hl)
(1) 1342/     66F : CD 03 0F            		call	dac_me
(1) 1343/     672 : 85                  		add	a,l
(1) 1344/     673 : 87                  		add	a,a
(1) 1345/     674 : 11 00 00            		ld	de,0
(1) 1346/     677 : 5F                  		ld	e,a
(1) 1347/     678 : 21 F3 0F            		ld	hl,wavFreq_Pwm
(1) 1348/     67B : 19                  		add	hl,de
(1) 1349/     67C : 7E                  		ld	a,(hl)
(1) 1350/     67D : DD 77 12            		ld	(ix+18),a	; NOTE: big endian
(1) 1351/     680 : 23                  		inc	hl
(1) 1352/     681 : 7E                  		ld	a,(hl)
(1) 1353/     682 : DD 77 11            		ld	(ix+17),a
(1) 1354/     685 : DD 7E 00            		ld	a,(ix)		; Tell SH2 we want to play
(1) 1355/     688 : F6 40               		or	01000000b
(1) 1356/     68A : DD 77 00            		ld	(ix),a
(1) 1357/     68D : C9                  		ret
(1) 1358/     68E :                     .pwm_stop:
(1) 1359/     68E : DD 7E 00            		ld	a,(ix)		; Tell SH2 to stop this channel
(1) 1360/     691 : F6 20               		or	00100000b
(1) 1361/     693 : DD 77 00            		ld	(ix),a
(1) 1362/     696 : C9                  		ret
(1) 1363/     697 :                     		
(1) 1364/     697 :                     ; ----------------------------------------
(1) 1365/     697 :                     ; Check the current instrument type
(1) 1366/     697 :                     ; 
(1) 1367/     697 :                     ; Returns:
(1) 1368/     697 :                     ;  a - Type
(1) 1369/     697 :                     ; hl - Instrument data
(1) 1370/     697 :                     ; 
(1) 1371/     697 :                     ; Types:
(1) 1372/     697 :                     ; -1 - Null
(1) 1373/     697 :                     ;  0 - PSG
(1) 1374/     697 :                     ;  1 - PSG Noise
(1) 1375/     697 :                     ;  2 - FM
(1) 1376/     697 :                     ;  3 - FM Special
(1) 1377/     697 :                     ;  4 - FM Sample
(1) 1378/     697 :                     ;  5 - PWM
(1) 1379/     697 :                     ; ----------------------------------------
(1) 1380/     697 :                     
(1) 1381/     697 :                     .get_instype:
(1) 1382/     697 : FD 7E 03            		ld	a,(iy+chnl_Ins)
(1) 1383/     69A : 3D                  		dec	a
(1) 1384/     69B : 87                  		add	a,a
(1) 1385/     69C : 87                  		add	a,a
(1) 1386/     69D : 87                  		add	a,a
(1) 1387/     69E : CD 03 0F            		call	dac_me
(1) 1388/     6A1 : 2A 18 00            		ld	hl,(currInsData)
(1) 1389/     6A4 : 11 00 00            		ld	de,0
(1) 1390/     6A7 : 5F                  		ld	e,a
(1) 1391/     6A8 : 19                  		add	hl,de
(1) 1392/     6A9 : 7E                  		ld	a,(hl)		; check type
(1) 1393/     6AA : C9                  		ret
(1) 1394/     6AB :                     
(1) 1395/     6AB :                     ; ----------------------------------------
(1) 1396/     6AB :                     
(1) 1397/     6AB :                     .srch_psgn:
(1) 1398/     6AB : 11 09 00            		ld	de,9
(1) 1399/     6AE : 21 09 12            		ld	hl,PSGNVTBL
(1) 1400/     6B1 : 18 39               		jr	.srch_chnltbl
(1) 1401/     6B3 :                     .srch_psg:
(1) 1402/     6B3 : 11 09 00            		ld	de,9
(1) 1403/     6B6 : 21 ED 11            		ld	hl,PSGVTBL
(1) 1404/     6B9 : 18 31               		jr	.srch_chnltbl
(1) 1405/     6BB :                     .srch_fm:
(1) 1406/     6BB : 11 11 00            		ld	de,17
(1) 1407/     6BE : 21 13 12            		ld	hl,FMVTBL
(1) 1408/     6C1 : 18 29               		jr	.srch_chnltbl
(1) 1409/     6C3 :                     .srch_fm3:
(1) 1410/     6C3 : 11 11 00            		ld	de,17		; TODO: don't autosearch this
(1) 1411/     6C6 : 21 57 12            		ld	hl,FM3VTBL
(1) 1412/     6C9 : 18 21               		jr	.srch_chnltbl
(1) 1413/     6CB :                     .srch_fm6:
(1) 1414/     6CB : 11 11 00            		ld	de,17		; TODO: same thing
(1) 1415/     6CE : 21 68 12            		ld	hl,FM6VTBL
(1) 1416/     6D1 : 18 19               		jr	.srch_chnltbl
(1) 1417/     6D3 :                     .srch_pwm:
(1) 1418/     6D3 : 11 13 00            		ld	de,19
(1) 1419/     6D6 : 21 7A 12            		ld	hl,PWMVTBL
(1) 1420/     6D9 : 18 11               		jr	.srch_chnltbl
(1) 1421/     6DB :                     		
(1) 1422/     6DB :                     ; ----------------------------------------
(1) 1423/     6DB :                     
(1) 1424/     6DB :                     .psgvoltbl:
(1) 1425/     6DB : F0                  		db 0F0h
(1) 1426/     6DC : F0                  		db 0F0h
(1) 1427/     6DD : E0                  		db 0E0h
(1) 1428/     6DE : D0                  		db 0D0h
(1) 1429/     6DF : C0                  		db 0C0h
(1) 1430/     6E0 : B0                  		db 0B0h
(1) 1431/     6E1 : A0                  		db 0A0h
(1) 1432/     6E2 : 90                  		db 090h
(1) 1433/     6E3 : 80                  		db 080h
(1) 1434/     6E4 : 70                  		db 070h
(1) 1435/     6E5 : 60                  		db 060h
(1) 1436/     6E6 : 50                  		db 050h
(1) 1437/     6E7 : 40                  		db 040h
(1) 1438/     6E8 : 30                  		db 030h
(1) 1439/     6E9 : 20                  		db 020h
(1) 1440/     6EA : 10                  		db 010h
(1) 1441/     6EB : 00                  		db 000h
(1) 1442/     6EC :                     
(1) 1443/     6EC :                     ; ----------------------------------------
(1) 1444/     6EC :                     ; iy - track channel data
(1) 1445/     6EC :                     ; de - Slot incrm
(1) 1446/     6EC :                     ; hl - table
(1) 1447/     6EC :                     ; 
(1) 1448/     6EC :                     ; Returns
(1) 1449/     6EC :                     ; a  - Status: -1: error
(1) 1450/     6EC :                     ;               0: ok
(1) 1451/     6EC :                     ; hl - slot
(1) 1452/     6EC :                     ; ----------------------------------------
(1) 1453/     6EC :                     
(1) 1454/     6EC :                     .srch_chnltbl:
(1) 1455/     6EC : CD 17 0F            		call	dac_fill
(1) 1456/     6EF : 22 32 00            		ld	(currTblSrch),hl	; save base hl
(1) 1457/     6F2 : FD E5               		push	iy
(1) 1458/     6F4 : C1                  		pop	bc
(1) 1459/     6F5 :                     ; first search:
(1) 1460/     6F5 :                     ; check for linked track channel
(1) 1461/     6F5 :                     .l_lp:
(1) 1462/     6F5 : CD 03 0F            		call	dac_me
(1) 1463/     6F8 : 7E                  		ld	a,(hl)
(1) 1464/     6F9 : FE FF               		cp	-1
(1) 1465/     6FB : CA 14 07            		jp	z,.nolnk
(1) 1466/     6FE : 23                  		inc	hl
(1) 1467/     6FF : 23                  		inc	hl
(1) 1468/     700 : 7E                  		ld	a,(hl)
(1) 1469/     701 : 2B                  		dec	hl
(1) 1470/     702 : 2B                  		dec	hl
(1) 1471/     703 : B8                  		cp	b
(1) 1472/     704 : 20 0B               		jr	nz,.ngood
(1) 1473/     706 : CD 03 0F            		call	dac_me
(1) 1474/     709 : 00                  		nop
(1) 1475/     70A : 23                  		inc	hl
(1) 1476/     70B : 7E                  		ld	a,(hl)
(1) 1477/     70C : 2B                  		dec	hl
(1) 1478/     70D : B9                  		cp	c
(1) 1479/     70E : CA 33 07            		jp	z,.setgood
(1) 1480/     711 :                     .ngood:					; if it's ours, use it
(1) 1481/     711 : 19                  		add	hl,de
(1) 1482/     712 : 18 E1               		jr	.l_lp
(1) 1483/     714 :                     
(1) 1484/     714 :                     .nolnk:
(1) 1485/     714 : 2A 32 00            		ld	hl,(currTblSrch)
(1) 1486/     717 :                     
(1) 1487/     717 :                     ; second search:
(1) 1488/     717 :                     ; assign current track channel to a
(1) 1489/     717 :                     ; new sound channel
(1) 1490/     717 :                     .f_lp:
(1) 1491/     717 : 7E                  		ld	a,(hl)
(1) 1492/     718 : FE FF               		cp	-1
(1) 1493/     71A : C8                  		ret	z
(1) 1494/     71B : CD 03 0F            		call	dac_me
(1) 1495/     71E : 7E                  		ld	a,(hl)
(1) 1496/     71F : B7                  		or	a
(1) 1497/     720 : F2 26 07            		jp	p,.newp
(1) 1498/     723 : 19                  		add	hl,de
(1) 1499/     724 : 18 F1               		jr	.f_lp	
(1) 1500/     726 :                     .newp:
(1) 1501/     726 : 7E                  		ld	a,(hl)		; lock this channel
(1) 1502/     727 : F6 80               		or	80h
(1) 1503/     729 : 77                  		ld	(hl),a
(1) 1504/     72A : 23                  		inc	hl
(1) 1505/     72B : 71                  		ld	(hl),c		; set owner LSB
(1) 1506/     72C : 23                  		inc	hl
(1) 1507/     72D : 70                  		ld	(hl),b		; and MSB
(1) 1508/     72E : 2B                  		dec	hl
(1) 1509/     72F : 2B                  		dec	hl
(1) 1510/     730 : CD 03 0F            		call	dac_me
(1) 1511/     733 :                     .setgood:
(1) 1512/     733 : AF                  		xor	a
(1) 1513/     734 : C9                  		ret
(1) 1514/     735 :                     
(1) 1515/     735 :                     ; --------------------------------------------------------
(1) 1516/     735 :                     ; Read track data
(1) 1517/     735 :                     ; --------------------------------------------------------
(1) 1518/     735 :                     
(1) 1519/     735 :                     updtrack:
(1) 1520/     735 : CD 03 0F            		call	dac_me
(1) 1521/     738 : FD 21 00 19         		ld	iy,trkBuff
(1) 1522/     73C : 21 00 1B            		ld	hl,blkHeadC
(1) 1523/     73F : 11 00 17            		ld	de,trkDataC
(1) 1524/     742 : 01 00 1D            		ld	bc,insDataC
(1) 1525/     745 : 22 14 00            		ld	(currTrkBlkHd),hl
(1) 1526/     748 : ED 53 16 00         		ld	(currTrkData),de
(1) 1527/     74C : ED 43 18 00         		ld	(currInsData),bc
(1) 1528/     750 : 06 02               		ld	b,MAX_TRKS
(1) 1529/     752 :                     .next:
(1) 1530/     752 : C5                  		push	bc
(1) 1531/     753 : CD 80 07            		call	.read_track
(1) 1532/     756 : C1                  		pop	bc
(1) 1533/     757 : CD 03 0F            		call	dac_me
(1) 1534/     75A :                     
(1) 1535/     75A :                     	; Next blocks
(1) 1536/     75A : 11 00 01            		ld	de,100h
(1) 1537/     75D : FD 19               		add	iy,de
(1) 1538/     75F : 2A 16 00            		ld	hl,(currTrkData)
(1) 1539/     762 : 19                  		add	hl,de
(1) 1540/     763 : 22 16 00            		ld	(currTrkData),hl
(1) 1541/     766 : 11 00 01            		ld	de,100h
(1) 1542/     769 : 2A 14 00            		ld	hl,(currTrkBlkHd)
(1) 1543/     76C : 19                  		add	hl,de
(1) 1544/     76D : CD 03 0F            		call	dac_me
(1) 1545/     770 : 22 14 00            		ld	(currTrkBlkHd),hl
(1) 1546/     773 : 11 80 00            		ld	de,80h
(1) 1547/     776 : 2A 18 00            		ld	hl,(currInsData)
(1) 1548/     779 : 19                  		add	hl,de
(1) 1549/     77A : 22 18 00            		ld	(currInsData),hl
(1) 1550/     77D : 10 D3               		djnz	.next
(1) 1551/     77F : C9                  		ret
(1) 1552/     780 :                     
(1) 1553/     780 :                     ; ----------------------------------------
(1) 1554/     780 :                     ; Read current track
(1) 1555/     780 :                     ; ----------------------------------------
(1) 1556/     780 :                     
(1) 1557/     780 :                     .read_track:
(1) 1558/     780 : CD 03 0F            		call	dac_me
(1) 1559/     783 : FD 46 13            		ld	b,(iy+trk_status)	; b - Track status
(1) 1560/     786 : CB 78               		bit	7,b			; Active?
(1) 1561/     788 : C8                  		ret	z
(1) 1562/     789 : 3A 21 00            		ld	a,(currTickBits)
(1) 1563/     78C : CB 68               		bit	5,b			; Status: sfx mode?
(1) 1564/     78E : C2 94 07            		jp	nz,.sfxmd
(1) 1565/     791 : 00                  		nop
(1) 1566/     792 : 00                  		nop
(1) 1567/     793 : 00                  		nop
(1) 1568/     794 :                     ; 		bit	1,a			; BEAT passed?
(1) 1569/     794 :                     ; 		ret	z
(1) 1570/     794 :                     .sfxmd:
(1) 1571/     794 : CB 47               		bit	0,a			; TICK passed?
(1) 1572/     796 : C8                  		ret	z
(1) 1573/     797 : CB 70               		bit	6,b			; Restart/First time?
(1) 1574/     799 : C4 8B 09            		call	nz,.first_fill
(1) 1575/     79C : FD 7E 14            		ld	a,(iy+trk_tickTmr)	; Tick timer for this track
(1) 1576/     79F : 3D                  		dec	a
(1) 1577/     7A0 : FD 77 14            		ld	(iy+trk_tickTmr),a	; If 0, we can progress
(1) 1578/     7A3 : B7                  		or	a
(1) 1579/     7A4 : C0                  		ret	nz
(1) 1580/     7A5 : FD 7E 15            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1) 1581/     7A8 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1) 1582/     7AB : CD 03 0F            		call	dac_me
(1) 1583/     7AE : FD 6E 0C            		ld	l,(iy+trk_Read)		; hl - Pattern data to read in cache
(1) 1584/     7B1 : FD 66 0D            		ld	h,(iy+((trk_Read+1)))
(1) 1585/     7B4 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; Check if this pattern finished
(1) 1586/     7B7 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(1) 1587/     7BA : 79                  		ld	a,c
(1) 1588/     7BB : B0                  		or	b
(1) 1589/     7BC : CC F2 08            		call	z,.next_track
(1) 1590/     7BF : CD 03 0F            		call	dac_me
(1) 1591/     7C2 :                     
(1) 1592/     7C2 :                     ; --------------------------------
(1) 1593/     7C2 :                     ; Main reading loop
(1) 1594/     7C2 :                     ; --------------------------------
(1) 1595/     7C2 :                     
(1) 1596/     7C2 :                     .next_note:
(1) 1597/     7C2 : 7E                  		ld	a,(hl)			; Check if timer or note
(1) 1598/     7C3 : B7                  		or	a
(1) 1599/     7C4 : CA 71 08            		jp	z,.exit			; If == 00h: exit
(1) 1600/     7C7 : FA D3 07            		jp	m,.is_note		; If 80h-0FFh: note data, 01h-7Fh: timer
(1) 1601/     7CA : 7E                  		ld	a,(hl)			; Countdown
(1) 1602/     7CB : 3D                  		dec	a
(1) 1603/     7CC : 77                  		ld	(hl),a
(1) 1604/     7CD : CD 03 0F            		call	dac_me
(1) 1605/     7D0 : C3 7A 08            		jp	.decrow
(1) 1606/     7D3 :                     .is_note:
(1) 1607/     7D3 : C5                  		push	bc
(1) 1608/     7D4 : 4F                  		ld	c,a			; c - Copy of control+channel
(1) 1609/     7D5 : CD 85 08            		call	.inc_cpatt
(1) 1610/     7D8 : 79                  		ld	a,c
(1) 1611/     7D9 : FD E5               		push	iy
(1) 1612/     7DB : DD E1               		pop	ix
(1) 1613/     7DD : 11 20 00            		ld	de,20h
(1) 1614/     7E0 : DD 19               		add	ix,de
(1) 1615/     7E2 : CD 03 0F            		call	dac_me
(1) 1616/     7E5 : 16 00               		ld 	d,0
(1) 1617/     7E7 : E6 3F               		and	00111111b
(1) 1618/     7E9 : 87                  		add	a,a			; * 8
(1) 1619/     7EA : 87                  		add	a,a
(1) 1620/     7EB : 87                  		add	a,a
(1) 1621/     7EC : 5F                  		ld	e,a
(1) 1622/     7ED : DD 19               		add	ix,de
(1) 1623/     7EF :                     ; 		ld	a,c
(1) 1624/     7EF :                     ; 		and	00111111b
(1) 1625/     7EF :                     ; 		inc	a
(1) 1626/     7EF :                     ; 		ld	(ix+chnl_Chip),a
(1) 1627/     7EF : CD 03 0F            		call	dac_me
(1) 1628/     7F2 : DD 46 01            		ld	b,(ix+chnl_Type)	; b - our current Note type
(1) 1629/     7F5 : CB 71               		bit	6,c			; Next byte is new type?
(1) 1630/     7F7 : CA 00 08            		jp	z,.old_type
(1) 1631/     7FA : 7E                  		ld	a,(hl)			; 
(1) 1632/     7FB : DD 77 01            		ld	(ix+chnl_Type),a
(1) 1633/     7FE : 47                  		ld	b,a
(1) 1634/     7FF : 2C                  		inc 	l
(1) 1635/     800 :                     .old_type:
(1) 1636/     800 :                     	
(1) 1637/     800 :                     	; b - evinEVIN
(1) 1638/     800 :                     	;     E-effect/V-volume/I-instrument/N-note
(1) 1639/     800 :                     	;     evin: recycle value stored on the buffer
(1) 1640/     800 :                     	;     EVIN: next byte(for eff:2 bytes) contains new value
(1) 1641/     800 : CD 03 0F            		call	dac_me
(1) 1642/     803 : CB 40               		bit	0,b
(1) 1643/     805 : CA 0F 08            		jp	z,.no_note
(1) 1644/     808 : 7E                  		ld	a,(hl)
(1) 1645/     809 : DD 77 02            		ld	(ix+chnl_Note),a
(1) 1646/     80C : CD 85 08            		call	.inc_cpatt
(1) 1647/     80F :                     .no_note:
(1) 1648/     80F :                     ; 		call	dac_me
(1) 1649/     80F : CB 48               		bit	1,b
(1) 1650/     811 : CA 1B 08            		jp	z,.no_ins
(1) 1651/     814 : 7E                  		ld	a,(hl)
(1) 1652/     815 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1653/     818 : CD 85 08            		call	.inc_cpatt
(1) 1654/     81B :                     .no_ins:
(1) 1655/     81B :                     ; 		call	dac_me
(1) 1656/     81B : CB 50               		bit	2,b
(1) 1657/     81D : CA 27 08            		jp	z,.no_vol
(1) 1658/     820 : 7E                  		ld	a,(hl)
(1) 1659/     821 : DD 77 04            		ld	(ix+chnl_Vol),a
(1) 1660/     824 : CD 85 08            		call	.inc_cpatt
(1) 1661/     827 :                     .no_vol:
(1) 1662/     827 :                     ; 		call	dac_me
(1) 1663/     827 : CB 58               		bit	3,b
(1) 1664/     829 : CA 3A 08            		jp	z,.no_eff
(1) 1665/     82C : 7E                  		ld	a,(hl)
(1) 1666/     82D : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1667/     830 : CD 85 08            		call	.inc_cpatt
(1) 1668/     833 : 7E                  		ld	a,(hl)
(1) 1669/     834 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1670/     837 : CD 85 08            		call	.inc_cpatt
(1) 1671/     83A :                     .no_eff:
(1) 1672/     83A : CD 03 0F            		call	dac_me
(1) 1673/     83D : 78                  		ld	a,b			; Merge recycle bits to main bits
(1) 1674/     83E : CB 3F               		srl	a
(1) 1675/     840 : CB 3F               		srl	a
(1) 1676/     842 : CB 3F               		srl	a
(1) 1677/     844 : CB 3F               		srl	a
(1) 1678/     846 : E6 0F               		and	1111b
(1) 1679/     848 : CD 03 0F            		call	dac_me
(1) 1680/     84B : 4F                  		ld	c,a
(1) 1681/     84C : 78                  		ld	a,b
(1) 1682/     84D : E6 0F               		and	1111b
(1) 1683/     84F : B1                  		or	c
(1) 1684/     850 : 4F                  		ld	c,a
(1) 1685/     851 : CD 03 0F            		call	dac_me
(1) 1686/     854 : DD 7E 07            		ld	a,(ix+chnl_Status)
(1) 1687/     857 : B1                  		or	c
(1) 1688/     858 : DD 77 07            		ld	(ix+chnl_Status),a
(1) 1689/     85B : C1                  		pop	bc
(1) 1690/     85C :                     
(1) 1691/     85C :                     	; Special checks
(1) 1692/     85C : B7                  		or	a
(1) 1693/     85D : CA 68 08            		jp	z,.no_updst
(1) 1694/     860 :                     ; 		cp	-2
(1) 1695/     860 :                     ; 		jp	z,.id_off
(1) 1696/     860 :                     ; 		cp	-1
(1) 1697/     860 :                     ; 		jp	nz,.id_stlon
(1) 1698/     860 :                     ; .id_off:
(1) 1699/     860 :                     ; 		ld	(ix+chnl_Chip),0
(1) 1700/     860 :                     ; .id_stlon:
(1) 1701/     860 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1) 1702/     863 : FE 02               		cp	2			; Effect B: position jump?
(1) 1703/     865 : CC C3 08            		call	z,.eff_B
(1) 1704/     868 :                     .no_updst:
(1) 1705/     868 : CD 17 0F            		call	dac_fill
(1) 1706/     86B : CD 03 0F            		call	dac_me
(1) 1707/     86E : C3 C2 07            		jp	.next_note
(1) 1708/     871 :                     
(1) 1709/     871 :                     ; --------------------------------
(1) 1710/     871 :                     ; Exit
(1) 1711/     871 :                     ; --------------------------------
(1) 1712/     871 :                     
(1) 1713/     871 :                     .exit:
(1) 1714/     871 : CD 85 08            		call	.inc_cpatt
(1) 1715/     874 : FD 75 0C            		ld	(iy+trk_Read),l		; Update read location
(1) 1716/     877 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1) 1717/     87A :                     .decrow:
(1) 1718/     87A : CD 03 0F            		call	dac_me
(1) 1719/     87D : 0B                  		dec	bc			; Decrement this row
(1) 1720/     87E : FD 71 0E            		ld	(iy+trk_Rows),c		; And update it
(1) 1721/     881 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1) 1722/     884 : C9                  		ret
(1) 1723/     885 :                     
(1) 1724/     885 :                     ; ----------------------------------------
(1) 1725/     885 :                     ; Call this to increment the
(1) 1726/     885 :                     ; cache pattern read pointer (iy+trk_Read)
(1) 1727/     885 :                     ; it also refills the next section to
(1) 1728/     885 :                     ; read if needed.
(1) 1729/     885 :                     ;
(1) 1730/     885 :                     ; NOTE: breaks A
(1) 1731/     885 :                     ; ----------------------------------------
(1) 1732/     885 :                     
(1) 1733/     885 :                     .inc_cpatt:
(1) 1734/     885 : 2C                  		inc	l
(1) 1735/     886 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(1) 1736/     889 : AD                  		xor	l
(1) 1737/     88A : E6 80               		and	080h
(1) 1738/     88C : C8                  		ret	z
(1) 1739/     88D :                     		
(1) 1740/     88D : CD 17 0F            		call	dac_fill
(1) 1741/     890 : CD 03 0F            		call	dac_me
(1) 1742/     893 : E5                  		push	hl
(1) 1743/     894 : C5                  		push	bc
(1) 1744/     895 : 54                  		ld	d,h
(1) 1745/     896 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(1) 1746/     899 : 5F                  		ld	e,a
(1) 1747/     89A : C6 80               		add 	a,080h
(1) 1748/     89C : FD 77 10            		ld	(iy+trk_Halfway),a
(1) 1749/     89F : 01 80 00            		ld	bc,80h
(1) 1750/     8A2 : FD 6E 09            		ld	l,(iy+trk_romPattRd)
(1) 1751/     8A5 : CD 03 0F            		call	dac_me
(1) 1752/     8A8 : FD 66 0A            		ld	h,(iy+(trk_romPattRd+1))
(1) 1753/     8AB : FD 7E 0B            		ld	a,(iy+(trk_romPattRd+2))
(1) 1754/     8AE : 09                  		add	hl,bc
(1) 1755/     8AF : CE 00               		adc	a,0
(1) 1756/     8B1 : FD 75 09            		ld	(iy+trk_romPattRd),l
(1) 1757/     8B4 : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1) 1758/     8B7 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1) 1759/     8BA : CD 76 0C            		call	transferRom
(1) 1760/     8BD : CD 03 0F            		call	dac_me
(1) 1761/     8C0 : C1                  		pop	bc
(1) 1762/     8C1 : E1                  		pop	hl
(1) 1763/     8C2 : C9                  		ret
(1) 1764/     8C3 :                     
(1) 1765/     8C3 :                     ; ----------------------------------------
(1) 1766/     8C3 :                     ; If effect B: jump to the block
(1) 1767/     8C3 :                     ; requested by the effect
(1) 1768/     8C3 :                     ; ----------------------------------------
(1) 1769/     8C3 :                     
(1) 1770/     8C3 :                     .eff_B:
(1) 1771/     8C3 : DD 7E 06            		ld	a,(ix+chnl_EffArg)
(1) 1772/     8C6 : FD 77 11            		ld 	(iy+trk_currBlk),a
(1) 1773/     8C9 : FD E5               		push	iy			; Clear all channels first
(1) 1774/     8CB : DD E1               		pop	ix
(1) 1775/     8CD : 11 20 00            		ld	de,20h
(1) 1776/     8D0 : DD 19               		add	ix,de
(1) 1777/     8D2 : 11 08 00            		ld	de,8
(1) 1778/     8D5 : AF                  		xor	a
(1) 1779/     8D6 : 06 48               		ld	b,MAX_TRKCHN*8/2
(1) 1780/     8D8 :                     .clrf2:
(1) 1781/     8D8 : DD 77 00            		ld	(ix),a
(1) 1782/     8DB : DD 23               		inc	ix
(1) 1783/     8DD : CD 03 0F            		call	dac_me
(1) 1784/     8E0 : 00                  		nop
(1) 1785/     8E1 : DD 77 00            		ld	(ix),a
(1) 1786/     8E4 : DD 23               		inc	ix			
(1) 1787/     8E6 : 10 F0               		djnz	.clrf2
(1) 1788/     8E8 : 00                  		nop
(1) 1789/     8E9 : 00                  		nop
(1) 1790/     8EA : CD 03 0F            		call	dac_me
(1) 1791/     8ED : FD 7E 11            		ld	a,(iy+trk_currBlk)
(1) 1792/     8F0 : 18 07               		jr	.set_track
(1) 1793/     8F2 :                     
(1) 1794/     8F2 :                     ; ----------------------------------------
(1) 1795/     8F2 :                     ; If pattern finished, load the next one
(1) 1796/     8F2 :                     ; ----------------------------------------
(1) 1797/     8F2 :                     
(1) 1798/     8F2 :                     .next_track:
(1) 1799/     8F2 : FD 7E 11            		ld	a,(iy+trk_currBlk)
(1) 1800/     8F5 : 3C                  		inc	a
(1) 1801/     8F6 : FD 77 11            		ld 	(iy+trk_currBlk),a
(1) 1802/     8F9 :                     
(1) 1803/     8F9 :                     .set_track:
(1) 1804/     8F9 : CD 03 0F            		call	dac_me
(1) 1805/     8FC : 2E 80               		ld	l,80h			; Set LSB as 40h
(1) 1806/     8FE : FD 75 0C            		ld	(iy+trk_Read),l
(1) 1807/     901 : E5                  		push	hl
(1) 1808/     902 : CD 03 0F            		call	dac_me
(1) 1809/     905 : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Block section
(1) 1810/     908 : 11 00 00            		ld	de,0
(1) 1811/     90B : 5F                  		ld	e,a
(1) 1812/     90C : AF                  		xor	a			; Reset halfway, next pass
(1) 1813/     90D : FD 77 10            		ld	(iy+trk_Halfway),a	; will load the first section
(1) 1814/     910 : 19                  		add	hl,de
(1) 1815/     911 : 7E                  		ld	a,(hl)			; a - block
(1) 1816/     912 : E1                  		pop	hl
(1) 1817/     913 : FE FF               		cp	-1
(1) 1818/     915 : CA 6D 09            		jp	z,.track_end
(1) 1819/     918 : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Header section
(1) 1820/     91B : CD 03 0F            		call	dac_me
(1) 1821/     91E : 11 80 00            		ld	de,80h
(1) 1822/     921 : 19                  		add	hl,de
(1) 1823/     922 : 87                  		add	a,a
(1) 1824/     923 : 87                  		add	a,a
(1) 1825/     924 : 5F                  		ld	e,a			; block * 4
(1) 1826/     925 : 19                  		add	hl,de
(1) 1827/     926 : 4E                  		ld	c,(hl)
(1) 1828/     927 : 23                  		inc	hl
(1) 1829/     928 : 46                  		ld	b,(hl)			; bc - numof Rows
(1) 1830/     929 : 23                  		inc	hl
(1) 1831/     92A : CD 03 0F            		call	dac_me
(1) 1832/     92D : 5E                  		ld	e,(hl)
(1) 1833/     92E : 23                  		inc	hl
(1) 1834/     92F : 56                  		ld	d,(hl)			; de - pointer (base+increment by this)
(1) 1835/     930 : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows
(1) 1836/     933 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1) 1837/     936 : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - Low and Mid pointer of ROM patt data
(1) 1838/     939 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1) 1839/     93C : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1) 1840/     93F : 19                  		add	hl,de			; increment to get new pointer
(1) 1841/     940 : CE 00               		adc	a,0			; and highest byte too.
(1) 1842/     942 : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer
(1) 1843/     945 : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1) 1844/     948 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1) 1845/     94B : FD 56 0D            		ld	d,(iy+(trk_Read+1))
(1) 1846/     94E : FD 5E 0C            		ld	e,(iy+trk_Read)
(1) 1847/     951 : 01 80 00            		ld	bc,080h			; bc - 080h
(1) 1848/     954 : CD 17 0F            		call	dac_fill
(1) 1849/     957 : CD 76 0C            		call	transferRom
(1) 1850/     95A : CD 03 0F            		call	dac_me
(1) 1851/     95D : FD 66 0D            		ld	h,(iy+(trk_Read+1))
(1) 1852/     960 : FD 6E 0C            		ld	l,(iy+trk_Read)
(1) 1853/     963 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; Check if this pattern finished
(1) 1854/     966 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(1) 1855/     969 : CD 03 0F            		call	dac_me
(1) 1856/     96C : C9                  		ret
(1) 1857/     96D :                     
(1) 1858/     96D :                     ; If -1, track ends
(1) 1859/     96D :                     .track_end:
(1) 1860/     96D : FD E5               		push	iy
(1) 1861/     96F : DD E1               		pop	ix
(1) 1862/     971 : 11 20 00            		ld	de,20h
(1) 1863/     974 : DD 19               		add	ix,de
(1) 1864/     976 : 11 08 00            		ld	de,8
(1) 1865/     979 : AF                  		xor	a
(1) 1866/     97A : 06 12               		ld	b,MAX_TRKCHN
(1) 1867/     97C :                     .clrfe:
(1) 1868/     97C : DD 77 00            		ld	(ix),a
(1) 1869/     97F : DD 19               		add	ix,de
(1) 1870/     981 : 10 F9               		djnz	.clrfe
(1) 1871/     983 : CD 03 0F            		call	dac_me
(1) 1872/     986 : FD 36 13 00         		ld	(iy+trk_status),0
(1) 1873/     98A : C9                  		ret
(1) 1874/     98B :                     
(1) 1875/     98B :                     ; ----------------------------------------
(1) 1876/     98B :                     ; Playing first time
(1) 1877/     98B :                     ; Load Blocks/Pointers for 3 of 4 sections
(1) 1878/     98B :                     ; of pattern data, the remaining one is
(1) 1879/     98B :                     ; loaded after returning.
(1) 1880/     98B :                     ; ----------------------------------------
(1) 1881/     98B :                     
(1) 1882/     98B :                     .first_fill:
(1) 1883/     98B : CD 17 0F            		call	dac_fill
(1) 1884/     98E : CD 03 0F            		call	dac_me
(1) 1885/     991 : CB B0               		res	6,b			; Reset FILL flag
(1) 1886/     993 : FD 70 13            		ld	(iy+trk_status),b
(1) 1887/     996 :                     
(1) 1888/     996 :                     	; Stop last used sound chips
(1) 1889/     996 : FD E5               		push	iy
(1) 1890/     998 : DD E1               		pop	ix
(1) 1891/     99A : 11 20 00            		ld	de,20h
(1) 1892/     99D : DD 19               		add	ix,de
(1) 1893/     99F : 11 08 00            		ld	de,8
(1) 1894/     9A2 : 06 12               		ld	b,MAX_TRKCHN
(1) 1895/     9A4 :                     .clrf:
(1) 1896/     9A4 : D5                  		push	de
(1) 1897/     9A5 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(1) 1898/     9A8 : B7                  		or	a
(1) 1899/     9A9 : C4 74 0A            		call	nz,.silnc_chip
(1) 1900/     9AC : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1901/     9B0 : DD 36 07 03         		ld	(ix+chnl_Status),11b
(1) 1902/     9B4 : D1                  		pop	de
(1) 1903/     9B5 : DD 19               		add	ix,de
(1) 1904/     9B7 : 10 EB               		djnz	.clrf
(1) 1905/     9B9 :                     		
(1) 1906/     9B9 :                     	; TODO: psgHat lock check
(1) 1907/     9B9 : AF                  		xor	a
(1) 1908/     9BA :                     ; 		ld	hl,psgHatMode+1
(1) 1909/     9BA :                     ; 		ld	e,(hl)
(1) 1910/     9BA :                     ; 		inc	hl
(1) 1911/     9BA :                     ; 		ld	d,(hl)
(1) 1912/     9BA :                     ; 		dec	hl
(1) 1913/     9BA :                     ; 		dec	hl
(1) 1914/     9BA :                     ; 		ld	a,(de)
(1) 1915/     9BA :                     ; 		or	a
(1) 1916/     9BA :                     ; 		jp	nz,.inuse
(1) 1917/     9BA : 32 2F 00            		ld	(psgHatMode),a		; already in use
(1) 1918/     9BD :                     ; .inuse:
(1) 1919/     9BD :                     
(1) 1920/     9BD : FD 7E 12            		ld	a,(iy+trk_setBlk)
(1) 1921/     9C0 : FD 77 11            		ld 	(iy+trk_currBlk),a
(1) 1922/     9C3 : FD 77 10            		ld	(iy+trk_Halfway),a	; Reset halfway
(1) 1923/     9C6 : CD 17 0F            		call	dac_fill
(1) 1924/     9C9 : CD 03 0F            		call	dac_me
(1) 1925/     9CC : FD 6E 06            		ld	l,(iy+trk_romIns)	; Recieve 80h of instrument pointers
(1) 1926/     9CF : FD 66 07            		ld	h,(iy+(trk_romIns+1))
(1) 1927/     9D2 : FD 7E 08            		ld	a,(iy+(trk_romIns+2))
(1) 1928/     9D5 : ED 5B 18 00         		ld	de,(currInsData)
(1) 1929/     9D9 : ED 53 34 00         		ld	(reqMarsTrnf),de	; Tell 68k to copy instruments
(1) 1930/     9DD : 01 80 00            		ld	bc,080h
(1) 1931/     9E0 : CD 76 0C            		call	transferRom	
(1) 1932/     9E3 :                     		
(1) 1933/     9E3 : FD 6E 00            		ld	l,(iy+trk_romBlk)	; Recieve 80h of block data
(1) 1934/     9E6 : FD 66 01            		ld	h,(iy+(trk_romBlk+1))
(1) 1935/     9E9 : FD 7E 02            		ld	a,(iy+(trk_romBlk+2))
(1) 1936/     9EC : ED 5B 14 00         		ld	de,(currTrkBlkHd)
(1) 1937/     9F0 : 01 80 00            		ld	bc,80h
(1) 1938/     9F3 : D5                  		push	de
(1) 1939/     9F4 : CD 76 0C            		call	transferRom	
(1) 1940/     9F7 : D1                  		pop	de
(1) 1941/     9F8 : CD 17 0F            		call	dac_fill
(1) 1942/     9FB : CD 03 0F            		call	dac_me
(1) 1943/     9FE : 7B                  		ld	a,e
(1) 1944/     9FF : C6 80               		add	a,80h
(1) 1945/     A01 : 5F                  		ld	e,a
(1) 1946/     A02 : FD 6E 03            		ld	l,(iy+trk_romPatt)	; Recieve 80h of header data
(1) 1947/     A05 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1) 1948/     A08 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1) 1949/     A0B : 01 80 00            		ld	bc,80h
(1) 1950/     A0E : CD 76 0C            		call	transferRom
(1) 1951/     A11 : 3E 00               		ld	a,0
(1) 1952/     A13 : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Block section
(1) 1953/     A16 : 11 00 00            		ld	de,0
(1) 1954/     A19 : 5F                  		ld	e,a
(1) 1955/     A1A : 19                  		add	hl,de
(1) 1956/     A1B : 7E                  		ld	a,(hl)			; a - block
(1) 1957/     A1C : FE FF               		cp	-1
(1) 1958/     A1E : CA 6D 09            		jp	z,.track_end
(1) 1959/     A21 : CD 17 0F            		call	dac_fill
(1) 1960/     A24 : CD 03 0F            		call	dac_me
(1) 1961/     A27 : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Header section
(1) 1962/     A2A : 11 80 00            		ld	de,80h
(1) 1963/     A2D : 19                  		add	hl,de
(1) 1964/     A2E : 87                  		add	a,a
(1) 1965/     A2F : 87                  		add	a,a
(1) 1966/     A30 : 5F                  		ld	e,a			; block * 4
(1) 1967/     A31 : 19                  		add	hl,de
(1) 1968/     A32 : 4E                  		ld	c,(hl)
(1) 1969/     A33 : 23                  		inc	hl
(1) 1970/     A34 : 46                  		ld	b,(hl)			; bc - numof Rows
(1) 1971/     A35 : 23                  		inc	hl
(1) 1972/     A36 : 5E                  		ld	e,(hl)
(1) 1973/     A37 : 23                  		inc	hl
(1) 1974/     A38 : 56                  		ld	d,(hl)			; de - pointer (base+increment by this)
(1) 1975/     A39 : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows
(1) 1976/     A3C : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1) 1977/     A3F : CD 03 0F            		call	dac_me
(1) 1978/     A42 : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - Low and Mid pointer of ROM patt data
(1) 1979/     A45 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1) 1980/     A48 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1) 1981/     A4B : 19                  		add	hl,de			; increment to get new pointer
(1) 1982/     A4C : CE 00               		adc	a,0			; and highest byte too.
(1) 1983/     A4E : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer
(1) 1984/     A51 : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1) 1985/     A54 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1) 1986/     A57 : ED 5B 16 00         		ld	de,(currTrkData)	; Set new Read point to this track
(1) 1987/     A5B : 47                  		ld	b,a
(1) 1988/     A5C : 7B                  		ld	a,e
(1) 1989/     A5D : C6 80               		add	a,80h
(1) 1990/     A5F : 5F                  		ld	e,a
(1) 1991/     A60 : 78                  		ld	a,b
(1) 1992/     A61 : FD 73 0C            		ld	(iy+trk_Read),e
(1) 1993/     A64 : FD 72 0D            		ld	(iy+((trk_Read+1))),d
(1) 1994/     A67 : 01 80 00            		ld	bc,080h			; fill sections 2,3,4
(1) 1995/     A6A : CD 17 0F            		call	dac_fill
(1) 1996/     A6D : CD 03 0F            		call	dac_me
(1) 1997/     A70 : CD 76 0C            		call	transferRom
(1) 1998/     A73 : C9                  		ret
(1) 1999/     A74 :                     
(1) 2000/     A74 :                     ; c - Chip
(1) 2001/     A74 :                     ; PSG: 80h
(1) 2002/     A74 :                     ; FM:  A0h + fm key
(1) 2003/     A74 :                     ; PWM: C0h
(1) 2004/     A74 :                     
(1) 2005/     A74 :                     .silnc_chip:
(1) 2006/     A74 : 4F                  		ld	c,a
(1) 2007/     A75 : E6 60               		and	01100000b	; Get curr used chip
(1) 2008/     A77 : FE 20               		cp	00100000b	; FM?
(1) 2009/     A79 : 28 40               		jr	z,.sil_fm
(1) 2010/     A7B : FE 40               		cp	01000000b	; PWM?
(1) 2011/     A7D : C8                  		ret	z
(1) 2012/     A7E :                     		
(1) 2013/     A7E :                     	; chip ID: 00b
(1) 2014/     A7E : 21 09 12            		ld	hl,PSGNVTBL	; Check for NOISE
(1) 2015/     A81 : 11 09 00            		ld	de,9
(1) 2016/     A84 : CD FD 0A            		call	.chlst_unlk
(1) 2017/     A87 : E6 83               		and	83h
(1) 2018/     A89 : FE 83               		cp	83h
(1) 2019/     A8B : CA 9D 0A            		jp	z,.unlknow
(1) 2020/     A8E : 21 ED 11            		ld	hl,PSGVTBL
(1) 2021/     A91 : 11 09 00            		ld	de,9
(1) 2022/     A94 : CD FD 0A            		call	.chlst_unlk
(1) 2023/     A97 : FE FF               		cp	-1
(1) 2024/     A99 : C2 9D 0A            		jp	nz,.unlknow
(1) 2025/     A9C : C9                  		ret
(1) 2026/     A9D :                     .unlknow:
(1) 2027/     A9D : 7E                  		ld	a,(hl)
(1) 2028/     A9E : E6 7F               		and	7Fh
(1) 2029/     AA0 : 77                  		ld	(hl),a
(1) 2030/     AA1 : 23                  		inc	hl		; delete link
(1) 2031/     AA2 : 36 00               		ld	(hl),0
(1) 2032/     AA4 : 23                  		inc	hl
(1) 2033/     AA5 : 36 00               		ld	(hl),0
(1) 2034/     AA7 : 23                  		inc	hl		; ALV to 0
(1) 2035/     AA8 : 36 00               		ld	(hl),0
(1) 2036/     AAA : 23                  		inc	hl		; ATK to 0
(1) 2037/     AAB : 36 00               		ld	(hl),0
(1) 2038/     AAD : 79                  		ld	a,c
(1) 2039/     AAE : E6 03               		and	11b
(1) 2040/     AB0 :                     		
(1) 2041/     AB0 : 21 00 13            		ld	hl,psgcom
(1) 2042/     AB3 : 11 00 00            		ld	de,0
(1) 2043/     AB6 : 5F                  		ld	e,a
(1) 2044/     AB7 : 19                  		add	hl,de
(1) 2045/     AB8 : 36 04               		ld	(hl),100b
(1) 2046/     ABA : C9                  		ret
(1) 2047/     ABB :                     
(1) 2048/     ABB :                     ; FM silence
(1) 2049/     ABB :                     .sil_fm:
(1) 2050/     ABB : 79                  		ld	a,c
(1) 2051/     ABC : E6 87               		and	10000111b
(1) 2052/     ABE : 4F                  		ld	c,a
(1) 2053/     ABF : 11 11 00            		ld	de,17
(1) 2054/     AC2 : 21 13 12            		ld	hl,FMVTBL
(1) 2055/     AC5 : CD FD 0A            		call	.chlst_unlk
(1) 2056/     AC8 : 79                  		ld	a,c
(1) 2057/     AC9 : E6 03               		and	11b
(1) 2058/     ACB : 16 40               		ld	d,40h
(1) 2059/     ACD : B2                  		or	d
(1) 2060/     ACE : 57                  		ld	d,a
(1) 2061/     ACF : 1E 7F               		ld	e,7Fh
(1) 2062/     AD1 : CD B2 0E            		call	fm_autoset		; ix is already our channel
(1) 2063/     AD4 : 14                  		inc	d
(1) 2064/     AD5 : 14                  		inc	d
(1) 2065/     AD6 : 14                  		inc	d
(1) 2066/     AD7 : 14                  		inc	d
(1) 2067/     AD8 : CD B2 0E            		call	fm_autoset
(1) 2068/     ADB : 14                  		inc	d
(1) 2069/     ADC : 14                  		inc	d
(1) 2070/     ADD : 14                  		inc	d
(1) 2071/     ADE : 14                  		inc	d
(1) 2072/     ADF : CD B2 0E            		call	fm_autoset
(1) 2073/     AE2 : 14                  		inc	d
(1) 2074/     AE3 : 14                  		inc	d
(1) 2075/     AE4 : 14                  		inc	d
(1) 2076/     AE5 : 14                  		inc	d
(1) 2077/     AE6 : CD B2 0E            		call	fm_autoset
(1) 2078/     AE9 : 79                  		ld	a,c
(1) 2079/     AEA : E6 07               		and	111b
(1) 2080/     AEC : 5F                  		ld	e,a
(1) 2081/     AED : 16 28               		ld	d,28h
(1) 2082/     AEF : CD B9 0E            		call	fm_send_1
(1) 2083/     AF2 : 11 00 28            		ld	de,2800h
(1) 2084/     AF5 : 79                  		ld	a,c
(1) 2085/     AF6 : E6 07               		and	111b
(1) 2086/     AF8 : B3                  		or	e
(1) 2087/     AF9 : 5F                  		ld	e,a
(1) 2088/     AFA : C3 B9 0E            		jp	fm_send_1
(1) 2089/     AFD :                     .chlst_unlk:
(1) 2090/     AFD : 7E                  		ld	a,(hl)
(1) 2091/     AFE : FE FF               		cp	-1
(1) 2092/     B00 : C8                  		ret	z
(1) 2093/     B01 : B9                  		cp	c
(1) 2094/     B02 : C8                  		ret	z
(1) 2095/     B03 : 19                  		add	hl,de
(1) 2096/     B04 : 18 F7               		jr	.chlst_unlk
(1) 2097/     B06 :                     
(1) 2098/     B06 :                     ; --------------------------------------------------------
(1) 2099/     B06 :                     ; For 32X only:
(1) 2100/     B06 :                     ; Communicate to Master SH2 using CMD interrupt
(1) 2101/     B06 :                     ; --------------------------------------------------------
(1) 2102/     B06 :                     
(1) 2103/     B06 :                     mars_scomm:
(1) 2104/     B06 : ED 5B 34 00         		ld	de,(reqMarsTrnf)
(1) 2105/     B0A : 7B                  		ld	a,e
(1) 2106/     B0B : B2                  		or	d
(1) 2107/     B0C : C8                  		ret	z
(1) 2108/     B0D : CD 17 0F            		call	dac_fill
(1) 2109/     B10 : 21 00 60            		ld	hl,6000h		; Template for PWM comm.
(1) 2110/     B13 : 36 00               		ld	(hl),0
(1) 2111/     B15 : 36 01               		ld	(hl),1
(1) 2112/     B17 : 36 00               		ld	(hl),0
(1) 2113/     B19 : 36 00               		ld	(hl),0
(1) 2114/     B1B : 36 00               		ld	(hl),0
(1) 2115/     B1D : 36 00               		ld	(hl),0
(1) 2116/     B1F : 36 01               		ld	(hl),1
(1) 2117/     B21 : CD 03 0F            		call	dac_me
(1) 2118/     B24 : 36 00               		ld	(hl),0
(1) 2119/     B26 : 36 01               		ld	(hl),1
(1) 2120/     B28 : FD 21 00 D1         		ld	iy,5100h|8000h		; ix - mars sysreg
(1) 2121/     B2C : FD 7E 24            		ld	a,(iy+comm4)
(1) 2122/     B2F : 3C                  		inc	a
(1) 2123/     B30 : FD 77 24            		ld	(iy+comm4),a
(1) 2124/     B33 :                     
(1) 2125/     B33 : 62                  		ld	h,d
(1) 2126/     B34 : 6B                  		ld	l,e
(1) 2127/     B35 : 0E 01               		ld	c,1
(1) 2128/     B37 : 06 40               		ld	b,80h/2
(1) 2129/     B39 : CD 44 0B            		call	.comm_me
(1) 2130/     B3C :                     
(1) 2131/     B3C : 11 00 00            		ld	de,0
(1) 2132/     B3F : ED 53 34 00         		ld	(reqMarsTrnf),de
(1) 2133/     B43 : C9                  		ret
(1) 2134/     B44 :                     
(1) 2135/     B44 :                     ; Communicate to 32X from here
(1) 2136/     B44 :                     ; iy - 5100h|8000h (set ROM bank to $A10000)
(1) 2137/     B44 :                     ; hl - Data to transfer
(1) 2138/     B44 :                     ; b - WORDS to transfer
(1) 2139/     B44 :                     ; c - Task id
(1) 2140/     B44 :                     .comm_me:
(1) 2141/     B44 : FD 7E 28            		ld	a,(iy+comm8)		; 68k busy?
(1) 2142/     B47 : B7                  		or	a
(1) 2143/     B48 : C2 44 0B            		jp	nz,.comm_me
(1) 2144/     B4B : FD 71 24            		ld	(iy+comm4),c		; Z80 ready
(1) 2145/     B4E : FD 36 25 01         		ld	(iy+(comm4+1)),1	; SH busy
(1) 2146/     B52 : FD 36 03 01         		ld	(iy+3),01b		; Master CMD interrupt
(1) 2147/     B56 : FD CB 03 46         .wait_cmd:	bit	0,(iy+3)		; CMD clear?
(1) 2148/     B5A : C2 56 0B            		jp	nz,.wait_cmd
(1) 2149/     B5D : CD 03 0F            		call	dac_me
(1) 2150/     B60 :                     .loop:
(1) 2151/     B60 : 00                  		nop
(1) 2152/     B61 : 00                  		nop
(1) 2153/     B62 : 00                  		nop
(1) 2154/     B63 : 00                  		nop
(1) 2155/     B64 : FD 7E 25            		ld	a,(iy+(comm4+1))	; SH ready?
(1) 2156/     B67 : FE 02               		cp	2
(1) 2157/     B69 : 20 F5               		jr	nz,.loop
(1) 2158/     B6B : 79                  		ld	a,c			; Z80 is busy
(1) 2159/     B6C : F6 80               		or	80h
(1) 2160/     B6E : FD 77 24            		ld	(iy+comm4),a
(1) 2161/     B71 : CD 03 0F            		call	dac_me
(1) 2162/     B74 : 00                  		nop
(1) 2163/     B75 : 00                  		nop
(1) 2164/     B76 : 78                  		ld	a,b			; check b
(1) 2165/     B77 : B7                  		or	a
(1) 2166/     B78 : 28 2A               		jr	z,.exit
(1) 2167/     B7A : FA A4 0B            		jp	m,.exit
(1) 2168/     B7D : CD 03 0F            		call	dac_me
(1) 2169/     B80 : 7E                  		ld	a,(hl)
(1) 2170/     B81 : FD 77 26            		ld	(iy+comm6),a
(1) 2171/     B84 : CD 03 0F            		call	dac_me
(1) 2172/     B87 : 00                  		nop
(1) 2173/     B88 : 00                  		nop
(1) 2174/     B89 : 23                  		inc	hl
(1) 2175/     B8A : 7E                  		ld	a,(hl)
(1) 2176/     B8B : FD 77 27            		ld	(iy+comm6+1),a
(1) 2177/     B8E : 00                  		nop
(1) 2178/     B8F : 00                  		nop
(1) 2179/     B90 : 00                  		nop
(1) 2180/     B91 : 23                  		inc	hl
(1) 2181/     B92 : CD 03 0F            		call	dac_me
(1) 2182/     B95 : 79                  		ld	a,c			; Z80 is busy
(1) 2183/     B96 : F6 40               		or	40h
(1) 2184/     B98 : FD 77 24            		ld	(iy+comm4),a
(1) 2185/     B9B : 00                  		nop
(1) 2186/     B9C : 00                  		nop
(1) 2187/     B9D : 00                  		nop
(1) 2188/     B9E : 05                  		dec	b
(1) 2189/     B9F : CD 03 0F            		call	dac_me
(1) 2190/     BA2 : 18 BC               		jr	.loop
(1) 2191/     BA4 :                     .exit:	
(1) 2192/     BA4 : FD 36 24 00         		ld	(iy+comm4),0		; Z80 finished
(1) 2193/     BA8 : 00                  		nop
(1) 2194/     BA9 : 00                  		nop
(1) 2195/     BAA : 00                  		nop
(1) 2196/     BAB : C9                  		ret
(1) 2197/     BAC :                     
(1) 2198/     BAC :                     ; 		ld	b,7			; 7 channels
(1) 2199/     BAC :                     ; .next:
(1) 2200/     BAC :                     ; 		push	bc
(1) 2201/     BAC :                     ; 		push	iy
(1) 2202/     BAC :                     ; 		ld	a,(iy)
(1) 2203/     BAC :                     ; 		or	a
(1) 2204/     BAC :                     ; 		jp	p,.disbld
(1) 2205/     BAC :                     ; 		bit	6,(iy)
(1) 2206/     BAC :                     ; 		call	nz,.play
(1) 2207/     BAC :                     ; 		call	dac_me
(1) 2208/     BAC :                     ; 		bit	5,(iy)
(1) 2209/     BAC :                     ; 		call	nz,.stop		
(1) 2210/     BAC :                     ; .disbld:
(1) 2211/     BAC :                     ; 		call	dac_me
(1) 2212/     BAC :                     ; 		pop	iy
(1) 2213/     BAC :                     ; 		pop	bc
(1) 2214/     BAC :                     ; 		ld	de,19
(1) 2215/     BAC :                     ; 		add	iy,de
(1) 2216/     BAC :                     ; 		djnz	.next
(1) 2217/     BAC :                     ; 		ld	a,(ix+26h)
(1) 2218/     BAC :                     ; 		inc	a
(1) 2219/     BAC :                     ; 		ld	(ix+26h),a
(1) 2220/     BAC :                     ; 		ret	
(1) 2221/     BAC :                     ; ; bit 6
(1) 2222/     BAC :                     ; .play:
(1) 2223/     BAC :                     ; 		res	6,(iy)
(1) 2224/     BAC :                     ; ; 		ld	hl,.liltrnfr_play
(1) 2225/     BAC :                     ; ; 		push	hl
(1) 2226/     BAC :                     ; ; 		call	dac_me
(1) 2227/     BAC :                     ; ; 		ld	de,4+3		; Point to arg 2
(1) 2228/     BAC :                     ; ; 		add	hl,de
(1) 2229/     BAC :                     ; ; 		ld	a,(iy)		; Set channel
(1) 2230/     BAC :                     ; ; 		and	1111b
(1) 2231/     BAC :                     ; ; 		ld	(hl),a
(1) 2232/     BAC :                     ; ; 		inc	iy
(1) 2233/     BAC :                     ; ; 		inc	iy
(1) 2234/     BAC :                     ; ; 		inc	iy
(1) 2235/     BAC :                     ; ; 		inc	hl
(1) 2236/     BAC :                     ; ; 	rept 4*3
(1) 2237/     BAC :                     ; ; 		ld	a,(iy)		; Set Start/End/Loop
(1) 2238/     BAC :                     ; ; 		ld	(hl),a
(1) 2239/     BAC :                     ; ; 		inc	hl
(1) 2240/     BAC :                     ; ; 		inc	iy
(1) 2241/     BAC :                     ; ; 	endm
(1) 2242/     BAC :                     ; ; 		call	dac_me
(1) 2243/     BAC :                     ; ; 		ld	a,(iy)		; Set volume
(1) 2244/     BAC :                     ; ; 		inc	hl
(1) 2245/     BAC :                     ; ; 		inc	hl
(1) 2246/     BAC :                     ; ; 		inc 	hl
(1) 2247/     BAC :                     ; ; 		ld	(hl),a
(1) 2248/     BAC :                     ; ; 		inc 	hl
(1) 2249/     BAC :                     ; ; 		inc	iy
(1) 2250/     BAC :                     ; ; 		call	dac_me
(1) 2251/     BAC :                     ; ; 		ld	a,(iy)		; Set bits
(1) 2252/     BAC :                     ; ; 		inc	hl
(1) 2253/     BAC :                     ; ; 		inc	hl
(1) 2254/     BAC :                     ; ; 		inc 	hl
(1) 2255/     BAC :                     ; ; 		ld	(hl),a
(1) 2256/     BAC :                     ; ; 		inc 	hl
(1) 2257/     BAC :                     ; ; 		inc	iy
(1) 2258/     BAC :                     ; ; 		call	dac_me
(1) 2259/     BAC :                     ; ; 		inc	hl
(1) 2260/     BAC :                     ; ; 		inc	hl
(1) 2261/     BAC :                     ; ; 		ld	a,(iy)		; Set freq
(1) 2262/     BAC :                     ; ; 		ld	(hl),a
(1) 2263/     BAC :                     ; ; 		inc 	hl
(1) 2264/     BAC :                     ; ; 		inc	iy
(1) 2265/     BAC :                     ; ; 		ld	a,(iy)
(1) 2266/     BAC :                     ; ; 		ld	(hl),a
(1) 2267/     BAC :                     ; ; 		call	dac_me
(1) 2268/     BAC :                     ; ; 		inc 	hl
(1) 2269/     BAC :                     ; ; 		inc	iy
(1) 2270/     BAC :                     ; ; 		pop	hl
(1) 2271/     BAC :                     ; 
(1) 2272/     BAC :                     ; 		ld	hl,liltrnsfr_list
(1) 2273/     BAC :                     ; 		jr	.comm_me
(1) 2274/     BAC :                     ; ; ; bit 5
(1) 2275/     BAC :                     ; .stop:
(1) 2276/     BAC :                     ; 		res	5,(iy)
(1) 2277/     BAC :                     ; 		ret 
(1) 2278/     BAC :                     ; ; 		ld	hl,.liltrnfr_stop
(1) 2279/     BAC :                     ; ; 		push	hl
(1) 2280/     BAC :                     ; ; 		call	dac_me
(1) 2281/     BAC :                     ; ; 		ld	de,4+3		; Point to arg 2
(1) 2282/     BAC :                     ; ; 		add	hl,de
(1) 2283/     BAC :                     ; ; 		ld	a,(iy)		; Set channel
(1) 2284/     BAC :                     ; ; 		and	1111b
(1) 2285/     BAC :                     ; ; 		ld	(hl),a
(1) 2286/     BAC :                     ; ; 		inc	hl
(1) 2287/     BAC :                     ; ; 		inc	hl
(1) 2288/     BAC :                     ; ; 		inc 	hl
(1) 2289/     BAC :                     ; ; 		inc 	hl
(1) 2290/     BAC :                     ; ; 		ld	(hl),0
(1) 2291/     BAC :                     ; ; 		pop	hl
(1) 2292/     BAC :                     
(1) 2293/     BAC :                     ; 		align 10h
(1) 2294/     BAC :                     ; 		
(1) 2295/     BAC :                     ; .liltrnfr_play:
(1) 2296/     BAC :                     ; 	db CmdTaskMd_PWM_SetChnl>>24&0FFh,CmdTaskMd_PWM_SetChnl>>16&0FFh
(1) 2297/     BAC :                     ; 	db CmdTaskMd_PWM_SetChnl>>8&0FFh,CmdTaskMd_PWM_SetChnl&0FFh
(1) 2298/     BAC :                     ; 	db 0,0,0,0	; Slot
(1) 2299/     BAC :                     ; 	db 0,0,0,0	; Start
(1) 2300/     BAC :                     ; 	db 0,0,0,0	; End
(1) 2301/     BAC :                     ; 	db 0,0,0,0	; Loop
(1) 2302/     BAC :                     ; 	db 0,0,0,0	; Volume
(1) 2303/     BAC :                     ; 	db 0,0,0,0	; Settings
(1) 2304/     BAC :                     ; 	db 0,0,0,0	; Pitch
(1) 2305/     BAC :                     ; 	
(1) 2306/     BAC :                     ; .liltrnfr_stop:
(1) 2307/     BAC :                     ; 	db CmdTaskMd_PWM_SetChnl>>24&0FFh,CmdTaskMd_PWM_SetChnl>>16&0FFh
(1) 2308/     BAC :                     ; 	db CmdTaskMd_PWM_SetChnl>>8&0FFh,CmdTaskMd_PWM_SetChnl&0FFh
(1) 2309/     BAC :                     ; 	db 0,0,0,0	; Slot
(1) 2310/     BAC :                     ; 	db 0,0,0,0	; Flags
(1) 2311/     BAC :                     ; 
(1) 2312/     BAC :                     ; liltrnsfr_list:
(1) 2313/     BAC :                     ;  rept 7
(1) 2314/     BAC :                     ; 	db 0,0,0,0	; SH2 CALL routine
(1) 2315/     BAC :                     ; 	db 0,0,0,0	; Slot
(1) 2316/     BAC :                     ; 	db 0,0,0,0	; Start
(1) 2317/     BAC :                     ; 	db 0,0,0,0	; End
(1) 2318/     BAC :                     ; 	db 0,0,0,0	; Loop
(1) 2319/     BAC :                     ; 	db 0,0,0,0	; Volume
(1) 2320/     BAC :                     ; 	db 0,0,0,0	; Settings
(1) 2321/     BAC :                     ; 	db 0,0,0,0	; Pitch
(1) 2322/     BAC :                     ;  endm
(1) 2323/     BAC :                      
(1) 2324/     BAC :                     ; ====================================================================
(1) 2325/     BAC :                     ; ----------------------------------------------------------------
(1) 2326/     BAC :                     ; Subroutines
(1) 2327/     BAC :                     ; ----------------------------------------------------------------
(1) 2328/     BAC :                     
(1) 2329/     BAC :                     ; --------------------------------------------------------
(1) 2330/     BAC :                     ; Init sound engine
(1) 2331/     BAC :                     ; --------------------------------------------------------
(1) 2332/     BAC :                     
(1) 2333/     BAC :                     gema_init:
(1) 2334/     BAC : CD 56 0D            		call	dac_off
(1) 2335/     BAF : 3E 9F               		ld	a,09Fh
(1) 2336/     BB1 : 32 11 7F            		ld	(Zpsg_ctrl),a
(1) 2337/     BB4 : 3E BF               		ld	a,0BFh
(1) 2338/     BB6 : 32 11 7F            		ld	(Zpsg_ctrl),a		
(1) 2339/     BB9 : 3E DF               		ld	a,0DFh
(1) 2340/     BBB : 32 11 7F            		ld	(Zpsg_ctrl),a	
(1) 2341/     BBE : 3E FF               		ld	a,0FFh
(1) 2342/     BC0 : 32 11 7F            		ld	(Zpsg_ctrl),a
(1) 2343/     BC3 : 11 00 27            		ld	de,2700h
(1) 2344/     BC6 : CD B9 0E            		call	fm_send_1
(1) 2345/     BC9 : 11 00 28            		ld	de,2800h
(1) 2346/     BCC : CD B9 0E            		call	fm_send_1
(1) 2347/     BCF : 11 01 28            		ld	de,2801h
(1) 2348/     BD2 : CD B9 0E            		call	fm_send_1
(1) 2349/     BD5 : 11 02 28            		ld	de,2802h
(1) 2350/     BD8 : CD B9 0E            		call	fm_send_1
(1) 2351/     BDB : 11 04 28            		ld	de,2804h
(1) 2352/     BDE : CD B9 0E            		call	fm_send_1
(1) 2353/     BE1 : 11 05 28            		ld	de,2805h
(1) 2354/     BE4 : CD B9 0E            		call	fm_send_1
(1) 2355/     BE7 : 11 06 28            		ld	de,2806h
(1) 2356/     BEA : CD B9 0E            		call	fm_send_1
(1) 2357/     BED : 11 00 2B            		ld	de,2B00h
(1) 2358/     BF0 : CD B9 0E            		call	fm_send_1
(1) 2359/     BF3 : 21 00 16            		ld	hl,dWaveBuff			; Initilize WAVE FIFO
(1) 2360/     BF6 : 11 01 16            		ld	de,dWaveBuff+1
(1) 2361/     BF9 : 01 FF 00            		ld	bc,100h-1
(1) 2362/     BFC : 36 80               		ld	(hl),80h
(1) 2363/     BFE : ED B0               		ldir
(1) 2364/     C00 : C9                  		ret
(1) 2365/     C01 :                     		
(1) 2366/     C01 :                     ; --------------------------------------------------------
(1) 2367/     C01 :                     ; Read cmd byte, auto re-aligns to 7Fh
(1) 2368/     C01 :                     ; --------------------------------------------------------
(1) 2369/     C01 :                     
(1) 2370/     C01 :                     get_cmdbyte:
(1) 2371/     C01 : C5                  		push	bc
(1) 2372/     C02 : D5                  		push	de
(1) 2373/     C03 : E5                  		push	hl
(1) 2374/     C04 :                     .getcbytel:
(1) 2375/     C04 : CD 03 0F            		call	dac_me
(1) 2376/     C07 : CD 17 0F            		call	dac_fill
(1) 2377/     C0A : 3A 2C 00            		ld	a,(commZWrite)
(1) 2378/     C0D : 47                  		ld	b,a
(1) 2379/     C0E : 3A 2B 00            		ld	a,(commZRead)
(1) 2380/     C11 : B8                  		cp	b
(1) 2381/     C12 : CA 04 0C            		jp	z,.getcbytel		; wait for a command from 68k
(1) 2382/     C15 : 06 00               		ld	b,0
(1) 2383/     C17 : 4F                  		ld	c,a
(1) 2384/     C18 : 21 00 1E            		ld	hl,commZfifo
(1) 2385/     C1B : CD 03 0F            		call	dac_me
(1) 2386/     C1E : 09                  		add	hl,bc
(1) 2387/     C1F : 3C                  		inc	a
(1) 2388/     C20 : E6 3F               		and	3Fh			; limit to 128
(1) 2389/     C22 : 32 2B 00            		ld	(commZRead),a
(1) 2390/     C25 : 7E                  		ld	a,(hl)
(1) 2391/     C26 : E1                  		pop	hl
(1) 2392/     C27 : D1                  		pop	de
(1) 2393/     C28 : C1                  		pop	bc
(1) 2394/     C29 : C9                  		ret
(1) 2395/     C2A :                     			      
(1) 2396/     C2A :                     ; --------------------------------------------------------
(1) 2397/     C2A :                     ; check_tick
(1) 2398/     C2A :                     ; 
(1) 2399/     C2A :                     ; Checks if VBlank triggred a TICK (1/150)
(1) 2400/     C2A :                     ; --------------------------------------------------------
(1) 2401/     C2A :                     
(1) 2402/     C2A :                     check_tick:
(1) 2403/     C2A : F3                  		di				; Disable ints
(1) 2404/     C2B : F5                  		push	af
(1) 2405/     C2C : E5                  		push	hl
(1) 2406/     C2D : 21 1B 00            		ld	hl,tickFlag+1		; read last TICK flag
(1) 2407/     C30 : 7E                  		ld	a,(hl)			; non-zero value?
(1) 2408/     C31 : B7                  		or 	a
(1) 2409/     C32 : 28 1D               		jr	z,.ctnotick
(1) 2410/     C34 :                     	; ints are disabled from here
(1) 2411/     C34 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2412/     C36 : 23                  		inc	hl			; Move to tickCnt
(1) 2413/     C37 : 34                  		inc	(hl)			; and increment
(1) 2414/     C38 : CD 03 0F            		call	dac_me
(1) 2415/     C3B : D5                  		push	de
(1) 2416/     C3C : 2A 1F 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2417/     C3F : ED 5B 1D 00         		ld	de,(sbeatPtck)
(1) 2418/     C43 : CD 03 0F            		call	dac_me
(1) 2419/     C46 : 19                  		add	hl,de
(1) 2420/     C47 : 22 1F 00            		ld	(sbeatAcc),hl
(1) 2421/     C4A : D1                  		pop	de
(1) 2422/     C4B : CD 03 0F            		call	dac_me
(1) 2423/     C4E : CD 17 0F            		call	dac_fill
(1) 2424/     C51 :                     .ctnotick:
(1) 2425/     C51 : E1                  		pop	hl
(1) 2426/     C52 : F1                  		pop	af
(1) 2427/     C53 : FB                  		ei				; Enable ints again
(1) 2428/     C54 : C9                  		ret
(1) 2429/     C55 :                     
(1) 2430/     C55 :                     ; --------------------------------------------------------
(1) 2431/     C55 :                     ; set_tempo
(1) 2432/     C55 :                     ; 
(1) 2433/     C55 :                     ; Input:
(1) 2434/     C55 :                     ; a - Beats per minute
(1) 2435/     C55 :                     ;
(1) 2436/     C55 :                     ; Uses:
(1) 2437/     C55 :                     ; de,hl
(1) 2438/     C55 :                     ; --------------------------------------------------------
(1) 2439/     C55 :                     
(1) 2440/     C55 :                     set_tempo:
(1) 2441/     C55 : 11 DA 00            		ld	de,218
(1) 2442/     C58 : CD 67 0C            		call	do_multiply
(1) 2443/     C5B : AF                  		xor	a
(1) 2444/     C5C : CB 25               		sla	l
(1) 2445/     C5E : CB 14               		rl	h
(1) 2446/     C60 : 17                  		rla			; AH <- sbpt, 8 fracs
(1) 2447/     C61 : 6C                  		ld	l,h
(1) 2448/     C62 : 67                  		ld	h,a		; HL <- AH
(1) 2449/     C63 : 22 1D 00            		ld	(sbeatPtck),hl
(1) 2450/     C66 : C9                  		ret
(1) 2451/     C67 :                     
(1) 2452/     C67 :                     ; ---------------------------------------------
(1) 2453/     C67 :                     ; do_multiply
(1) 2454/     C67 :                     ; 
(1) 2455/     C67 :                     ; Input:
(1) 2456/     C67 :                     ; hl - Start from
(1) 2457/     C67 :                     ; de - Multply by this
(1) 2458/     C67 :                     ; ---------------------------------------------
(1) 2459/     C67 :                     
(1) 2460/     C67 :                     ; 			      ; GETPATPTR
(1) 2461/     C67 :                     ; 			      ; 		ld	HL,PATCHDATA
(1) 2462/     C67 :                     ; 	dc.b	$21,$86,$18
(1) 2463/     C67 :                     ; 			      ; 		ld	DE,39
(1) 2464/     C67 :                     ; 	dc.b	$11,$27,$00
(1) 2465/     C67 :                     ; 			      ; 		jr	MULADD
(1) 2466/     C67 :                     ; 	dc.b	$18,$03
(1) 2467/     C67 :                     
(1) 2468/     C67 :                     do_multiply:
(1) 2469/     C67 : 21 00 00            		ld	hl,0
(1) 2470/     C6A :                     .mul_add:
(1) 2471/     C6A : CB 3F               		srl	a
(1) 2472/     C6C : 30 01               		jr	nc,.mulbitclr
(1) 2473/     C6E : 19                  		add	hl,de
(1) 2474/     C6F :                     .mulbitclr:
(1) 2475/     C6F : C8                  		ret	z
(1) 2476/     C70 : CB 23               		sla	e		; if more bits still set in A, DE*=2 and loop
(1) 2477/     C72 : CB 12               		rl	d
(1) 2478/     C74 : 18 F4               		jr	.mul_add
(1) 2479/     C76 :                     
(1) 2480/     C76 :                     ; --------------------------------------------------------
(1) 2481/     C76 :                     ; transferRom
(1) 2482/     C76 :                     ; 
(1) 2483/     C76 :                     ; Transfer bytes from ROM to Z80, this also tells
(1) 2484/     C76 :                     ; to 68k that we are reading fom ROM
(1) 2485/     C76 :                     ; 
(1) 2486/     C76 :                     ; Input:
(1) 2487/     C76 :                     ; a  - Source ROM address $xx0000
(1) 2488/     C76 :                     ; bc - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 2489/     C76 :                     ; hl - Source ROM address $00xxxx
(1) 2490/     C76 :                     ; de - Destination address
(1) 2491/     C76 :                     ; 
(1) 2492/     C76 :                     ; Uses:
(1) 2493/     C76 :                     ; b, ix
(1) 2494/     C76 :                     ; 
(1) 2495/     C76 :                     ; Notes:
(1) 2496/     C76 :                     ; call dac_fill first if transfering anything other than
(1) 2497/     C76 :                     ; WAV sample data, just to be safe
(1) 2498/     C76 :                     ; --------------------------------------------------------
(1) 2499/     C76 :                     
(1) 2500/     C76 :                     ; TODO: check if I can improve this
(1) 2501/     C76 :                     
(1) 2502/     C76 :                     transferRom:
(1) 2503/     C76 : CD 03 0F            		call	dac_me
(1) 2504/     C79 : DD E5               		push	ix
(1) 2505/     C7B : DD 21 2D 00         		ld	ix,commZRomBlk
(1) 2506/     C7F : 22 29 00            		ld	(x68ksrclsb),hl
(1) 2507/     C82 : CB BC               		res	7,h
(1) 2508/     C84 : 06 00               		ld	b,0
(1) 2509/     C86 : 0B                  		dec	bc
(1) 2510/     C87 : 09                  		add	hl,bc
(1) 2511/     C88 : CB 7C               		bit	7,h
(1) 2512/     C8A : 20 0B               		jr	nz,.double
(1) 2513/     C8C : 2A 29 00            		ld	hl,(x68ksrclsb)		; single transfer
(1) 2514/     C8F : 0C                  		inc	c
(1) 2515/     C90 : 47                  		ld	b,a
(1) 2516/     C91 : CD C0 0C            		call	.transfer
(1) 2517/     C94 : DD E1               		pop	ix
(1) 2518/     C96 : C9                  		ret
(1) 2519/     C97 :                     .double:
(1) 2520/     C97 : CD 03 0F            		call	dac_me
(1) 2521/     C9A : 47                  		ld	b,a			; double transfer
(1) 2522/     C9B : C5                  		push	bc
(1) 2523/     C9C : E5                  		push	hl
(1) 2524/     C9D : 79                  		ld	a,c
(1) 2525/     C9E : 95                  		sub	a,l
(1) 2526/     C9F : 4F                  		ld	c,a
(1) 2527/     CA0 : 2A 29 00            		ld	hl,(x68ksrclsb)
(1) 2528/     CA3 : CD C0 0C            		call	.transfer
(1) 2529/     CA6 : E1                  		pop	hl
(1) 2530/     CA7 : C1                  		pop	bc
(1) 2531/     CA8 : CD 03 0F            		call	dac_me
(1) 2532/     CAB : 4D                  		ld	c,l
(1) 2533/     CAC : 0C                  		inc	c
(1) 2534/     CAD : 3A 2A 00            		ld	a,(x68ksrcmid)
(1) 2535/     CB0 : E6 80               		and	80h
(1) 2536/     CB2 : C6 80               		add	a,80h
(1) 2537/     CB4 : 67                  		ld	h,a
(1) 2538/     CB5 : 2E 00               		ld	l,0
(1) 2539/     CB7 : 30 01               		jr	nc,.x68knocarry
(1) 2540/     CB9 : 04                  		inc	b
(1) 2541/     CBA :                     .x68knocarry:
(1) 2542/     CBA : CD C0 0C            		call	.transfer
(1) 2543/     CBD : DD E1               		pop	ix
(1) 2544/     CBF : C9                  		ret
(1) 2545/     CC0 :                     
(1) 2546/     CC0 :                     ; b  - Source ROM xx0000
(1) 2547/     CC0 :                     ;  c - Bytes to transfer (00h not allowed)
(1) 2548/     CC0 :                     ; hl - Source ROM 00xxxx
(1) 2549/     CC0 :                     ; de - Destination address
(1) 2550/     CC0 :                     ; 
(1) 2551/     CC0 :                     ; Uses:
(1) 2552/     CC0 :                     ; a
(1) 2553/     CC0 :                     .transfer:
(1) 2554/     CC0 : CD 03 0F            		call	dac_me
(1) 2555/     CC3 : D5                  		push	de
(1) 2556/     CC4 : 11 00 60            		ld	de,6000h
(1) 2557/     CC7 : 7C                  		ld	a,h
(1) 2558/     CC8 : CB 07               		rlc	a
(1) 2559/     CCA : 12                  		ld	(de),a
(1) 2560/     CCB : 78                  		ld	a,b
(1) 2561/     CCC : 12                  		ld	(de),a
(1) 2562/     CCD : 1F                  		rra
(1) 2563/     CCE : 12                  		ld	(de),a
(1) 2564/     CCF : 1F                  		rra
(1) 2565/     CD0 : 12                  		ld	(de),a
(1) 2566/     CD1 : 1F                  		rra
(1) 2567/     CD2 : CD 03 0F            		call	dac_me
(1) 2568/     CD5 : 12                  		ld	(de),a
(1) 2569/     CD6 : 1F                  		rra
(1) 2570/     CD7 : 12                  		ld	(de),a
(1) 2571/     CD8 : 1F                  		rra
(1) 2572/     CD9 : 12                  		ld	(de),a
(1) 2573/     CDA : 1F                  		rra
(1) 2574/     CDB : 12                  		ld	(de),a
(1) 2575/     CDC : 1F                  		rra
(1) 2576/     CDD : 12                  		ld	(de),a
(1) 2577/     CDE : D1                  		pop	de
(1) 2578/     CDF : CB FC               		set	7,h
(1) 2579/     CE1 : CD 03 0F            		call	dac_me
(1) 2580/     CE4 :                     
(1) 2581/     CE4 :                     	; Transfer data in parts of 3bytes
(1) 2582/     CE4 :                     	; while playing cache'd WAV in the process
(1) 2583/     CE4 : 79                  		ld	a,c
(1) 2584/     CE5 : 06 00               		ld	b,0
(1) 2585/     CE7 : DD CB 01 C6         		set	0,(ix+1)	; Tell to 68k that we are reading from ROM
(1) 2586/     CEB : D6 03               		sub	a,3
(1) 2587/     CED : 38 14               		jr	c,.x68klast
(1) 2588/     CEF :                     .x68kloop:
(1) 2589/     CEF : 0E 02               		ld	c,3-1
(1) 2590/     CF1 : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 2591/     CF5 : 20 20               		jr	nz,.x68klpwt
(1) 2592/     CF7 :                     .x68klpcont:
(1) 2593/     CF7 : ED B0               		ldir
(1) 2594/     CF9 : 00                  		nop
(1) 2595/     CFA : CD 03 0F            		call	dac_me
(1) 2596/     CFD : 00                  		nop
(1) 2597/     CFE : D6 02               		sub	a,3-1
(1) 2598/     D00 : D2 EF 0C            		jp	nc,.x68kloop
(1) 2599/     D03 :                     ; last block
(1) 2600/     D03 :                     .x68klast:
(1) 2601/     D03 : C6 03               		add	a,3
(1) 2602/     D05 : 4F                  		ld	c,a
(1) 2603/     D06 : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 2604/     D0A : C2 2C 0D            		jp	nz,.x68klstwt
(1) 2605/     D0D :                     .x68klstcont:
(1) 2606/     D0D : ED B0               		ldir
(1) 2607/     D0F : CD 03 0F            		call	dac_me
(1) 2608/     D12 : DD CB 01 86         		res	0,(ix+1)
(1) 2609/     D16 : C9                  		ret
(1) 2610/     D17 :                     
(1) 2611/     D17 :                     ; If Genesis wants to do a DMA job...
(1) 2612/     D17 :                     ; This MIGHT cause the DAC to ran out of sample data
(1) 2613/     D17 :                     .x68klpwt:
(1) 2614/     D17 : DD CB 01 86         		res	0,(ix+1)		; Not reading ROM
(1) 2615/     D1B :                     .x68kpwtlp:
(1) 2616/     D1B : 00                  		nop
(1) 2617/     D1C : CD 03 0F            		call	dac_me
(1) 2618/     D1F : 00                  		nop
(1) 2619/     D20 : DD CB 00 46         		bit	0,(ix)			; Is ROM free from 68K?
(1) 2620/     D24 : 20 F5               		jr	nz,.x68kpwtlp
(1) 2621/     D26 : DD CB 01 C6         		set	0,(ix+1)		; Reading ROM again.
(1) 2622/     D2A : 18 CB               		jr	.x68klpcont
(1) 2623/     D2C :                     
(1) 2624/     D2C :                     ; For last write
(1) 2625/     D2C :                     .x68klstwt:
(1) 2626/     D2C : DD CB 01 86         		res	0,(ix+1)		; Not reading ROM
(1) 2627/     D30 :                     .x68klstwtlp:
(1) 2628/     D30 : 00                  		nop
(1) 2629/     D31 : CD 03 0F            		call	dac_me
(1) 2630/     D34 : 00                  		nop
(1) 2631/     D35 : DD CB 00 46         		bit	0,(ix)			; Is ROM free from 68K?
(1) 2632/     D39 : 20 F5               		jr	nz,.x68klstwtlp
(1) 2633/     D3B : DD CB 01 C6         		set	0,(ix+1)		; Reading ROM again.
(1) 2634/     D3F : 18 CC               		jr	.x68klstcont
(1) 2635/     D41 :                     
(1) 2636/     D41 :                     ; --------------------------------------------------------
(1) 2637/     D41 :                     ; bruteforce DAC ON/OFF playback
(1) 2638/     D41 :                     ; --------------------------------------------------------
(1) 2639/     D41 :                     
(1) 2640/     D41 :                     dac_on:
(1) 2641/     D41 : 3E 2B               		ld	a,2Bh
(1) 2642/     D43 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2643/     D46 : 3E 80               		ld	a,80h
(1) 2644/     D48 : 32 01 40            		ld	(Zym_data_1),a
(1) 2645/     D4B : 3E D9               		ld 	a,zopcExx
(1) 2646/     D4D : 32 03 0F            		ld	(dac_me),a
(1) 2647/     D50 : 3E F5               		ld 	a,zopcPushAf
(1) 2648/     D52 : 32 17 0F            		ld	(dac_fill),a
(1) 2649/     D55 : C9                  		ret
(1) 2650/     D56 :                     dac_off:
(1) 2651/     D56 : 3E 2B               		ld	a,2Bh
(1) 2652/     D58 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2653/     D5B : 3E 00               		ld	a,00h
(1) 2654/     D5D : 32 01 40            		ld	(Zym_data_1),a
(1) 2655/     D60 : 3E C9               		ld 	a,zopcRet
(1) 2656/     D62 : 32 03 0F            		ld	(dac_me),a
(1) 2657/     D65 : 3E C9               		ld 	a,zopcRet
(1) 2658/     D67 : 32 17 0F            		ld	(dac_fill),a
(1) 2659/     D6A : C9                  		ret
(1) 2660/     D6B :                     
(1) 2661/     D6B :                     ; ====================================================================
(1) 2662/     D6B :                     ; ----------------------------------------------------------------
(1) 2663/     D6B :                     ; Sound chip routines
(1) 2664/     D6B :                     ; ----------------------------------------------------------------
(1) 2665/     D6B :                     
(1) 2666/     D6B :                     ; --------------------------------------------------------
(1) 2667/     D6B :                     ; psg_env
(1) 2668/     D6B :                     ; 
(1) 2669/     D6B :                     ; Processes the PSG manually to add effects
(1) 2670/     D6B :                     ; --------------------------------------------------------
(1) 2671/     D6B :                     
(1) 2672/     D6B :                     psg_env:
(1) 2673/     D6B :                     	; NOTE: this now reads backwards, because
(1) 2674/     D6B :                     	; of the HAT mode check
(1) 2675/     D6B : FD 21 03 13         		ld	iy,psgcom+3
(1) 2676/     D6F : 21 11 7F            		ld	hl,Zpsg_ctrl
(1) 2677/     D72 : 16 E0               		ld	d,0E0h			; PSG first ctrl command
(1) 2678/     D74 : 1E 04               		ld	e,4			; 4 channels
(1) 2679/     D76 :                     .vloop:
(1) 2680/     D76 : CD 03 0F            		call	dac_me
(1) 2681/     D79 : FD 4E 00            		ld	c,(iy+COM)		; c - current command
(1) 2682/     D7C : FD 36 00 00         		ld	(iy+COM),0
(1) 2683/     D80 : CB 51               		bit	2,c			; bit 2 - stop sound
(1) 2684/     D82 : 28 0C               		jr	z,.ckof
(1) 2685/     D84 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 2686/     D88 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 2687/     D8C : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 2688/     D90 :                     ; 		ld	a,4			; PSG Channel 3?
(1) 2689/     D90 :                     ; 		cp	e
(1) 2690/     D90 :                     ; 		jr	nz,.ckof
(1) 2691/     D90 :                     ; 		nop
(1) 2692/     D90 :                     ; 		res	5,(ix)			; Unlock PSG3
(1) 2693/     D90 :                     .ckof:
(1) 2694/     D90 : CB 49               		bit	1,c			; bit 1 - key off
(1) 2695/     D92 : 28 0E               		jr      z,.ckon
(1) 2696/     D94 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 2697/     D97 : B7                  		or	a
(1) 2698/     D98 : 28 08               		jr	z,.ckon
(1) 2699/     D9A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2700/     D9E : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 2701/     DA2 :                     .ckon:
(1) 2702/     DA2 : CB 41               		bit	0,c			; bit 0 - key on
(1) 2703/     DA4 : 28 43               		jr	z,.envproc
(1) 2704/     DA6 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 2705/     DAA : 3A 2F 00            		ld	a,(psgHatMode)		; check if using tone3 mode.
(1) 2706/     DAD : 4F                  		ld	c,a
(1) 2707/     DAE : E6 03               		and	11b
(1) 2708/     DB0 : FE 03               		cp	11b
(1) 2709/     DB2 : CA C6 0D            		jp	z,.tnmode
(1) 2710/     DB5 :                     .wrfreq:
(1) 2711/     DB5 : 7B                  		ld	a,e
(1) 2712/     DB6 : FE 04               		cp	4
(1) 2713/     DB8 : CA DC 0D            		jp	z,.sethat
(1) 2714/     DBB : FD 7E 1C            		ld	a,(iy+DTL)		; load frequency LSB or NOISE data
(1) 2715/     DBE : B2                  		or	d			; OR with current channel
(1) 2716/     DBF : 77                  		ld	(hl),a			; write it
(1) 2717/     DC0 : FD 7E 20            		ld	a,(iy+DTH)
(1) 2718/     DC3 : 77                  		ld	(hl),a
(1) 2719/     DC4 : 18 1B               		jr	.nskip
(1) 2720/     DC6 :                     
(1) 2721/     DC6 :                     ; Tone3 mode
(1) 2722/     DC6 :                     .tnmode:
(1) 2723/     DC6 : 7B                  		ld	a,e
(1) 2724/     DC7 : FE 04               		cp	4			; NOISE
(1) 2725/     DC9 : 28 07               		jr	z,.psteal
(1) 2726/     DCB : FE 03               		cp	3			; PSG3, can't play
(1) 2727/     DCD : CA E1 0D            		jp	z,.nskip
(1) 2728/     DD0 : 18 E3               		jr	.wrfreq
(1) 2729/     DD2 :                     .psteal:
(1) 2730/     DD2 : FD 7E 1C            		ld	a,(iy+DTL)		; Steal PSG3's freq
(1) 2731/     DD5 : F6 C0               		or	0C0h
(1) 2732/     DD7 : 77                  		ld	(hl),a
(1) 2733/     DD8 : FD 7E 20            		ld	a,(iy+DTH)
(1) 2734/     DDB : 77                  		ld	(hl),a
(1) 2735/     DDC :                     .sethat:
(1) 2736/     DDC : 3A 2F 00            		ld	a,(psgHatMode)		; write hat mode only.
(1) 2737/     DDF : B2                  		or	d
(1) 2738/     DE0 : 77                  		ld	(hl),a
(1) 2739/     DE1 :                     .nskip:
(1) 2740/     DE1 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2741/     DE5 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 2742/     DE9 :                     	
(1) 2743/     DE9 :                     ; ----------------------------
(1) 2744/     DE9 :                     ; Process effects
(1) 2745/     DE9 :                     ; ----------------------------
(1) 2746/     DE9 :                     
(1) 2747/     DE9 :                     .envproc:
(1) 2748/     DE9 : CD 03 0F            		call	dac_me
(1) 2749/     DEC : FD 7E 18            		ld	a,(iy+MODE)
(1) 2750/     DEF : B7                  		or	a			; no modes
(1) 2751/     DF0 : CA 73 0E            		jp	z,.vedlp
(1) 2752/     DF3 : FE 01               		cp 	001b			; Attack mode
(1) 2753/     DF5 : 20 26               		jr	nz,.chk2
(1) 2754/     DF7 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2755/     DFB : FD 7E 04            		ld	a,(iy+LEV)		; a - current level (volume)
(1) 2756/     DFE : FD 46 24            		ld	b,(iy+ALV)		; b - attack level
(1) 2757/     E01 : FD 96 08            		sub	a,(iy+ATK)		; (attack rate) - (level)
(1) 2758/     E04 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 2759/     E06 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 2760/     E08 : B8                  		cp	b			; attack rate == level?
(1) 2761/     E09 : 38 08               		jr	c,.atkend
(1) 2762/     E0B : 28 06               		jr	z,.atkend		
(1) 2763/     E0D : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 2764/     E10 : C3 73 0E            		jp	.vedlp
(1) 2765/     E13 :                     .atkend:
(1) 2766/     E13 : FD 70 04            		ld	(iy+LEV),b		; attack level = new level
(1) 2767/     E16 : FD 36 18 02         		ld	(iy+MODE),2		; set to decay mode
(1) 2768/     E1A : C3 73 0E            		jp	.vedlp
(1) 2769/     E1D :                     .chk2:
(1) 2770/     E1D :                     
(1) 2771/     E1D : FE 02               		cp	010b			; Decay mode
(1) 2772/     E1F : C2 51 0E            		jp	nz,.chk4
(1) 2773/     E22 :                     .dectmr:
(1) 2774/     E22 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2775/     E26 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 2776/     E29 : FD 46 10            		ld	b,(iy+SLV)		; b - Sustain
(1) 2777/     E2C : B8                  		cp	b
(1) 2778/     E2D : 38 0C               		jr	c,.dkadd		; if carry: add
(1) 2779/     E2F : 28 17               		jr	z,.dkyend		; if zero:  finish
(1) 2780/     E31 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 2781/     E34 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 2782/     E36 : B8                  		cp	b			; compare level
(1) 2783/     E37 : 38 0F               		jr	c,.dkyend		; and finish
(1) 2784/     E39 : 18 08               		jr	.dksav
(1) 2785/     E3B :                     .dkadd:
(1) 2786/     E3B : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 2787/     E3E : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 2788/     E40 : B8                  		cp	b			; compare level
(1) 2789/     E41 : 30 05               		jr	nc,.dkyend
(1) 2790/     E43 :                     .dksav:
(1) 2791/     E43 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 2792/     E46 : 18 2B               		jr	.vedlp
(1) 2793/     E48 :                     .dkyend:
(1) 2794/     E48 : FD 70 04            		ld	(iy+LEV),b		; save last attack
(1) 2795/     E4B : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 2796/     E4F : 18 22               		jr	.vedlp
(1) 2797/     E51 :                     
(1) 2798/     E51 :                     .chk4:
(1) 2799/     E51 : FE 04               		cp	100b			; Sustain phase
(1) 2800/     E53 : 20 1E               		jr	nz,.vedlp
(1) 2801/     E55 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2802/     E59 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 2803/     E5C : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 2804/     E5F : 38 05               		jr	c,.killenv		; release done
(1) 2805/     E61 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 2806/     E64 : 18 0D               		jr	.vedlp
(1) 2807/     E66 :                     .killenv:
(1) 2808/     E66 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 2809/     E6A : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 2810/     E6E : 3E 04               		ld	a,4			; PSG Channel 3?
(1) 2811/     E70 : BB                  		cp	e
(1) 2812/     E71 : 20 00               		jr	nz,.vedlp
(1) 2813/     E73 :                     ; 		res	5,(ix)			; Unlock PSG3
(1) 2814/     E73 :                     .vedlp:
(1) 2815/     E73 : FD 2B               		dec	iy			; next COM to check
(1) 2816/     E75 : 7A                  		ld	a,d
(1) 2817/     E76 : D6 20               		sub	a,20h
(1) 2818/     E78 : 57                  		ld	d,a
(1) 2819/     E79 : 1D                  		dec	e
(1) 2820/     E7A : C2 76 0D            		jp	nz,.vloop
(1) 2821/     E7D :                     
(1) 2822/     E7D :                     	; ----------------------------
(1) 2823/     E7D :                     	; Set final volumes
(1) 2824/     E7D : CD 03 0F            		call	dac_me
(1) 2825/     E80 : FD 21 00 13         		ld	iy,psgcom
(1) 2826/     E84 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 2827/     E88 : 21 90 00            		ld	hl,90h		; Channel + volumeset bit
(1) 2828/     E8B : 11 20 00            		ld	de,20h		; next channel increment
(1) 2829/     E8E : 06 04               		ld	b,4
(1) 2830/     E90 :                     .nextpsg:
(1) 2831/     E90 : FD CB 28 46         		bit	0,(iy+FLG)	; PSG update?
(1) 2832/     E94 : 28 13               		jr	z,.flgoff
(1) 2833/     E96 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 2834/     E9A : FD 7E 04            		ld	a,(iy+LEV)	; a - Level
(1) 2835/     E9D : CB 3F               		srl	a		; (Level >> 4)
(1) 2836/     E9F : CB 3F               		srl	a
(1) 2837/     EA1 : CB 3F               		srl	a
(1) 2838/     EA3 : CB 3F               		srl	a
(1) 2839/     EA5 : B5                  		or	l		; merge Channel bits
(1) 2840/     EA6 : DD 77 00            		ld	(ix),a		; Write volume
(1) 2841/     EA9 :                     .flgoff:
(1) 2842/     EA9 : 19                  		add	hl,de		; next channel
(1) 2843/     EAA : FD 23               		inc	iy		; next com
(1) 2844/     EAC : 10 E2               		djnz	.nextpsg
(1) 2845/     EAE : CD 03 0F            		call	dac_me
(1) 2846/     EB1 : C9                  		ret
(1) 2847/     EB2 :                     
(1) 2848/     EB2 :                     ; ---------------------------------------------
(1) 2849/     EB2 :                     ; FM send registers
(1) 2850/     EB2 :                     ; 
(1) 2851/     EB2 :                     ; Input:
(1) 2852/     EB2 :                     ; d - ctrl
(1) 2853/     EB2 :                     ; e - data
(1) 2854/     EB2 :                     ; ---------------------------------------------
(1) 2855/     EB2 :                     
(1) 2856/     EB2 :                     ; ix - first byte: FM id
(1) 2857/     EB2 :                     fm_autoset:
(1) 2858/     EB2 : DD CB 00 56         		bit	2,(ix)
(1) 2859/     EB6 : C2 C4 0E            		jp	nz,fm_send_2
(1) 2860/     EB9 :                     		
(1) 2861/     EB9 :                     fm_send_1:
(1) 2862/     EB9 : 7A                  		ld	a,d
(1) 2863/     EBA : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2864/     EBD : 00                  		nop
(1) 2865/     EBE : 7B                  		ld	a,e
(1) 2866/     EBF : 32 01 40            		ld	(Zym_data_1),a
(1) 2867/     EC2 : 00                  		nop
(1) 2868/     EC3 : C9                  		ret
(1) 2869/     EC4 :                     
(1) 2870/     EC4 :                     fm_send_2:
(1) 2871/     EC4 : 7A                  		ld	a,d
(1) 2872/     EC5 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 2873/     EC8 : 00                  		nop
(1) 2874/     EC9 : 7B                  		ld	a,e
(1) 2875/     ECA : 32 03 40            		ld	(Zym_data_2),a
(1) 2876/     ECD : 00                  		nop	
(1) 2877/     ECE : C9                  		ret
(1) 2878/     ECF :                     
(1) 2879/     ECF :                     ; --------------------------------------------------------
(1) 2880/     ECF :                     ; dac_play
(1) 2881/     ECF :                     ; 
(1) 2882/     ECF :                     ; Plays a new sample
(1) 2883/     ECF :                     ; --------------------------------------------------------
(1) 2884/     ECF :                     
(1) 2885/     ECF :                     dac_play:
(1) 2886/     ECF : F3                  		di
(1) 2887/     ED0 : CD 56 0D            		call	dac_off
(1) 2888/     ED3 : D9                  		exx
(1) 2889/     ED4 : 01 16 00            		ld	bc,dWaveBuff>>8			; bc - WAVFIFO MSB
(1) 2890/     ED7 : ED 5B 11 00         		ld	de,(wave_Pitch)			; de - Pitch
(1) 2891/     EDB : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8		; hl - WAVFIFO LSB pointer (xx.00)
(1) 2892/     EDE : D9                  		exx
(1) 2893/     EDF : 2A 08 00            		ld	hl,(wave_Start)
(1) 2894/     EE2 : 3A 0A 00            		ld 	a,(wave_Start+2)
(1) 2895/     EE5 : 22 22 00            		ld	(dDacPntr),hl
(1) 2896/     EE8 : 32 24 00            		ld	(dDacPntr+2),a
(1) 2897/     EEB : 2A 0B 00            		ld	hl,(wave_End)
(1) 2898/     EEE : 3A 0D 00            		ld 	a,(wave_End+2)
(1) 2899/     EF1 : 22 25 00            		ld	(dDacCntr),hl
(1) 2900/     EF4 : 32 27 00            		ld	(dDacCntr+2),a
(1) 2901/     EF7 : AF                  		xor	a
(1) 2902/     EF8 : 32 28 00            		ld	(dDacFifoMid),a
(1) 2903/     EFB : CD 25 0F            		call	dac_firstfill
(1) 2904/     EFE : CD 41 0D            		call	dac_on
(1) 2905/     F01 : FB                  		ei
(1) 2906/     F02 : C9                  		ret
(1) 2907/     F03 :                     
(1) 2908/     F03 :                     ; --------------------------------------------------------
(1) 2909/     F03 :                     ; dac_me
(1) 2910/     F03 :                     ; 
(1) 2911/     F03 :                     ; Writes wave data to DAC using data stored on buffer.
(1) 2912/     F03 :                     ; Call this routine every 6 or more lines of code
(1) 2913/     F03 :                     ; (use any emu-debugger to check if it still plays
(1) 2914/     F03 :                     ; at stable 16000hz)
(1) 2915/     F03 :                     ;
(1) 2916/     F03 :                     ; Input (EXX):
(1) 2917/     F03 :                     ;  c - WAVEFIFO MSB
(1) 2918/     F03 :                     ; de - Pitch (xx.00)
(1) 2919/     F03 :                     ; h  - WAVEFIFO LSB (as xx.00)
(1) 2920/     F03 :                     ; 
(1) 2921/     F03 :                     ; Uses (EXX):
(1) 2922/     F03 :                     ; b
(1) 2923/     F03 :                     ; 
(1) 2924/     F03 :                     ; *** self-modifiable code ***
(1) 2925/     F03 :                     ; --------------------------------------------------------
(1) 2926/     F03 :                     
(1) 2927/     F03 : D9                  dac_me:		exx				; <-- code changes between EXX(play) and RET(stop)
(1) 2928/     F04 : 08                  		ex	af,af'
(1) 2929/     F05 : 45                  		ld	b,l
(1) 2930/     F06 : 3E 2A               		ld	a,2Ah
(1) 2931/     F08 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2932/     F0B : 6C                  		ld	l,h
(1) 2933/     F0C : 61                  		ld	h,c
(1) 2934/     F0D : 7E                  		ld	a,(hl)
(1) 2935/     F0E : 32 01 40            		ld	(Zym_data_1),a
(1) 2936/     F11 : 65                  		ld	h,l
(1) 2937/     F12 : 68                  		ld	l,b
(1) 2938/     F13 : 19                  		add	hl,de
(1) 2939/     F14 : 08                  		ex	af,af'
(1) 2940/     F15 : D9                  		exx
(1) 2941/     F16 : C9                  		ret
(1) 2942/     F17 :                     
(1) 2943/     F17 :                     ; --------------------------------------------------------
(1) 2944/     F17 :                     ; dac_fill
(1) 2945/     F17 :                     ; 
(1) 2946/     F17 :                     ; Refills a half of the WAVE FIFO data, automatic
(1) 2947/     F17 :                     ; 
(1) 2948/     F17 :                     ; *** self-modifiable code ***
(1) 2949/     F17 :                     ; --------------------------------------------------------
(1) 2950/     F17 :                     
(1) 2951/     F17 : F5                  dac_fill:	push	af			; <-- code changes between PUSH AF(play) and RET(stop)
(1) 2952/     F18 : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 2953/     F1B : D9                  		exx
(1) 2954/     F1C : AC                  		xor	h			; xx.00
(1) 2955/     F1D : D9                  		exx
(1) 2956/     F1E : E6 80               		and	80h
(1) 2957/     F20 : C2 29 0F            		jp	nz,dac_refill
(1) 2958/     F23 : F1                  		pop	af
(1) 2959/     F24 : C9                  		ret
(1) 2960/     F25 :                     ; first time
(1) 2961/     F25 :                     dac_firstfill:
(1) 2962/     F25 : CD 2A 0C            		call	check_tick
(1) 2963/     F28 : F5                  		push	af
(1) 2964/     F29 :                     
(1) 2965/     F29 :                     ; If auto-fill is needed
(1) 2966/     F29 :                     ; TODO: improve this, it's rushed.
(1) 2967/     F29 :                     
(1) 2968/     F29 :                     dac_refill:
(1) 2969/     F29 : CD 03 0F            		call	dac_me
(1) 2970/     F2C : C5                  		push	bc
(1) 2971/     F2D : D5                  		push	de
(1) 2972/     F2E : E5                  		push	hl
(1) 2973/     F2F : 3A 13 00            		ld	a,(wav_Flags)
(1) 2974/     F32 : FE 07               		cp	111b
(1) 2975/     F34 : D2 EB 0F            		jp	nc,.FDF7
(1) 2976/     F37 :                     
(1) 2977/     F37 : 3A 27 00            		ld	a,(dDacCntr+2)
(1) 2978/     F3A : 2A 25 00            		ld	hl,(dDacCntr)
(1) 2979/     F3D : 01 80 00            		ld	bc,80h
(1) 2980/     F40 : 37                  		scf
(1) 2981/     F41 : 3F                  		ccf
(1) 2982/     F42 : ED 42               		sbc	hl,bc
(1) 2983/     F44 : DE 00               		sbc	a,0
(1) 2984/     F46 : 32 27 00            		ld	(dDacCntr+2),a
(1) 2985/     F49 : 22 25 00            		ld	(dDacCntr),hl
(1) 2986/     F4C : 16 16               		ld	d,dWaveBuff>>8
(1) 2987/     F4E : B7                  		or	a
(1) 2988/     F4F : FA 79 0F            		jp	m,.FDF4DONE
(1) 2989/     F52 :                     .keepcntr:
(1) 2990/     F52 :                     
(1) 2991/     F52 : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 2992/     F55 : 5F                  		ld	e,a
(1) 2993/     F56 : C6 80               		add 	a,80h
(1) 2994/     F58 : 32 28 00            		ld	(dDacFifoMid),a
(1) 2995/     F5B : 2A 22 00            		ld	hl,(dDacPntr)
(1) 2996/     F5E : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 2997/     F61 : CD 76 0C            		call	transferRom
(1) 2998/     F64 : 2A 22 00            		ld	hl,(dDacPntr)
(1) 2999/     F67 : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 3000/     F6A : 01 80 00            		ld	bc,80h
(1) 3001/     F6D : 09                  		add	hl,bc
(1) 3002/     F6E : CE 00               		adc	a,0
(1) 3003/     F70 : 22 22 00            		ld	(dDacPntr),hl
(1) 3004/     F73 : 32 24 00            		ld	(dDacPntr+2),a
(1) 3005/     F76 : C3 EE 0F            		jp	.FDFreturn
(1) 3006/     F79 :                     .FDF4DONE:
(1) 3007/     F79 : 16 16               		ld	d,dWaveBuff>>8
(1) 3008/     F7B : 3A 13 00            		ld	a,(wav_Flags)
(1) 3009/     F7E : E6 01               		and	01b
(1) 3010/     F80 : B7                  		or	a
(1) 3011/     F81 : C2 A4 0F            		jp	nz,.FDF72
(1) 3012/     F84 :                     		
(1) 3013/     F84 : 7D                  		ld	a,l
(1) 3014/     F85 : C6 80               		add	a,80h
(1) 3015/     F87 : 4F                  		ld	c,a
(1) 3016/     F88 : 06 00               		ld	b,0
(1) 3017/     F8A : C5                  		push	bc
(1) 3018/     F8B : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 3019/     F8E : 5F                  		ld	e,a
(1) 3020/     F8F : C6 80               		add	a,80h
(1) 3021/     F91 : 32 28 00            		ld	(dDacFifoMid),a
(1) 3022/     F94 : C1                  		pop	bc			; C <- # just xfered
(1) 3023/     F95 : 79                  		ld	a,c
(1) 3024/     F96 : B0                  		or	b
(1) 3025/     F97 : 28 52               		jr	z,.FDF7
(1) 3026/     F99 : 2A 22 00            		ld	hl,(dDacPntr)
(1) 3027/     F9C : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 3028/     F9F : CD 76 0C            		call	transferRom
(1) 3029/     FA2 : 18 47               		jr	.FDF7
(1) 3030/     FA4 :                     .FDF72:
(1) 3031/     FA4 :                     
(1) 3032/     FA4 :                     	; loop sample
(1) 3033/     FA4 : C5                  		push	bc
(1) 3034/     FA5 : D5                  		push	de
(1) 3035/     FA6 : 3A 10 00            		ld	a,(wave_Loop+2)
(1) 3036/     FA9 : 4F                  		ld	c,a
(1) 3037/     FAA : ED 5B 0E 00         		ld	de,(wave_Loop)
(1) 3038/     FAE : 2A 08 00            		ld	hl,(wave_Start)
(1) 3039/     FB1 : 3A 0A 00            		ld 	a,(wave_Start+2)
(1) 3040/     FB4 : 81                  		add	a,c
(1) 3041/     FB5 : 19                  		add	hl,de
(1) 3042/     FB6 : CE 00               		adc	a,0
(1) 3043/     FB8 : 22 22 00            		ld	(dDacPntr),hl
(1) 3044/     FBB : 32 24 00            		ld	(dDacPntr+2),a
(1) 3045/     FBE : 2A 0B 00            		ld	hl,(wave_End)
(1) 3046/     FC1 : 3A 0D 00            		ld 	a,(wave_End+2)
(1) 3047/     FC4 : 91                  		sub	a,c
(1) 3048/     FC5 : 37                  		scf
(1) 3049/     FC6 : 3F                  		ccf
(1) 3050/     FC7 : ED 52               		sbc	hl,de
(1) 3051/     FC9 : DE 00               		sbc	a,0
(1) 3052/     FCB : 22 25 00            		ld	(dDacCntr),hl
(1) 3053/     FCE : 32 27 00            		ld	(dDacCntr+2),a
(1) 3054/     FD1 : D1                  		pop	de
(1) 3055/     FD2 : C1                  		pop	bc
(1) 3056/     FD3 : 78                  		ld	a,b
(1) 3057/     FD4 : B1                  		or	c
(1) 3058/     FD5 : 28 17               		jr	z,.FDFreturn
(1) 3059/     FD7 : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 3060/     FDA : 5F                  		ld	e,a
(1) 3061/     FDB : C6 80               		add	a,80h
(1) 3062/     FDD : 32 28 00            		ld	(dDacFifoMid),a
(1) 3063/     FE0 : 2A 22 00            		ld	hl,(dDacPntr)
(1) 3064/     FE3 : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 3065/     FE6 : CD 76 0C            		call	transferRom
(1) 3066/     FE9 : 18 03               		jr	.FDFreturn
(1) 3067/     FEB :                     .FDF7:
(1) 3068/     FEB : CD 56 0D            		call	dac_off
(1) 3069/     FEE :                     ; 		ld	HL,FMVTBLCH6
(1) 3070/     FEE :                     ; 		ld	(HL),0C6H		; mark voice free, unlocked, and releasing
(1) 3071/     FEE :                     ; 		inc	HL
(1) 3072/     FEE :                     ; 		inc	HL
(1) 3073/     FEE :                     ; 		inc	HL
(1) 3074/     FEE :                     ; 		inc	HL
(1) 3075/     FEE :                     ; 		ld	(HL),0			; clear any pending release timer value
(1) 3076/     FEE :                     ; 		inc	HL
(1) 3077/     FEE :                     ; 		ld	(HL),0
(1) 3078/     FEE :                     .FDFreturn:
(1) 3079/     FEE : E1                  		pop	hl
(1) 3080/     FEF : D1                  		pop	de
(1) 3081/     FF0 : C1                  		pop	bc
(1) 3082/     FF1 : F1                  		pop	af
(1) 3083/     FF2 : C9                  		ret
(1) 3084/     FF3 :                     			      
(1) 3085/     FF3 :                     ; ====================================================================
(1) 3086/     FF3 :                     ; ----------------------------------------------------------------
(1) 3087/     FF3 :                     ; Tables
(1) 3088/     FF3 :                     ; ----------------------------------------------------------------
(1) 3089/     FF3 :                     
(1) 3090/     FF3 : 00 01               wavFreq_Pwm:	dw 100h		; C-0
(1) 3091/     FF5 : 00 01               		dw 100h
(1) 3092/     FF7 : 00 01               		dw 100h
(1) 3093/     FF9 : 00 01               		dw 100h
(1) 3094/     FFB : 00 01               		dw 100h
(1) 3095/     FFD : 00 01               		dw 100h
(1) 3096/     FFF : 00 01               		dw 100h	
(1) 3097/    1001 : 00 01               		dw 100h
(1) 3098/    1003 : 00 01               		dw 100h
(1) 3099/    1005 : 00 01               		dw 100h
(1) 3100/    1007 : 00 01               		dw 100h
(1) 3101/    1009 : 00 01               		dw 100h
(1) 3102/    100B : 00 01               		dw 100h		; C-1
(1) 3103/    100D : 00 01               		dw 100h
(1) 3104/    100F : 00 01               		dw 100h
(1) 3105/    1011 : 00 01               		dw 100h
(1) 3106/    1013 : 00 01               		dw 100h
(1) 3107/    1015 : 00 01               		dw 100h
(1) 3108/    1017 : 00 01               		dw 100h	
(1) 3109/    1019 : 00 01               		dw 100h
(1) 3110/    101B : 00 01               		dw 100h
(1) 3111/    101D : 00 01               		dw 100h
(1) 3112/    101F : 00 01               		dw 100h
(1) 3113/    1021 : 00 01               		dw 100h
(1) 3114/    1023 : 00 01               		dw 100h		; C-2
(1) 3115/    1025 : 00 01               		dw 100h
(1) 3116/    1027 : 00 01               		dw 100h
(1) 3117/    1029 : 00 01               		dw 100h
(1) 3118/    102B : 00 01               		dw 100h
(1) 3119/    102D : 00 01               		dw 100h
(1) 3120/    102F : 00 01               		dw 100h
(1) 3121/    1031 : 00 01               		dw 100h
(1) 3122/    1033 : 00 01               		dw 100h
(1) 3123/    1035 : 00 01               		dw 100h
(1) 3124/    1037 : 00 01               		dw 100h
(1) 3125/    1039 : 3B 00               		dw 03Bh
(1) 3126/    103B : 3E 00               		dw 03Eh		; C-3 5512
(1) 3127/    103D : 43 00               		dw 043h		; C#3
(1) 3128/    103F : 46 00               		dw 046h		; D-3
(1) 3129/    1041 : 49 00               		dw 049h		; D#3
(1) 3130/    1043 : 4E 00               		dw 04Eh		; E-3
(1) 3131/    1045 : 54 00               		dw 054h		; F-3
(1) 3132/    1047 : 58 00               		dw 058h		; F#3
(1) 3133/    1049 : 5E 00               		dw 05Eh		; G-3 8363 -17
(1) 3134/    104B : 63 00               		dw 063h		; G#3
(1) 3135/    104D : 68 00               		dw 068h		; A-3
(1) 3136/    104F : 70 00               		dw 070h		; A#3
(1) 3137/    1051 : 75 00               		dw 075h		; B-3
(1) 3138/    1053 : 7F 00               		dw 07Fh		; C-4 11025 -12
(1) 3139/    1055 : 88 00               		dw 088h		; C#4
(1) 3140/    1057 : 8F 00               		dw 08Fh		; D-4
(1) 3141/    1059 : 97 00               		dw 097h		; D#4
(1) 3142/    105B : A0 00               		dw 0A0h		; E-4
(1) 3143/    105D : AD 00               		dw 0ADh		; F-4
(1) 3144/    105F : B5 00               		dw 0B5h		; F#4
(1) 3145/    1061 : C0 00               		dw 0C0h		; G-4
(1) 3146/    1063 : CC 00               		dw 0CCh		; G#4
(1) 3147/    1065 : D7 00               		dw 0D7h		; A-4
(1) 3148/    1067 : E7 00               		dw 0E7h		; A#4
(1) 3149/    1069 : F0 00               		dw 0F0h		; B-4
(1) 3150/    106B : 00 01               		dw 100h		; C-5 22050
(1) 3151/    106D : 10 01               		dw 110h		; C#5
(1) 3152/    106F : 20 01               		dw 120h		; D-5
(1) 3153/    1071 : 2C 01               		dw 12Ch		; D#5
(1) 3154/    1073 : 42 01               		dw 142h		; E-5
(1) 3155/    1075 : 58 01               		dw 158h		; F-5
(1) 3156/    1077 : 6A 01               		dw 16Ah		; F#5 32000 +6
(1) 3157/    1079 : 7E 01               		dw 17Eh		; G-5
(1) 3158/    107B : 90 01               		dw 190h		; G#5
(1) 3159/    107D : AC 01               		dw 1ACh		; A-5
(1) 3160/    107F : C2 01               		dw 1C2h		; A#5
(1) 3161/    1081 : E0 01               		dw 1E0h		; B-5
(1) 3162/    1083 : F8 01               		dw 1F8h		; C-6 44100 +12
(1) 3163/    1085 : 10 02               		dw 210h		; C#6
(1) 3164/    1087 : 40 02               		dw 240h		; D-6
(1) 3165/    1089 : 60 02               		dw 260h		; D#6
(1) 3166/    108B : 80 02               		dw 280h		; E-6
(1) 3167/    108D : A0 02               		dw 2A0h		; F-6
(1) 3168/    108F : D0 02               		dw 2D0h		; F#6
(1) 3169/    1091 : F8 02               		dw 2F8h		; G-6
(1) 3170/    1093 : 20 03               		dw 320h		; G#6
(1) 3171/    1095 : 50 03               		dw 350h		; A-6
(1) 3172/    1097 : 80 03               		dw 380h		; A#6
(1) 3173/    1099 : C0 03               		dw 3C0h		; B-6
(1) 3174/    109B : 00 04               		dw 400h		; C-7 88200
(1) 3175/    109D : 00 01               		dw 100h
(1) 3176/    109F : 00 01               		dw 100h
(1) 3177/    10A1 : 00 01               		dw 100h
(1) 3178/    10A3 : 00 01               		dw 100h
(1) 3179/    10A5 : 00 01               		dw 100h
(1) 3180/    10A7 : 00 01               		dw 100h	
(1) 3181/    10A9 : 00 01               		dw 100h
(1) 3182/    10AB : 00 01               		dw 100h
(1) 3183/    10AD : 00 01               		dw 100h
(1) 3184/    10AF : 00 01               		dw 100h
(1) 3185/    10B1 : 00 01               		dw 100h	
(1) 3186/    10B3 : 00 01               		dw 100h		; C-8
(1) 3187/    10B5 : 00 01               		dw 100h
(1) 3188/    10B7 : 00 01               		dw 100h
(1) 3189/    10B9 : 00 01               		dw 100h
(1) 3190/    10BB : 00 01               		dw 100h
(1) 3191/    10BD : 00 01               		dw 100h
(1) 3192/    10BF : 00 01               		dw 100h	
(1) 3193/    10C1 : 00 01               		dw 100h
(1) 3194/    10C3 : 00 01               		dw 100h
(1) 3195/    10C5 : 00 01               		dw 100h
(1) 3196/    10C7 : 00 01               		dw 100h
(1) 3197/    10C9 : 00 01               		dw 100h	
(1) 3198/    10CB : 00 01               		dw 100h		; C-9
(1) 3199/    10CD : 00 01               		dw 100h
(1) 3200/    10CF : 00 01               		dw 100h
(1) 3201/    10D1 : 00 01               		dw 100h
(1) 3202/    10D3 : 00 01               		dw 100h
(1) 3203/    10D5 : 00 01               		dw 100h
(1) 3204/    10D7 : 00 01               		dw 100h	
(1) 3205/    10D9 : 00 01               		dw 100h
(1) 3206/    10DB : 00 01               		dw 100h
(1) 3207/    10DD : 00 01               		dw 100h
(1) 3208/    10DF : 00 01               		dw 100h
(1) 3209/    10E1 : 00 01               		dw 100h
(1) 3210/    10E3 :                     
(1) 3211/    10E3 : 84 02               fmFreq_List:	dw 644		; C-0
(1) 3212/    10E5 : A9 02               		dw 681
(1) 3213/    10E7 : D2 02               		dw 722
(1) 3214/    10E9 : FD 02               		dw 765
(1) 3215/    10EB : 2A 03               		dw 810
(1) 3216/    10ED : 5A 03               		dw 858
(1) 3217/    10EF : 8E 03               		dw 910
(1) 3218/    10F1 : C4 03               		dw 964
(1) 3219/    10F3 : FD 03               		dw 1021
(1) 3220/    10F5 : 39 04               		dw 1081
(1) 3221/    10F7 : 7A 04               		dw 1146
(1) 3222/    10F9 : BE 04               		dw 1214
(1) 3223/    10FB :                     
(1) 3224/    10FB :                     psgFreq_List:
(1) 3225/    10FB : FF FF               		dw -1		; C-0 $0
(1) 3226/    10FD : FF FF               		dw -1
(1) 3227/    10FF : FF FF               		dw -1
(1) 3228/    1101 : FF FF               		dw -1
(1) 3229/    1103 : FF FF               		dw -1
(1) 3230/    1105 : FF FF               		dw -1
(1) 3231/    1107 : FF FF               		dw -1
(1) 3232/    1109 : FF FF               		dw -1
(1) 3233/    110B : FF FF               		dw -1
(1) 3234/    110D : FF FF               		dw -1
(1) 3235/    110F : FF FF               		dw -1
(1) 3236/    1111 : FF FF               		dw -1
(1) 3237/    1113 : FF FF               		dw -1		; C-1 $C
(1) 3238/    1115 : FF FF               		dw -1
(1) 3239/    1117 : FF FF               		dw -1
(1) 3240/    1119 : FF FF               		dw -1
(1) 3241/    111B : FF FF               		dw -1
(1) 3242/    111D : FF FF               		dw -1
(1) 3243/    111F : FF FF               		dw -1
(1) 3244/    1121 : FF FF               		dw -1
(1) 3245/    1123 : FF FF               		dw -1
(1) 3246/    1125 : FF FF               		dw -1
(1) 3247/    1127 : FF FF               		dw -1
(1) 3248/    1129 : FF FF               		dw -1
(1) 3249/    112B : FF FF               		dw -1		; C-2 $18
(1) 3250/    112D : FF FF               		dw -1
(1) 3251/    112F : FF FF               		dw -1
(1) 3252/    1131 : FF FF               		dw -1
(1) 3253/    1133 : FF FF               		dw -1
(1) 3254/    1135 : FF FF               		dw -1
(1) 3255/    1137 : FF FF               		dw -1
(1) 3256/    1139 : FF FF               		dw -1
(1) 3257/    113B : FF FF               		dw -1
(1) 3258/    113D : FF FF               		dw -1
(1) 3259/    113F : FF FF               		dw -1
(1) 3260/    1141 : FF FF               		dw -1
(1) 3261/    1143 : FF FF               		dw -1		; C-3 $24
(1) 3262/    1145 : FF FF               		dw -1
(1) 3263/    1147 : FF FF               		dw -1
(1) 3264/    1149 : FF FF               		dw -1
(1) 3265/    114B : FF FF               		dw -1
(1) 3266/    114D : FF FF               		dw -1
(1) 3267/    114F : FF FF               		dw -1
(1) 3268/    1151 : FF FF               		dw -1
(1) 3269/    1153 : FF FF               		dw -1
(1) 3270/    1155 : F8 03               		dw 3F8h
(1) 3271/    1157 : BF 03               		dw 3BFh
(1) 3272/    1159 : 89 03               		dw 389h
(1) 3273/    115B : 56 03               		dw 356h		;C-4 30
(1) 3274/    115D : 26 03               		dw 326h
(1) 3275/    115F : F9 02               		dw 2F9h
(1) 3276/    1161 : CE 02               		dw 2CEh
(1) 3277/    1163 : A5 02               		dw 2A5h
(1) 3278/    1165 : 80 02               		dw 280h
(1) 3279/    1167 : 5C 02               		dw 25Ch
(1) 3280/    1169 : 3A 02               		dw 23Ah
(1) 3281/    116B : 1A 02               		dw 21Ah
(1) 3282/    116D : FB 01               		dw 1FBh
(1) 3283/    116F : DF 01               		dw 1DFh
(1) 3284/    1171 : C4 01               		dw 1C4h
(1) 3285/    1173 : AB 01               		dw 1ABh		;C-5 3C
(1) 3286/    1175 : 93 01               		dw 193h
(1) 3287/    1177 : 7D 01               		dw 17Dh
(1) 3288/    1179 : 67 01               		dw 167h
(1) 3289/    117B : 53 01               		dw 153h
(1) 3290/    117D : 40 01               		dw 140h
(1) 3291/    117F : 2E 01               		dw 12Eh
(1) 3292/    1181 : 1D 01               		dw 11Dh
(1) 3293/    1183 : 0D 01               		dw 10Dh
(1) 3294/    1185 : FE 00               		dw 0FEh
(1) 3295/    1187 : EF 00               		dw 0EFh
(1) 3296/    1189 : E2 00               		dw 0E2h
(1) 3297/    118B : D6 00               		dw 0D6h		;C-6 48
(1) 3298/    118D : C9 00               		dw 0C9h
(1) 3299/    118F : BE 00               		dw 0BEh
(1) 3300/    1191 : B4 00               		dw 0B4h
(1) 3301/    1193 : A9 00               		dw 0A9h
(1) 3302/    1195 : A0 00               		dw 0A0h
(1) 3303/    1197 : 97 00               		dw 97h
(1) 3304/    1199 : 8F 00               		dw 8Fh
(1) 3305/    119B : 87 00               		dw 87h
(1) 3306/    119D : 7F 00               		dw 7Fh
(1) 3307/    119F : 78 00               		dw 78h
(1) 3308/    11A1 : 71 00               		dw 71h
(1) 3309/    11A3 : 6B 00               		dw 6Bh		; C-7 54
(1) 3310/    11A5 : 65 00               		dw 65h
(1) 3311/    11A7 : 5F 00               		dw 5Fh
(1) 3312/    11A9 : 5A 00               		dw 5Ah
(1) 3313/    11AB : 55 00               		dw 55h
(1) 3314/    11AD : 50 00               		dw 50h
(1) 3315/    11AF : 4B 00               		dw 4Bh
(1) 3316/    11B1 : 47 00               		dw 47h
(1) 3317/    11B3 : 43 00               		dw 43h
(1) 3318/    11B5 : 40 00               		dw 40h
(1) 3319/    11B7 : 3C 00               		dw 3Ch
(1) 3320/    11B9 : 39 00               		dw 39h
(1) 3321/    11BB : 36 00               		dw 36h		; C-8 $60
(1) 3322/    11BD : 33 00               		dw 33h
(1) 3323/    11BF : 30 00               		dw 30h
(1) 3324/    11C1 : 2D 00               		dw 2Dh
(1) 3325/    11C3 : 2B 00               		dw 2Bh
(1) 3326/    11C5 : 28 00               		dw 28h
(1) 3327/    11C7 : 26 00               		dw 26h
(1) 3328/    11C9 : 24 00               		dw 24h
(1) 3329/    11CB : 22 00               		dw 22h
(1) 3330/    11CD : 20 00               		dw 20h
(1) 3331/    11CF : 1F 00               		dw 1Fh
(1) 3332/    11D1 : 1D 00               		dw 1Dh
(1) 3333/    11D3 : 1B 00               		dw 1Bh		; C-9 $6C
(1) 3334/    11D5 : 1A 00               		dw 1Ah
(1) 3335/    11D7 : 18 00               		dw 18h
(1) 3336/    11D9 : 17 00               		dw 17h
(1) 3337/    11DB : 16 00               		dw 16h
(1) 3338/    11DD : 15 00               		dw 15h
(1) 3339/    11DF : 13 00               		dw 13h
(1) 3340/    11E1 : 12 00               		dw 12h
(1) 3341/    11E3 : 11 00               		dw 11h
(1) 3342/    11E5 : 10 00                		dw 10h
(1) 3343/    11E7 : 09 00                		dw 9h
(1) 3344/    11E9 : 08 00                		dw 8h
(1) 3345/    11EB : 00 00               		dw 0		; use +60 if using C-5 for tone 3 noise
(1) 3346/    11ED :                     
(1) 3347/    11ED :                     ; --------------------------------------------------------
(1) 3348/    11ED :                     
(1) 3349/    11ED : 00                  PSGVTBL		db 00h			; 0 - PSG channel id + flags
(1) 3350/    11EE : 00 00               		dw 0			; 1 - track channel link
(1) 3351/    11F0 : 00                  		db 0			; 3 - ALV
(1) 3352/    11F1 : 00                  		db 0			; 4 - ATK
(1) 3353/    11F2 : 00                  		db 0			; 5 - SLV
(1) 3354/    11F3 : 00                  		db 0			; 6 - DKY
(1) 3355/    11F4 : 00                  		db 0			; 7 - RRT
(1) 3356/    11F5 : 00                  		db 0
(1) 3357/    11F6 : 01                  		db 01h
(1) 3358/    11F7 : 00 00               		dw 0			; link
(1) 3359/    11F9 : 00                  		db 0			; ALV
(1) 3360/    11FA : 00                  		db 0			; ATK
(1) 3361/    11FB : 00                  		db 0			; SLV
(1) 3362/    11FC : 00                  		db 0			; DKY
(1) 3363/    11FD : 00                  		db 0			; RRT
(1) 3364/    11FE : 00                  		db 0
(1) 3365/    11FF : 02                  		db 02h
(1) 3366/    1200 : 00 00               		dw 0			; link
(1) 3367/    1202 : 00                  		db 0			; ALV
(1) 3368/    1203 : 00                  		db 0			; ATK
(1) 3369/    1204 : 00                  		db 0			; SLV
(1) 3370/    1205 : 00                  		db 0			; DKY
(1) 3371/    1206 : 00                  		db 0			; RRT
(1) 3372/    1207 : 00                  		db 0
(1) 3373/    1208 : FF                  		db -1			; end-of-list
(1) 3374/    1209 : 03                  PSGNVTBL	db 03h
(1) 3375/    120A : 00 00               		dw 0			; track channel link
(1) 3376/    120C : 00                  		db 0			; ALV
(1) 3377/    120D : 00                  		db 0			; ATK
(1) 3378/    120E : 00                  		db 0			; SLV
(1) 3379/    120F : 00                  		db 0			; DKY
(1) 3380/    1210 : 00                  		db 0			; RRT
(1) 3381/    1211 : 00                  		db 0
(1) 3382/    1212 : FF                  		db -1			; end-of-list
(1) 3383/    1213 :                     		
(1) 3384/    1213 : 00                  FMVTBL		db 00h			;  0 - FM channel (chip's actual order)
(1) 3385/    1214 : 00 00               		dw 0			;  1 - link
(1) 3386/    1216 : 00 00               		dw 0			;  3 - FM instr pointer
(1) 3387/    1218 : 00                  		db 0			;  5 - Pitch
(1) 3388/    1219 : 00 00 00            		db 0,0,0		;  6 - 0B0h,0B4h,keys
(1) 3389/    121C : 00 00               		dw 0			;  9 - Main frequency
(1) 3390/    121E : 00 00               		dw 0			; 11 - Ex freq 1
(1) 3391/    1220 : 00 00               		dw 0			; 13 - Ex freq 2
(1) 3392/    1222 : 00 00               		dw 0			; 15 - Ex freq 3
(1) 3393/    1224 : 01                  		db 01h
(1) 3394/    1225 : 00 00               		dw 0
(1) 3395/    1227 : 00 00               		dw 0
(1) 3396/    1229 : 00                  		db 0
(1) 3397/    122A : 00 00 00            		db 0,0,0
(1) 3398/    122D : 00 00               		dw 0
(1) 3399/    122F : 00 00               		dw 0
(1) 3400/    1231 : 00 00               		dw 0
(1) 3401/    1233 : 00 00               		dw 0
(1) 3402/    1235 : 04                  		db 04h
(1) 3403/    1236 : 00 00               		dw 0
(1) 3404/    1238 : 00 00               		dw 0
(1) 3405/    123A : 00                  		db 0
(1) 3406/    123B : 00 00 00            		db 0,0,0
(1) 3407/    123E : 00 00               		dw 0
(1) 3408/    1240 : 00 00               		dw 0
(1) 3409/    1242 : 00 00               		dw 0
(1) 3410/    1244 : 00 00               		dw 0	
(1) 3411/    1246 : 05                  		db 05h
(1) 3412/    1247 : 00 00               		dw 0
(1) 3413/    1249 : 00 00               		dw 0
(1) 3414/    124B : 00                  		db 0
(1) 3415/    124C : 00 00 00            		db 0,0,0
(1) 3416/    124F : 00 00               		dw 0
(1) 3417/    1251 : 00 00               		dw 0
(1) 3418/    1253 : 00 00               		dw 0
(1) 3419/    1255 : 00 00               		dw 0
(1) 3420/    1257 : 02                  FM3VTBL		db 02h
(1) 3421/    1258 : 00 00               		dw 0			;  1 - link
(1) 3422/    125A : 00 00               		dw 0			;  3 - FM instr pointer
(1) 3423/    125C : 00                  		db 0
(1) 3424/    125D : 00 00 00            		db 0,0,0		;  5 - 0B0h,0B4h,keys
(1) 3425/    1260 : 00 00               		dw 0			;  8 - Main frequency
(1) 3426/    1262 : 00 00               		dw 0			; 10 - Ex freq 1
(1) 3427/    1264 : 00 00               		dw 0			; 12 - Ex freq 2
(1) 3428/    1266 : 00 00               		dw 0			; 14 - Ex freq 3
(1) 3429/    1268 : 06                  FM6VTBL		db 06h
(1) 3430/    1269 : 00 00               		dw 0			;  1 - link
(1) 3431/    126B : 00 00               		dw 0			;  3 - FM instr pointer
(1) 3432/    126D : 00                  		db 0
(1) 3433/    126E : 00 00 00            		db 0,0,0		;  5 - 0B0h,0B4h,keys
(1) 3434/    1271 : 00 00               		dw 0			;  8 - Main frequency
(1) 3435/    1273 : 00 00               		dw 0			; 10 - Ex freq 1
(1) 3436/    1275 : 00 00               		dw 0			; 12 - Ex freq 2
(1) 3437/    1277 : 00 00               		dw 0			; 14 - Ex freq 3
(1) 3438/    1279 : FF                  		db -1
(1) 3439/    127A :                     
(1) 3440/    127A : 00                  PWMVTBL		db 00h		; 0 - PWM entry, bit7:locked bit6:update for 68k
(1) 3441/    127B : 00 00               		dw 0		; 1 - track link
(1) 3442/    127D : 00 00 00 00         		db 0,0,0,0	; 3 - BIG-endian 64-bit Start position
(1) 3443/    1281 : 00 00 00 00         		db 0,0,0,0	; 7 - BIG-endian 64-bit End position
(1) 3444/    1285 : 00 00 00 00         		db 0,0,0,0	; 11 - BIG-endian 64-bit Loop position
(1) 3445/    1289 : 00                  		db 0		; 15 - "Volume" (zero until I figure it out)
(1) 3446/    128A : 00                  		db 0		; 16 - Type + panning (slrb) s-Stereo sample, lr-Left/Right output
(1) 3447/    128B : 00 00               		dw 0		; 18 - Pitch (note)
(1) 3448/    128D : 01                  		db 01h
(1) 3449/    128E : 00 00               		dw 0
(1) 3450/    1290 : 00 00 00 00         		db 0,0,0,0
(1) 3451/    1294 : 00 00 00 00         		db 0,0,0,0
(1) 3452/    1298 : 00 00 00 00         		db 0,0,0,0
(1) 3453/    129C : 00                  		db 0
(1) 3454/    129D : 00                  		db 0
(1) 3455/    129E : 00 00               		dw 0
(1) 3456/    12A0 : 02                  		db 02h
(1) 3457/    12A1 : 00 00               		dw 0
(1) 3458/    12A3 : 00 00 00 00         		db 0,0,0,0
(1) 3459/    12A7 : 00 00 00 00         		db 0,0,0,0
(1) 3460/    12AB : 00 00 00 00         		db 0,0,0,0
(1) 3461/    12AF : 00                  		db 0
(1) 3462/    12B0 : 00                  		db 0
(1) 3463/    12B1 : 00 00               		dw 0
(1) 3464/    12B3 : 03                  		db 03h
(1) 3465/    12B4 : 00 00               		dw 0
(1) 3466/    12B6 : 00 00 00 00         		db 0,0,0,0
(1) 3467/    12BA : 00 00 00 00         		db 0,0,0,0
(1) 3468/    12BE : 00 00 00 00         		db 0,0,0,0
(1) 3469/    12C2 : 00                  		db 0
(1) 3470/    12C3 : 00                  		db 0
(1) 3471/    12C4 : 00 00               		dw 0
(1) 3472/    12C6 : 04                  		db 04h
(1) 3473/    12C7 : 00 00               		dw 0
(1) 3474/    12C9 : 00 00 00 00         		db 0,0,0,0
(1) 3475/    12CD : 00 00 00 00         		db 0,0,0,0
(1) 3476/    12D1 : 00 00 00 00         		db 0,0,0,0
(1) 3477/    12D5 : 00                  		db 0
(1) 3478/    12D6 : 00                  		db 0
(1) 3479/    12D7 : 00 00               		dw 0
(1) 3480/    12D9 : 05                  		db 05h
(1) 3481/    12DA : 00 00               		dw 0
(1) 3482/    12DC : 00 00 00 00         		db 0,0,0,0
(1) 3483/    12E0 : 00 00 00 00         		db 0,0,0,0
(1) 3484/    12E4 : 00 00 00 00         		db 0,0,0,0
(1) 3485/    12E8 : 00                  		db 0
(1) 3486/    12E9 : 00                  		db 0
(1) 3487/    12EA : 00 00               		dw 0
(1) 3488/    12EC : 06                  		db 06h
(1) 3489/    12ED : 00 00               		dw 0
(1) 3490/    12EF : 00 00 00 00         		db 0,0,0,0
(1) 3491/    12F3 : 00 00 00 00         		db 0,0,0,0
(1) 3492/    12F7 : 00 00 00 00         		db 0,0,0,0
(1) 3493/    12FB : 00                  		db 0
(1) 3494/    12FC : 00                  		db 0
(1) 3495/    12FD : 00 00               		dw 0
(1) 3496/    12FF : FF                  		db -1
(1) 3497/    1300 :                     
(1) 3498/    1300 : 00 00 00 00         psgcom		db 00h,00h,00h,00h	;  0 command 1 = key on, 2 = key off, 4 = stop snd
(1) 3499/    1304 : FF FF FF FF         psglev		db -1, -1, -1, -1	;  4 output level attenuation (%llll.0000, -1 = silent) 
(1) 3500/    1308 : 00 00 00 00         psgatk		db 00h,00h,00h,00h	;  8 attack rate
(1) 3501/    130C : 00 00 00 00         psgdec		db 00h,00h,00h,00h	; 12 decay rate
(1) 3502/    1310 : 00 00 00 00         psgslv		db 00h,00h,00h,00h	; 16 sustain level attenuation
(1) 3503/    1314 : 00 00 00 00         psgrrt		db 00h,00h,00h,00h	; 20 release rate
(1) 3504/    1318 : 00 00 00 00         psgenv		db 00h,00h,00h,00h	; 24 envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain, 4
(1) 3505/    131C : 00 00 00 00         psgdtl		db 00h,00h,00h,00h	; 28 tone bottom 4 bits
(1) 3506/    1320 : 00 00 00 00         psgdth		db 00h,00h,00h,00h	; 32 tone upper 6 bits
(1) 3507/    1324 : 00 00 00 00         psgalv		db 00h,00h,00h,00h	; 36 attack level attenuation
(1) 3508/    1328 : 00 00 00 00         whdflg		db 00h,00h,00h,00h	; 40 flags to indicate hardware should be updated
(1) 3509/    132C : 00 00 00 00         psgtim		db 00h,00h,00h,00h	; 44 timer for sustain
(1) 3510/    1330 :                     
(1) 3511/    1330 :                     ; ====================================================================
(1) 3512/    1330 :                     ; ----------------------------------------------------------------
(1) 3513/    1330 :                     ; FM Voices
(1) 3514/    1330 :                     ; ----------------------------------------------------------------
(1) 3515/    1330 :                     
(1) 3516/    1330 :                     		include "data/sound/instr_z80.asm"
(2)    1/    1330 :                     ; ====================================================================
(2)    2/    1330 :                     ; ----------------------------------------------------------------
(2)    3/    1330 :                     ; PSG, FM, FM3, DAC instruments go here.
(2)    4/    1330 :                     ; Stored on Z80's RAM space
(2)    5/    1330 :                     ; 
(2)    6/    1330 :                     ; NOTE: Very low storage space
(2)    7/    1330 :                     ; ----------------------------------------------------------------
(2)    8/    1330 :                     
(2)    9/    1330 : 00 FF 40 00 80      PsgIns_00:	db 00h,0FFh,40h,00h, 80h
(2)   10/    1335 : 40 40 80 01 10      PsgIns_01:	db 40h, 40h,80h,01h, 10h
(2)   11/    133A : 00 FF 80 04 04      PsgIns_02:	db 00h,0FFh,80h,04h, 04h
(2)   12/    133F : 30 FF FF 00 04      PsgIns_03:	db 30h,0FFh, -1,00h, 04h
(2)   13/    1344 : 00 FF FF 01 01      PsgIns_Bass:	db 00h,0FFh, -1,01h, 01h
(2)   14/    1349 : 00 FF 00 F0 F0      PsgIns_Snare:	db 00h,0FFh,00h,0F0h,0F0h
(2)   15/    134E :                     
(2)   16/    134E :                     FmIns_Fm3_OpenHat:
(2)   17/    134E :                     		binclude "data/sound/instr/fm/fm3_openhat.gsx",2478h,28h
(2)   18/    1376 :                     FmIns_Fm3_ClosedHat:
(2)   19/    1376 :                     		binclude "data/sound/instr/fm/fm3_closedhat.gsx",2478h,28h
(2)   20/    139E :                     FmIns_DrumKick:
(2)   21/    139E :                     		binclude "data/sound/instr/fm/drum_kick.gsx",2478h,20h
(2)   22/    13BE :                     FmIns_DrumSnare:
(2)   23/    13BE :                     		binclude "data/sound/instr/fm/drum_snare.gsx",2478h,20h
(2)   24/    13DE :                     FmIns_DrumCloseHat:
(2)   25/    13DE :                     		binclude "data/sound/instr/fm/drum_closehat.gsx",2478h,20h
(2)   26/    13FE :                     FmIns_Piano_m1:
(2)   27/    13FE :                     		binclude "data/sound/instr/fm/piano_m1.gsx",2478h,20h
(2)   28/    141E :                     
(2)   29/    141E :                     ; FmIns_Bass_gum:
(2)   30/    141E :                     ; 		binclude "data/sound/instr/fm/bass_gum.gsx",2478h,20h
(2)   31/    141E :                     ; FmIns_Bass_calm:
(2)   32/    141E :                     ; 		binclude "data/sound/instr/fm/bass_calm.gsx",2478h,20h
(2)   33/    141E :                     ; FmIns_Bass_heavy:
(2)   34/    141E :                     ; 		binclude "data/sound/instr/fm/bass_heavy.gsx",2478h,20h
(2)   35/    141E :                     ; FmIns_Bass_ambient:
(2)   36/    141E :                     ; 		binclude "data/sound/instr/fm/bass_ambient.gsx",2478h,20h
(2)   37/    141E :                     ; FmIns_Brass_gummy:
(2)   38/    141E :                     ; 		binclude "data/sound/instr/fm/brass_gummy.gsx",2478h,20h
(2)   39/    141E :                     ; FmIns_Flaute_1:
(2)   40/    141E :                     ; 		binclude "data/sound/instr/fm/flaute_1.gsx",2478h,20h
(2)   41/    141E :                     FmIns_Bass_2:
(2)   42/    141E :                     		binclude "data/sound/instr/fm/bass_2.gsx",2478h,20h
(2)   43/    143E :                     FmIns_Bass_3:
(2)   44/    143E :                     		binclude "data/sound/instr/fm/bass_3.gsx",2478h,20h
(2)   45/    145E :                     FmIns_Bass_4:
(2)   46/    145E :                     		binclude "data/sound/instr/fm/bass_4.gsx",2478h,20h
(2)   47/    147E :                     FmIns_Bass_5:
(2)   48/    147E :                     		binclude "data/sound/instr/fm/bass_5.gsx",2478h,20h
(2)   49/    149E :                     FmIns_Bass_6:
(2)   50/    149E :                     		binclude "data/sound/instr/fm/bass_6.gsx",2478h,20h
(2)   51/    14BE :                     FmIns_Bass_7:
(2)   52/    14BE :                     		binclude "data/sound/instr/fm/bass_7.gsx",2478h,20h
(2)   53/    14DE :                     ; FmIns_Bass_synth:
(2)   54/    14DE :                     ; 		binclude "data/sound/instr/fm/bass_synth_1.gsx",2478h,20h
(2)   55/    14DE :                     ; FmIns_Guitar_1:
(2)   56/    14DE :                     ; 		binclude "data/sound/instr/fm/guitar_1.gsx",2478h,20h
(2)   57/    14DE :                     ; FmIns_Horn_1:
(2)   58/    14DE :                     ; 		binclude "data/sound/instr/fm/horn_1.gsx",2478h,20h
(2)   59/    14DE :                     ; FmIns_Organ_M1:
(2)   60/    14DE :                     ; 		binclude "data/sound/instr/fm/organ_m1.gsx",2478h,20h
(2)   61/    14DE :                     ; FmIns_Bass_Beach:
(2)   62/    14DE :                     ; 		binclude "data/sound/instr/fm/bass_beach.gsx",2478h,20h
(2)   63/    14DE :                     ; FmIns_Bass_Beach_2:
(2)   64/    14DE :                     ; 		binclude "data/sound/instr/fm/bass_beach_2.gsx",2478h,20h
(2)   65/    14DE :                     ; FmIns_Brass_Cave:
(2)   66/    14DE :                     ; 		binclude "data/sound/instr/fm/brass_cave.gsx",2478h,20h
(2)   67/    14DE :                     FmIns_Brass_Gem:
(2)   68/    14DE :                     		binclude "data/sound/instr/fm/brass_gem.gsx",2478h,20h
(2)   69/    14FE :                     ; FmIns_Piano_Small:
(2)   70/    14FE :                     ; 		binclude "data/sound/instr/fm/piano_small.gsx",2478h,20h
(2)   71/    14FE :                     ; FmIns_Trumpet_2:
(2)   72/    14FE :                     ; 		binclude "data/sound/instr/fm/trumpet_2.gsx",2478h,20h
(2)   73/    14FE :                     ; FmIns_Bell_Glass:
(2)   74/    14FE :                     ; 		binclude "data/sound/instr/fm/bell_glass.gsx",2478h,20h
(2)   75/    14FE :                     ; FmIns_Marimba_1:
(2)   76/    14FE :                     ; 		binclude "data/sound/instr/fm/marimba_1.gsx",2478h,20h
(2)   77/    14FE :                     ; FmIns_Ambient_dark:
(2)   78/    14FE :                     ; 		binclude "data/sound/instr/fm/ambient_dark.gsx",2478h,20h
(2)   79/    14FE :                     ; FmIns_Ambient_spook:
(2)   80/    14FE :                     ; 		binclude "data/sound/instr/fm/ambient_spook.gsx",2478h,20h
(2)   81/    14FE :                     FmIns_Ambient_3:
(2)   82/    14FE :                     		binclude "data/sound/instr/fm/ambient_3.gsx",2478h,20h
(2)   83/    151E :                     ; FmIns_Ding_toy:
(2)   84/    151E :                     ; 		binclude "data/sound/instr/fm/ding_toy.gsx",2478h,20h
(2)   85/    151E :                     
(1) 3517/    151E :                     		; PWM instruments are stored in SDRAM
(1) 3518/    151E :                     	
(1) 3519/    151E :                     ; ====================================================================
(1) 3520/    151E :                     ; ----------------------------------------------------------------
(1) 3521/    151E :                     ; Z80 RAM
(1) 3522/    151E :                     ; ----------------------------------------------------------------
(1) 3523/    151E :                     
(1) 3524/    151E :                     ; --------------------------------------------------------
(1) 3525/    151E :                     ; Buffers
(1) 3526/    151E :                     ; --------------------------------------------------------
(1) 3527/    151E :                     
(1) 3528/    151E :                     		align 100h
(1) 3529/    1600 :                     dWaveBuff	ds 100h			; WAVE data buffer: updated every 80h bytes *LSB must be 00h*
(1) 3530/    1700 :                     trkDataC	ds 100h*MAX_TRKS	; Track data cache: 100h bytes each
(1) 3531/    1900 :                     trkBuff		ds 100h*MAX_TRKS	; Track control (20h) + channels (8h each)
(1) 3532/    1B00 :                     blkHeadC	ds 100h*MAX_TRKS	; Track blocks and heads: 80h each
(1) 3533/    1D00 :                     insDataC	ds 80h*MAX_TRKS		; Instrument pointers cache: 80h each
(1) 3534/    1E00 :                     commZfifo	ds 40h			; Buffer for command requests from 68k
(1) 3535/    1E40 :                     
(1) 3536/    1E40 :                     ; ====================================================================
(1) 3537/    1E40 :                     
(1) 3538/    1E40 :                     		cpu 68000
(1) 3539/    1E40 :                     		padding off
(1) 3540/  FF3B0E :                     		phase Z80_CODE+*
(1) 3541/  FF3B0E :                     Z80_CODE_END:
(1) 3542/  FF3B0E :                     		align 2
(1) 3543/  FF3B0E :                     
      37/  FF3B0E :                     		
      38/  FF3B0E :                     ; --------------------------------------------------------
      39/  FF3B0E :                     ; Initialize system
      40/  FF3B0E :                     ; --------------------------------------------------------
      41/  FF3B0E :                     
      42/  FF3B0E :                     MD_Main:
      43/  FF3B0E : 6100 DEA2           		bsr 	Sound_init
      44/  FF3B12 : 6100 C8A6           		bsr 	Video_init
      45/  FF3B16 : 6100 C4E8           		bsr	System_Init
      46/  FF3B1A :                     		include "code/md/gm_mode0.asm"
(1)    1/  FF3B1A :                     ; ====================================================================
(1)    2/  FF3B1A :                     ; ----------------------------------------------------------------
(1)    3/  FF3B1A :                     ; Game Mode 0
(1)    4/  FF3B1A :                     ; ----------------------------------------------------------------
(1)    5/  FF3B1A :                     
(1)    6/  FF3B1A :                     ; ====================================================================
(1)    7/  FF3B1A :                     ; ------------------------------------------------------
(1)    8/  FF3B1A :                     ; Variables
(1)    9/  FF3B1A :                     ; ------------------------------------------------------
(1)   10/  FF3B1A :                     
(1)   11/  FF3B1A : =$2000              var_MoveSpd	equ	$2000
(1)   12/  FF3B1A : =$9                 CURY_MAX	equ	9
(1)   13/  FF3B1A :                     
(1)   14/  FF3B1A :                     ; ====================================================================
(1)   15/  FF3B1A :                     ; ------------------------------------------------------
(1)   16/  FF3B1A :                     ; Structs
(1)   17/  FF3B1A :                     ; ------------------------------------------------------
(1)   18/  FF3B1A :                     
(1)   19/  FF3B1A : (MACRO)             		struct 0
(1)   19/  FF3B1A : =$FF3B1A            GLBL_LASTPC     set *
(1)   19/    444C :                                     dephase
(1)   19/    444C : =$444C              GLBL_LASTORG    set *
(1)   19/       0 :                                     phase 0
(1)   20/       0 :                     strc_xpos	ds.w 1
(1)   21/       2 :                     strc_ypos	ds.w 1
(1)   22/       4 : (MACRO)             		finish
(1)   22/       0 :                                     !org GLBL_LASTORG
(1)   22/  FF3B1A :                                     phase GLBL_LASTPC
(1)   23/  FF3B1A :                     
(1)   24/  FF3B1A :                     ; ====================================================================
(1)   25/  FF3B1A :                     ; ------------------------------------------------------
(1)   26/  FF3B1A :                     ; This mode's RAM
(1)   27/  FF3B1A :                     ; ------------------------------------------------------
(1)   28/  FF3B1A :                     		
(1)   29/  FF3B1A : (MACRO)             		struct RAM_ModeBuff
(1)   29/  FF3B1A : =$FF3B1A            GLBL_LASTPC     set *
(1)   29/    444C :                                     dephase
(1)   29/    444C : =$444C              GLBL_LASTORG    set *
(1)   29/FFFFFFFFFFFF8800 :                                     phase RAM_MODEBUFF
(1)   30/FFFFFFFFFFFF8800 :                     RAM_Cam_Xpos	ds.l 1
(1)   31/FFFFFFFFFFFF8804 :                     RAM_Cam_Ypos	ds.l 1
(1)   32/FFFFFFFFFFFF8808 :                     RAM_Cam_Zpos	ds.l 1
(1)   33/FFFFFFFFFFFF880C :                     RAM_Cam_Xrot	ds.l 1
(1)   34/FFFFFFFFFFFF8810 :                     RAM_Cam_Yrot	ds.l 1
(1)   35/FFFFFFFFFFFF8814 :                     RAM_Cam_Zrot	ds.l 1
(1)   36/FFFFFFFFFFFF8818 :                     RAM_CamData	ds.l 1
(1)   37/FFFFFFFFFFFF881C :                     RAM_CamFrame	ds.l 1
(1)   38/FFFFFFFFFFFF8820 :                     RAM_CamTimer	ds.l 1
(1)   39/FFFFFFFFFFFF8824 :                     RAM_MdlCurrMd	ds.w 1
(1)   40/FFFFFFFFFFFF8826 :                     RAM_BgCamCurr	ds.w 1
(1)   41/FFFFFFFFFFFF8828 :                     sizeof_mdglbl	ds.l 0
(1)   42/FFFFFFFFFFFF8828 : (MACRO)             		finish
(1)   42/FFFFFFFFFFFF8800 :                                     !org GLBL_LASTORG
(1)   42/  FF3B1A :                                     phase GLBL_LASTPC
(1)   43/  FF3B1A :                     		
(1)   44/  FF3B1A :                     ; ====================================================================
(1)   45/  FF3B1A :                     ; ------------------------------------------------------
(1)   46/  FF3B1A :                     ; Code start
(1)   47/  FF3B1A :                     ; ------------------------------------------------------
(1)   48/  FF3B1A :                     
(1)   49/  FF3B1A :                     MD_GmMode0:
(1)   50/  FF3B1A : 46FC 2700           		move.w	#$2700,sr
(1)   51/  FF3B1E : 6100 C868           		bsr	Mode_Init
(1)   52/  FF3B22 : 6100 CA82           		bsr	Video_PrintInit
(1)   53/  FF3B26 :                     ; 		lea	str_Title(pc),a0
(1)   54/  FF3B26 :                     ; 		move.l	#locate(0,1,1),d0
(1)   55/  FF3B26 :                     ; 		bsr	Video_Print
(1)   56/  FF3B26 :                     
(1)   57/  FF3B26 : 31FC 0001 8824      		move.w	#1,(RAM_MdlCurrMd).w
(1)   58/  FF3B2C : 203C 0091 000C      		move.l	#GemaTrk_Yuki_patt,d0
(1)   59/  FF3B32 : 223C 0091 0000      		move.l	#GemaTrk_Yuki_blk,d1
(1)   60/  FF3B38 : 243C 0091 15E8      		move.l	#GemaTrk_Yuki_ins,d2
(1)   61/  FF3B3E : 7607                		moveq	#7,d3
(1)   62/  FF3B40 : 7800                		moveq	#0,d4
(1)   63/  FF3B42 : 6100 DFF6           		bsr	SoundReq_SetTrack
(1)   64/  FF3B46 : 7200                		moveq	#0,d1
(1)   65/  FF3B48 : 243C 0205 C2D8      		move.l	#PWM_STEREO,d2
(1)   66/  FF3B4E : 263C 0225 C2D8      		move.l	#PWM_STEREO_e,d3
(1)   67/  FF3B54 : 283C 0000 0000      		move.l	#0,d4
(1)   68/  FF3B5A : 7A00                		moveq	#0,d5
(1)   69/  FF3B5C : 7C07                		moveq	#%111,d6
(1)   70/  FF3B5E : 2E3C 0000 0100      		move.l	#$100,d7
(1)   71/  FF3B64 : 203C 0600 152C      		move.l	#CmdTaskMd_PWM_SetChnl,d0
(1)   72/  FF3B6A : 6100 C6E0           		bsr	System_MdMars_MstTask
(1)   73/  FF3B6E :                     	
(1)   74/  FF3B6E : 08F9 0006 FFFF 98EF 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
(1)   75/  FF3B76 : 6100 C8DA           		bsr	Video_Update
(1)   76/  FF3B7A :                     
(1)   77/  FF3B7A :                     ; ====================================================================
(1)   78/  FF3B7A :                     ; ------------------------------------------------------
(1)   79/  FF3B7A :                     ; Loop
(1)   80/  FF3B7A :                     ; ------------------------------------------------------
(1)   81/  FF3B7A :                     
(1)   82/  FF3B7A :                     .loop:
(1)   83/  FF3B7A : 6100 C68C           		bsr	System_VSync
(1)   84/  FF3B7E :                     ; 		move.l	#$7C000003,(vdp_ctrl).l
(1)   85/  FF3B7E :                     ; 		move.w	(RAM_BgCamCurr).l,d0
(1)   86/  FF3B7E :                     ; 		lsr.w	#3,d0
(1)   87/  FF3B7E :                     ; 		move.w	#0,(vdp_data).l
(1)   88/  FF3B7E :                     ; 		move.w	d0,(vdp_data).l
(1)   89/  FF3B7E :                     ; 		lea	str_Status(pc),a0
(1)   90/  FF3B7E :                     ; 		move.l	#locate(0,1,25),d0
(1)   91/  FF3B7E :                     ; 		bsr	Video_Print
(1)   92/  FF3B7E : 3038 8824           		move.w	(RAM_MdlCurrMd).w,d0
(1)   93/  FF3B82 : C07C 001F           		and.w	#%11111,d0
(1)   94/  FF3B86 : D040                		add.w	d0,d0
(1)   95/  FF3B88 : D040                		add.w	d0,d0
(1)   96/  FF3B8A : 4EBB 0004           		jsr	.list(pc,d0.w)
(1)   97/  FF3B8E : 60EA                		bra	.loop
(1)   98/  FF3B90 :                     
(1)   99/  FF3B90 :                     ; ====================================================================
(1)  100/  FF3B90 :                     ; ------------------------------------------------------
(1)  101/  FF3B90 :                     ; Mode sections
(1)  102/  FF3B90 :                     ; ------------------------------------------------------
(1)  103/  FF3B90 :                     
(1)  104/  FF3B90 :                     .list:
(1)  105/  FF3B90 : 6000 0006           		bra.w	.mode0
(1)  106/  FF3B94 : 6000 00A8           		bra.w	.mode1
(1)  107/  FF3B98 :                     		
(1)  108/  FF3B98 :                     ; --------------------------------------------------
(1)  109/  FF3B98 :                     ; Mode 0
(1)  110/  FF3B98 :                     ; --------------------------------------------------
(1)  111/  FF3B98 :                     
(1)  112/  FF3B98 :                     .mode0:
(1)  113/  FF3B98 : 4A78 8824           		tst.w	(RAM_MdlCurrMd).w
(1)  114/  FF3B9C : 6B6A                		bmi	.mode0_loop
(1)  115/  FF3B9E : 0078 8000 8824      		or.w	#$8000,(RAM_MdlCurrMd).w
(1)  116/  FF3BA4 :                     
(1)  117/  FF3BA4 : 203C 0600 1468      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display OFF
(1)  118/  FF3BAA : 7200                		moveq	#0,d1
(1)  119/  FF3BAC : 6100 C69E           		bsr	System_MdMars_MstTask		; Wait until it finishes.
(1)  120/  FF3BB0 : 203C 0600 14E4      		move.l	#CmdTaskMd_ObjectClrAll,d0	; Clear ALL objects
(1)  121/  FF3BB6 : 6100 C688           		bsr	System_MdMars_SlvAddTask
(1)  122/  FF3BBA : 223C 0600 4580      		move.l	#Palette_Intro,d1
(1)  123/  FF3BC0 : 7400                		moveq	#0,d2
(1)  124/  FF3BC2 : 363C 0010           		move.w	#16,d3
(1)  125/  FF3BC6 : 7800                		moveq	#0,d4
(1)  126/  FF3BC8 : 203C 0600 1478      		move.l	#CmdTaskMd_LoadSPal,d0		; Load palette
(1)  127/  FF3BCE : 6100 C664           		bsr	System_MdMars_MstAddTask
(1)  128/  FF3BD2 : 7200                		moveq	#0,d1
(1)  129/  FF3BD4 : 243C 0600 47A0      		move.l	#MARSOBJ_INTRO,d2
(1)  130/  FF3BDA : 7600                		moveq	#0,d3
(1)  131/  FF3BDC : 203C 0600 148C      		move.l	#CmdTaskMd_ObjectSet,d0
(1)  132/  FF3BE2 : 6100 C65C           		bsr	System_MdMars_SlvAddTask	; Load object
(1)  133/  FF3BE6 :                     ; 		move.l	#TEST_LAYOUT,d1
(1)  134/  FF3BE6 :                     ; 		move.l	#CmdTaskMd_MakeMap,d0
(1)  135/  FF3BE6 :                     ; 		bsr	System_MdMars_SlvAddTask	; Load map
(1)  136/  FF3BE6 : 203C 0600 1468      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1)  137/  FF3BEC : 7201                		moveq	#1,d1
(1)  138/  FF3BEE : 6100 C644           		bsr	System_MdMars_MstAddTask
(1)  139/  FF3BF2 : 6100 C68C           		bsr	System_MdMars_MstSendAll	; Send requests to
(1)  140/  FF3BF6 : 6100 C6A0           		bsr	System_MdMars_SlvSendAll	; both SH2
(1)  141/  FF3BFA : 23FC 0091 1628 FFFF 		move.l	#CAMERA_INTRO,(RAM_CamData).l
                    8818                
(1)  142/  FF3C04 : 6100 018A           		bsr	MdMdl_CamAnimate
(1)  143/  FF3C08 :                     ; 		move.l	#TEST_WAV,d0
(1)  144/  FF3C08 :                     ; 		move.l	#(TEST_WAV_E-TEST_WAV),d1
(1)  145/  FF3C08 :                     ; 		move.l	#0,d2
(1)  146/  FF3C08 :                     ; 		move.w	#$100,d3
(1)  147/  FF3C08 :                     ; 		moveq	#%01,d4
(1)  148/  FF3C08 :                     ; 		bsr	SoundReq_SetSample
(1)  149/  FF3C08 :                     
(1)  150/  FF3C08 :                     
(1)  151/  FF3C08 :                     		
(1)  152/  FF3C08 :                     		
(1)  153/  FF3C08 :                     .mode0_loop:
(1)  154/  FF3C08 : 6100 0186           		bsr	MdMdl_CamAnimate
(1)  155/  FF3C0C : 6A06                		bpl.s	.stay
(1)  156/  FF3C0E : 31FC 0001 8824      		move.w	#1,(RAM_MdlCurrMd).w
(1)  157/  FF3C14 :                     ; 		rts
(1)  158/  FF3C14 :                     .stay:
(1)  159/  FF3C14 : 7200                		moveq	#0,d1
(1)  160/  FF3C16 : 2438 8800           		move.l	(RAM_Cam_Xpos),d2
(1)  161/  FF3C1A : 2638 8804           		move.l	(RAM_Cam_Ypos),d3
(1)  162/  FF3C1E : 2838 8808           		move.l	(RAM_Cam_Zpos),d4
(1)  163/  FF3C22 : 2A38 880C           		move.l	(RAM_Cam_Xrot),d5
(1)  164/  FF3C26 : 2C38 8810           		move.l	(RAM_Cam_Yrot),d6
(1)  165/  FF3C2A : 2E38 8814           		move.l	(RAM_Cam_Zrot),d7
(1)  166/  FF3C2E : 203C 0600 1508      		move.l	#CmdTaskMd_CameraPos,d0		; Load map
(1)  167/  FF3C34 : 6100 C60A           		bsr	System_MdMars_SlvAddTask	
(1)  168/  FF3C38 : 6100 C69C           		bsr	System_MdMars_SlvSendDrop
(1)  169/  FF3C3C : 4E75                		rts
(1)  170/  FF3C3E :                     
(1)  171/  FF3C3E :                     ; --------------------------------------------------
(1)  172/  FF3C3E :                     ; Mode 1
(1)  173/  FF3C3E :                     ; --------------------------------------------------
(1)  174/  FF3C3E :                     
(1)  175/  FF3C3E :                     .mode1:
(1)  176/  FF3C3E : 4A78 8824           		tst.w	(RAM_MdlCurrMd).w
(1)  177/  FF3C42 : 6B00 00AE           		bmi	.mode1_loop
(1)  178/  FF3C46 : 0078 8000 8824      		or.w	#$8000,(RAM_MdlCurrMd).w
(1)  179/  FF3C4C : 42B9 FFFF 8800      		clr.l	(RAM_Cam_Xpos).l
(1)  180/  FF3C52 : 42B9 FFFF 8804      		clr.l	(RAM_Cam_Ypos).l
(1)  181/  FF3C58 : 42B9 FFFF 8808      		clr.l	(RAM_Cam_Zpos).l
(1)  182/  FF3C5E : 42B9 FFFF 880C      		clr.l	(RAM_Cam_Xrot).l
(1)  183/  FF3C64 : 42B9 FFFF 8810      		clr.l	(RAM_Cam_Yrot).l
(1)  184/  FF3C6A : 42B9 FFFF 8814      		clr.l	(RAM_Cam_Zrot).l
(1)  185/  FF3C70 : 23FC FFFF 6000 FFFF 		move.l	#-$A000,(RAM_Cam_Ypos).l
                    8804                
(1)  186/  FF3C7A :                     
(1)  187/  FF3C7A : 203C 0600 1468      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display OFF
(1)  188/  FF3C80 : 7200                		moveq	#0,d1
(1)  189/  FF3C82 : 6100 C5C8           		bsr	System_MdMars_MstTask		; Wait until it finishes.
(1)  190/  FF3C86 : 7200                		moveq	#0,d1
(1)  191/  FF3C88 : 2438 8800           		move.l	(RAM_Cam_Xpos),d2
(1)  192/  FF3C8C : 2638 8804           		move.l	(RAM_Cam_Ypos),d3
(1)  193/  FF3C90 : 2838 8808           		move.l	(RAM_Cam_Zpos),d4
(1)  194/  FF3C94 : 2A38 880C           		move.l	(RAM_Cam_Xrot),d5
(1)  195/  FF3C98 : 2C38 8810           		move.l	(RAM_Cam_Yrot),d6
(1)  196/  FF3C9C : 2E38 8814           		move.l	(RAM_Cam_Zrot),d7
(1)  197/  FF3CA0 : 203C 0600 1508      		move.l	#CmdTaskMd_CameraPos,d0		; Load map
(1)  198/  FF3CA6 : 6100 C598           		bsr	System_MdMars_SlvAddTask
(1)  199/  FF3CAA : 223C 0600 45A0      		move.l	#Palette_Map,d1
(1)  200/  FF3CB0 : 7400                		moveq	#0,d2
(1)  201/  FF3CB2 : 263C 0000 0100      		move.l	#256,d3
(1)  202/  FF3CB8 : 7800                		moveq	#0,d4
(1)  203/  FF3CBA : 203C 0600 1478      		move.l	#CmdTaskMd_LoadSPal,d0		; Load palette
(1)  204/  FF3CC0 : 6100 C572           		bsr	System_MdMars_MstAddTask
(1)  205/  FF3CC4 : 203C 0600 14E4      		move.l	#CmdTaskMd_ObjectClrAll,d0	; Clear ALL objects
(1)  206/  FF3CCA : 6100 C574           		bsr	System_MdMars_SlvAddTask
(1)  207/  FF3CCE : 223C 0600 486C      		move.l	#TEST_LAYOUT,d1
(1)  208/  FF3CD4 : 203C 0600 14F4      		move.l	#CmdTaskMd_MakeMap,d0
(1)  209/  FF3CDA : 6100 C558           		bsr	System_MdMars_MstAddTask	; Load map
(1)  210/  FF3CDE : 203C 0600 1468      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1)  211/  FF3CE4 : 7201                		moveq	#1,d1
(1)  212/  FF3CE6 : 6100 C54C           		bsr	System_MdMars_MstAddTask
(1)  213/  FF3CEA : 6100 C594           		bsr	System_MdMars_MstSendAll	; Send requests to
(1)  214/  FF3CEE : 6100 C5A8           		bsr	System_MdMars_SlvSendAll	; both SH2
(1)  215/  FF3CF2 :                     
(1)  216/  FF3CF2 :                     .mode1_loop:
(1)  217/  FF3CF2 : 41FA 0106           		lea	str_Status(pc),a0
(1)  218/  FF3CF6 : 203C 0000 0119      		move.l	#locate(0,1,25),d0
(1)  219/  FF3CFC : 6100 C8CC           		bsr	Video_Print
(1)  220/  FF3D00 :                     
(1)  221/  FF3D00 :                     	; temporal camera
(1)  222/  FF3D00 : 3E39 FFFF 9002      		move.w	(Controller_1+on_hold).l,d7
(1)  223/  FF3D06 : 0807 0000           		btst	#bitJoyUp,d7
(1)  224/  FF3D0A : 670A                		beq.s	.nou
(1)  225/  FF3D0C : 06B9 0000 2000 FFFF 		add.l	#$2000,(RAM_Cam_Zpos).l
                    8808                
(1)  226/  FF3D16 :                     .nou:
(1)  227/  FF3D16 : 0807 0001           		btst	#bitJoyDown,d7
(1)  228/  FF3D1A : 670A                		beq.s	.nod
(1)  229/  FF3D1C : 06B9 FFFF E000 FFFF 		add.l	#-$2000,(RAM_Cam_Zpos).l
                    8808                
(1)  230/  FF3D26 :                     .nod:
(1)  231/  FF3D26 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  232/  FF3D2A : 670A                		beq.s	.nol
(1)  233/  FF3D2C : 06B9 FFFF E000 FFFF 		add.l	#-$2000,(RAM_Cam_Xpos).l
                    8800                
(1)  234/  FF3D36 :                     .nol:
(1)  235/  FF3D36 : 0807 0003           		btst	#bitJoyRight,d7
(1)  236/  FF3D3A : 670A                		beq.s	.nor
(1)  237/  FF3D3C : 06B9 0000 2000 FFFF 		add.l	#$2000,(RAM_Cam_Xpos).l
                    8800                
(1)  238/  FF3D46 :                     .nor:
(1)  239/  FF3D46 : 0807 0006           		btst	#bitJoyA,d7
(1)  240/  FF3D4A : 670A                		beq.s	.noa
(1)  241/  FF3D4C : 06B9 FFFF E000 FFFF 		add.l	#-$2000,(RAM_Cam_Xrot).l
                    880C                
(1)  242/  FF3D56 :                     .noa:
(1)  243/  FF3D56 : 0807 0004           		btst	#bitJoyB,d7
(1)  244/  FF3D5A : 670A                		beq.s	.nob
(1)  245/  FF3D5C : 06B9 0000 2000 FFFF 		add.l	#$2000,(RAM_Cam_Xrot).l
                    880C                
(1)  246/  FF3D66 :                     .nob:
(1)  247/  FF3D66 : 7200                		moveq	#0,d1
(1)  248/  FF3D68 : 2438 8800           		move.l	(RAM_Cam_Xpos),d2
(1)  249/  FF3D6C : 2638 8804           		move.l	(RAM_Cam_Ypos),d3
(1)  250/  FF3D70 : 2838 8808           		move.l	(RAM_Cam_Zpos),d4
(1)  251/  FF3D74 : 2A38 880C           		move.l	(RAM_Cam_Xrot),d5
(1)  252/  FF3D78 : 2C38 8810           		move.l	(RAM_Cam_Yrot),d6
(1)  253/  FF3D7C : 2E38 8814           		move.l	(RAM_Cam_Zrot),d7
(1)  254/  FF3D80 : 203C 0600 1508      		move.l	#CmdTaskMd_CameraPos,d0		; Load map
(1)  255/  FF3D86 : 6100 C4B8           		bsr	System_MdMars_SlvAddTask		
(1)  256/  FF3D8A : 6100 C54A           		bsr	System_MdMars_SlvSendDrop
(1)  257/  FF3D8E : 4E75                		rts
(1)  258/  FF3D90 :                     
(1)  259/  FF3D90 :                     ; 		lea	.trklist(pc),a0
(1)  260/  FF3D90 :                     ; 		lea	(RAM_SndPitch),a1
(1)  261/  FF3D90 :                     ; 		move.w	(RAM_CurY),d5
(1)  262/  FF3D90 :                     ; 		move.w	d5,d4
(1)  263/  FF3D90 :                     ; 		add.w	d5,d5
(1)  264/  FF3D90 :                     ; 		move.w	(a1,d5.w),d0
(1)  265/  FF3D90 :                     ; 		lsl.w	#4,d0
(1)  266/  FF3D90 :                     ; 		adda	d0,a0
(1)  267/  FF3D90 :                     ; 		move.l	(a0)+,d0
(1)  268/  FF3D90 :                     ; 		move.l	(a0)+,d1
(1)  269/  FF3D90 :                     ; 		move.l	(a0)+,d2
(1)  270/  FF3D90 :                     ; 		move.w	(a0)+,d3
(1)  271/  FF3D90 :                     ; 		bra	SoundReq_SetTrack
(1)  272/  FF3D90 :                     ; .trklist:
(1)  273/  FF3D90 :                     ; 		dc.l GemaTrk_Yuki_patt
(1)  274/  FF3D90 :                     ; 		dc.l GemaTrk_Yuki_blk
(1)  275/  FF3D90 :                     ; 		dc.l GemaTrk_Yuki_ins
(1)  276/  FF3D90 :                     ; 		dc.w 2,0
(1)  277/  FF3D90 :                     ; 		dc.l TEST_PATTERN
(1)  278/  FF3D90 :                     ; 		dc.l TEST_BLOCKS
(1)  279/  FF3D90 :                     ; 		dc.l TEST_INSTR
(1)  280/  FF3D90 :                     ; 		dc.w 3,0
(1)  281/  FF3D90 :                     ; 		dc.l TEST_PATTERN_2
(1)  282/  FF3D90 :                     ; 		dc.l TEST_BLOCKS_2
(1)  283/  FF3D90 :                     ; 		dc.l TEST_INSTR_2
(1)  284/  FF3D90 :                     ; 		dc.w 4,0
(1)  285/  FF3D90 :                     
(1)  286/  FF3D90 :                     ; ====================================================================
(1)  287/  FF3D90 :                     ; ------------------------------------------------------
(1)  288/  FF3D90 :                     ; Subroutines
(1)  289/  FF3D90 :                     ; ------------------------------------------------------
(1)  290/  FF3D90 :                     
(1)  291/  FF3D90 :                     ; MdMdl_Update:
(1)  292/  FF3D90 :                     ; 		cmp.w	#3,(RAM_CurY).w
(1)  293/  FF3D90 :                     ; 		bge.s	.pwm_upd
(1)  294/  FF3D90 :                     ; 		cmp.w	#2,(RAM_CurY).w
(1)  295/  FF3D90 :                     ; 		bne.s	.upd_cont
(1)  296/  FF3D90 :                     ; 		move.w	#$22,d0
(1)  297/  FF3D90 :                     ; 		move.w	(RAM_SndPitch+4).w,d1
(1)  298/  FF3D90 :                     ; 		bsr	Sound_Request
(1)  299/  FF3D90 :                     ; 		bra.s	.upd_cont
(1)  300/  FF3D90 :                     ; .pwm_upd:
(1)  301/  FF3D90 :                     ; 		lea	(RAM_SndPitch+6),a0
(1)  302/  FF3D90 :                     ; 		move.w	(a0)+,d1
(1)  303/  FF3D90 :                     ; 		move.w	(a0)+,d2
(1)  304/  FF3D90 :                     ; 		move.w	(a0)+,d3
(1)  305/  FF3D90 :                     ; 		move.w	(a0)+,d4
(1)  306/  FF3D90 :                     ; 		move.w	(a0)+,d5
(1)  307/  FF3D90 :                     ; 		move.w	(a0)+,d6
(1)  308/  FF3D90 :                     ; 		move.w	(a0)+,d7
(1)  309/  FF3D90 :                     ; 		move.l	#CmdTaskMd_PWM_MultPitch,d0
(1)  310/  FF3D90 :                     ; 		bsr	System_MdMars_MstTask
(1)  311/  FF3D90 :                     ; 		
(1)  312/  FF3D90 :                     ; .upd_cont:
(1)  313/  FF3D90 :                     ; 		lea	str_StatusPtch(pc),a0
(1)  314/  FF3D90 :                     ; 		move.l	#locate(0,10,3),d0
(1)  315/  FF3D90 :                     ; 		bsr	Video_Print
(1)  316/  FF3D90 :                     ; 		
(1)  317/  FF3D90 :                     ; 		lea	str_LazCursor(pc),a0
(1)  318/  FF3D90 :                     ; 		move.l	#locate(0,1,2),d0
(1)  319/  FF3D90 :                     ; 		move.w	(RAM_CurY).w,d1
(1)  320/  FF3D90 :                     ; 		add.b	d1,d0
(1)  321/  FF3D90 :                     ; 		bra	Video_Print
(1)  322/  FF3D90 :                     
(1)  323/  FF3D90 :                     MdMdl_CamAnimate:
(1)  324/  FF3D90 : 2039 FFFF 8818      		move.l	(RAM_CamData).l,d0		; If 0 == No animation
(1)  325/  FF3D96 : 675E                		beq.s	.no_camanim
(1)  326/  FF3D98 : 04B9 0000 0001 FFFF 		sub.l	#1,(RAM_CamTimer).l
                    8820                
(1)  327/  FF3DA2 : 6A52                		bpl.s	.no_camanim
(1)  328/  FF3DA4 : 23FC 0000 0001 FFFF 		move.l	#1,(RAM_CamTimer).l		; TEMPORAL timer
                    8820                
(1)  329/  FF3DAE : 2240                		move.l	d0,a1
(1)  330/  FF3DB0 : 2219                		move.l	(a1)+,d1
(1)  331/  FF3DB2 : 2039 FFFF 881C      		move.l	(RAM_CamFrame).l,d0
(1)  332/  FF3DB8 : D0BC 0000 0001      		add.l	#1,d0
(1)  333/  FF3DBE : B081                		cmp.l	d1,d0
(1)  334/  FF3DC0 : 6604                		bne.s	.on_frames
(1)  335/  FF3DC2 : 70FF                		moveq	#-1,d0
(1)  336/  FF3DC4 : 4E75                		rts
(1)  337/  FF3DC6 :                     .on_frames:
(1)  338/  FF3DC6 : 23C0 FFFF 881C      		move.l	d0,(RAM_CamFrame).l
(1)  339/  FF3DCC : C0FC 0018           		mulu.w	#$18,d0
(1)  340/  FF3DD0 : D2C0                		adda	d0,a1
(1)  341/  FF3DD2 : 23D9 FFFF 8800      		move.l	(a1)+,(RAM_Cam_Xpos).l
(1)  342/  FF3DD8 : 23D9 FFFF 8804      		move.l	(a1)+,(RAM_Cam_Ypos).l
(1)  343/  FF3DDE : 23D9 FFFF 8808      		move.l	(a1)+,(RAM_Cam_Zpos).l
(1)  344/  FF3DE4 : 23D9 FFFF 880C      		move.l	(a1)+,(RAM_Cam_Xrot).l
(1)  345/  FF3DEA : 23D9 FFFF 8810      		move.l	(a1)+,(RAM_Cam_Yrot).l
(1)  346/  FF3DF0 : 23D9 FFFF 8814      		move.l	(a1)+,(RAM_Cam_Zrot).l
(1)  347/  FF3DF6 :                     ; 		lsr.l	#7,d1
(1)  348/  FF3DF6 :                     ; 		move.w	d1,(RAM_BgCamera).l
(1)  349/  FF3DF6 :                     .no_camanim:
(1)  350/  FF3DF6 : 7000                		moveq	#0,d0
(1)  351/  FF3DF8 : 4E75                		rts
(1)  352/  FF3DFA :                     ; 
(1)  353/  FF3DFA :                     ; MdMdl1_Usercontrol:
(1)  354/  FF3DFA :                     ; 		move.l	#var_MoveSpd,d5
(1)  355/  FF3DFA :                     ; 		move.l	#-var_MoveSpd,d6
(1)  356/  FF3DFA :                     ; 		move.w	(Controller_2+on_hold),d7
(1)  357/  FF3DFA :                     ; 		btst	#bitJoyUp,d7
(1)  358/  FF3DFA :                     ; 		beq.s	.no_up
(1)  359/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  360/  FF3DFA :                     ; 		move.l	cam2_z_pos(a0),d0
(1)  361/  FF3DFA :                     ; 		add.l	d5,d0
(1)  362/  FF3DFA :                     ; 		move.l	d0,cam2_z_pos(a0)
(1)  363/  FF3DFA :                     ; .no_up:
(1)  364/  FF3DFA :                     ; 		btst	#bitJoyDown,d7
(1)  365/  FF3DFA :                     ; 		beq.s	.no_dw
(1)  366/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  367/  FF3DFA :                     ; 		move.l	cam2_z_pos(a0),d0
(1)  368/  FF3DFA :                     ; 		add.l	d6,d0
(1)  369/  FF3DFA :                     ; 		move.l	d0,cam2_z_pos(a0)
(1)  370/  FF3DFA :                     ; .no_dw:
(1)  371/  FF3DFA :                     ; 		btst	#bitJoyLeft,d7
(1)  372/  FF3DFA :                     ; 		beq.s	.no_lf
(1)  373/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  374/  FF3DFA :                     ; 		move.l	cam2_x_pos(a0),d0
(1)  375/  FF3DFA :                     ; 		add.l	d6,d0
(1)  376/  FF3DFA :                     ; 		move.l	d0,cam2_x_pos(a0)
(1)  377/  FF3DFA :                     ; .no_lf:
(1)  378/  FF3DFA :                     ; 		btst	#bitJoyRight,d7
(1)  379/  FF3DFA :                     ; 		beq.s	.no_rg
(1)  380/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  381/  FF3DFA :                     ; 		move.l	cam2_x_pos(a0),d0
(1)  382/  FF3DFA :                     ; 		add.l	d5,d0
(1)  383/  FF3DFA :                     ; 		move.l	d0,cam2_x_pos(a0)
(1)  384/  FF3DFA :                     ; .no_rg:
(1)  385/  FF3DFA :                     ; 
(1)  386/  FF3DFA :                     ; 		btst	#bitJoyB,d7
(1)  387/  FF3DFA :                     ; 		beq.s	.no_a
(1)  388/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  389/  FF3DFA :                     ; 		move.l	cam2_x_rot(a0),d0
(1)  390/  FF3DFA :                     ; 		move.l	d6,d1
(1)  391/  FF3DFA :                     ; 		add.l	d1,d0
(1)  392/  FF3DFA :                     ; 		move.l	d0,cam2_x_rot(a0)
(1)  393/  FF3DFA :                     ; 		lsr.l	#7,d0
(1)  394/  FF3DFA :                     ; 		neg.l	d0
(1)  395/  FF3DFA :                     ; 		move.w	d0,(RAM_BgCamera).l
(1)  396/  FF3DFA :                     ; .no_a:
(1)  397/  FF3DFA :                     ; 		btst	#bitJoyC,d7
(1)  398/  FF3DFA :                     ; 		beq.s	.no_b
(1)  399/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  400/  FF3DFA :                     ; 		move.l	cam2_x_rot(a0),d0
(1)  401/  FF3DFA :                     ; 		move.l	d5,d1
(1)  402/  FF3DFA :                     ; 		add.l	d1,d0
(1)  403/  FF3DFA :                     ; 		move.l	d0,cam2_x_rot(a0)
(1)  404/  FF3DFA :                     ; 		lsr.l	#7,d0
(1)  405/  FF3DFA :                     ; 		neg.l	d0
(1)  406/  FF3DFA :                     ; 		move.w	d0,(RAM_BgCamera).l
(1)  407/  FF3DFA :                     ; .no_b:
(1)  408/  FF3DFA :                     ; 	; Reset all
(1)  409/  FF3DFA :                     ; ; 		btst	#bitJoyC,d7
(1)  410/  FF3DFA :                     ; ; 		beq.s	.no_c
(1)  411/  FF3DFA :                     ; ; 		;move.w	#1,(RAM_MdMdlsUpd).l
(1)  412/  FF3DFA :                     ; ; 		lea	(RAM_MdCamera),a0
(1)  413/  FF3DFA :                     ; ; 		moveq	#0,d0
(1)  414/  FF3DFA :                     ; ; 		move.l	d0,cam2_x_pos(a0)
(1)  415/  FF3DFA :                     ; ; 		move.l	d0,cam2_y_pos(a0)
(1)  416/  FF3DFA :                     ; ; 		move.l	d0,cam2_z_pos(a0)
(1)  417/  FF3DFA :                     ; ; 		move.l	d0,cam2_x_rot(a0)
(1)  418/  FF3DFA :                     ; ; 		move.l	d0,cam2_y_rot(a0)
(1)  419/  FF3DFA :                     ; ; 		move.l	d0,cam2_z_rot(a0)
(1)  420/  FF3DFA :                     ; ; .no_c:
(1)  421/  FF3DFA :                     ; 
(1)  422/  FF3DFA :                     ; 
(1)  423/  FF3DFA :                     ; 	; Up/Down
(1)  424/  FF3DFA :                     ; 		move.w	d7,d4
(1)  425/  FF3DFA :                     ; 		and.w	#JoyY,d4
(1)  426/  FF3DFA :                     ; 		beq.s	.no_x
(1)  427/  FF3DFA :                     ; 		;move.w	#1,(RAM_MdMdlsUpd).l
(1)  428/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  429/  FF3DFA :                     ; 		move.l	cam2_y_pos(a0),d0
(1)  430/  FF3DFA :                     ; 		add.l	d5,d0
(1)  431/  FF3DFA :                     ; 		move.l	d0,cam2_y_pos(a0)
(1)  432/  FF3DFA :                     ; .no_x:
(1)  433/  FF3DFA :                     ; 		move.w	d7,d4
(1)  434/  FF3DFA :                     ; 		and.w	#JoyZ,d4
(1)  435/  FF3DFA :                     ; 		beq.s	.no_y
(1)  436/  FF3DFA :                     ; 		;move.w	#1,(RAM_MdMdlsUpd).l
(1)  437/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  438/  FF3DFA :                     ; 		move.l	cam2_y_pos(a0),d0
(1)  439/  FF3DFA :                     ; 		add.l	d6,d0
(1)  440/  FF3DFA :                     ; 		move.l	d0,cam2_y_pos(a0)
(1)  441/  FF3DFA :                     ; .no_y:
(1)  442/  FF3DFA :                     ; 		rts
(1)  443/  FF3DFA :                     
(1)  444/  FF3DFA :                     ; 		lea	(RAM_MdCamera),a0
(1)  445/  FF3DFA :                     ; 		move.l	#CmdTaskMd_CameraPos,d0		; Cmnd $0D: Set camera positions
(1)  446/  FF3DFA :                     ; 		moveq	#0,d1
(1)  447/  FF3DFA :                     ; 		move.l	cam2_x_pos(a0),d2
(1)  448/  FF3DFA :                     ; 		move.l	cam2_y_pos(a0),d3
(1)  449/  FF3DFA :                     ; 		move.l	cam2_z_pos(a0),d4
(1)  450/  FF3DFA :                     ; 		move.l	cam2_x_rot(a0),d5
(1)  451/  FF3DFA :                     ; 		move.l	cam2_y_rot(a0),d6
(1)  452/  FF3DFA :                     ; 		move.l	cam2_z_rot(a0),d7
(1)  453/  FF3DFA :                     ; 		bsr	System_MdMars_SlvAddTask
(1)  454/  FF3DFA :                     
(1)  455/  FF3DFA :                     ; ====================================================================
(1)  456/  FF3DFA :                     ; ------------------------------------------------------
(1)  457/  FF3DFA :                     ; Interrupts
(1)  458/  FF3DFA :                     ; ------------------------------------------------------
(1)  459/  FF3DFA :                     
(1)  460/  FF3DFA :                     ; --------------------------------------------------
(1)  461/  FF3DFA :                     ; Custom VBlank
(1)  462/  FF3DFA :                     ; --------------------------------------------------
(1)  463/  FF3DFA :                     
(1)  464/  FF3DFA :                     ; --------------------------------------------------
(1)  465/  FF3DFA :                     ; Custom HBlank
(1)  466/  FF3DFA :                     ; --------------------------------------------------
(1)  467/  FF3DFA :                     
(1)  468/  FF3DFA :                     ; ====================================================================
(1)  469/  FF3DFA :                     ; ------------------------------------------------------
(1)  470/  FF3DFA :                     ; DATA
(1)  471/  FF3DFA :                     ; 
(1)  472/  FF3DFA :                     ; short stuff goes here
(1)  473/  FF3DFA :                     ; ------------------------------------------------------
(1)  474/  FF3DFA :                     
(1)  475/  FF3DFA :                     ; str_LazCursor:	dc.b " ",$A,">",$A," ",0
(1)  476/  FF3DFA :                     ; 		align 2
(1)  477/  FF3DFA :                     ; str_Title:	dc.b "GEMA Sound tester",$A,$A
(1)  478/  FF3DFA :                     ; 		dc.b " Track 1 ????",$A
(1)  479/  FF3DFA :                     ; 		dc.b " Track 2 ????",$A
(1)  480/  FF3DFA :                     ; 		dc.b "     DAC ????",$A
(1)  481/  FF3DFA :                     ; 		dc.b "  PWM 01 ????",$A
(1)  482/  FF3DFA :                     ; 		dc.b "      02 ????",$A
(1)  483/  FF3DFA :                     ; 		dc.b "      03 ????",$A
(1)  484/  FF3DFA :                     ; 		dc.b "      04 ????",$A
(1)  485/  FF3DFA :                     ; 		dc.b "      05 ????",$A
(1)  486/  FF3DFA :                     ; 		dc.b "      06 ????",$A
(1)  487/  FF3DFA :                     ; 		dc.b "      07 ????",0
(1)  488/  FF3DFA :                     ; 		dc.b "                             ",0
(1)  489/  FF3DFA :                     ; 		align 2
(1)  490/  FF3DFA :                     ; str_StatusPtch:	dc.b "\\w",$A
(1)  491/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  492/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  493/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  494/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  495/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  496/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  497/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  498/  FF3DFA :                     ; 		dc.b "\\w",$A
(1)  499/  FF3DFA :                     ; ; 		dc.b "\\w",$A
(1)  500/  FF3DFA :                     ; ; 		dc.b "\\w",$A
(1)  501/  FF3DFA :                     ; ; 		dc.b "\\w",$A
(1)  502/  FF3DFA :                     ; ; 		dc.b "\\w",$A
(1)  503/  FF3DFA :                     ; ; 		dc.b "\\w",$A
(1)  504/  FF3DFA :                     ; ; 		dc.b "\\w",$A
(1)  505/  FF3DFA :                     ; ; 		dc.b "\\w",$A
(1)  506/  FF3DFA :                     ; 		dc.b "\\w",0
(1)  507/  FF3DFA :                     ; 		dc.l RAM_SndPitch
(1)  508/  FF3DFA :                     ; 		dc.l RAM_SndPitch+2
(1)  509/  FF3DFA :                     ; 		dc.l RAM_SndPitch+4
(1)  510/  FF3DFA :                     ; 		dc.l RAM_SndPitch+6
(1)  511/  FF3DFA :                     ; 		dc.l RAM_SndPitch+8
(1)  512/  FF3DFA :                     ; 		dc.l RAM_SndPitch+10
(1)  513/  FF3DFA :                     ; 		dc.l RAM_SndPitch+12
(1)  514/  FF3DFA :                     ; 		dc.l RAM_SndPitch+14
(1)  515/  FF3DFA :                     ; 		dc.l RAM_SndPitch+16
(1)  516/  FF3DFA :                     ; 		dc.l RAM_SndPitch+18
(1)  517/  FF3DFA :                     ; ; 		dc.l RAM_SndPitch+20
(1)  518/  FF3DFA :                     ; ; 		dc.l RAM_SndPitch+22
(1)  519/  FF3DFA :                     ; ; 		dc.l RAM_SndPitch+24
(1)  520/  FF3DFA :                     ; ; 		dc.l RAM_SndPitch+26
(1)  521/  FF3DFA :                     ; ; 		dc.l RAM_SndPitch+28
(1)  522/  FF3DFA :                     ; ; 		dc.l RAM_SndPitch+30
(1)  523/  FF3DFA :                     ; ; 		dc.l RAM_SndPitch+32
(1)  524/  FF3DFA :                     ; 		align 2
(1)  525/  FF3DFA :                     str_Status:
(1)  526/  FF3DFA : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w       MD: \\l",$A
                    205C 7720 2020 2020 
                    2020 4D44 3A20 5C6C 
                    0A                  
(1)  527/  FF3E13 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",0
                    205C 7700           
(1)  528/  FF3E1F : 00A1 5120           		dc.l sysmars_reg+comm0
(1)  529/  FF3E23 : 00A1 5122           		dc.l sysmars_reg+comm2
(1)  530/  FF3E27 : 00A1 5124           		dc.l sysmars_reg+comm4
(1)  531/  FF3E2B : 00A1 5126           		dc.l sysmars_reg+comm6
(1)  532/  FF3E2F : FFFF 9638           		dc.l RAM_FrameCount
(1)  533/  FF3E33 : 00A1 5128           		dc.l sysmars_reg+comm8
(1)  534/  FF3E37 : 00A1 512A           		dc.l sysmars_reg+comm10
(1)  535/  FF3E3B : 00A1 512C           		dc.l sysmars_reg+comm12
(1)  536/  FF3E3F : 00A1 512E           		dc.l sysmars_reg+comm14
(1)  537/  FF3E43 :                     		align 4
(1)  538/  FF3E46 :                     
      47/    4778 :                     		dephase
      48/    4778 :                     Engine_Code_end:
      49/    4778 :                     		align 2
      53/    4778 :                     	
      54/    4778 :                     ; ====================================================================
      55/    4778 :                     ; ----------------------------------------------------------------
      56/    4778 :                     ; SH2 CODE for 32X
      57/    4778 :                     ; ----------------------------------------------------------------
      58/    4778 :                     
      59/    4778 :                     		align 4
      60/    4778 :                     MARS_RAMDATA:
      61/    4778 :                     		include "system/mars/code.asm"
(1)    1/    4778 :                     ; ====================================================================		
(1)    2/    4778 :                     ; ----------------------------------------------------------------
(1)    3/    4778 :                     ; MARS SH2 Section
(1)    4/    4778 :                     ; 
(1)    5/    4778 :                     ; CODE for both CPUs
(1)    6/    4778 :                     ; RAM and some DATA go here
(1)    7/    4778 :                     ; ----------------------------------------------------------------
(1)    8/    4778 :                     
(1)    9/ 6000000 :                     		phase CS3		; now we are at SDRAM
(1)   10/ 6000000 :                     		cpu SH7600		; should be SH7095 but this works too.
(1)   11/ 6000000 :                     
(1)   12/ 6000000 :                     ; ====================================================================
(1)   13/ 6000000 :                     
(1)   14/ 6000000 :                     		include "system/mars/head.asm"
(2)    1/ 6000000 :                     ; ====================================================================		
(2)    2/ 6000000 :                     ; ----------------------------------------------------------------
(2)    3/ 6000000 :                     ; MASTER CPU HEAD
(2)    4/ 6000000 :                     ; ----------------------------------------------------------------
(2)    5/ 6000000 :                     
(2)    6/ 6000000 :                     		align 4
(2)    7/ 6000000 :                     SH2_Master:
(2)    8/ 6000000 : 0600 10A4 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Cold PC,SP
(2)    9/ 6000008 : 0600 10A4 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Manual PC,SP
(2)   10/ 6000010 :                     
(2)   11/ 6000010 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(2)   12/ 6000014 : 0000 0000           		dc.l 0				; reserved
(2)   13/ 6000018 : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(2)   14/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(2)   15/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(2)   16/ 6000024 : 0600 030C           		dc.l SH2_Error			; CPU address error
(2)   17/ 6000028 : 0600 030C           		dc.l SH2_Error			; DMA address error
(2)   18/ 600002C : 0600 030C           		dc.l SH2_Error			; NMI vector
(2)   19/ 6000030 : 0600 030C           		dc.l SH2_Error			; User break vector
(2)   20/ 6000034 :                     
(2)   21/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(2)   22/ 600005C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(2)   23/ 6000080 :                     
(2)   24/ 6000080 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(2)   25/ 6000088 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   26/ 6000090 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   27/ 6000098 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   28/ 60000A0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   29/ 60000A8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   30/ 60000B0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   31/ 60000B8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   32/ 60000C0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   33/ 60000C8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   34/ 60000D0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   35/ 60000D8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   36/ 60000E0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   37/ 60000E8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   38/ 60000F0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   39/ 60000F8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   40/ 6000100 :                     
(2)   41/ 6000100 : 0600 0248            		dc.l master_irq			; Level 1 IRQ
(2)   42/ 6000104 : 0600 0248           		dc.l master_irq			; Level 2 & 3 IRQ's
(2)   43/ 6000108 : 0600 0248           		dc.l master_irq			; Level 4 & 5 IRQ's
(2)   44/ 600010C : 0600 0248           		dc.l master_irq			; PWM interupt
(2)   45/ 6000110 : 0600 0248           		dc.l master_irq			; Command interupt
(2)   46/ 6000114 : 0600 0248           		dc.l master_irq			; H Blank interupt
(2)   47/ 6000118 : 0600 0248           		dc.l master_irq			; V Blank interupt
(2)   48/ 600011C : 0600 0248           		dc.l master_irq			; Reset Button
(2)   49/ 6000120 : 0600 0248           		dc.l master_irq			;
(2)   50/ 6000124 :                     
(2)   51/ 6000124 :                     ; ====================================================================
(2)   52/ 6000124 :                     ; ----------------------------------------------------------------
(2)   53/ 6000124 :                     ; SLAVE CPU HEAD
(2)   54/ 6000124 :                     ; ----------------------------------------------------------------
(2)   55/ 6000124 :                     
(2)   56/ 6000124 :                     		align 4
(2)   57/ 6000124 :                     SH2_Slave:
(2)   58/ 6000124 : 0600 125C 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Cold PC,SP
(2)   59/ 600012C : 0600 125C 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Manual PC,SP
(2)   60/ 6000134 :                     
(2)   61/ 6000134 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(2)   62/ 6000138 : 0000 0000           		dc.l 0				; reserved
(2)   63/ 600013C : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(2)   64/ 6000140 : 2010 0400           		dc.l $20100400			; reserved
(2)   65/ 6000144 : 2010 0420           		dc.l $20100420			; reserved
(2)   66/ 6000148 : 0600 030C           		dc.l SH2_Error			; CPU address error
(2)   67/ 600014C : 0600 030C           		dc.l SH2_Error			; DMA address error
(2)   68/ 6000150 : 0600 030C           		dc.l SH2_Error			; NMI vector
(2)   69/ 6000154 : 0600 030C           		dc.l SH2_Error			; User break vector
(2)   70/ 6000158 :                     
(2)   71/ 6000158 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(2)   72/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(2)   73/ 60001A4 :                     
(2)   74/ 60001A4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(2)   75/ 60001AC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   76/ 60001B4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   77/ 60001BC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   78/ 60001C4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   79/ 60001CC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   80/ 60001D4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   81/ 60001DC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   82/ 60001E4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   83/ 60001EC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   84/ 60001F4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   85/ 60001FC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   86/ 6000204 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   87/ 600020C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   88/ 6000214 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   89/ 600021C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   90/ 6000224 :                     
(2)   91/ 6000224 : 0600 02AC            		dc.l slave_irq			; Level 1 IRQ
(2)   92/ 6000228 : 0600 02AC           		dc.l slave_irq			; Level 2 & 3 IRQ's
(2)   93/ 600022C : 0600 02AC           		dc.l slave_irq			; Level 4 & 5 IRQ's
(2)   94/ 6000230 : 0600 02AC           		dc.l slave_irq			; PWM interupt
(2)   95/ 6000234 : 0600 02AC           		dc.l slave_irq			; Command interupt
(2)   96/ 6000238 : 0600 02AC           		dc.l slave_irq			; H Blank interupt
(2)   97/ 600023C : 0600 02AC           		dc.l slave_irq			; V Blank interupt
(2)   98/ 6000240 : 0600 02AC           		dc.l slave_irq			; Reset Button
(2)   99/ 6000244 : 0600 02AC           		dc.l slave_irq
(2)  100/ 6000248 :                     
(2)  101/ 6000248 :                     ; ====================================================================
(2)  102/ 6000248 :                     ; ----------------------------------------------------------------
(2)  103/ 6000248 :                     ; irq
(2)  104/ 6000248 :                     ; 
(2)  105/ 6000248 :                     ; r0-r1 are safe
(2)  106/ 6000248 :                     ; ----------------------------------------------------------------
(2)  107/ 6000248 :                     
(2)  108/ 6000248 :                     		align 4
(2)  109/ 6000248 :                     master_irq:
(2)  110/ 6000248 : 2F06                		mov.l	r0,@-r15
(2)  111/ 600024A : 2F16                		mov.l	r1,@-r15
(2)  112/ 600024C : 4F22                		sts.l	pr,@-r15
(2)  113/ 600024E :                     	
(2)  114/ 600024E : 0002                		stc	sr,r0
(2)  115/ 6000250 : 4009                		shlr2	r0
(2)  116/ 6000252 : C93C                		and	#$3C,r0
(2)  117/ 6000254 : D104                		mov	#int_m_list,r1
(2)  118/ 6000256 : 301C                		add	r1,r0
(2)  119/ 6000258 : 6102                		mov	@r0,r1
(2)  120/ 600025A : 410B                		jsr	@r1
(2)  121/ 600025C : 0009                		nop
(2)  122/ 600025E :                     		
(2)  123/ 600025E : 4F26                		lds.l	@r15+,pr
(2)  124/ 6000260 : 61F6                		mov.l	@r15+,r1
(2)  125/ 6000262 : 60F6                		mov.l	@r15+,r0
(2)  126/ 6000264 : 002B                		rte
(2)  127/ 6000266 : 0009                		nop
(2)  128/ 6000268 :                     		align 4
(2)  129/ 6000268 : 0600 026C           		ltorg
(2)  130/ 600026C :                     
(2)  131/ 600026C :                     ; ------------------------------------------------
(2)  132/ 600026C :                     ; irq list
(2)  133/ 600026C :                     ; ------------------------------------------------
(2)  134/ 600026C :                     
(2)  135/ 600026C :                     		align 4
(2)  136/ 600026C :                     int_m_list:
(2)  137/ 600026C : 0600 0314 0600 0314 		dc.l m_irq_bad,m_irq_bad
(2)  138/ 6000274 : 0600 0314 0600 0314 		dc.l m_irq_bad,m_irq_bad
(2)  139/ 600027C : 0600 0314 C000 0000 		dc.l m_irq_bad,m_irq_custom
(2)  140/ 6000284 : 0600 0318 0600 0318 		dc.l m_irq_pwm,m_irq_pwm
(2)  141/ 600028C : 0600 033C 0600 033C 		dc.l m_irq_cmd,m_irq_cmd
(2)  142/ 6000294 : 0600 03FC 0600 03FC 		dc.l m_irq_h,m_irq_h
(2)  143/ 600029C : 0600 0418 0600 0418 		dc.l m_irq_v,m_irq_v
(2)  144/ 60002A4 : 0600 04B8 0600 04B8 		dc.l m_irq_vres,m_irq_vres
(2)  145/ 60002AC :                     		
(2)  146/ 60002AC :                     ; ====================================================================
(2)  147/ 60002AC :                     ; ----------------------------------------------------------------
(2)  148/ 60002AC :                     ; irq
(2)  149/ 60002AC :                     ; 
(2)  150/ 60002AC :                     ; r0-r1 are safe
(2)  151/ 60002AC :                     ; ----------------------------------------------------------------
(2)  152/ 60002AC :                     
(2)  153/ 60002AC :                     		align 4
(2)  154/ 60002AC :                     slave_irq:
(2)  155/ 60002AC : 2F06                		mov.l	r0,@-r15
(2)  156/ 60002AE : 2F16                		mov.l	r1,@-r15
(2)  157/ 60002B0 : 4F22                		sts.l	pr,@-r15
(2)  158/ 60002B2 :                     
(2)  159/ 60002B2 : 0002                		stc	sr,r0
(2)  160/ 60002B4 : 4009                		shlr2	r0
(2)  161/ 60002B6 : C93C                		and	#$3C,r0
(2)  162/ 60002B8 : D145                		mov	#int_s_list,r1
(2)  163/ 60002BA : 301C                		add	r1,r0
(2)  164/ 60002BC : 6102                		mov	@r0,r1
(2)  165/ 60002BE : 410B                		jsr	@r1
(2)  166/ 60002C0 : 0009                		nop
(2)  167/ 60002C2 :                     		
(2)  168/ 60002C2 : 4F26                		lds.l	@r15+,pr
(2)  169/ 60002C4 : 61F6                		mov.l	@r15+,r1
(2)  170/ 60002C6 : 60F6                		mov.l	@r15+,r0
(2)  171/ 60002C8 : 002B                		rte
(2)  172/ 60002CA : 0009                		nop
(2)  173/ 60002CC :                     		
(2)  174/ 60002CC :                     ; ------------------------------------------------
(2)  175/ 60002CC :                     ; irq list
(2)  176/ 60002CC :                     ; ------------------------------------------------
(2)  177/ 60002CC :                     
(2)  178/ 60002CC :                     		align 4
(2)  179/ 60002CC :                     int_s_list:
(2)  180/ 60002CC : 0600 0542 0600 0542 		dc.l s_irq_bad,s_irq_bad
(2)  181/ 60002D4 : 0600 0542 0600 0542 		dc.l s_irq_bad,s_irq_bad
(2)  182/ 60002DC : 0600 0542 0600 15D0 		dc.l s_irq_bad,s_irq_custom
(2)  183/ 60002E4 : 0600 0548 0600 0548 		dc.l s_irq_pwm,s_irq_pwm
(2)  184/ 60002EC : 0600 0564 0600 0564 		dc.l s_irq_cmd,s_irq_cmd
(2)  185/ 60002F4 : 0600 05C0 0600 05C0 		dc.l s_irq_h,s_irq_h
(2)  186/ 60002FC : 0600 05DC 0600 05DC 		dc.l s_irq_v,s_irq_v
(2)  187/ 6000304 : 0600 05F0 0600 05F0 		dc.l s_irq_vres,s_irq_vres
(2)  188/ 600030C :                     
(1)   15/ 600030C :                     
(1)   16/ 600030C :                     ; ====================================================================
(1)   17/ 600030C :                     ; ----------------------------------------------------------------
(1)   18/ 600030C :                     ; MARS Global variables (for gbr)
(1)   19/ 600030C :                     ; 
(1)   20/ 600030C :                     ; Shared for both CPUs
(1)   21/ 600030C :                     ; ----------------------------------------------------------------
(1)   22/ 600030C :                     
(1)   23/ 600030C : (MACRO)             			struct 0
(1)   23/ 600030C : =$600030C           GLBL_LASTPC     set *
(1)   23/    4A84 :                                     dephase
(1)   23/    4A84 : =$4A84              GLBL_LASTORG    set *
(1)   23/       0 :                                     phase 0
(1)   24/       0 :                     marsGbl_PlyPzList_R	ds.l 1		; Current graphic piece to draw
(1)   25/       4 :                     marsGbl_PlyPzList_W	ds.l 1		; Current graphic piece to write
(1)   26/       8 :                     marsGbl_CurrZList	ds.l 1		; Current Zsort entry
(1)   27/       C :                     marsGbl_CurrFacePos	ds.l 1		; Current top face of the list while reading model data
(1)   28/      10 :                     marsGbl_MdTaskList_Sw	ds.w 1		; Requests from Genesis FIFO reading point
(1)   29/      12 :                     marsGbl_MdTaskList_Rq	ds.w 1		; and writing point
(1)   30/      14 :                     marsGbl_MdlFacesCntr	ds.w 1		; And the number of faces stored on that list
(1)   31/      16 :                     marsGbl_PolyBuffNum	ds.w 1		; PolygonBuffer switch: READ/WRITE or WRITE/READ
(1)   32/      18 :                     marsGbl_PzListCntr	ds.w 1		; Number of graphic pieces to draw
(1)   33/      1A :                     marsGbl_DrwTask		ds.w 1		; Current Drawing task for Watchdog
(1)   34/      1C :                     marsGbl_VIntFlag_M	ds.w 1		; Sets to 0 if VBlank finished on Master CPU
(1)   35/      1E :                     marsGbl_VIntFlag_S	ds.w 1		; Same thing but for the Slave CPU
(1)   36/      20 :                     marsGbl_DivReq_M	ds.w 1		; Flag to tell Watchdog we are in the middle of division
(1)   37/      22 :                     marsGbl_CurrFb		ds.w 1		; Current framebuffer number
(1)   38/      24 :                     marsGbl_PalDmaMidWr	ds.w 1		; Enable this flag if modifing RAM_Mars_Palette
(1)   39/      26 :                     marsGbl_ZSortReq	ds.w 1		; Flag to request Zsort in Slave's watchdogd
(1)   40/      28 :                     sizeof_MarsGbl		ds.l 0
(1)   41/      28 : (MACRO)             			finish
(1)   41/       0 :                                     !org GLBL_LASTORG
(1)   41/ 600030C :                                     phase GLBL_LASTPC
(1)   42/ 600030C :                     			
(1)   43/ 600030C :                     ; ====================================================================
(1)   44/ 600030C :                     ; ----------------------------------------------------------------
(1)   45/ 600030C :                     ; Error trap
(1)   46/ 600030C :                     ; ----------------------------------------------------------------
(1)   47/ 600030C :                     
(1)   48/ 600030C :                     SH2_Error:
(1)   49/ 600030C : 0009                		nop
(1)   50/ 600030E : AFFD                		bra	SH2_Error
(1)   51/ 6000310 : 0009                		nop
(1)   52/ 6000312 :                     		align 4
(1)   53/ 6000314 :                     
(1)   54/ 6000314 :                     ; ====================================================================		
(1)   55/ 6000314 :                     ; ----------------------------------------------------------------
(1)   56/ 6000314 :                     ; MARS Interrupts for both CPUs
(1)   57/ 6000314 :                     ; ----------------------------------------------------------------
(1)   58/ 6000314 :                     
(1)   59/ 6000314 :                     ; =================================================================
(1)   60/ 6000314 :                     ; ------------------------------------------------
(1)   61/ 6000314 :                     ; Master | Unused interrupt
(1)   62/ 6000314 :                     ; ------------------------------------------------
(1)   63/ 6000314 :                     
(1)   64/ 6000314 :                     m_irq_bad:
(1)   65/ 6000314 : 000B                		rts
(1)   66/ 6000316 : 0009                		nop
(1)   67/ 6000318 :                     		align 4
(1)   68/ 6000318 :                     
(1)   69/ 6000318 :                     ; =================================================================
(1)   70/ 6000318 :                     ; ------------------------------------------------
(1)   71/ 6000318 :                     ; Master | PWM Interrupt
(1)   72/ 6000318 :                     ; ------------------------------------------------
(1)   73/ 6000318 :                     
(1)   74/ 6000318 :                     m_irq_pwm:
(1)   75/ 6000318 : D12E                		mov	#_sysreg+monowidth,r1
(1)   76/ 600031A : 6010                		mov.b	@r1,r0
(1)   77/ 600031C : C880                 		tst	#$80,r0
(1)   78/ 600031E : 8B04                 		bf	.exit
(1)   79/ 6000320 : 4F22                		sts	pr,@-r15
(1)   80/ 6000322 : D02D                		mov	#MarsSound_ReadPwm,r0
(1)   81/ 6000324 : 400B                		jsr	@r0
(1)   82/ 6000326 : 0009                		nop
(1)   83/ 6000328 : 4F26                		lds	@r15+,pr
(1)   84/ 600032A : 9165                .exit:		mov	#_FRT,r1
(1)   85/ 600032C : 8417                		mov.b	@(7,r1),r0
(1)   86/ 600032E : CA02                		xor	#2,r0
(1)   87/ 6000330 : 8017                		mov.b	r0,@(7,r1)
(1)   88/ 6000332 : D12A                		mov	#_sysreg+pwmintclr,r1
(1)   89/ 6000334 : 2101                		mov.w	r0,@r1
(1)   90/ 6000336 : 000B                		rts
(1)   91/ 6000338 : 0009                		nop
(1)   92/ 600033A :                     		align 4
(1)   93/ 600033C :                     
(1)   94/ 600033C :                     ; =================================================================
(1)   95/ 600033C :                     ; ------------------------------------------------
(1)   96/ 600033C :                     ; Master | CMD Interrupt
(1)   97/ 600033C :                     ; 
(1)   98/ 600033C :                     ; Recieve task list from 68k
(1)   99/ 600033C :                     ; OR control the sound PWM with Z80
(1)  100/ 600033C :                     ; ------------------------------------------------
(1)  101/ 600033C :                     
(1)  102/ 600033C :                     m_irq_cmd:
(1)  103/ 600033C : 915C                		mov	#_FRT,r1
(1)  104/ 600033E : 8417                		mov.b	@(7,r1),r0
(1)  105/ 6000340 : CA02                		xor	#2,r0
(1)  106/ 6000342 : 8017                		mov.b	r0,@(7,r1)
(1)  107/ 6000344 : D126                		mov	#_sysreg+cmdintclr,r1
(1)  108/ 6000346 : 2101                		mov.w	r0,@r1
(1)  109/ 6000348 :                     		
(1)  110/ 6000348 : 2F26                		mov	r2,@-r15
(1)  111/ 600034A : 2F36                		mov	r3,@-r15
(1)  112/ 600034C : 4F03                		stc	sr,@-r15
(1)  113/ 600034E : 9054                		mov	#$F0,r0
(1)  114/ 6000350 : 400E                		ldc	r0,sr
(1)  115/ 6000352 : D124                		mov	#_sysreg+comm4,r1	; Check if Z80
(1)  116/ 6000354 : 8410                		mov.b	@(0,r1),r0		; called first
(1)  117/ 6000356 : 8800                		cmp/eq	#0,r0
(1)  118/ 6000358 : 8B20                		bf	.pwm_play
(1)  119/ 600035A :                     
(1)  120/ 600035A :                     ; ----------------------------------------
(1)  121/ 600035A :                     ; Transfer from 68K
(1)  122/ 600035A :                     ; ----------------------------------------
(1)  123/ 600035A :                     
(1)  124/ 600035A : D123                		mov	#_sysreg+comm8,r1
(1)  125/ 600035C : D223                		mov	#RAM_Mars_MdTasksFifo_M,r2
(1)  126/ 600035E : D324                		mov	#_sysreg+comm14,r3	; Also process tasks
(1)  127/ 6000360 : 6030                		mov.b	@r3,r0			; after this
(1)  128/ 6000362 : CB80                		or	#$80,r0
(1)  129/ 6000364 : 2300                		mov.b	r0,@r3
(1)  130/ 6000366 :                     .next_comm:
(1)  131/ 6000366 : E002                		mov	#2,r0		; SH is ready
(1)  132/ 6000368 : 8011                		mov.b	r0,@(1,r1)
(1)  133/ 600036A :                     .wait_md_b:
(1)  134/ 600036A : 8410                		mov.b	@(0,r1),r0	; get MD status
(1)  135/ 600036C : 8800                		cmp/eq	#0,r0
(1)  136/ 600036E : 8910                		bt	.finish
(1)  137/ 6000370 : C980                		and	#$80,r0
(1)  138/ 6000372 : 8800                		cmp/eq	#0,r0		; is MD busy?
(1)  139/ 6000374 : 89F9                		bt	.wait_md_b
(1)  140/ 6000376 : E001                		mov	#1,r0		; SH is busy
(1)  141/ 6000378 : 8011                		mov.b	r0,@(1,r1)
(1)  142/ 600037A :                     .wait_md_c:
(1)  143/ 600037A : 8410                		mov.b	@(0,r1),r0
(1)  144/ 600037C : 8800                		cmp/eq	#0,r0
(1)  145/ 600037E : 8908                		bt	.finish
(1)  146/ 6000380 : C940                		and	#$40,r0
(1)  147/ 6000382 : 8840                		cmp/eq	#$40,r0		; MD ready?
(1)  148/ 6000384 : 8BF9                		bf	.wait_md_c
(1)  149/ 6000386 : 8511                		mov.w	@(2,r1),r0	; comm10
(1)  150/ 6000388 : 2201                		mov.w	r0,@r2
(1)  151/ 600038A : 8512                		mov.w	@(4,r1),r0	; comm12
(1)  152/ 600038C : 8121                		mov.w	r0,@(2,r2)
(1)  153/ 600038E : AFEA                		bra	.next_comm
(1)  154/ 6000390 : 7204                		add	#4,r2
(1)  155/ 6000392 :                     .finish:
(1)  156/ 6000392 : 4F07                		ldc 	@r15+,sr
(1)  157/ 6000394 : 63F6                		mov 	@r15+,r3
(1)  158/ 6000396 : 62F6                		mov 	@r15+,r2
(1)  159/ 6000398 : 000B                		rts
(1)  160/ 600039A : 0009                		nop
(1)  161/ 600039C :                     		align 4
(1)  162/ 600039C :                     
(1)  163/ 600039C :                     ; ----------------------------------------
(1)  164/ 600039C :                     ; Transfer from Z80
(1)  165/ 600039C :                     ; ----------------------------------------
(1)  166/ 600039C :                     
(1)  167/ 600039C :                     .pwm_play:
(1)  168/ 600039C : D215                		mov	#MarsSnd_InstrList,r2
(1)  169/ 600039E :                     ; 		cmp/eq	#1,r0
(1)  170/ 600039E :                     ; 		bt	.pwm_instr
(1)  171/ 600039E :                     ; 		mov	#MarsSnd_InstrList,r2	
(1)  172/ 600039E :                     ; .pwm_instr:
(1)  173/ 600039E :                     .next_commz:
(1)  174/ 600039E : E002                		mov	#2,r0		; SH is ready
(1)  175/ 60003A0 : 8011                		mov.b	r0,@(1,r1)
(1)  176/ 60003A2 :                     .wait_z_b:
(1)  177/ 60003A2 : 8410                		mov.b	@(0,r1),r0	; get Z80 status
(1)  178/ 60003A4 : 8800                		cmp/eq	#0,r0
(1)  179/ 60003A6 : 890E                		bt	.finishz
(1)  180/ 60003A8 : C980                		and	#$80,r0
(1)  181/ 60003AA : 8800                		cmp/eq	#0,r0		; is Z80 busy?
(1)  182/ 60003AC : 89F9                		bt	.wait_z_b
(1)  183/ 60003AE : E001                		mov	#1,r0		; SH is busy
(1)  184/ 60003B0 : 8011                		mov.b	r0,@(1,r1)
(1)  185/ 60003B2 :                     .wait_z_c:
(1)  186/ 60003B2 : 8410                		mov.b	@(0,r1),r0
(1)  187/ 60003B4 : 8800                		cmp/eq	#0,r0
(1)  188/ 60003B6 : 8906                		bt	.finishz
(1)  189/ 60003B8 : C940                		and	#$40,r0
(1)  190/ 60003BA : 8840                		cmp/eq	#$40,r0		; Z80 ready?
(1)  191/ 60003BC : 8BF9                		bf	.wait_z_c
(1)  192/ 60003BE : 8511                		mov.w	@(2,r1),r0	; word write.
(1)  193/ 60003C0 : 2201                		mov.w	r0,@r2
(1)  194/ 60003C2 : AFEC                		bra	.next_commz
(1)  195/ 60003C4 : 7202                		add	#2,r2
(1)  196/ 60003C6 :                     .finishz:
(1)  197/ 60003C6 :                     
(1)  198/ 60003C6 : 4F07                		ldc 	@r15+,sr
(1)  199/ 60003C8 : 63F6                		mov 	@r15+,r3
(1)  200/ 60003CA : 62F6                		mov 	@r15+,r2
(1)  201/ 60003CC : 000B                		rts
(1)  202/ 60003CE : 0009                		nop
(1)  203/ 60003D0 :                     		align 4
(1)  204/ 60003D0 : 0600 02CC 2000 4038 		ltorg
                    0600 0ECC 2000 401C 
                    2000 401A 2000 4024 
                    2000 4028 0601 61C0 
                    2000 402E 0601 68C0 
                    FE10 00F0           
(1)  205/ 60003FC :                     
(1)  206/ 60003FC :                     ; =================================================================
(1)  207/ 60003FC :                     ; ------------------------------------------------
(1)  208/ 60003FC :                     ; Master | HBlank
(1)  209/ 60003FC :                     ; ------------------------------------------------
(1)  210/ 60003FC :                     
(1)  211/ 60003FC :                     m_irq_h:
(1)  212/ 60003FC : 919E                		mov	#_FRT,r1
(1)  213/ 60003FE : 8417                		mov.b	@(7,r1),r0
(1)  214/ 6000400 : CA02                		xor	#2,r0
(1)  215/ 6000402 : 8017                		mov.b	r0,@(7,r1)
(1)  216/ 6000404 : D142                		mov	#_sysreg+hintclr,r1
(1)  217/ 6000406 : 2101                		mov.w	r0,@r1
(1)  218/ 6000408 : 0009                		nop
(1)  219/ 600040A : 0009                		nop
(1)  220/ 600040C : 0009                		nop
(1)  221/ 600040E : 0009                		nop
(1)  222/ 6000410 : 0009                		nop
(1)  223/ 6000412 : 000B                		rts
(1)  224/ 6000414 : 0009                		nop
(1)  225/ 6000416 :                     		align 4
(1)  226/ 6000418 :                     		
(1)  227/ 6000418 :                     ; =================================================================
(1)  228/ 6000418 :                     ; ------------------------------------------------
(1)  229/ 6000418 :                     ; Master | VBlank
(1)  230/ 6000418 :                     ; ------------------------------------------------
(1)  231/ 6000418 :                     
(1)  232/ 6000418 :                     m_irq_v:
(1)  233/ 6000418 : 9190                		mov	#_FRT,r1
(1)  234/ 600041A : 8417                		mov.b	@(7,r1),r0
(1)  235/ 600041C : CA02                		xor	#2,r0
(1)  236/ 600041E : 8017                		mov.b	r0,@(7,r1)
(1)  237/ 6000420 : D13C                		mov	#_sysreg+vintclr,r1
(1)  238/ 6000422 : 2101                		mov.w	r0,@r1
(1)  239/ 6000424 :                     
(1)  240/ 6000424 :                     	; TODO: DMA works but after the first
(1)  241/ 6000424 :                     	; pass it locks both SOURCE and DESTINATION
(1)  242/ 6000424 :                     	; data sections
(1)  243/ 6000424 : D13C                		mov	#_vdpreg,r1			; Wait for palette access ok
(1)  244/ 6000426 : 841A                .wait		mov.b	@(vdpsts,r1),r0
(1)  245/ 6000428 : C820                		tst	#$20,r0
(1)  246/ 600042A : 89FC                		bt	.wait
(1)  247/ 600042C : 4F03                		stc	sr,@-r15
(1)  248/ 600042E : 2F26                		mov	r2,@-r15
(1)  249/ 6000430 : 2F36                		mov	r3,@-r15
(1)  250/ 6000432 :                     ; 		mov	r4,@-r15
(1)  251/ 6000432 :                     ; 		mov	r5,@-r15
(1)  252/ 6000432 :                     ; 		mov	r6,@-r15
(1)  253/ 6000432 : 9084                		mov	#$F0,r0
(1)  254/ 6000434 : 400E                		ldc	r0,sr
(1)  255/ 6000436 : E001                		mov	#1,r0
(1)  256/ 6000438 : C112                		mov.w	r0,@(marsGbl_PalDmaMidWr,gbr)
(1)  257/ 600043A : D138                		mov	#RAM_Mars_Palette,r1		; Send palette stored on RAM		
(1)  258/ 600043C : D238                		mov	#_palette,r2
(1)  259/ 600043E : E310                 		mov	#256/16,r3		
(1)  260/ 6000440 :                     .copy_pal:
(1)  261/ 6000440 :                     	rept 16
(1)  262/ 6000440 :                     		mov.w	@r1+,r0
(1)  263/ 6000440 :                     		mov.w	r0,@r2
(1)  264/ 6000440 :                     		add	#2,r2
(1)  265/ 6000440 :                     	endm
(1)  262/ 6000440 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000442 : 2201                		mov.w	r0,@r2
(1)  264/ 6000444 : 7202                		add	#2,r2
(1)  262/ 6000446 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000448 : 2201                		mov.w	r0,@r2
(1)  264/ 600044A : 7202                		add	#2,r2
(1)  262/ 600044C : 6015                		mov.w	@r1+,r0
(1)  263/ 600044E : 2201                		mov.w	r0,@r2
(1)  264/ 6000450 : 7202                		add	#2,r2
(1)  262/ 6000452 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000454 : 2201                		mov.w	r0,@r2
(1)  264/ 6000456 : 7202                		add	#2,r2
(1)  262/ 6000458 : 6015                		mov.w	@r1+,r0
(1)  263/ 600045A : 2201                		mov.w	r0,@r2
(1)  264/ 600045C : 7202                		add	#2,r2
(1)  262/ 600045E : 6015                		mov.w	@r1+,r0
(1)  263/ 6000460 : 2201                		mov.w	r0,@r2
(1)  264/ 6000462 : 7202                		add	#2,r2
(1)  262/ 6000464 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000466 : 2201                		mov.w	r0,@r2
(1)  264/ 6000468 : 7202                		add	#2,r2
(1)  262/ 600046A : 6015                		mov.w	@r1+,r0
(1)  263/ 600046C : 2201                		mov.w	r0,@r2
(1)  264/ 600046E : 7202                		add	#2,r2
(1)  262/ 6000470 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000472 : 2201                		mov.w	r0,@r2
(1)  264/ 6000474 : 7202                		add	#2,r2
(1)  262/ 6000476 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000478 : 2201                		mov.w	r0,@r2
(1)  264/ 600047A : 7202                		add	#2,r2
(1)  262/ 600047C : 6015                		mov.w	@r1+,r0
(1)  263/ 600047E : 2201                		mov.w	r0,@r2
(1)  264/ 6000480 : 7202                		add	#2,r2
(1)  262/ 6000482 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000484 : 2201                		mov.w	r0,@r2
(1)  264/ 6000486 : 7202                		add	#2,r2
(1)  262/ 6000488 : 6015                		mov.w	@r1+,r0
(1)  263/ 600048A : 2201                		mov.w	r0,@r2
(1)  264/ 600048C : 7202                		add	#2,r2
(1)  262/ 600048E : 6015                		mov.w	@r1+,r0
(1)  263/ 6000490 : 2201                		mov.w	r0,@r2
(1)  264/ 6000492 : 7202                		add	#2,r2
(1)  262/ 6000494 : 6015                		mov.w	@r1+,r0
(1)  263/ 6000496 : 2201                		mov.w	r0,@r2
(1)  264/ 6000498 : 7202                		add	#2,r2
(1)  262/ 600049A : 6015                		mov.w	@r1+,r0
(1)  263/ 600049C : 2201                		mov.w	r0,@r2
(1)  264/ 600049E : 7202                		add	#2,r2
(1)  266/ 60004A0 : 4310                		dt	r3
(1)  267/ 60004A2 : 8BCD                		bf	.copy_pal
(1)  268/ 60004A4 : E000                		mov	#0,r0
(1)  269/ 60004A6 : C112                		mov.w	r0,@(marsGbl_PalDmaMidWr,gbr)
(1)  270/ 60004A8 :                     		
(1)  271/ 60004A8 :                     ; 		mov	#RAM_Mars_Palette,r1		; Send palette stored on RAM
(1)  272/ 60004A8 :                     ; 		mov	#_palette,r2
(1)  273/ 60004A8 :                     ;  		mov	#256,r3
(1)  274/ 60004A8 :                     ; 		mov	#%0101011011110001,r4		; transfer size 2 / burst
(1)  275/ 60004A8 :                     ; 		mov	#_DMASOURCE0,r5 		; _DMASOURCE = $ffffff80
(1)  276/ 60004A8 :                     ; 		mov	#_DMAOPERATION,r6 		; _DMAOPERATION = $ffffffb0
(1)  277/ 60004A8 :                     ; 		mov	r1,@r5				; set source address
(1)  278/ 60004A8 :                     ; 		mov	r2,@(4,r5)			; set destination address
(1)  279/ 60004A8 :                     ; 		mov	r3,@(8,r5)			; set length
(1)  280/ 60004A8 :                     ; 		xor	r0,r0
(1)  281/ 60004A8 :                     ; 		mov	r0,@r6				; Stop OPERATION
(1)  282/ 60004A8 :                     ; 		xor	r0,r0
(1)  283/ 60004A8 :                     ; 		mov	r0,@($C,r5)			; clear TE bit
(1)  284/ 60004A8 :                     ; 		mov	r4,@($C,r5)			; load mode
(1)  285/ 60004A8 :                     ; 		add	#1,r0
(1)  286/ 60004A8 :                     ; 		mov	r0,@r6				; Start OPERATION
(1)  287/ 60004A8 :                     ; 		mov	@r15+,r6
(1)  288/ 60004A8 :                     ; 		mov	@r15+,r5
(1)  289/ 60004A8 :                     ; 		mov	@r15+,r4
(1)  290/ 60004A8 : 63F6                		mov	@r15+,r3
(1)  291/ 60004AA : 62F6                		mov	@r15+,r2
(1)  292/ 60004AC : 4F07                		ldc	@r15+,sr
(1)  293/ 60004AE :                     		
(1)  294/ 60004AE :                     .mid_pwrite:
(1)  295/ 60004AE : E000                		mov 	#0,r0				; Clear VintFlag for Master
(1)  296/ 60004B0 : C10E                		mov.w	r0,@(marsGbl_VIntFlag_M,gbr)
(1)  297/ 60004B2 : 000B                		rts
(1)  298/ 60004B4 : 0009                		nop
(1)  299/ 60004B6 :                     		align 4
(1)  300/ 60004B8 :                     		
(1)  301/ 60004B8 :                     ; =================================================================
(1)  302/ 60004B8 :                     ; ------------------------------------------------
(1)  303/ 60004B8 :                     ; Master | VRES Interrupt (Pressed RESET on Genesis)
(1)  304/ 60004B8 :                     ; ------------------------------------------------
(1)  305/ 60004B8 :                     
(1)  306/ 60004B8 :                     m_irq_vres:
(1)  307/ 60004B8 : D01A                		mov.l	#_sysreg,r0
(1)  308/ 60004BA : 401E                		ldc	r0,gbr
(1)  309/ 60004BC : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  310/ 60004BE : 0009                		nop
(1)  311/ 60004C0 : 0009                		nop
(1)  312/ 60004C2 : 0009                		nop
(1)  313/ 60004C4 : 0009                		nop
(1)  314/ 60004C6 : 903A                		mov	#$F0,r0
(1)  315/ 60004C8 : 400E                		ldc	r0,sr
(1)  316/ 60004CA : C406                		mov.b	@(dreqctl,gbr),r0
(1)  317/ 60004CC : C801                		tst	#1,r0
(1)  318/ 60004CE : 8B18                		bf	.mars_reset
(1)  319/ 60004D0 :                     .md_reset:
(1)  320/ 60004D0 : D115                		mov.l	#"68UP",r1		; wait for the 68K to show up
(1)  321/ 60004D2 : C60B                		mov.l	@(comm12,gbr),r0
(1)  322/ 60004D4 : 3100                		cmp/eq	r0,r1
(1)  323/ 60004D6 : 8BFB                		bf	.md_reset
(1)  324/ 60004D8 :                     .sh_wait:
(1)  325/ 60004D8 : D114                		mov.l	#"S_OK",r1		; wait for the Slave CPU to show up
(1)  326/ 60004DA : C609                		mov.l	@(comm4,gbr),r0
(1)  327/ 60004DC : 3100                		cmp/eq	r0,r1
(1)  328/ 60004DE : 8BFB                		bf	.sh_wait
(1)  329/ 60004E0 : D013                		mov.l	#"M_OK",r0		; let the others know master ready
(1)  330/ 60004E2 : C208                		mov.l	r0,@(comm0,gbr)
(1)  331/ 60004E4 : DF13                		mov.l	#CS3|$40000-8,r15	; Set reset values
(1)  332/ 60004E6 : D014                		mov.l	#SH2_M_HotStart,r0
(1)  333/ 60004E8 : 2F02                		mov.l	r0,@r15
(1)  334/ 60004EA : 9028                		mov.w	#$F0,r0
(1)  335/ 60004EC : 1F01                		mov.l	r0,@(4,r15)
(1)  336/ 60004EE : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  337/ 60004F0 : E000                		mov.l	#0,r0
(1)  338/ 60004F2 : 2102                		mov.l	r0,@r1			; Turn any DMA tasks OFF
(1)  339/ 60004F4 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  340/ 60004F6 : E000                		mov.l	#0,r0
(1)  341/ 60004F8 : 2102                		mov.l	r0,@r1
(1)  342/ 60004FA : 9121                		mov.l	#%0100010011100000,r1
(1)  343/ 60004FC : 2102                		mov.l	r0,@r1			; Channel control
(1)  344/ 60004FE : 002B                		rte
(1)  345/ 6000500 : 0009                		nop
(1)  346/ 6000502 :                     .mars_reset:
(1)  347/ 6000502 : 911B                		mov	#_FRT,r1
(1)  348/ 6000504 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  349/ 6000506 : CB01                		or	#$01,r0
(1)  350/ 6000508 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  351/ 600050A :                     .vresloop:
(1)  352/ 600050A : AFFE                		bra	.vresloop
(1)  353/ 600050C : 0009                		nop
(1)  354/ 600050E :                     		align 4
(1)  355/ 6000510 : 2000 4018 2000 4016 		ltorg				; Save MASTER IRQ literals here
                    2000 4100 0601 65C0 
                    2000 4200 2000 4000 
                    3638 5550 535F 4F4B 
                    4D5F 4F4B 0603 FFF8 
                    0600 10EA FE10 00F0 
                    44E0                
(1)  356/ 6000542 :                     
(1)  357/ 6000542 :                     ; =================================================================
(1)  358/ 6000542 :                     ; ------------------------------------------------
(1)  359/ 6000542 :                     ; Master | Watchdog interrupt
(1)  360/ 6000542 :                     ; ------------------------------------------------
(1)  361/ 6000542 :                     
(1)  362/ 6000542 :                     ; m_irq_custom:
(1)  363/ 6000542 :                     ; see video.asm
(1)  364/ 6000542 :                     
(1)  365/ 6000542 :                     ; =================================================================
(1)  366/ 6000542 :                     ; ------------------------------------------------
(1)  367/ 6000542 :                     ; Unused
(1)  368/ 6000542 :                     ; ------------------------------------------------
(1)  369/ 6000542 :                     
(1)  370/ 6000542 :                     s_irq_bad:
(1)  371/ 6000542 : 000B                		rts
(1)  372/ 6000544 : 0009                		nop
(1)  373/ 6000546 :                     		align 4
(1)  374/ 6000548 :                     
(1)  375/ 6000548 :                     ; =================================================================
(1)  376/ 6000548 :                     ; ------------------------------------------------
(1)  377/ 6000548 :                     ; Slave | PWM Interrupt
(1)  378/ 6000548 :                     ; ------------------------------------------------
(1)  379/ 6000548 :                     
(1)  380/ 6000548 :                     s_irq_pwm:
(1)  381/ 6000548 : 9198                		mov	#_FRT,r1
(1)  382/ 600054A : 8417                		mov.b	@(7,r1),r0
(1)  383/ 600054C : CA02                		xor	#2,r0
(1)  384/ 600054E : 8017                		mov.b	r0,@(7,r1)
(1)  385/ 6000550 : D13D                		mov	#_sysreg+pwmintclr,r1
(1)  386/ 6000552 : 2101                		mov.w	r0,@r1
(1)  387/ 6000554 : 0009                		nop
(1)  388/ 6000556 : 0009                		nop
(1)  389/ 6000558 : 0009                		nop
(1)  390/ 600055A : 0009                		nop
(1)  391/ 600055C : 0009                		nop
(1)  392/ 600055E : 000B                		rts
(1)  393/ 6000560 : 0009                		nop
(1)  394/ 6000562 :                     		align 4
(1)  395/ 6000564 :                     
(1)  396/ 6000564 :                     ; =================================================================
(1)  397/ 6000564 :                     ; ------------------------------------------------
(1)  398/ 6000564 :                     ; Slave | CMD Interrupt
(1)  399/ 6000564 :                     ; 
(1)  400/ 6000564 :                     ; Process request from MD
(1)  401/ 6000564 :                     ; ------------------------------------------------
(1)  402/ 6000564 :                     
(1)  403/ 6000564 :                     s_irq_cmd:
(1)  404/ 6000564 : 918A                		mov	#_FRT,r1
(1)  405/ 6000566 : 8417                		mov.b	@(7,r1),r0
(1)  406/ 6000568 : CA02                		xor	#2,r0
(1)  407/ 600056A : 8017                		mov.b	r0,@(7,r1)
(1)  408/ 600056C : D137                		mov	#_sysreg+cmdintclr,r1
(1)  409/ 600056E : 2101                		mov.w	r0,@r1
(1)  410/ 6000570 :                     
(1)  411/ 6000570 : 2F26                		mov	r2,@-r15
(1)  412/ 6000572 : 2F36                		mov	r3,@-r15
(1)  413/ 6000574 : D236                		mov	#RAM_Mars_MdTasksFifo_S,r2
(1)  414/ 6000576 : D137                		mov	#_sysreg+comm8,r1
(1)  415/ 6000578 :                     .next_comm:
(1)  416/ 6000578 : E002                		mov	#2,r0		; SH is ready
(1)  417/ 600057A : 8011                		mov.b	r0,@(1,r1)
(1)  418/ 600057C :                     .wait_md_b:
(1)  419/ 600057C : 8410                		mov.b	@(0,r1),r0	; get MD status
(1)  420/ 600057E : 8800                		cmp/eq	#0,r0
(1)  421/ 6000580 : 8910                		bt	.finish
(1)  422/ 6000582 : C980                		and	#$80,r0
(1)  423/ 6000584 : 8800                		cmp/eq	#0,r0		; is MD busy?
(1)  424/ 6000586 : 89F9                		bt	.wait_md_b
(1)  425/ 6000588 : E001                		mov	#1,r0		; SH is busy
(1)  426/ 600058A : 8011                		mov.b	r0,@(1,r1)
(1)  427/ 600058C :                     .wait_md_c:
(1)  428/ 600058C : 8410                		mov.b	@(0,r1),r0
(1)  429/ 600058E : 8800                		cmp/eq	#0,r0
(1)  430/ 6000590 : 8908                		bt	.finish
(1)  431/ 6000592 : C940                		and	#$40,r0
(1)  432/ 6000594 : 8840                		cmp/eq	#$40,r0		; MD ready?
(1)  433/ 6000596 : 8BF9                		bf	.wait_md_c
(1)  434/ 6000598 : 8511                		mov.w	@(2,r1),r0	; comm10
(1)  435/ 600059A : 2201                		mov.w	r0,@r2
(1)  436/ 600059C : 8512                		mov.w	@(4,r1),r0	; comm12
(1)  437/ 600059E : 8121                		mov.w	r0,@(2,r2)
(1)  438/ 60005A0 : AFEA                		bra	.next_comm
(1)  439/ 60005A2 : 7204                		add	#4,r2
(1)  440/ 60005A4 :                     .finish:
(1)  441/ 60005A4 : E000                		mov	#0,r0		; SH is done
(1)  442/ 60005A6 : 8011                		mov.b	r0,@(1,r1)
(1)  443/ 60005A8 :                     
(1)  444/ 60005A8 : D12B                		mov	#_sysreg+comm15,r1	; Start tasks on Slave
(1)  445/ 60005AA : 6010                		mov.b	@r1,r0
(1)  446/ 60005AC : CB80                		or	#$80,r0
(1)  447/ 60005AE : 2100                		mov.b	r0,@r1		
(1)  448/ 60005B0 : 63F6                		mov 	@r15+,r3
(1)  449/ 60005B2 : 62F6                		mov 	@r15+,r2
(1)  450/ 60005B4 : 0009                		nop
(1)  451/ 60005B6 : 0009                		nop
(1)  452/ 60005B8 : 0009                		nop
(1)  453/ 60005BA : 000B                		rts
(1)  454/ 60005BC : 0009                		nop
(1)  455/ 60005BE :                     		align 4
(1)  456/ 60005C0 :                     		
(1)  457/ 60005C0 :                     ; =================================================================
(1)  458/ 60005C0 :                     ; ------------------------------------------------
(1)  459/ 60005C0 :                     ; Slave | HBlank
(1)  460/ 60005C0 :                     ; ------------------------------------------------
(1)  461/ 60005C0 :                     
(1)  462/ 60005C0 :                     s_irq_h:
(1)  463/ 60005C0 : 915C                		mov	#_FRT,r1
(1)  464/ 60005C2 : 8417                		mov.b	@(7,r1),r0
(1)  465/ 60005C4 : CA02                		xor	#2,r0
(1)  466/ 60005C6 : 8017                		mov.b	r0,@(7,r1)
(1)  467/ 60005C8 : D124                		mov	#_sysreg+hintclr,r1
(1)  468/ 60005CA : 2101                		mov.w	r0,@r1
(1)  469/ 60005CC : 0009                		nop
(1)  470/ 60005CE : 0009                		nop
(1)  471/ 60005D0 : 0009                		nop
(1)  472/ 60005D2 : 0009                		nop
(1)  473/ 60005D4 : 0009                		nop
(1)  474/ 60005D6 : 000B                		rts
(1)  475/ 60005D8 : 0009                		nop
(1)  476/ 60005DA :                     		align 4
(1)  477/ 60005DC :                     
(1)  478/ 60005DC :                     ; =================================================================
(1)  479/ 60005DC :                     ; ------------------------------------------------
(1)  480/ 60005DC :                     ; Slave | VBlank
(1)  481/ 60005DC :                     ; ------------------------------------------------
(1)  482/ 60005DC :                     
(1)  483/ 60005DC :                     s_irq_v:
(1)  484/ 60005DC : E000                		mov 	#0,r0				; Clear VintFlag for Slave
(1)  485/ 60005DE : C10F                		mov.w	r0,@(marsGbl_VIntFlag_S,gbr)
(1)  486/ 60005E0 : 914C                		mov	#_FRT,r1
(1)  487/ 60005E2 : 8417                		mov.b	@(7,r1),r0
(1)  488/ 60005E4 : CA02                		xor	#2,r0
(1)  489/ 60005E6 : 8017                		mov.b	r0,@(7,r1)
(1)  490/ 60005E8 : D11D                		mov	#_sysreg+vintclr,r1
(1)  491/ 60005EA : 000B                		rts
(1)  492/ 60005EC : 2101                		mov.w	r0,@r1
(1)  493/ 60005EE :                     		align 4
(1)  494/ 60005F0 :                     
(1)  495/ 60005F0 :                     ; =================================================================
(1)  496/ 60005F0 :                     ; ------------------------------------------------
(1)  497/ 60005F0 :                     ; Slave | VRES Interrupt (Pressed RESET on Genesis)
(1)  498/ 60005F0 :                     ; ------------------------------------------------
(1)  499/ 60005F0 :                     
(1)  500/ 60005F0 :                     s_irq_vres:
(1)  501/ 60005F0 : D01C                		mov.l	#_sysreg,r0
(1)  502/ 60005F2 : 401E                		ldc	r0,gbr
(1)  503/ 60005F4 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  504/ 60005F6 : 0009                		nop
(1)  505/ 60005F8 : 0009                		nop
(1)  506/ 60005FA : 0009                		nop
(1)  507/ 60005FC : 0009                		nop
(1)  508/ 60005FE : 903E                		mov	#$F0,r0
(1)  509/ 6000600 : 400E                		ldc	r0,sr
(1)  510/ 6000602 : C406                		mov.b	@(dreqctl,gbr),r0
(1)  511/ 6000604 : C801                		tst	#1,r0
(1)  512/ 6000606 : 8B18                		bf	.mars_reset
(1)  513/ 6000608 :                     .md_reset:
(1)  514/ 6000608 : D117                		mov.l	#"68UP",r1		; wait for the 68k to show up
(1)  515/ 600060A : C60B                		mov.l	@(comm12,gbr),r0
(1)  516/ 600060C : 3100                		cmp/eq	r0,r1
(1)  517/ 600060E : 8BFB                		bf	.md_reset
(1)  518/ 6000610 : D016                		mov.l	#"S_OK",r0		; tell the others slave is ready
(1)  519/ 6000612 : C209                		mov.l	r0,@(comm4,gbr)
(1)  520/ 6000614 :                     .sh_wait:
(1)  521/ 6000614 : D116                		mov.l	#"M_OK",r1		; wait for the slave to show up
(1)  522/ 6000616 : C608                		mov.l	@(comm0,gbr),r0
(1)  523/ 6000618 : 3100                		cmp/eq	r0,r1
(1)  524/ 600061A : 8BFB                		bf	.sh_wait
(1)  525/ 600061C : DF15                		mov.l	#CS3|$3F000-8,r15
(1)  526/ 600061E : D016                		mov.l	#SH2_S_HotStart,r0
(1)  527/ 6000620 : 2F02                		mov.l	r0,@r15
(1)  528/ 6000622 : 902C                		mov.w	#$F0,r0
(1)  529/ 6000624 : 1F01                		mov.l	r0,@(4,r15)
(1)  530/ 6000626 : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  531/ 6000628 : E000                		mov.l	#0,r0
(1)  532/ 600062A : 2102                		mov.l	r0,@r1			; DMA off
(1)  533/ 600062C : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  534/ 600062E : E000                		mov.l	#0,r0
(1)  535/ 6000630 : 2102                		mov.l	r0,@r1
(1)  536/ 6000632 : 9125                		mov.l	#%0100010011100000,r1
(1)  537/ 6000634 : 2102                		mov.l	r0,@r1			; Channel control
(1)  538/ 6000636 : 002B                		rte
(1)  539/ 6000638 : 0009                		nop
(1)  540/ 600063A :                     .mars_reset:
(1)  541/ 600063A : 911F                		mov	#_FRT,r1
(1)  542/ 600063C : 8417                		mov.b	@(_TOCR,r1),r0
(1)  543/ 600063E : CB01                		or	#$01,r0
(1)  544/ 6000640 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  545/ 6000642 :                     .vresloop:
(1)  546/ 6000642 : AFFE                		bra	.vresloop
(1)  547/ 6000644 : 0009                		nop
(1)  548/ 6000646 :                     		align 4
(1)  549/ 6000648 : 2000 401C 2000 401A 		ltorg			; Save Slave IRQ literals
                    0601 63C0 2000 4028 
                    2000 402F 2000 4018 
                    2000 4016 2000 4000 
                    3638 5550 535F 4F4B 
                    4D5F 4F4B 0603 EFF8 
                    0600 12A4 FE10 00F0 
                    44E0                
(1)  550/ 6000682 :                     
(1)  551/ 6000682 :                     ; ====================================================================
(1)  552/ 6000682 :                     ; ----------------------------------------------------------------
(1)  553/ 6000682 :                     ; MARS System features
(1)  554/ 6000682 :                     ; ----------------------------------------------------------------
(1)  555/ 6000682 :                     
(1)  556/ 6000682 :                     		include "system/mars/video.asm"
(2)    1/ 6000682 :                     ; ====================================================================
(2)    2/ 6000682 :                     ; ----------------------------------------------------------------
(2)    3/ 6000682 :                     ; MARS Video
(2)    4/ 6000682 :                     ; ----------------------------------------------------------------
(2)    5/ 6000682 :                     
(2)    6/ 6000682 :                     ; MARS Polygons
(2)    7/ 6000682 :                     ; 
(2)    8/ 6000682 :                     ; type format:
(2)    9/ 6000682 :                     ;   0 - end-of-list
(2)   10/ 6000682 :                     ;  -1 - skip polygon (already drawn)
(2)   11/ 6000682 :                     ; $03 - triangle
(2)   12/ 6000682 :                     ; $04 - quad
(2)   13/ 6000682 :                     
(2)   14/ 6000682 :                     ; ----------------------------------------
(2)   15/ 6000682 :                     ; Settings
(2)   16/ 6000682 :                     ; ----------------------------------------
(2)   17/ 6000682 :                     
(2)   18/ 6000682 : =$100               MAX_FACES	equ	256		; Maximum polygon faces (models,sprites) to store on buffer
(2)   19/ 6000682 : =$180               MAX_SVDP_PZ	equ	384		; This list is for both read and write, increase the value if needed
(2)   20/ 6000682 : =$40                MAX_MODELS	equ	64		; Note: First 9 models are reserved for layout map
(2)   21/ 6000682 : =$FFFFFFFFFF..      MAX_ZDIST	equ	-$2000		; Max drawing distance (-Z max)
(2)   22/ 6000682 : =$40                LAY_WIDTH	equ	$20*2		; Layout data width * 2
(2)   23/ 6000682 :                     
(2)   24/ 6000682 :                     ; ----------------------------------------
(2)   25/ 6000682 :                     ; Variables
(2)   26/ 6000682 :                     ; ----------------------------------------
(2)   27/ 6000682 :                     
(2)   28/ 6000682 : =$140               SCREEN_WIDTH	equ	320
(2)   29/ 6000682 : =$E0                SCREEN_HEIGHT	equ	224
(2)   30/ 6000682 :                     
(2)   31/ 6000682 :                     ; MSB
(2)   32/ 6000682 : =$80                PLGN_TEXURE	equ	%10000000
(2)   33/ 6000682 : =$40                PLGN_TRI	equ	%01000000
(2)   34/ 6000682 : =$20                PLGN_SPRITE	equ	%00100000
(2)   35/ 6000682 :                     
(2)   36/ 6000682 :                     ; ----------------------------------------
(2)   37/ 6000682 :                     ; Structs
(2)   38/ 6000682 :                     ; ----------------------------------------
(2)   39/ 6000682 :                     
(2)   40/ 6000682 :                     ; model objects
(2)   41/ 6000682 : (MACRO)             		struct 0
(2)   41/ 6000682 : =$6000682           GLBL_LASTPC     set *
(2)   41/    4DFA :                                     dephase
(2)   41/    4DFA : =$4DFA              GLBL_LASTORG    set *
(2)   41/       0 :                                     phase 0
(2)   42/       0 :                     mdl_data	ds.l 1			; Model data pointer, if zero: no model
(2)   43/       4 :                     mdl_option	ds.l 1			; Model options: pixelvalue add
(2)   44/       8 :                     mdl_x_pos	ds.l 1			; X position $000000.00
(2)   45/       C :                     mdl_y_pos	ds.l 1			; Y position $000000.00
(2)   46/      10 :                     mdl_z_pos	ds.l 1			; Z position $000000.00
(2)   47/      14 :                     mdl_x_rot	ds.l 1			; X rotation $000000.00
(2)   48/      18 :                     mdl_y_rot	ds.l 1			; Y rotation $000000.00
(2)   49/      1C :                     mdl_z_rot	ds.l 1			; Z rotation $000000.00
(2)   50/      20 :                     mdl_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   51/      24 :                     mdl_animframe	ds.l 1			; Current frame in animation
(2)   52/      28 :                     mdl_animtimer	ds.l 1			; Animation timer
(2)   53/      2C :                     mdl_animspd	ds.l 1			; Animation speed
(2)   54/      30 :                     sizeof_mdlobj	ds.l 0
(2)   55/      32 : (MACRO)             		finish
(2)   55/       0 :                                     !org GLBL_LASTORG
(2)   55/ 6000682 :                                     phase GLBL_LASTPC
(2)   56/ 6000682 :                     		
(2)   57/ 6000682 :                     ; field view camera
(2)   58/ 6000682 : (MACRO)             		struct 0
(2)   58/ 6000682 : =$6000682           GLBL_LASTPC     set *
(2)   58/    4DFA :                                     dephase
(2)   58/    4DFA : =$4DFA              GLBL_LASTORG    set *
(2)   58/       0 :                                     phase 0
(2)   59/       0 :                     cam_x_pos	ds.l 1			; X position $000000.00
(2)   60/       4 :                     cam_y_pos	ds.l 1			; Y position $000000.00
(2)   61/       8 :                     cam_z_pos	ds.l 1			; Z position $000000.00
(2)   62/       C :                     cam_x_rot	ds.l 1			; X rotation $000000.00
(2)   63/      10 :                     cam_y_rot	ds.l 1			; Y rotation $000000.00
(2)   64/      14 :                     cam_z_rot	ds.l 1			; Z rotation $000000.00
(2)   65/      18 :                     cam_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   66/      1C :                     cam_animframe	ds.l 1			; Current frame in animation
(2)   67/      20 :                     cam_animtimer	ds.l 1			; Animation timer
(2)   68/      24 :                     cam_animspd	ds.l 1			; Animation speed
(2)   69/      28 :                     sizeof_camera	ds.l 0
(2)   70/      2A : (MACRO)             		finish
(2)   70/       0 :                                     !org GLBL_LASTORG
(2)   70/ 6000682 :                                     phase GLBL_LASTPC
(2)   71/ 6000682 :                     		
(2)   72/ 6000682 : (MACRO)             		struct 0
(2)   72/ 6000682 : =$6000682           GLBL_LASTPC     set *
(2)   72/    4DFA :                                     dephase
(2)   72/    4DFA : =$4DFA              GLBL_LASTORG    set *
(2)   72/       0 :                                     phase 0
(2)   73/       0 :                     mdllay_data	ds.l 1			; Model layout data, zero: Don't use layout
(2)   74/       4 :                     mdllay_x	ds.l 1			; X position
(2)   75/       8 :                     mdllay_y	ds.l 1			; Y position
(2)   76/       C :                     mdllay_z	ds.l 1			; Z position
(2)   77/      10 :                     mdllay_x_last	ds.l 1			; LAST saved X position
(2)   78/      14 :                     mdllay_y_last	ds.l 1			; LAST saved Y position
(2)   79/      18 :                     mdllay_z_last	ds.l 1			; LAST saved Z position
(2)   80/      1C :                     mdllay_xr_last	ds.l 1			; LAST saved X rotation
(2)   81/      20 :                     sizeof_layout	ds.l 0
(2)   82/      22 : (MACRO)             		finish
(2)   82/       0 :                                     !org GLBL_LASTORG
(2)   82/ 6000682 :                                     phase GLBL_LASTPC
(2)   83/ 6000682 :                     
(2)   84/ 6000682 : (MACRO)             		struct 0
(2)   84/ 6000682 : =$6000682           GLBL_LASTPC     set *
(2)   84/    4DFA :                                     dephase
(2)   84/    4DFA : =$4DFA              GLBL_LASTORG    set *
(2)   84/       0 :                                     phase 0
(2)   85/       0 :                     plypz_ypos	ds.l 1			; Ytop | Ybottom
(2)   86/       4 :                     plypz_xl	ds.l 1
(2)   87/       8 :                     plypz_xl_dx	ds.l 1
(2)   88/       C :                     plypz_xr	ds.l 1
(2)   89/      10 :                     plypz_xr_dx	ds.l 1
(2)   90/      14 :                     plypz_src_xl	ds.l 1
(2)   91/      18 :                     plypz_src_xl_dx	ds.l 1
(2)   92/      1C :                     plypz_src_yl	ds.l 1
(2)   93/      20 :                     plypz_src_yl_dx	ds.l 1
(2)   94/      24 :                     plypz_src_xr	ds.l 1
(2)   95/      28 :                     plypz_src_xr_dx	ds.l 1
(2)   96/      2C :                     plypz_src_yr	ds.l 1
(2)   97/      30 :                     plypz_src_yr_dx	ds.l 1
(2)   98/      34 :                     plypz_mtrl	ds.l 1
(2)   99/      38 :                     plypz_type	ds.l 1			; Type | Option
(2)  100/      3C :                     sizeof_plypz	ds.l 0
(2)  101/      3E : (MACRO)             		finish
(2)  101/       0 :                                     !org GLBL_LASTORG
(2)  101/ 6000682 :                                     phase GLBL_LASTPC
(2)  102/ 6000682 :                     
(2)  103/ 6000682 : (MACRO)             		struct 0
(2)  103/ 6000682 : =$6000682           GLBL_LASTPC     set *
(2)  103/    4DFA :                                     dephase
(2)  103/    4DFA : =$4DFA              GLBL_LASTORG    set *
(2)  103/       0 :                                     phase 0
(2)  104/       0 :                     polygn_type	ds.l 1		; %MSTw wwww xxxx aaaa | Type bits and Material option (Width or PalIncr)
(2)  105/       4 :                     polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)  106/       8 :                     polygn_points	ds.l 4*2	; X/Y positions
(2)  107/      28 :                     polygn_srcpnts	ds.w 4*2	; X/Y texture points (16-bit), ignored on solidcolor
(2)  108/      38 :                     sizeof_polygn	ds.l 0
(2)  109/      3A : (MACRO)             		finish
(2)  109/       0 :                                     !org GLBL_LASTORG
(2)  109/ 6000682 :                                     phase GLBL_LASTPC
(2)  110/ 6000682 :                     
(2)  111/ 6000682 :                     ; ====================================================================
(2)  112/ 6000682 :                     ; ----------------------------------------------------------------
(2)  113/ 6000682 :                     ; Init MARS Video
(2)  114/ 6000682 :                     ; ----------------------------------------------------------------
(2)  115/ 6000682 :                     
(2)  116/ 6000682 :                     MarsVideo_Init:
(2)  117/ 6000682 : 4F22                		sts	pr,@-r15
(2)  118/ 6000684 : D432                		mov	#_sysreg,r4
(2)  119/ 6000686 : 906B                		mov 	#FM,r0			; Set SVDP permission to SH2
(2)  120/ 6000688 : 8040                  		mov.b	r0,@(adapter,r4)
(2)  121/ 600068A : D432                		mov 	#_vdpreg,r4
(2)  122/ 600068C : B008                		bsr	.this_fb		; Init line tables for both framebuffers
(2)  123/ 600068E : 0009                		nop
(2)  124/ 6000690 : B006                		bsr	.this_fb
(2)  125/ 6000692 : 0009                		nop
(2)  126/ 6000694 : E000                		mov	#0,r0			; Start at blank
(2)  127/ 6000696 : 8041                		mov.b	r0,@(bitmapmd,r4)
(2)  128/ 6000698 : 4F26                		lds	@r15+,pr
(2)  129/ 600069A : 000B                		rts
(2)  130/ 600069C : 0009                		nop
(2)  131/ 600069E :                     		align 4
(2)  132/ 60006A0 :                     
(2)  133/ 60006A0 :                     ; ------------------------------------------------
(2)  134/ 60006A0 :                     ; Init current framebuffer
(2)  135/ 60006A0 :                     ; ------------------------------------------------
(2)  136/ 60006A0 :                     
(2)  137/ 60006A0 :                     .this_fb:
(2)  138/ 60006A0 : D12D                 		mov	#_framebuffer,r1
(2)  139/ 60006A2 : 905E                		mov	#$200/2,r0	; START line data
(2)  140/ 60006A4 : 925E                		mov	#240,r2		; Vertical lines to set
(2)  141/ 60006A6 : 6303                		mov	r0,r3		; Increment by (copy from r0)
(2)  142/ 60006A8 : 2101                .loop:		mov.w	r0,@r1
(2)  143/ 60006AA : 7102                		add	#2,r1
(2)  144/ 60006AC : 303C                		add	r3,r0
(2)  145/ 60006AE : 4210                		dt	r2
(2)  146/ 60006B0 : 8BFA                		bf	.loop
(2)  147/ 60006B2 : 8545                .fb_wait1:	mov.w   @($A,r4),r0	; Swap for next table
(2)  148/ 60006B4 : C802                		tst     #2,r0
(2)  149/ 60006B6 : 8BFC                		bf      .fb_wait1
(2)  150/ 60006B8 : 8545                		mov.w   @($A,r4), r0
(2)  151/ 60006BA : CA01                		xor     #1,r0
(2)  152/ 60006BC : 8145                		mov.w   r0,@($A,r4)
(2)  153/ 60006BE : C901                		and     #1,r0
(2)  154/ 60006C0 : 6103                		mov     r0,r1
(2)  155/ 60006C2 :                     .wait_result:
(2)  156/ 60006C2 : 8545                		mov.w   @($A,r4),r0
(2)  157/ 60006C4 : C901                		and     #1,r0
(2)  158/ 60006C6 : 3100                		cmp/eq  r0,r1
(2)  159/ 60006C8 : 8BFB                		bf      .wait_result
(2)  160/ 60006CA : 000B                		rts
(2)  161/ 60006CC : 0009                		nop
(2)  162/ 60006CE :                     		align 4
(2)  163/ 60006D0 :                     		
(2)  164/ 60006D0 :                     ; ------------------------------------
(2)  165/ 60006D0 :                     ; MarsVideo_ClearFrame
(2)  166/ 60006D0 :                     ; 
(2)  167/ 60006D0 :                     ; Clear the current framebuffer
(2)  168/ 60006D0 :                     ; ------------------------------------
(2)  169/ 60006D0 :                     
(2)  170/ 60006D0 :                     MarsVideo_ClearFrame:
(2)  171/ 60006D0 : D120                		mov	#_vdpreg,r1
(2)  172/ 60006D2 : 8515                .wait2		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  173/ 60006D4 : C902                		and	#%10,r0
(2)  174/ 60006D6 : 8802                		cmp/eq	#2,r0
(2)  175/ 60006D8 : 89FB                		bt	.wait2
(2)  176/ 60006DA :                     
(2)  177/ 60006DA : 9244                		mov	#255,r2			; 256 words per pass
(2)  178/ 60006DC : 9341                		mov	#$100,r3		; Starting address
(2)  179/ 60006DE : E400                		mov	#0,r4			; Clear to zero
(2)  180/ 60006E0 : 953F                		mov	#256,r5			; Increment address by 256
(2)  181/ 60006E2 : 963F                		mov	#((512*240)/256)/2,r6	; 140 passes
(2)  182/ 60006E4 :                     .loop
(2)  183/ 60006E4 : 6023                		mov	r2,r0
(2)  184/ 60006E6 : 8112                		mov.w	r0,@(4,r1)		; Set length
(2)  185/ 60006E8 : 6033                		mov	r3,r0
(2)  186/ 60006EA : 8113                		mov.w	r0,@(6,r1)		; Set address
(2)  187/ 60006EC : 6043                		mov	r4,r0
(2)  188/ 60006EE : 8114                		mov.w	r0,@(8,r1)		; Set data
(2)  189/ 60006F0 : 335C                		add	r5,r3
(2)  190/ 60006F2 :                     		
(2)  191/ 60006F2 : 8515                .wait		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  192/ 60006F4 : C902                		and	#%10,r0
(2)  193/ 60006F6 : 8802                		cmp/eq	#2,r0
(2)  194/ 60006F8 : 89FB                		bt	.wait
(2)  195/ 60006FA : 4610                		dt	r6
(2)  196/ 60006FC : 8BF2                		bf	.loop
(2)  197/ 60006FE : 000B                		rts
(2)  198/ 6000700 : 0009                		nop
(2)  199/ 6000702 :                     		align 4
(2)  200/ 6000704 :                     
(2)  201/ 6000704 :                     ; ------------------------------------
(2)  202/ 6000704 :                     ; MarsVideo_FrameSwap
(2)  203/ 6000704 :                     ; ------------------------------------
(2)  204/ 6000704 :                     
(2)  205/ 6000704 :                     MarsVideo_FrameSwap:
(2)  206/ 6000704 : D213                		mov.l	#_vdpreg,r2
(2)  207/ 6000706 :                     .wait_fb:
(2)  208/ 6000706 : 8525                		mov.w	@($A,r2),r0
(2)  209/ 6000708 : C802                		tst	#2,r0
(2)  210/ 600070A : 8BFC                		bf	.wait_fb
(2)  211/ 600070C : 8525                		mov.w	@($A,r2),r0
(2)  212/ 600070E : CA01                		xor	#1,r0
(2)  213/ 6000710 : 8125                		mov.w	r0,@($A,r2)
(2)  214/ 6000712 : C901                		and	#1,r0
(2)  215/ 6000714 : 6103                		mov	r0,r1
(2)  216/ 6000716 :                     .wait_result:
(2)  217/ 6000716 : 8525                		mov.w	@($A,r2),r0
(2)  218/ 6000718 : C901                		and	#1,r0
(2)  219/ 600071A : 3100                		cmp/eq	r0,r1
(2)  220/ 600071C : 8BFB                		bf	.wait_result
(2)  221/ 600071E : 000B                		rts
(2)  222/ 6000720 : 0009                		nop
(2)  223/ 6000722 :                     		align 4
(2)  224/ 6000724 :                     
(2)  225/ 6000724 :                     ; ------------------------------------
(2)  226/ 6000724 :                     ; MarsVdp_LoadPal
(2)  227/ 6000724 :                     ; 
(2)  228/ 6000724 :                     ; Load palette to RAM
(2)  229/ 6000724 :                     ; then the Palette will be transfered
(2)  230/ 6000724 :                     ; on VBlank
(2)  231/ 6000724 :                     ; 
(2)  232/ 6000724 :                     ; Input:
(2)  233/ 6000724 :                     ; r1 - Palette data
(2)  234/ 6000724 :                     ; r2 - Start index
(2)  235/ 6000724 :                     ; r3 - Number of colors
(2)  236/ 6000724 :                     ; r4 - OR value ($0000 or $8000)
(2)  237/ 6000724 :                     ;
(2)  238/ 6000724 :                     ; Uses:
(2)  239/ 6000724 :                     ; r0,r4-r6
(2)  240/ 6000724 :                     ; ------------------------------------
(2)  241/ 6000724 :                     
(2)  242/ 6000724 :                     MarsVideo_LoadPal:
(2)  243/ 6000724 : C512                		mov.w	@(marsGbl_PalDmaMidWr,gbr),r0
(2)  244/ 6000726 : 8801                		cmp/eq	#1,r0
(2)  245/ 6000728 : 89FC                		bt	MarsVideo_LoadPal
(2)  246/ 600072A : 6513                		mov 	r1,r5
(2)  247/ 600072C : D60B                		mov 	#RAM_Mars_Palette,r6
(2)  248/ 600072E : 6023                		mov 	r2,r0
(2)  249/ 6000730 : 4000                		shll	r0
(2)  250/ 6000732 : 360C                		add 	r0,r6
(2)  251/ 6000734 : 6033                		mov 	r3,r0
(2)  252/ 6000736 :                     ; 		and	#$FF,r0
(2)  253/ 6000736 :                     ; 		cmp/pl	r0
(2)  254/ 6000736 :                     ; 		bf	.badlen
(2)  255/ 6000736 : 9714                		mov	#256,r7
(2)  256/ 6000738 : 3077                		cmp/gt	r7,r0
(2)  257/ 600073A : 8900                		bt	.loop
(2)  258/ 600073C : 6703                		mov	r0,r7
(2)  259/ 600073E :                     .loop:
(2)  260/ 600073E : 6055                		mov.w	@r5+,r0
(2)  261/ 6000740 : 204B                		or	r4,r0
(2)  262/ 6000742 : 2601                		mov.w	r0,@r6
(2)  263/ 6000744 : 4710                		dt	r7
(2)  264/ 6000746 : 8FFA                		bf/s	.loop
(2)  265/ 6000748 : 7602                		add 	#2,r6
(2)  266/ 600074A :                     .badlen:
(2)  267/ 600074A : 000B                		rts
(2)  268/ 600074C : 0009                		nop
(2)  269/ 600074E :                     		align 4
(2)  270/ 6000750 : 2000 4000 2000 4100 		ltorg
                    2400 0000 0601 65C0 
                    0080 0100 00F0 00FF 
(2)  271/ 6000768 :                     
(2)  272/ 6000768 :                     ; ====================================================================
(2)  273/ 6000768 :                     ; ----------------------------------------------------------------
(2)  274/ 6000768 :                     ; 3D MODEL RENDERER
(2)  275/ 6000768 :                     ; ----------------------------------------------------------------
(2)  276/ 6000768 :                     
(2)  277/ 6000768 :                     ; ------------------------------------------------
(2)  278/ 6000768 :                     ; Object layout routines
(2)  279/ 6000768 :                     ; ------------------------------------------------
(2)  280/ 6000768 :                     
(2)  281/ 6000768 :                     ; ----------------------------------------
(2)  282/ 6000768 :                     ; Read layout
(2)  283/ 6000768 :                     ; ----------------------------------------
(2)  284/ 6000768 :                     
(2)  285/ 6000768 :                     MarsLay_Read:
(2)  286/ 6000768 : 4F22                		sts	pr,@-r15
(2)  287/ 600076A : DE1B                		mov	#RAM_Mars_ObjLayout,r14
(2)  288/ 600076C : DD1B                		mov	#RAM_Mars_ObjCamera,r13
(2)  289/ 600076E : DC1C                		mov	#RAM_Mars_Objects,r12
(2)  290/ 6000770 : 50E0                		mov	@(mdllay_data,r14),r0
(2)  291/ 6000772 : 4015                		cmp/pl	r0
(2)  292/ 6000774 : 8B2D                		bf	.no_lay
(2)  293/ 6000776 : 6B03                		mov	r0,r11
(2)  294/ 6000778 :                     
(2)  295/ 6000778 : EA00                		mov	#0,r10				; r10 - Update counter
(2)  296/ 600077A : D91A                		mov	#-$100000,r9			;  r9 - MAX Z block size
(2)  297/ 600077C : D819                		mov	#-$100000,r8			;  r8 - MAX Y block size	
(2)  298/ 600077E : D719                		mov	#-$100000,r7			;  r7 - MAX X block size
(2)  299/ 6000780 : 9632                		mov	#-$8000,r6			;  r6 - X Rotation update point
(2)  300/ 6000782 :                     
(2)  301/ 6000782 : 55E6                		mov	@(mdllay_z_last,r14),r5
(2)  302/ 6000784 : 50D2                		mov	@(cam_z_pos,r13),r0
(2)  303/ 6000786 : 2099                		and	r9,r0
(2)  304/ 6000788 : 2599                		and	r9,r5
(2)  305/ 600078A : 3500                		cmp/eq	r0,r5
(2)  306/ 600078C : 8902                		bt	.no_z_upd
(2)  307/ 600078E :                     ; 		add	r9,r5
(2)  308/ 600078E :                     ; 		neg	r5,r4
(2)  309/ 600078E :                     ; 		cmp/gt	r5,r0
(2)  310/ 600078E :                     ; 		bf	.set_z_upd
(2)  311/ 600078E :                     ; 		cmp/ge	r4,r0
(2)  312/ 600078E :                     ; 		bf	.no_z_upd
(2)  313/ 600078E :                     ; .set_z_upd:
(2)  314/ 600078E : 2099                		and	r9,r0
(2)  315/ 6000790 : 1E06                		mov	r0,@(mdllay_z_last,r14)
(2)  316/ 6000792 : 7A01                		add	#1,r10
(2)  317/ 6000794 :                     .no_z_upd:
(2)  318/ 6000794 :                     
(2)  319/ 6000794 : 55E5                		mov	@(mdllay_y_last,r14),r5
(2)  320/ 6000796 : 50D1                		mov	@(cam_y_pos,r13),r0
(2)  321/ 6000798 : 2089                		and	r8,r0
(2)  322/ 600079A : 2589                		and	r8,r5
(2)  323/ 600079C : 3500                		cmp/eq	r0,r5
(2)  324/ 600079E : 8902                		bt	.no_y_upd
(2)  325/ 60007A0 :                     ; 		add	r8,r5
(2)  326/ 60007A0 :                     ; 		neg	r5,r4
(2)  327/ 60007A0 :                     ; 		cmp/gt	r5,r0
(2)  328/ 60007A0 :                     ; 		bf	.set_y_upd
(2)  329/ 60007A0 :                     ; 		cmp/ge	r4,r0
(2)  330/ 60007A0 :                     ; 		bf	.no_y_upd
(2)  331/ 60007A0 :                     ; .set_y_upd:
(2)  332/ 60007A0 : 2089                		and	r8,r0
(2)  333/ 60007A2 : 1E05                		mov	r0,@(mdllay_y_last,r14)
(2)  334/ 60007A4 : 7A01                		add	#1,r10
(2)  335/ 60007A6 :                     .no_y_upd:
(2)  336/ 60007A6 :                     
(2)  337/ 60007A6 : 55E4                		mov	@(mdllay_x_last,r14),r5
(2)  338/ 60007A8 : 50D0                		mov	@(cam_x_pos,r13),r0
(2)  339/ 60007AA : 2079                		and	r7,r0
(2)  340/ 60007AC : 2579                		and	r7,r5
(2)  341/ 60007AE : 3500                		cmp/eq	r0,r5
(2)  342/ 60007B0 : 8902                		bt	.no_x_upd
(2)  343/ 60007B2 :                     ; 		add	r7,r5
(2)  344/ 60007B2 :                     ; 		neg	r5,r4
(2)  345/ 60007B2 :                     ; 		cmp/gt	r5,r0
(2)  346/ 60007B2 :                     ; 		bf	.set_x_upd
(2)  347/ 60007B2 :                     ; 		cmp/ge	r4,r0
(2)  348/ 60007B2 :                     ; 		bf	.no_x_upd
(2)  349/ 60007B2 :                     ; .set_x_upd:
(2)  350/ 60007B2 : 2079                		and	r7,r0
(2)  351/ 60007B4 : 1E04                		mov	r0,@(mdllay_x_last,r14)
(2)  352/ 60007B6 : 7A01                		add	#1,r10
(2)  353/ 60007B8 :                     .no_x_upd:
(2)  354/ 60007B8 :                     
(2)  355/ 60007B8 : 55E7                		mov	@(mdllay_xr_last,r14),r5
(2)  356/ 60007BA : 50D3                		mov	@(cam_x_rot,r13),r0
(2)  357/ 60007BC : 2069                		and	r6,r0
(2)  358/ 60007BE : 2569                		and	r6,r5
(2)  359/ 60007C0 : 3500                		cmp/eq	r0,r5
(2)  360/ 60007C2 : 8902                		bt	.no_xr_upd
(2)  361/ 60007C4 :                     ; 		add	r6,r5
(2)  362/ 60007C4 :                     ; 		neg	r5,r4
(2)  363/ 60007C4 :                     ; 		cmp/gt	r5,r0
(2)  364/ 60007C4 :                     ; 		bf	.set_xr_upd
(2)  365/ 60007C4 :                     ; 		cmp/ge	r4,r0
(2)  366/ 60007C4 :                     ; 		bf	.no_xr_upd
(2)  367/ 60007C4 :                     ; .set_xr_upd:
(2)  368/ 60007C4 : 2069                		and	r6,r0
(2)  369/ 60007C6 : 1E07                		mov	r0,@(mdllay_xr_last,r14)
(2)  370/ 60007C8 : 7A01                		add	#1,r10
(2)  371/ 60007CA :                     .no_xr_upd:
(2)  372/ 60007CA :                     
(2)  373/ 60007CA : 4A15                		cmp/pl	r10
(2)  374/ 60007CC : 8B01                		bf	.no_lay
(2)  375/ 60007CE : B016                		bsr	MarsLay_Draw
(2)  376/ 60007D0 : 0009                		nop
(2)  377/ 60007D2 :                     .no_lay:
(2)  378/ 60007D2 : 4F26                		lds	@r15+,pr
(2)  379/ 60007D4 : 000B                		rts
(2)  380/ 60007D6 : 0009                		nop
(2)  381/ 60007D8 :                     		align 4
(2)  382/ 60007D8 : 0600 58A0 0600 5878 		ltorg
                    0600 58C0 FFF0 0000 
                    8000                
(2)  383/ 60007EA :                     
(2)  384/ 60007EA :                     ; r1 - layout data pointer
(2)  385/ 60007EA :                     MarsLay_Make:
(2)  386/ 60007EA : DEAF                		mov	#RAM_Mars_ObjLayout,r14
(2)  387/ 60007EC : DDAF                		mov	#RAM_Mars_ObjCamera,r13
(2)  388/ 60007EE : 200A                		xor	r0,r0
(2)  389/ 60007F0 : 1E10                		mov	r1,@(mdllay_data,r14)
(2)  390/ 60007F2 : 1E04                		mov	r0,@(mdllay_x_last,r14)
(2)  391/ 60007F4 : 1E05                		mov	r0,@(mdllay_y_last,r14)
(2)  392/ 60007F6 : 1E06                		mov	r0,@(mdllay_z_last,r14)
(2)  393/ 60007F8 : 1E01                		mov	r0,@(mdllay_x,r14)
(2)  394/ 60007FA : 1E02                		mov	r0,@(mdllay_y,r14)
(2)  395/ 60007FC : 1E03                		mov	r0,@(mdllay_z,r14)
(2)  396/ 60007FE :                     MarsLay_Draw:
(2)  397/ 60007FE : DAAC                		mov	#RAM_Mars_Objects,r10
(2)  398/ 6000800 : 62A3                		mov	r10,r2
(2)  399/ 6000802 : E330                		mov	#sizeof_mdlobj,r3
(2)  400/ 6000804 : E000                		mov	#0,r0
(2)  401/ 6000806 : E409                		mov	#9,r4
(2)  402/ 6000808 :                     .clrold:
(2)  403/ 6000808 : 1200                		mov	r0,@(mdl_data,r2)
(2)  404/ 600080A : 1202                		mov	r0,@(mdl_x_pos,r2)
(2)  405/ 600080C : 1203                		mov	r0,@(mdl_y_pos,r2)
(2)  406/ 600080E : 1204                		mov	r0,@(mdl_z_pos,r2)
(2)  407/ 6000810 : 1205                		mov	r0,@(mdl_x_rot,r2)
(2)  408/ 6000812 : 1206                		mov	r0,@(mdl_y_rot,r2)
(2)  409/ 6000814 : 1207                		mov	r0,@(mdl_z_rot,r2)
(2)  410/ 6000816 : 4410                		dt	r4
(2)  411/ 6000818 : 8FF6                		bf/s	.clrold
(2)  412/ 600081A : 323C                		add	r3,r2
(2)  413/ 600081C :                     
(2)  414/ 600081C :                     	; r13 - Layout Ids
(2)  415/ 600081C :                     	; r12 - Layout model list
(2)  416/ 600081C : E400                		mov	#0,r4
(2)  417/ 600081E : 5DE0                		mov	@(mdllay_data,r14),r13
(2)  418/ 6000820 : 6CD6                		mov	@r13+,r12
(2)  419/ 6000822 : D00E                		mov	.center_val,r0			; list center point
(2)  420/ 6000824 : 3D0C                		add	r0,r13
(2)  421/ 6000826 : 51E4                		mov	@(mdllay_x_last,r14),r1
(2)  422/ 6000828 : 52E6                		mov	@(mdllay_z_last,r14),r2
(2)  423/ 600082A : E040                		mov	#LAY_WIDTH,r0
(2)  424/ 600082C : 4129                		shlr16	r1
(2)  425/ 600082E : 4229                		shlr16	r2
(2)  426/ 6000830 : 611F                		exts	r1,r1
(2)  427/ 6000832 : 622F                		exts	r2,r2
(2)  428/ 6000834 :                     	rept 3
(2)  429/ 6000834 :                     		shar	r1
(2)  430/ 6000834 :                     		shar	r2
(2)  431/ 6000834 :                     	endm
(2)  429/ 6000834 : 4121                		shar	r1
(2)  430/ 6000836 : 4221                		shar	r2
(2)  429/ 6000838 : 4121                		shar	r1
(2)  430/ 600083A : 4221                		shar	r2
(2)  429/ 600083C : 4121                		shar	r1
(2)  430/ 600083E : 4221                		shar	r2
(2)  432/ 6000840 : 4221                		shar	r2			; extra shift
(2)  433/ 6000842 : 220F                		muls	r0,r2
(2)  434/ 6000844 : 001A                		sts	macl,r0
(2)  435/ 6000846 : 3D1C                		add	r1,r13
(2)  436/ 6000848 : 3D08                		sub	r0,r13
(2)  437/ 600084A : 50E7                		mov	@(mdllay_xr_last,r14),r0
(2)  438/ 600084C : 4029                		shlr16	r0
(2)  439/ 600084E : C93F                		and	#$3F,r0
(2)  440/ 6000850 : 4008                		shll2	r0
(2)  441/ 6000852 : D198                		mov	#.list,r1
(2)  442/ 6000854 : 001E                		mov	@(r0,r1),r0
(2)  443/ 6000856 : 402B                		jmp	@r0
(2)  444/ 6000858 : 0009                		nop
(2)  445/ 600085A :                     		align 4
(2)  446/ 600085C : 0000 0398           .center_val:	dc.l (LAY_WIDTH*$E)+(2*$C)
(2)  447/ 6000860 :                     
(2)  448/ 6000860 :                     .list:
(2)  449/ 6000860 : 0600 09B8           		dc.l .front
(2)  450/ 6000864 : 0600 09E0           		dc.l .front_fr
(2)  451/ 6000868 : 0600 09E0           		dc.l .front_fr
(2)  452/ 600086C : 0600 09E0           		dc.l .front_fr
(2)  453/ 6000870 : 0600 09E0           		dc.l .front_fr
(2)  454/ 6000874 : 0600 09E0           		dc.l .front_fr
(2)  455/ 6000878 : 0600 09E0           		dc.l .front_fr
(2)  456/ 600087C : 0600 09E0           		dc.l .front_fr
(2)  457/ 6000880 : 0600 09E0           		dc.l .front_fr
(2)  458/ 6000884 : 0600 09E0           		dc.l .front_fr
(2)  459/ 6000888 : 0600 09E0           		dc.l .front_fr
(2)  460/ 600088C : 0600 09E0           		dc.l .front_fr
(2)  461/ 6000890 : 0600 09E0           		dc.l .front_fr
(2)  462/ 6000894 : 0600 09E0           		dc.l .front_fr
(2)  463/ 6000898 : 0600 09E0           		dc.l .front_fr
(2)  464/ 600089C : 0600 09E0           		dc.l .front_fr
(2)  465/ 60008A0 :                     		
(2)  466/ 60008A0 : 0600 0A08           		dc.l .right_dw
(2)  467/ 60008A4 : 0600 0A08           		dc.l .right_dw
(2)  468/ 60008A8 : 0600 0A08           		dc.l .right_dw
(2)  469/ 60008AC : 0600 0A08           		dc.l .right_dw
(2)  470/ 60008B0 : 0600 0A08           		dc.l .right_dw
(2)  471/ 60008B4 : 0600 0A08           		dc.l .right_dw
(2)  472/ 60008B8 : 0600 0A08           		dc.l .right_dw
(2)  473/ 60008BC : 0600 0A08           		dc.l .right_dw
(2)  474/ 60008C0 : 0600 0A08           		dc.l .right_dw
(2)  475/ 60008C4 : 0600 0A08           		dc.l .right_dw
(2)  476/ 60008C8 : 0600 0A08           		dc.l .right_dw
(2)  477/ 60008CC : 0600 0A08           		dc.l .right_dw
(2)  478/ 60008D0 : 0600 0A08           		dc.l .right_dw
(2)  479/ 60008D4 : 0600 0A08           		dc.l .right_dw
(2)  480/ 60008D8 : 0600 0A08           		dc.l .right_dw
(2)  481/ 60008DC : 0600 0A08           		dc.l .right_dw
(2)  482/ 60008E0 :                     		
(2)  483/ 60008E0 : 0600 0A30           		dc.l .down
(2)  484/ 60008E4 : 0600 0A58           		dc.l .down_left
(2)  485/ 60008E8 : 0600 0A58           		dc.l .down_left
(2)  486/ 60008EC : 0600 0A58           		dc.l .down_left
(2)  487/ 60008F0 : 0600 0A58           		dc.l .down_left
(2)  488/ 60008F4 : 0600 0A58           		dc.l .down_left
(2)  489/ 60008F8 : 0600 0A58           		dc.l .down_left
(2)  490/ 60008FC : 0600 0A58           		dc.l .down_left
(2)  491/ 6000900 : 0600 0A58           		dc.l .down_left
(2)  492/ 6000904 : 0600 0A58           		dc.l .down_left
(2)  493/ 6000908 : 0600 0A58           		dc.l .down_left
(2)  494/ 600090C : 0600 0A58           		dc.l .down_left
(2)  495/ 6000910 : 0600 0A58           		dc.l .down_left
(2)  496/ 6000914 : 0600 0A58           		dc.l .down_left
(2)  497/ 6000918 : 0600 0A58           		dc.l .down_left
(2)  498/ 600091C : 0600 0A58           		dc.l .down_left
(2)  499/ 6000920 :                     
(2)  500/ 6000920 : 0600 0A80           		dc.l .front_lf
(2)  501/ 6000924 : 0600 0A80           		dc.l .front_lf
(2)  502/ 6000928 : 0600 0A80           		dc.l .front_lf
(2)  503/ 600092C : 0600 0A80           		dc.l .front_lf
(2)  504/ 6000930 : 0600 0A80           		dc.l .front_lf
(2)  505/ 6000934 : 0600 0A80           		dc.l .front_lf
(2)  506/ 6000938 : 0600 0A80           		dc.l .front_lf
(2)  507/ 600093C : 0600 0A80           		dc.l .front_lf
(2)  508/ 6000940 : 0600 0A80           		dc.l .front_lf
(2)  509/ 6000944 : 0600 0A80           		dc.l .front_lf
(2)  510/ 6000948 : 0600 0A80           		dc.l .front_lf
(2)  511/ 600094C : 0600 0A80           		dc.l .front_lf
(2)  512/ 6000950 : 0600 0A80           		dc.l .front_lf
(2)  513/ 6000954 : 0600 0A80           		dc.l .front_lf
(2)  514/ 6000958 : 0600 0A80           		dc.l .front_lf
(2)  515/ 600095C : 0600 09B8           		dc.l .front
(2)  516/ 6000960 :                     
(2)  517/ 6000960 :                     ; r5 - numof pieces
(2)  518/ 6000960 :                     ; uses: r6,r7
(2)  519/ 6000960 :                     .do_piece:
(2)  520/ 6000960 : 2F16                		mov	r1,@-r15
(2)  521/ 6000962 : 2FD6                		mov	r13,@-r15
(2)  522/ 6000964 : D654                		mov	#$100000,r6
(2)  523/ 6000966 :                     .nxt_one:
(2)  524/ 6000966 : 244A                		xor	r4,r4
(2)  525/ 6000968 : 60D5                		mov.w	@r13+,r0
(2)  526/ 600096A : 4015                		cmp/pl 	r0
(2)  527/ 600096C : 8B0F                		bf	.blank_mdl
(2)  528/ 600096E : 6703                		mov	r0,r7
(2)  529/ 6000970 : 4019                		shlr8	r0
(2)  530/ 6000972 : 4009                		shlr2	r0
(2)  531/ 6000974 : 4001                		shlr	r0
(2)  532/ 6000976 : C91C                		and	#%11100,r0
(2)  533/ 6000978 : D850                		mov	#.xrotlist,r8
(2)  534/ 600097A : 088E                		mov	@(r8,r0),r8
(2)  535/ 600097C : 6073                		mov	r7,r0
(2)  536/ 600097E : 70FF                		add	#-1,r0
(2)  537/ 6000980 : 4008                		shll2	r0
(2)  538/ 6000982 : 4000                		shll	r0
(2)  539/ 6000984 : 97A2                		mov	#$1FFF,r7
(2)  540/ 6000986 : 2079                		and	r7,r0
(2)  541/ 6000988 : 04CE                		mov	@(r12,r0),r4
(2)  542/ 600098A : D04D                		mov	#$40000000,r0
(2)  543/ 600098C : 240B                		or	r0,r4
(2)  544/ 600098E :                     .blank_mdl:
(2)  545/ 600098E : 1A12                		mov	r1,@(mdl_x_pos,r10)
(2)  546/ 6000990 : 1A23                		mov	r2,@(mdl_y_pos,r10)
(2)  547/ 6000992 : 1A34                		mov	r3,@(mdl_z_pos,r10)
(2)  548/ 6000994 : 1A85                		mov	r8,@(mdl_x_rot,r10)	
(2)  549/ 6000996 : 1A40                		mov	r4,@(mdl_data,r10)
(2)  550/ 6000998 : 7A30                		add	#sizeof_mdlobj,r10
(2)  551/ 600099A : 4510                		dt	r5
(2)  552/ 600099C : 8FE3                		bf/s	.nxt_one
(2)  553/ 600099E : 316C                		add	r6,r1
(2)  554/ 60009A0 : 6DF6                		mov	@r15+,r13
(2)  555/ 60009A2 : 61F6                		mov	@r15+,r1
(2)  556/ 60009A4 : 000B                		rts
(2)  557/ 60009A6 : 0009                		nop
(2)  558/ 60009A8 :                     		align 4
(2)  559/ 60009A8 : 0000 0000           .xrotlist:	dc.l 0
(2)  560/ 60009AC : 0010 0000           		dc.l $100000
(2)  561/ 60009B0 : 0020 0000           		dc.l $200000
(2)  562/ 60009B4 : 0030 0000           		dc.l $300000
(2)  563/ 60009B8 :                     
(2)  564/ 60009B8 :                     ; o X X X o
(2)  565/ 60009B8 :                     ; o X X X o
(2)  566/ 60009B8 :                     ; o X C X o
(2)  567/ 60009B8 :                     ; o - - - o
(2)  568/ 60009B8 :                     ; o o o o o
(2)  569/ 60009B8 :                     .front:
(2)  570/ 60009B8 : D142                		mov	#-$100000,r1
(2)  571/ 60009BA : E200                		mov	#0,r2
(2)  572/ 60009BC : D342                		mov	#-$200000,r3
(2)  573/ 60009BE : 7D02                		add	#(1*2),r13
(2)  574/ 60009C0 : DB3D                		mov	#$100000,r11
(2)  575/ 60009C2 :                     
(2)  576/ 60009C2 : 4F22                		sts	pr,@-r15
(2)  577/ 60009C4 : BFCC                		bsr	.do_piece
(2)  578/ 60009C6 : E503                		mov	#3,r5
(2)  579/ 60009C8 : 7D40                		add	#LAY_WIDTH,r13
(2)  580/ 60009CA : 33BC                		add	r11,r3
(2)  581/ 60009CC : BFC8                		bsr	.do_piece
(2)  582/ 60009CE : E503                		mov	#3,r5
(2)  583/ 60009D0 : 7D40                		add	#LAY_WIDTH,r13
(2)  584/ 60009D2 : 33BC                		add	r11,r3
(2)  585/ 60009D4 : BFC4                		bsr	.do_piece
(2)  586/ 60009D6 : E503                		mov	#3,r5
(2)  587/ 60009D8 : 4F26                		lds	@r15+,pr
(2)  588/ 60009DA : 000B                		rts
(2)  589/ 60009DC : 0009                		nop
(2)  590/ 60009DE :                     		align 4
(2)  591/ 60009E0 :                     
(2)  592/ 60009E0 :                     ; front right view
(2)  593/ 60009E0 :                     ; o o X X X
(2)  594/ 60009E0 :                     ; o - X X X
(2)  595/ 60009E0 :                     ; o - C X X
(2)  596/ 60009E0 :                     ; o - - - o
(2)  597/ 60009E0 :                     ; o o o o o
(2)  598/ 60009E0 :                     .front_fr:
(2)  599/ 60009E0 : E100                		mov	#0,r1
(2)  600/ 60009E2 : E200                		mov	#0,r2
(2)  601/ 60009E4 : D338                		mov	#-$200000,r3
(2)  602/ 60009E6 : 7D04                		add	#(2*2),r13
(2)  603/ 60009E8 : DB33                		mov	#$100000,r11
(2)  604/ 60009EA : 4F22                		sts	pr,@-r15
(2)  605/ 60009EC : BFB8                		bsr	.do_piece
(2)  606/ 60009EE : E503                		mov	#3,r5
(2)  607/ 60009F0 : 7D40                		add	#LAY_WIDTH,r13
(2)  608/ 60009F2 : 33BC                		add	r11,r3
(2)  609/ 60009F4 : BFB4                		bsr	.do_piece
(2)  610/ 60009F6 : E503                		mov	#3,r5
(2)  611/ 60009F8 : 7D40                		add	#LAY_WIDTH,r13
(2)  612/ 60009FA : 33BC                		add	r11,r3
(2)  613/ 60009FC : BFB0                		bsr	.do_piece
(2)  614/ 60009FE : E503                		mov	#3,r5
(2)  615/ 6000A00 : 4F26                		lds	@r15+,pr
(2)  616/ 6000A02 : 000B                		rts
(2)  617/ 6000A04 : 0009                		nop
(2)  618/ 6000A06 :                     		align 4
(2)  619/ 6000A08 :                     
(2)  620/ 6000A08 :                     
(2)  621/ 6000A08 :                     ; right view/down
(2)  622/ 6000A08 :                     ; o o o o o
(2)  623/ 6000A08 :                     ; o - - - o
(2)  624/ 6000A08 :                     ; o - C X X
(2)  625/ 6000A08 :                     ; o - X X X
(2)  626/ 6000A08 :                     ; o o X X X
(2)  627/ 6000A08 :                     .right_dw:
(2)  628/ 6000A08 : E100                		mov	#0,r1
(2)  629/ 6000A0A : E200                		mov	#0,r2
(2)  630/ 6000A0C : D32D                		mov	#-$100000,r3
(2)  631/ 6000A0E : E044                		mov	#(2*2)+(LAY_WIDTH),r0
(2)  632/ 6000A10 : 3D0C                		add	r0,r13
(2)  633/ 6000A12 : DB29                		mov	#$100000,r11
(2)  634/ 6000A14 : 4F22                		sts	pr,@-r15
(2)  635/ 6000A16 : BFA3                		bsr	.do_piece
(2)  636/ 6000A18 : E503                		mov	#3,r5
(2)  637/ 6000A1A : 7D40                		add	#LAY_WIDTH,r13
(2)  638/ 6000A1C : 33BC                		add	r11,r3
(2)  639/ 6000A1E : BF9F                		bsr	.do_piece
(2)  640/ 6000A20 : E503                		mov	#3,r5
(2)  641/ 6000A22 : 7D40                		add	#LAY_WIDTH,r13
(2)  642/ 6000A24 : 33BC                		add	r11,r3
(2)  643/ 6000A26 : BF9B                		bsr	.do_piece
(2)  644/ 6000A28 : E503                		mov	#3,r5
(2)  645/ 6000A2A : 4F26                		lds	@r15+,pr
(2)  646/ 6000A2C : 000B                		rts
(2)  647/ 6000A2E : 0009                		nop
(2)  648/ 6000A30 :                     		align 4
(2)  649/ 6000A30 :                     
(2)  650/ 6000A30 :                     ; o o o o o
(2)  651/ 6000A30 :                     ; o - - - o
(2)  652/ 6000A30 :                     ; o X C X o
(2)  653/ 6000A30 :                     ; o X X X o
(2)  654/ 6000A30 :                     ; o X X X o
(2)  655/ 6000A30 :                     .down:
(2)  656/ 6000A30 : E100                		mov	#0,r1
(2)  657/ 6000A32 : E200                		mov	#0,r2
(2)  658/ 6000A34 : D323                		mov	#-$100000,r3
(2)  659/ 6000A36 : E044                		mov	#(2*2)+(LAY_WIDTH*1),r0
(2)  660/ 6000A38 : 3D0C                		add	r0,r13
(2)  661/ 6000A3A : DB1F                		mov	#$100000,r11
(2)  662/ 6000A3C : 4F22                		sts	pr,@-r15
(2)  663/ 6000A3E : BF8F                		bsr	.do_piece
(2)  664/ 6000A40 : E503                		mov	#3,r5
(2)  665/ 6000A42 : 7D40                		add	#LAY_WIDTH,r13
(2)  666/ 6000A44 : 33BC                		add	r11,r3
(2)  667/ 6000A46 : BF8B                		bsr	.do_piece
(2)  668/ 6000A48 : E503                		mov	#3,r5
(2)  669/ 6000A4A : 7D40                		add	#LAY_WIDTH,r13
(2)  670/ 6000A4C : 33BC                		add	r11,r3
(2)  671/ 6000A4E : BF87                		bsr	.do_piece
(2)  672/ 6000A50 : E503                		mov	#3,r5
(2)  673/ 6000A52 : 4F26                		lds	@r15+,pr
(2)  674/ 6000A54 : 000B                		rts
(2)  675/ 6000A56 : 0009                		nop
(2)  676/ 6000A58 :                     		align 4
(2)  677/ 6000A58 :                     
(2)  678/ 6000A58 :                     ; o o o o o
(2)  679/ 6000A58 :                     ; o - - - o
(2)  680/ 6000A58 :                     ; X X C - o
(2)  681/ 6000A58 :                     ; X X X - o
(2)  682/ 6000A58 :                     ; X X X o o
(2)  683/ 6000A58 :                     .down_left:
(2)  684/ 6000A58 : D11A                		mov	#-$100000,r1
(2)  685/ 6000A5A : E200                		mov	#0,r2
(2)  686/ 6000A5C : D319                		mov	#-$100000,r3
(2)  687/ 6000A5E : E042                		mov	#(1*2)+(LAY_WIDTH*1),r0
(2)  688/ 6000A60 : 3D0C                		add	r0,r13
(2)  689/ 6000A62 : DB15                		mov	#$100000,r11
(2)  690/ 6000A64 : 4F22                		sts	pr,@-r15
(2)  691/ 6000A66 : BF7B                		bsr	.do_piece
(2)  692/ 6000A68 : E503                		mov	#3,r5
(2)  693/ 6000A6A : 7D40                		add	#LAY_WIDTH,r13
(2)  694/ 6000A6C : 33BC                		add	r11,r3
(2)  695/ 6000A6E : BF77                		bsr	.do_piece
(2)  696/ 6000A70 : E503                		mov	#3,r5
(2)  697/ 6000A72 : 7D40                		add	#LAY_WIDTH,r13
(2)  698/ 6000A74 : 33BC                		add	r11,r3
(2)  699/ 6000A76 : BF73                		bsr	.do_piece
(2)  700/ 6000A78 : E503                		mov	#3,r5
(2)  701/ 6000A7A : 4F26                		lds	@r15+,pr
(2)  702/ 6000A7C : 000B                		rts
(2)  703/ 6000A7E : 0009                		nop
(2)  704/ 6000A80 :                     		align 4
(2)  705/ 6000A80 :                     
(2)  706/ 6000A80 :                     
(2)  707/ 6000A80 :                     ; X X X o o
(2)  708/ 6000A80 :                     ; X X X - o
(2)  709/ 6000A80 :                     ; X X C - o
(2)  710/ 6000A80 :                     ; o - - - o
(2)  711/ 6000A80 :                     ; o o o o o
(2)  712/ 6000A80 :                     .front_lf:
(2)  713/ 6000A80 : D110                		mov	#-$100000,r1
(2)  714/ 6000A82 : E200                		mov	#0,r2
(2)  715/ 6000A84 : D310                		mov	#-$200000,r3
(2)  716/ 6000A86 : 7D02                		add	#(1*2),r13
(2)  717/ 6000A88 : DB0B                		mov	#$100000,r11
(2)  718/ 6000A8A : 4F22                		sts	pr,@-r15
(2)  719/ 6000A8C : BF68                		bsr	.do_piece
(2)  720/ 6000A8E : E503                		mov	#3,r5
(2)  721/ 6000A90 : 7D40                		add	#LAY_WIDTH,r13
(2)  722/ 6000A92 : 33BC                		add	r11,r3
(2)  723/ 6000A94 : BF64                		bsr	.do_piece
(2)  724/ 6000A96 : E503                		mov	#3,r5
(2)  725/ 6000A98 : 7D40                		add	#LAY_WIDTH,r13
(2)  726/ 6000A9A : 33BC                		add	r11,r3
(2)  727/ 6000A9C : BF60                		bsr	.do_piece
(2)  728/ 6000A9E : E503                		mov	#3,r5
(2)  729/ 6000AA0 : 4F26                		lds	@r15+,pr
(2)  730/ 6000AA2 : 000B                		rts
(2)  731/ 6000AA4 : 0009                		nop
(2)  732/ 6000AA6 :                     		align 4
(2)  733/ 6000AA8 : 0600 58A0 0600 5878 		ltorg
                    0600 58C0 0600 0860 
                    0010 0000 0600 09A8 
                    4000 0000 FFF0 0000 
                    FFE0 0000 1FFF      
(2)  734/ 6000ACE :                     
(2)  735/ 6000ACE :                     ; ------------------------------------------------
(2)  736/ 6000ACE :                     ; MarsMdl_Init
(2)  737/ 6000ACE :                     ; 
(2)  738/ 6000ACE :                     ; Reset ALL objects
(2)  739/ 6000ACE :                     ; ------------------------------------------------
(2)  740/ 6000ACE :                     
(2)  741/ 6000ACE :                     MarsMdl_Init:
(2)  742/ 6000ACE : D104                		mov	#RAM_Mars_Objects,r1
(2)  743/ 6000AD0 : 9208                		mov	#(sizeof_mdlobj*MAX_MODELS)/4,r2
(2)  744/ 6000AD2 : E000                		mov	#0,r0
(2)  745/ 6000AD4 :                     .clnup:
(2)  746/ 6000AD4 : 2102                		mov	r0,@r1
(2)  747/ 6000AD6 : 4210                		dt	r2
(2)  748/ 6000AD8 : 8FFC                		bf/s	.clnup
(2)  749/ 6000ADA : 7104                		add	#4,r1
(2)  750/ 6000ADC : 000B                		rts
(2)  751/ 6000ADE : 0009                		nop
(2)  752/ 6000AE0 :                     		align 4
(2)  753/ 6000AE0 : 0600 58C0 0300      		ltorg
(2)  754/ 6000AE6 :                     
(2)  755/ 6000AE6 :                     MarsMdl_ReadModel:
(2)  756/ 6000AE6 : 4F22                		sts	pr,@-r15
(2)  757/ 6000AE8 :                     
(2)  758/ 6000AE8 : 5DE8                		mov	@(mdl_animdata,r14),r13
(2)  759/ 6000AEA : 4D15                		cmp/pl	r13
(2)  760/ 6000AEC : 8B1E                		bf	.no_anim
(2)  761/ 6000AEE : 50EA                		mov	@(mdl_animtimer,r14),r0
(2)  762/ 6000AF0 : 70FF                		add	#-1,r0
(2)  763/ 6000AF2 : 4015                		cmp/pl 	r0
(2)  764/ 6000AF4 : 8919                		bt	.wait_camanim
(2)  765/ 6000AF6 : 62D6                		mov	@r13+,r2
(2)  766/ 6000AF8 : 50E9                		mov	@(mdl_animframe,r14),r0
(2)  767/ 6000AFA : 7001                		add	#1,r0
(2)  768/ 6000AFC : 3020                		cmp/eq	r2,r0
(2)  769/ 6000AFE : 8B00                		bf	.on_frames
(2)  770/ 6000B00 : 200A                		xor	r0,r0
(2)  771/ 6000B02 :                     .on_frames:
(2)  772/ 6000B02 : 6103                		mov	r0,r1
(2)  773/ 6000B04 : 1E09                		mov	r0,@(mdl_animframe,r14)
(2)  774/ 6000B06 : E018                		mov	#$18,r0
(2)  775/ 6000B08 : 210E                		mulu	r0,r1
(2)  776/ 6000B0A : 001A                		sts	macl,r0 	
(2)  777/ 6000B0C : 3D0C                		add	r0,r13
(2)  778/ 6000B0E : 61D6                		mov	@r13+,r1
(2)  779/ 6000B10 : 62D6                		mov	@r13+,r2
(2)  780/ 6000B12 : 63D6                		mov	@r13+,r3
(2)  781/ 6000B14 : 64D6                		mov	@r13+,r4
(2)  782/ 6000B16 : 65D6                		mov	@r13+,r5
(2)  783/ 6000B18 : 66D6                		mov	@r13+,r6
(2)  784/ 6000B1A : 644B                		neg	r4,r4
(2)  785/ 6000B1C : 1E12                		mov	r1,@(mdl_x_pos,r14)
(2)  786/ 6000B1E : 1E23                		mov	r2,@(mdl_y_pos,r14)
(2)  787/ 6000B20 : 1E34                		mov	r3,@(mdl_z_pos,r14)
(2)  788/ 6000B22 : 1E45                		mov	r4,@(mdl_x_rot,r14)
(2)  789/ 6000B24 : 1E56                		mov	r5,@(mdl_y_rot,r14)
(2)  790/ 6000B26 : 1E67                		mov	r6,@(mdl_z_rot,r14)
(2)  791/ 6000B28 : E001                		mov	#1,r0				; TEMPORAL timer
(2)  792/ 6000B2A :                     .wait_camanim:
(2)  793/ 6000B2A : 1E0A                		mov	r0,@(mdl_animtimer,r14)	
(2)  794/ 6000B2C :                     .no_anim:
(2)  795/ 6000B2C :                     
(2)  796/ 6000B2C :                     	; Now start reading
(2)  797/ 6000B2C : C603                		mov	@(marsGbl_CurrFacePos,gbr),r0
(2)  798/ 6000B2E : 6D03                		mov	r0,r13				; r13 - output faces
(2)  799/ 6000B30 : D073                		mov	#$3FFFFFFF,r0
(2)  800/ 6000B32 : 5CE0                		mov	@(mdl_data,r14),r12		; r12 - model header
(2)  801/ 6000B34 : 2C09                		and	r0,r12
(2)  802/ 6000B36 : 5BC2                		mov 	@(8,r12),r11			; r11 - face data
(2)  803/ 6000B38 : 5AC1                		mov 	@(4,r12),r10			; r10 - vertice data (X,Y,Z)
(2)  804/ 6000B3A : 69C1                		mov.w	@r12,r9				;  r9 - Number of faces used on model
(2)  805/ 6000B3C : C602                		mov	@(marsGbl_CurrZList,gbr),r0	;  r8 - Zlist for sorting
(2)  806/ 6000B3E : 6803                		mov	r0,r8
(2)  807/ 6000B40 :                     .next_face:
(2)  808/ 6000B40 : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Ran out of space to store faces?
(2)  809/ 6000B42 : 91E5                		mov	#MAX_FACES,r1
(2)  810/ 6000B44 : 3013                		cmp/ge	r1,r0
(2)  811/ 6000B46 : 8B01                		bf	.can_build
(2)  812/ 6000B48 : A0D7                		bra	.exit_model
(2)  813/ 6000B4A : 0009                		nop
(2)  814/ 6000B4C :                     .can_build:
(2)  815/ 6000B4C : 64B5                		mov.w	@r11+,r4			; Read type from model
(2)  816/ 6000B4E : E703                		mov	#3,r7				; r7 - Current polygon type: triangle (3)
(2)  817/ 6000B50 : 6043                		mov	r4,r0
(2)  818/ 6000B52 : 4019                		shlr8	r0
(2)  819/ 6000B54 : C840                		tst	#PLGN_TRI,r0			; Model face uses triangle?
(2)  820/ 6000B56 : 8B00                		bf	.set_tri
(2)  821/ 6000B58 : 7701                		add	#1,r7				; Face is quad, r7 = 4 points
(2)  822/ 6000B5A :                     .set_tri:
(2)  823/ 6000B5A : 4415                		cmp/pl	r4				; Faces uses texture?
(2)  824/ 6000B5C : 893A                		bt	.solid_type
(2)  825/ 6000B5E :                     
(2)  826/ 6000B5E :                     ; --------------------------------
(2)  827/ 6000B5E :                     ; Set texture material
(2)  828/ 6000B5E :                     ; --------------------------------
(2)  829/ 6000B5E :                     
(2)  830/ 6000B5E : 56C3                		mov	@($C,r12),r6			; r6 - Material data
(2)  831/ 6000B60 : 65D3                		mov	r13,r5				; r5 - Go to UV section 
(2)  832/ 6000B62 : 7528                		add 	#polygn_srcpnts,r5
(2)  833/ 6000B64 : 6373                		mov	r7,r3				; r3 - copy of current face points (3 or 4)
(2)  834/ 6000B66 :                     
(2)  835/ 6000B66 :                     	; New method
(2)  836/ 6000B66 :                     	rept 3
(2)  837/ 6000B66 :                     		mov.w	@r11+,r0			; Read UV index			
(2)  838/ 6000B66 :                     		extu	r0,r0
(2)  839/ 6000B66 :                     		shll2	r0
(2)  840/ 6000B66 :                     		mov	@(r6,r0),r0
(2)  841/ 6000B66 :                     		mov.w	r0,@(2,r5)
(2)  842/ 6000B66 :                     		shlr16	r0
(2)  843/ 6000B66 :                     		mov.w	r0,@r5
(2)  844/ 6000B66 :                     		add	#4,r5
(2)  845/ 6000B66 :                     	endm
(2)  837/ 6000B66 : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  838/ 6000B68 : 600D                		extu	r0,r0
(2)  839/ 6000B6A : 4008                		shll2	r0
(2)  840/ 6000B6C : 006E                		mov	@(r6,r0),r0
(2)  841/ 6000B6E : 8151                		mov.w	r0,@(2,r5)
(2)  842/ 6000B70 : 4029                		shlr16	r0
(2)  843/ 6000B72 : 2501                		mov.w	r0,@r5
(2)  844/ 6000B74 : 7504                		add	#4,r5
(2)  837/ 6000B76 : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  838/ 6000B78 : 600D                		extu	r0,r0
(2)  839/ 6000B7A : 4008                		shll2	r0
(2)  840/ 6000B7C : 006E                		mov	@(r6,r0),r0
(2)  841/ 6000B7E : 8151                		mov.w	r0,@(2,r5)
(2)  842/ 6000B80 : 4029                		shlr16	r0
(2)  843/ 6000B82 : 2501                		mov.w	r0,@r5
(2)  844/ 6000B84 : 7504                		add	#4,r5
(2)  837/ 6000B86 : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  838/ 6000B88 : 600D                		extu	r0,r0
(2)  839/ 6000B8A : 4008                		shll2	r0
(2)  840/ 6000B8C : 006E                		mov	@(r6,r0),r0
(2)  841/ 6000B8E : 8151                		mov.w	r0,@(2,r5)
(2)  842/ 6000B90 : 4029                		shlr16	r0
(2)  843/ 6000B92 : 2501                		mov.w	r0,@r5
(2)  844/ 6000B94 : 7504                		add	#4,r5
(2)  846/ 6000B96 : E003                		mov	#3,r0			; Triangle?
(2)  847/ 6000B98 : 3700                		cmp/eq	r0,r7
(2)  848/ 6000B9A : 8906                		bt	.alluvdone
(2)  849/ 6000B9C : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  850/ 6000B9E : 600D                		extu	r0,r0
(2)  851/ 6000BA0 : 4008                		shll2	r0
(2)  852/ 6000BA2 : 006E                		mov	@(r6,r0),r0
(2)  853/ 6000BA4 : 8151                		mov.w	r0,@(2,r5)
(2)  854/ 6000BA6 : 4029                		shlr16	r0
(2)  855/ 6000BA8 : 2501                		mov.w	r0,@r5
(2)  856/ 6000BAA :                     .alluvdone:
(2)  857/ 6000BAA :                     
(2)  858/ 6000BAA : 50E1                		mov	@(mdl_option,r14),r0
(2)  859/ 6000BAC : C9FF                		and	#$FF,r0
(2)  860/ 6000BAE : 6103                		mov	r0,r1
(2)  861/ 6000BB0 : 6043                		mov	r4,r0
(2)  862/ 6000BB2 : 95AE                		mov	#$1FFF,r5
(2)  863/ 6000BB4 : 2059                		and	r5,r0
(2)  864/ 6000BB6 : 4008                		shll2	r0
(2)  865/ 6000BB8 : 4000                		shll	r0
(2)  866/ 6000BBA : 56C4                		mov	@($10,r12),r6
(2)  867/ 6000BBC : 360C                		add	r0,r6
(2)  868/ 6000BBE : D051                		mov	#$E000,r0		; grab special bits
(2)  869/ 6000BC0 : 2409                		and	r0,r4
(2)  870/ 6000BC2 : 4428                		shll16	r4
(2)  871/ 6000BC4 : 5061                		mov	@(4,r6),r0
(2)  872/ 6000BC6 : 240B                		or	r0,r4
(2)  873/ 6000BC8 : 341C                		add	r1,r4
(2)  874/ 6000BCA : 1D40                		mov	r4,@(polygn_type,r13)
(2)  875/ 6000BCC : 6062                		mov	@r6,r0
(2)  876/ 6000BCE : 1D01                		mov	r0,@(polygn_mtrl,r13)
(2)  877/ 6000BD0 : A00B                		bra	.go_faces
(2)  878/ 6000BD2 : 0009                		nop
(2)  879/ 6000BD4 :                     
(2)  880/ 6000BD4 :                     ; --------------------------------
(2)  881/ 6000BD4 :                     ; Set texture material
(2)  882/ 6000BD4 :                     ; --------------------------------
(2)  883/ 6000BD4 :                     
(2)  884/ 6000BD4 :                     .solid_type:
(2)  885/ 6000BD4 :                     
(2)  886/ 6000BD4 : 50E1                		mov	@(mdl_option,r14),r0
(2)  887/ 6000BD6 : C9FF                		and	#$FF,r0
(2)  888/ 6000BD8 : 6103                		mov	r0,r1
(2)  889/ 6000BDA : 6043                		mov	r4,r0
(2)  890/ 6000BDC : D549                		mov	#$E000,r5
(2)  891/ 6000BDE : 2459                		and	r5,r4
(2)  892/ 6000BE0 : 4428                		shll16	r4
(2)  893/ 6000BE2 : 341C                		add	r1,r4
(2)  894/ 6000BE4 : 1D40                		mov	r4,@(polygn_type,r13)		; Set type 0 (tri) or quad (1)
(2)  895/ 6000BE6 : C9FF                		and	#$FF,r0
(2)  896/ 6000BE8 : 1D01                		mov	r0,@(polygn_mtrl,r13)		; Set pixel color (0-255)
(2)  897/ 6000BEA :                     
(2)  898/ 6000BEA :                     ; --------------------------------
(2)  899/ 6000BEA :                     ; Read faces
(2)  900/ 6000BEA :                     ; --------------------------------
(2)  901/ 6000BEA :                     
(2)  902/ 6000BEA :                     .go_faces:
(2)  903/ 6000BEA : 61D3                		mov	r13,r1
(2)  904/ 6000BEC : 7108                		add 	#polygn_points,r1
(2)  905/ 6000BEE : 66B3                		mov	r11,r6
(2)  906/ 6000BF0 : 6073                		mov	r7,r0
(2)  907/ 6000BF2 : 4000                		shll	r0
(2)  908/ 6000BF4 : 3B0C                		add	r0,r11
(2)  909/ 6000BF6 : 2F86                		mov 	r8,@-r15
(2)  910/ 6000BF8 : 2F96                		mov 	r9,@-r15
(2)  911/ 6000BFA : 2FB6                		mov 	r11,@-r15
(2)  912/ 6000BFC : 2FC6                		mov 	r12,@-r15
(2)  913/ 6000BFE : 2FD6                		mov 	r13,@-r15
(2)  914/ 6000C00 : 9888                		mov	#-160,r8
(2)  915/ 6000C02 : 698B                		neg	r8,r9
(2)  916/ 6000C04 : EB90                		mov	#-112,r11
(2)  917/ 6000C06 : 6CBB                		neg	r11,r12
(2)  918/ 6000C08 : D53F                		mov	#$7FFFFFFF,r5
(2)  919/ 6000C0A : EDFF                		mov	#$FFFFFFFF,r13
(2)  920/ 6000C0C :                     
(2)  921/ 6000C0C :                     	; New method, might speed up
(2)  922/ 6000C0C :                     	; a little...
(2)  923/ 6000C0C :                     	rept 3
(2)  924/ 6000C0C :                     		mov	#0,r0
(2)  925/ 6000C0C :                     		mov.w 	@r6+,r0
(2)  926/ 6000C0C :                     		mov	#$C,r4
(2)  927/ 6000C0C :                     		mulu	r4,r0
(2)  928/ 6000C0C :                     		sts	macl,r0
(2)  929/ 6000C0C :                     		mov	r10,r4
(2)  930/ 6000C0C :                     		add 	r0,r4
(2)  931/ 6000C0C :                     		mov	@r4,r2
(2)  932/ 6000C0C :                     		mov	@(4,r4),r3
(2)  933/ 6000C0C :                     		mov	@(8,r4),r4
(2)  934/ 6000C0C :                     		bsr	mdlrd_setpoint
(2)  935/ 6000C0C :                     		nop
(2)  936/ 6000C0C :                     		mov	r2,@r1
(2)  937/ 6000C0C :                     		mov	r3,@(4,r1)
(2)  938/ 6000C0C :                     		add	#8,r1
(2)  939/ 6000C0C :                     	endm
(2)  924/ 6000C0C : E000                		mov	#0,r0
(2)  925/ 6000C0E : 6065                		mov.w 	@r6+,r0
(2)  926/ 6000C10 : E40C                		mov	#$C,r4
(2)  927/ 6000C12 : 204E                		mulu	r4,r0
(2)  928/ 6000C14 : 001A                		sts	macl,r0
(2)  929/ 6000C16 : 64A3                		mov	r10,r4
(2)  930/ 6000C18 : 340C                		add 	r0,r4
(2)  931/ 6000C1A : 6242                		mov	@r4,r2
(2)  932/ 6000C1C : 5341                		mov	@(4,r4),r3
(2)  933/ 6000C1E : 5442                		mov	@(8,r4),r4
(2)  934/ 6000C20 : B07A                		bsr	mdlrd_setpoint
(2)  935/ 6000C22 : 0009                		nop
(2)  936/ 6000C24 : 2122                		mov	r2,@r1
(2)  937/ 6000C26 : 1131                		mov	r3,@(4,r1)
(2)  938/ 6000C28 : 7108                		add	#8,r1
(2)  924/ 6000C2A : E000                		mov	#0,r0
(2)  925/ 6000C2C : 6065                		mov.w 	@r6+,r0
(2)  926/ 6000C2E : E40C                		mov	#$C,r4
(2)  927/ 6000C30 : 204E                		mulu	r4,r0
(2)  928/ 6000C32 : 001A                		sts	macl,r0
(2)  929/ 6000C34 : 64A3                		mov	r10,r4
(2)  930/ 6000C36 : 340C                		add 	r0,r4
(2)  931/ 6000C38 : 6242                		mov	@r4,r2
(2)  932/ 6000C3A : 5341                		mov	@(4,r4),r3
(2)  933/ 6000C3C : 5442                		mov	@(8,r4),r4
(2)  934/ 6000C3E : B06B                		bsr	mdlrd_setpoint
(2)  935/ 6000C40 : 0009                		nop
(2)  936/ 6000C42 : 2122                		mov	r2,@r1
(2)  937/ 6000C44 : 1131                		mov	r3,@(4,r1)
(2)  938/ 6000C46 : 7108                		add	#8,r1
(2)  924/ 6000C48 : E000                		mov	#0,r0
(2)  925/ 6000C4A : 6065                		mov.w 	@r6+,r0
(2)  926/ 6000C4C : E40C                		mov	#$C,r4
(2)  927/ 6000C4E : 204E                		mulu	r4,r0
(2)  928/ 6000C50 : 001A                		sts	macl,r0
(2)  929/ 6000C52 : 64A3                		mov	r10,r4
(2)  930/ 6000C54 : 340C                		add 	r0,r4
(2)  931/ 6000C56 : 6242                		mov	@r4,r2
(2)  932/ 6000C58 : 5341                		mov	@(4,r4),r3
(2)  933/ 6000C5A : 5442                		mov	@(8,r4),r4
(2)  934/ 6000C5C : B05C                		bsr	mdlrd_setpoint
(2)  935/ 6000C5E : 0009                		nop
(2)  936/ 6000C60 : 2122                		mov	r2,@r1
(2)  937/ 6000C62 : 1131                		mov	r3,@(4,r1)
(2)  938/ 6000C64 : 7108                		add	#8,r1
(2)  940/ 6000C66 : E003                		mov	#3,r0			; Triangle?
(2)  941/ 6000C68 : 3700                		cmp/eq	r0,r7
(2)  942/ 6000C6A : 890D                		bt	.allfcsdone
(2)  943/ 6000C6C : E000                		mov	#0,r0			; Do forth point for Quad
(2)  944/ 6000C6E : 6065                		mov.w 	@r6+,r0
(2)  945/ 6000C70 : E40C                		mov	#$C,r4
(2)  946/ 6000C72 : 204E                		mulu	r4,r0
(2)  947/ 6000C74 : 001A                		sts	macl,r0
(2)  948/ 6000C76 : 64A3                		mov	r10,r4
(2)  949/ 6000C78 : 340C                		add 	r0,r4
(2)  950/ 6000C7A : 6242                		mov	@r4,r2
(2)  951/ 6000C7C : 5341                		mov	@(4,r4),r3
(2)  952/ 6000C7E : 5442                		mov	@(8,r4),r4
(2)  953/ 6000C80 : B04A                		bsr	mdlrd_setpoint
(2)  954/ 6000C82 : 0009                		nop
(2)  955/ 6000C84 : 2122                		mov	r2,@r1
(2)  956/ 6000C86 : 1131                		mov	r3,@(4,r1)
(2)  957/ 6000C88 :                     .allfcsdone:
(2)  958/ 6000C88 :                     
(2)  959/ 6000C88 : 6183                		mov	r8,r1
(2)  960/ 6000C8A : 6293                		mov	r9,r2
(2)  961/ 6000C8C : 63B3                		mov	r11,r3
(2)  962/ 6000C8E : 64C3                		mov	r12,r4
(2)  963/ 6000C90 : 66D3                		mov	r13,r6
(2)  964/ 6000C92 : 6DF6                		mov	@r15+,r13
(2)  965/ 6000C94 : 6CF6                		mov	@r15+,r12
(2)  966/ 6000C96 : 6BF6                		mov	@r15+,r11
(2)  967/ 6000C98 : 69F6                		mov	@r15+,r9
(2)  968/ 6000C9A : 68F6                		mov	@r15+,r8
(2)  969/ 6000C9C :                     		
(2)  970/ 6000C9C :                     	; NOTE: if you don't like how the perspective works
(2)  971/ 6000C9C :                     	; change this register depending how you want to ignore
(2)  972/ 6000C9C :                     	; faces closer to the camera:
(2)  973/ 6000C9C :                     	; 
(2)  974/ 6000C9C :                     	; r5 - Back Z point, keep affine limitations
(2)  975/ 6000C9C :                     	; r6 - Front Z point, skip face but larger faces are affected
(2)  976/ 6000C9C : 4511                		cmp/pz	r5
(2)  977/ 6000C9E : 8924                		bt	.face_out
(2)  978/ 6000CA0 : D01A                		mov	#RAM_Mars_ObjCamera,r0
(2)  979/ 6000CA2 : 5701                		mov	@(cam_y_pos,r0),r7
(2)  980/ 6000CA4 : 4709                		shlr2	r7
(2)  981/ 6000CA6 : 4709                		shlr2	r7
(2)  982/ 6000CA8 : 4709                		shlr2	r7
(2)  983/ 6000CAA : 4701                		shlr	r7
(2)  984/ 6000CAC : 677F                		exts	r7,r7
(2)  985/ 6000CAE : 4715                		cmp/pl	r7
(2)  986/ 6000CB0 : 8B00                		bf	.revrscam
(2)  987/ 6000CB2 : 677B                		neg	r7,r7
(2)  988/ 6000CB4 :                     .revrscam:
(2)  989/ 6000CB4 : 9027                		mov	#MAX_ZDIST,r0
(2)  990/ 6000CB6 : 3703                		cmp/ge	r0,r7
(2)  991/ 6000CB8 : 8900                		bt	.camlimit
(2)  992/ 6000CBA : 6703                		mov	r0,r7
(2)  993/ 6000CBC :                     .camlimit:
(2)  994/ 6000CBC :                     ; 		cmp/pl	r6
(2)  995/ 6000CBC :                     ; 		bt	.face_out
(2)  996/ 6000CBC : 9023                		mov	#MAX_ZDIST,r0		; Draw distance
(2)  997/ 6000CBE : 307C                		add 	r7,r0
(2)  998/ 6000CC0 : 3503                		cmp/ge	r0,r5
(2)  999/ 6000CC2 : 8B12                		bf	.face_out
(2) 1000/ 6000CC4 :                     		
(2) 1001/ 6000CC4 : 9026                		mov	#-(SCREEN_WIDTH/2),r0
(2) 1002/ 6000CC6 : 3107                		cmp/gt	r0,r1
(2) 1003/ 6000CC8 : 8B0F                		bf	.face_out
(2) 1004/ 6000CCA : 600B                		neg	r0,r0
(2) 1005/ 6000CCC : 3203                		cmp/ge	r0,r2
(2) 1006/ 6000CCE : 890C                		bt	.face_out
(2) 1007/ 6000CD0 : E090                		mov	#-(SCREEN_HEIGHT/2),r0
(2) 1008/ 6000CD2 : 3307                		cmp/gt	r0,r3
(2) 1009/ 6000CD4 : 8B09                		bf	.face_out
(2) 1010/ 6000CD6 : 600B                		neg	r0,r0
(2) 1011/ 6000CD8 : 3403                		cmp/ge	r0,r4
(2) 1012/ 6000CDA : 8906                		bt	.face_out
(2) 1013/ 6000CDC :                     
(2) 1014/ 6000CDC :                     ; --------------------------------
(2) 1015/ 6000CDC :                     
(2) 1016/ 6000CDC :                     .face_ok:
(2) 1017/ 6000CDC : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Add 1 face to the list
(2) 1018/ 6000CDE : 7001                		add	#1,r0
(2) 1019/ 6000CE0 : C10A                		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(2) 1020/ 6000CE2 : 2852                		mov	r5,@r8				; Store current Z to Zlist
(2) 1021/ 6000CE4 : 18D1                		mov	r13,@(4,r8)			; And it's address
(2) 1022/ 6000CE6 : 7808                		add	#8,r8
(2) 1023/ 6000CE8 : 7D38                		add	#sizeof_polygn,r13
(2) 1024/ 6000CEA :                     .face_out:
(2) 1025/ 6000CEA : 4910                		dt	r9
(2) 1026/ 6000CEC : 8901                		bt	.finish_this
(2) 1027/ 6000CEE : AF27                		bra	.next_face
(2) 1028/ 6000CF0 : 0009                		nop
(2) 1029/ 6000CF2 :                     .finish_this:
(2) 1030/ 6000CF2 : 6083                		mov	r8,r0
(2) 1031/ 6000CF4 : C202                		mov	r0,@(marsGbl_CurrZList,gbr)
(2) 1032/ 6000CF6 : 60D3                		mov	r13,r0
(2) 1033/ 6000CF8 : C203                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(2) 1034/ 6000CFA :                     .exit_model:
(2) 1035/ 6000CFA : 4F26                		lds	@r15+,pr
(2) 1036/ 6000CFC : 000B                		rts
(2) 1037/ 6000CFE : 0009                		nop
(2) 1038/ 6000D00 :                     		align 4
(2) 1039/ 6000D00 : 3FFF FFFF 0000 E000 		ltorg
                    7FFF FFFF 0600 5878 
                    0100 1FFF FF60      
(2) 1040/ 6000D16 :                     
(2) 1041/ 6000D16 :                     ; ----------------------------------------	
(2) 1042/ 6000D16 :                     ; Modify position to current point
(2) 1043/ 6000D16 :                     ; ----------------------------------------
(2) 1044/ 6000D16 :                     
(2) 1045/ 6000D16 :                     		align 4
(2) 1046/ 6000D18 :                     mdlrd_setpoint:
(2) 1047/ 6000D18 : 4F22                		sts	pr,@-r15
(2) 1048/ 6000D1A : 2F56                		mov 	r5,@-r15
(2) 1049/ 6000D1C : 2F66                		mov 	r6,@-r15
(2) 1050/ 6000D1E : 2F76                		mov 	r7,@-r15
(2) 1051/ 6000D20 : 2F86                		mov 	r8,@-r15
(2) 1052/ 6000D22 : 2F96                		mov 	r9,@-r15
(2) 1053/ 6000D24 : 2FA6                		mov 	r10,@-r15
(2) 1054/ 6000D26 : 2FB6                		mov 	r11,@-r15
(2) 1055/ 6000D28 :                     		
(2) 1056/ 6000D28 :                     	; Object rotation
(2) 1057/ 6000D28 : 6523                		mov	r2,r5			; r5 - X
(2) 1058/ 6000D2A : 6643                		mov	r4,r6			; r6 - Z
(2) 1059/ 6000D2C : 50E5                  		mov 	@(mdl_x_rot,r14),r0
(2) 1060/ 6000D2E : 4009                  		shlr2	r0
(2) 1061/ 6000D30 : 4001                  		shlr	r0
(2) 1062/ 6000D32 : B082                  		bsr	mdlrd_rotate
(2) 1063/ 6000D34 : 4019                		shlr8	r0
(2) 1064/ 6000D36 : 6273                   		mov	r7,r2
(2) 1065/ 6000D38 : 6533                   		mov	r3,r5
(2) 1066/ 6000D3A : 6683                  		mov	r8,r6
(2) 1067/ 6000D3C : 50E6                  		mov 	@(mdl_y_rot,r14),r0
(2) 1068/ 6000D3E : 4009                  		shlr2	r0
(2) 1069/ 6000D40 : 4001                  		shlr	r0
(2) 1070/ 6000D42 : B07A                  		bsr	mdlrd_rotate
(2) 1071/ 6000D44 : 4019                		shlr8	r0
(2) 1072/ 6000D46 : 6483                   		mov	r8,r4
(2) 1073/ 6000D48 : 6523                   		mov	r2,r5
(2) 1074/ 6000D4A : 6673                   		mov	r7,r6
(2) 1075/ 6000D4C : 50E7                   		mov 	@(mdl_z_rot,r14),r0
(2) 1076/ 6000D4E : 4009                  		shlr2	r0
(2) 1077/ 6000D50 : 4001                  		shlr	r0
(2) 1078/ 6000D52 : B072                  		bsr	mdlrd_rotate
(2) 1079/ 6000D54 : 4019                		shlr8	r0
(2) 1080/ 6000D56 : 6273                   		mov	r7,r2
(2) 1081/ 6000D58 : 6383                   		mov	r8,r3
(2) 1082/ 6000D5A : 55E2                		mov	@(mdl_x_pos,r14),r5
(2) 1083/ 6000D5C : 56E3                		mov	@(mdl_y_pos,r14),r6
(2) 1084/ 6000D5E : 57E4                		mov	@(mdl_z_pos,r14),r7
(2) 1085/ 6000D60 : 4519                		shlr8	r5
(2) 1086/ 6000D62 : 4619                		shlr8	r6
(2) 1087/ 6000D64 : 4719                		shlr8	r7
(2) 1088/ 6000D66 : 655F                		exts	r5,r5
(2) 1089/ 6000D68 : 666F                		exts	r6,r6		
(2) 1090/ 6000D6A : 677F                		exts	r7,r7		
(2) 1091/ 6000D6C : 325C                		add 	r5,r2
(2) 1092/ 6000D6E : 336C                		add 	r6,r3
(2) 1093/ 6000D70 : 347C                		add 	r7,r4
(2) 1094/ 6000D72 :                     
(2) 1095/ 6000D72 :                     	; Include camera changes
(2) 1096/ 6000D72 : DB2E                		mov 	#RAM_Mars_ObjCamera,r11
(2) 1097/ 6000D74 : 55B0                		mov	@(cam_x_pos,r11),r5
(2) 1098/ 6000D76 : 56B1                		mov	@(cam_y_pos,r11),r6
(2) 1099/ 6000D78 : 57B2                		mov	@(cam_z_pos,r11),r7
(2) 1100/ 6000D7A : 50E0                		mov	@(mdl_data,r14),r0		; Layout object?
(2) 1101/ 6000D7C : 4000                		shll	r0
(2) 1102/ 6000D7E : 4015                		cmp/pl	r0
(2) 1103/ 6000D80 : 8902                		bt	.lay_move
(2) 1104/ 6000D82 : D02B                		mov	#$FFFFF,r0			; Limit camera movement
(2) 1105/ 6000D84 : 2509                		and	r0,r5
(2) 1106/ 6000D86 :                     ; 		and	r0,r6
(2) 1107/ 6000D86 : 2709                		and	r0,r7
(2) 1108/ 6000D88 :                     .lay_move:
(2) 1109/ 6000D88 : 4519                		shlr8	r5
(2) 1110/ 6000D8A : 4619                		shlr8	r6
(2) 1111/ 6000D8C : 4719                		shlr8	r7
(2) 1112/ 6000D8E : 655F                		exts	r5,r5
(2) 1113/ 6000D90 : 666F                		exts	r6,r6		
(2) 1114/ 6000D92 : 677F                		exts	r7,r7
(2) 1115/ 6000D94 : 3258                		sub 	r5,r2
(2) 1116/ 6000D96 : 3368                		sub 	r6,r3
(2) 1117/ 6000D98 : 347C                		add 	r7,r4
(2) 1118/ 6000D9A :                     
(2) 1119/ 6000D9A : 6523                		mov	r2,r5
(2) 1120/ 6000D9C : 6643                		mov	r4,r6
(2) 1121/ 6000D9E : 50B3                  		mov 	@(cam_x_rot,r11),r0
(2) 1122/ 6000DA0 : 4009                  		shlr2	r0
(2) 1123/ 6000DA2 : 4001                  		shlr	r0
(2) 1124/ 6000DA4 : B049                  		bsr	mdlrd_rotate
(2) 1125/ 6000DA6 : 4019                		shlr8	r0
(2) 1126/ 6000DA8 : 6273                   		mov	r7,r2
(2) 1127/ 6000DAA : 6483                   		mov	r8,r4
(2) 1128/ 6000DAC : 6533                   		mov	r3,r5
(2) 1129/ 6000DAE : 6683                  		mov	r8,r6
(2) 1130/ 6000DB0 : 50B4                  		mov 	@(cam_y_rot,r11),r0
(2) 1131/ 6000DB2 : 4009                  		shlr2	r0
(2) 1132/ 6000DB4 : 4001                  		shlr	r0
(2) 1133/ 6000DB6 : B040                  		bsr	mdlrd_rotate
(2) 1134/ 6000DB8 : 4019                		shlr8	r0
(2) 1135/ 6000DBA : 6483                   		mov	r8,r4
(2) 1136/ 6000DBC : 6523                   		mov	r2,r5
(2) 1137/ 6000DBE : 6673                   		mov	r7,r6
(2) 1138/ 6000DC0 : 50B5                   		mov 	@(cam_z_rot,r11),r0
(2) 1139/ 6000DC2 : 4009                  		shlr2	r0
(2) 1140/ 6000DC4 : 4001                  		shlr	r0
(2) 1141/ 6000DC6 : B038                  		bsr	mdlrd_rotate
(2) 1142/ 6000DC8 : 4019                		shlr8	r0
(2) 1143/ 6000DCA : 6273                   		mov	r7,r2
(2) 1144/ 6000DCC : 6383                   		mov	r8,r3
(2) 1145/ 6000DCE :                     
(2) 1146/ 6000DCE :                     	; Weak perspective projection
(2) 1147/ 6000DCE :                     	; this is the best I got,
(2) 1148/ 6000DCE :                     	; It breaks on large faces
(2) 1149/ 6000DCE : 9833                		mov 	#_JR,r8
(2) 1150/ 6000DD0 : D718                		mov	#360<<16,r7
(2) 1151/ 6000DD2 : 604B                		neg	r4,r0		; reverse Z
(2) 1152/ 6000DD4 : 4015                		cmp/pl	r0
(2) 1153/ 6000DD6 : 8900                		bt	.inside
(2) 1154/ 6000DD8 : E001                		mov	#1,r0
(2) 1155/ 6000DDA :                     .inside:
(2) 1156/ 6000DDA : 2802                		mov 	r0,@r8
(2) 1157/ 6000DDC : 1871                		mov 	r7,@(4,r8)
(2) 1158/ 6000DDE : 0009                		nop
(2) 1159/ 6000DE0 : 5781                		mov 	@(4,r8),r7
(2) 1160/ 6000DE2 :                     .zmulti:
(2) 1161/ 6000DE2 : 327D                		dmuls	r7,r2
(2) 1162/ 6000DE4 : 000A                		sts	mach,r0
(2) 1163/ 6000DE6 : 021A                		sts	macl,r2
(2) 1164/ 6000DE8 : 220D                		xtrct	r0,r2
(2) 1165/ 6000DEA : 337D                		dmuls	r7,r3
(2) 1166/ 6000DEC : 000A                		sts	mach,r0
(2) 1167/ 6000DEE : 031A                		sts	macl,r3
(2) 1168/ 6000DF0 : 230D                		xtrct	r0,r3
(2) 1169/ 6000DF2 :                     
(2) 1170/ 6000DF2 : 6BF6                		mov	@r15+,r11
(2) 1171/ 6000DF4 : 6AF6                		mov	@r15+,r10
(2) 1172/ 6000DF6 : 69F6                		mov	@r15+,r9
(2) 1173/ 6000DF8 : 68F6                		mov	@r15+,r8
(2) 1174/ 6000DFA : 67F6                		mov	@r15+,r7
(2) 1175/ 6000DFC : 66F6                		mov	@r15+,r6
(2) 1176/ 6000DFE : 65F6                		mov	@r15+,r5
(2) 1177/ 6000E00 :                     		
(2) 1178/ 6000E00 :                     	; Set the most far points
(2) 1179/ 6000E00 :                     	; for each direction (X,Y,Z)
(2) 1180/ 6000E00 : 34D7                		cmp/gt	r13,r4
(2) 1181/ 6000E02 : 8B00                		bf	.save_z2
(2) 1182/ 6000E04 : 6D43                		mov	r4,r13
(2) 1183/ 6000E06 :                     .save_z2:
(2) 1184/ 6000E06 : 3457                		cmp/gt	r5,r4
(2) 1185/ 6000E08 : 8900                		bt	.save_z
(2) 1186/ 6000E0A : 6543                		mov	r4,r5
(2) 1187/ 6000E0C :                     .save_z:
(2) 1188/ 6000E0C : 3287                		cmp/gt	r8,r2
(2) 1189/ 6000E0E : 8B00                		bf	.x_lw
(2) 1190/ 6000E10 : 6823                		mov	r2,r8
(2) 1191/ 6000E12 :                     .x_lw:
(2) 1192/ 6000E12 : 3297                		cmp/gt	r9,r2
(2) 1193/ 6000E14 : 8900                		bt	.x_rw
(2) 1194/ 6000E16 : 6923                		mov	r2,r9
(2) 1195/ 6000E18 :                     .x_rw:
(2) 1196/ 6000E18 : 33B7                		cmp/gt	r11,r3
(2) 1197/ 6000E1A : 8B00                		bf	.y_lw
(2) 1198/ 6000E1C : 6B33                		mov	r3,r11
(2) 1199/ 6000E1E :                     .y_lw:
(2) 1200/ 6000E1E : 33C7                		cmp/gt	r12,r3
(2) 1201/ 6000E20 : 8900                		bt	.y_rw
(2) 1202/ 6000E22 : 6C33                		mov	r3,r12
(2) 1203/ 6000E24 :                     .y_rw:
(2) 1204/ 6000E24 :                     
(2) 1205/ 6000E24 : 4F26                		lds	@r15+,pr
(2) 1206/ 6000E26 : 000B                		rts
(2) 1207/ 6000E28 : 0009                		nop
(2) 1208/ 6000E2A :                     		align 4
(2) 1209/ 6000E2C : 0600 5878 000F FFFF 		ltorg
                    0168 0000 FF00      
(2) 1210/ 6000E3A :                     
(2) 1211/ 6000E3A :                     ; ------------------------------
(2) 1212/ 6000E3A :                     ; Rotate point
(2) 1213/ 6000E3A :                     ;
(2) 1214/ 6000E3A :                     ; Entry:
(2) 1215/ 6000E3A :                     ; r5: x
(2) 1216/ 6000E3A :                     ; r6: y
(2) 1217/ 6000E3A :                     ; r0: theta
(2) 1218/ 6000E3A :                     ;
(2) 1219/ 6000E3A :                     ; Returns:
(2) 1220/ 6000E3A :                     ; r7: (x  cos @) + (y sin @)
(2) 1221/ 6000E3A :                     ; r8: (x -sin @) + (y cos @)
(2) 1222/ 6000E3A :                     ; ------------------------------
(2) 1223/ 6000E3A :                     
(2) 1224/ 6000E3A :                     mdlrd_rotate:
(2) 1225/ 6000E3A : 9741                    		mov	#$7FF,r7
(2) 1226/ 6000E3C : 2079                    		and	r7,r0
(2) 1227/ 6000E3E : 4008                   		shll2	r0
(2) 1228/ 6000E40 : D71A                		mov	#sin_table,r7
(2) 1229/ 6000E42 : D81B                		mov	#sin_table+$800,r8
(2) 1230/ 6000E44 : 097E                		mov	@(r0,r7),r9
(2) 1231/ 6000E46 : 0A8E                		mov	@(r0,r8),r10
(2) 1232/ 6000E48 :                     
(2) 1233/ 6000E48 : 3A5D                		dmuls	r5,r10		; x cos @
(2) 1234/ 6000E4A : 071A                		sts	macl,r7
(2) 1235/ 6000E4C : 000A                		sts	mach,r0
(2) 1236/ 6000E4E : 270D                		xtrct	r0,r7
(2) 1237/ 6000E50 : 396D                		dmuls	r6,r9		; y sin @
(2) 1238/ 6000E52 : 081A                		sts	macl,r8
(2) 1239/ 6000E54 : 000A                		sts	mach,r0
(2) 1240/ 6000E56 : 280D                		xtrct	r0,r8
(2) 1241/ 6000E58 : 378C                		add	r8,r7
(2) 1242/ 6000E5A :                     
(2) 1243/ 6000E5A : 699B                		neg	r9,r9
(2) 1244/ 6000E5C : 395D                		dmuls	r5,r9		; x -sin @
(2) 1245/ 6000E5E : 081A                		sts	macl,r8
(2) 1246/ 6000E60 : 000A                		sts	mach,r0
(2) 1247/ 6000E62 : 280D                		xtrct	r0,r8
(2) 1248/ 6000E64 : 3A6D                		dmuls	r6,r10		; y cos @
(2) 1249/ 6000E66 : 091A                		sts	macl,r9
(2) 1250/ 6000E68 : 000A                		sts	mach,r0
(2) 1251/ 6000E6A : 290D                		xtrct	r0,r9
(2) 1252/ 6000E6C : 389C                		add	r9,r8
(2) 1253/ 6000E6E : 000B                 		rts
(2) 1254/ 6000E70 : 0009                		nop
(2) 1255/ 6000E72 :                     		align 4
(2) 1256/ 6000E74 :                     	
(2) 1257/ 6000E74 :                     ; ------------------------------------------------
(2) 1258/ 6000E74 :                     ; MarsVideo_SetWatchdog
(2) 1259/ 6000E74 :                     ; 
(2) 1260/ 6000E74 :                     ; Starts interrupt for drawing the polygon pieces
(2) 1261/ 6000E74 :                     ; ------------------------------------------------
(2) 1262/ 6000E74 :                     
(2) 1263/ 6000E74 :                     MarsVideo_SetWatchdog:
(2) 1264/ 6000E74 : 4F03                		stc	sr,@-r15
(2) 1265/ 6000E76 : 0002                		stc	sr,r0
(2) 1266/ 6000E78 : CBF0                		or	#$F0,r0				; Disable interrupts first
(2) 1267/ 6000E7A : 400E                		ldc	r0,sr
(2) 1268/ 6000E7C : D00D                		mov	#RAM_Mars_VdpDrwList,r0		; Reset the piece-drawing pointer
(2) 1269/ 6000E7E : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)	; on both READ and WRITE pointers
(2) 1270/ 6000E80 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2) 1271/ 6000E82 : E000                		mov	#0,r0				; Reset polygon pieces counter
(2) 1272/ 6000E84 : C10C                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2) 1273/ 6000E86 : D10C                		mov	#Cach_ClrLines,r1		; Line counter for the framebuffer-clear routine
(2) 1274/ 6000E88 : 901B                		mov	#224,r0
(2) 1275/ 6000E8A : 2102                		mov	r0,@r1
(2) 1276/ 6000E8C : E008                		mov	#8,r0				; Set starting watchdog task to $08 (Clear framebuffer)
(2) 1277/ 6000E8E : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2) 1278/ 6000E90 : D10A                		mov	#_vdpreg,r1
(2) 1279/ 6000E92 :                     .wait_fb:
(2) 1280/ 6000E92 : 8515                		mov.w	@($A,r1),r0			; Framebuffer available?
(2) 1281/ 6000E94 : C802                		tst	#2,r0
(2) 1282/ 6000E96 : 8BFC                		bf	.wait_fb
(2) 1283/ 6000E98 : 9014                		mov.w	#$A1,r0				; Pre-start SVDP fill line at address $A1
(2) 1284/ 6000E9A : 8113                		mov.w	r0,@(6,r1)
(2) 1285/ 6000E9C : 9113                		mov	#$FFFFFE80,r1
(2) 1286/ 6000E9E : 9013                		mov.w	#$5AFF,r0			; Watchdog wait timer
(2) 1287/ 6000EA0 : 2101                		mov.w	r0,@r1
(2) 1288/ 6000EA2 : 9012                		mov.w	#$A538,r0			; Enable watchdog
(2) 1289/ 6000EA4 : 2101                		mov.w	r0,@r1
(2) 1290/ 6000EA6 : 4F07                		ldc	@r15+,sr			; Restore interrupts
(2) 1291/ 6000EA8 : 000B                		rts
(2) 1292/ 6000EAA : 0009                		nop
(2) 1293/ 6000EAC :                     		align 4
(2) 1294/ 6000EAC : 0600 1D80 0600 2580 		ltorg
                    0600 D4C0 C000 0764 
                    2000 4100 07FF 00E0 
                    00A1 FE80 5AFF A538 
(2) 1295/ 6000ECC :                     
(1)  557/ 6000ECC :                     		include "system/mars/sound.asm"
(2)    1/ 6000ECC :                     ; ====================================================================
(2)    2/ 6000ECC :                     ; ----------------------------------------------------------------
(2)    3/ 6000ECC :                     ; MARS Sound
(2)    4/ 6000ECC :                     ; ----------------------------------------------------------------
(2)    5/ 6000ECC :                     
(2)    6/ 6000ECC : =$7                 MAX_PWMCHNL	equ	7
(2)    7/ 6000ECC :                     
(2)    8/ 6000ECC :                     ; 32X sound channel
(2)    9/ 6000ECC : (MACRO)             		struct 0
(2)    9/ 6000ECC : =$6000ECC           GLBL_LASTPC     set *
(2)    9/    5644 :                                     dephase
(2)    9/    5644 : =$5644              GLBL_LASTORG    set *
(2)    9/       0 :                                     phase 0
(2)   10/       0 :                     mchnsnd_enbl	ds.l 1
(2)   11/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(2)   12/       8 :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   13/       C :                     mchnsnd_start	ds.l 1
(2)   14/      10 :                     mchnsnd_end	ds.l 1
(2)   15/      14 :                     mchnsnd_loop	ds.l 1
(2)   16/      18 :                     mchnsnd_pitch	ds.l 1
(2)   17/      1C :                     mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   18/      20 :                     mchnsnd_vol	ds.l 1
(2)   19/      24 :                     sizeof_sndchn	ds.l 0
(2)   20/      24 : (MACRO)             		finish
(2)   20/       0 :                                     !org GLBL_LASTORG
(2)   20/ 6000ECC :                                     phase GLBL_LASTPC
(2)   21/ 6000ECC :                     
(2)   22/ 6000ECC :                     ; ====================================================================
(2)   23/ 6000ECC :                     ; ----------------------------------------------------------------
(2)   24/ 6000ECC :                     ; Mars PWM playback (Runs on PWM interrupt)
(2)   25/ 6000ECC :                     ; 
(2)   26/ 6000ECC :                     ; READ/START/END/LOOP points are floating values (xxxxxx.00)
(2)   27/ 6000ECC :                     ; 
(2)   28/ 6000ECC :                     ; r0-r9 only
(2)   29/ 6000ECC :                     ; ----------------------------------------------------------------
(2)   30/ 6000ECC :                     
(2)   31/ 6000ECC :                     ; NUMCHANNELS	equ	4
(2)   32/ 6000ECC :                     ; PWMSIZE		equ	2	; number of elemts in the PWM structure
(2)   33/ 6000ECC :                     ; 
(2)   34/ 6000ECC :                     ; PWMADDRESS	equ	4
(2)   35/ 6000ECC :                     ; 
(2)   36/ 6000ECC :                     ; process_pwm:
(2)   37/ 6000ECC :                     ; 
(2)   38/ 6000ECC :                     
(2)   39/ 6000ECC :                     
(2)   40/ 6000ECC :                     MarsSound_ReadPwm:
(2)   41/ 6000ECC : 2F26                		mov	r2,@-r15
(2)   42/ 6000ECE : 2F36                		mov	r3,@-r15
(2)   43/ 6000ED0 : 2F46                		mov	r4,@-r15
(2)   44/ 6000ED2 : 2F56                		mov	r5,@-r15
(2)   45/ 6000ED4 : 2F66                		mov	r6,@-r15
(2)   46/ 6000ED6 : 2F76                		mov	r7,@-r15
(2)   47/ 6000ED8 : 2F86                		mov	r8,@-r15
(2)   48/ 6000EDA : 2F96                		mov	r9,@-r15
(2)   49/ 6000EDC :                     
(2)   50/ 6000EDC :                     .retry:
(2)   51/ 6000EDC : E500                		mov 	#0,r5			; LEFT start
(2)   52/ 6000EDE : E600                		mov 	#0,r6			; RIGHT start
(2)   53/ 6000EE0 : D825                		mov	#MarsSnd_PwmChnls,r8
(2)   54/ 6000EE2 : E707                		mov 	#MAX_PWMCHNL,r7
(2)   55/ 6000EE4 :                     .loop:
(2)   56/ 6000EE4 : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)   57/ 6000EE6 : 8800                		cmp/eq	#0,r0
(2)   58/ 6000EE8 : 8B03                		bf	.on
(2)   59/ 6000EEA :                     .silent:
(2)   60/ 6000EEA : E07F                		mov	#$7F,r0
(2)   61/ 6000EEC : 6203                		mov	r0,r2
(2)   62/ 6000EEE : A026                		bra	.skip
(2)   63/ 6000EF0 : 6103                		mov	r0,r1
(2)   64/ 6000EF2 :                     .on:
(2)   65/ 6000EF2 : 5481                		mov 	@(mchnsnd_read,r8),r4
(2)   66/ 6000EF4 : 5084                		mov 	@(mchnsnd_end,r8),r0
(2)   67/ 6000EF6 : 3403                		cmp/ge	r0,r4
(2)   68/ 6000EF8 : 8B09                		bf	.read
(2)   69/ 6000EFA : 5085                		mov 	@(mchnsnd_loop,r8),r0
(2)   70/ 6000EFC : 88FF                		cmp/eq	#-1,r0
(2)   71/ 6000EFE : 8B04                		bf	.loop_me
(2)   72/ 6000F00 : E000                		mov 	#0,r0
(2)   73/ 6000F02 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)   74/ 6000F04 : 5483                		mov 	@(mchnsnd_start,r8),r4
(2)   75/ 6000F06 : AFF0                		bra	.silent
(2)   76/ 6000F08 : 0009                		nop
(2)   77/ 6000F0A :                     .loop_me:
(2)   78/ 6000F0A : 5483                		mov 	@(mchnsnd_start,r8),r4
(2)   79/ 6000F0C : 340C                		add	r0,r4
(2)   80/ 6000F0E :                     		
(2)   81/ 6000F0E :                     ; read wave
(2)   82/ 6000F0E :                     .read:
(2)   83/ 6000F0E : 5087                		mov 	@(mchnsnd_flags,r8),r0
(2)   84/ 6000F10 : D11A                		mov	#$00FFFFFF,r1
(2)   85/ 6000F12 : 6343                		mov 	r4,r3
(2)   86/ 6000F14 : 4319                		shlr8	r3
(2)   87/ 6000F16 : C804                		tst	#%100,r0
(2)   88/ 6000F18 : 8900                		bt	.mono_a
(2)   89/ 6000F1A : 71FF                		add	#-1,r1
(2)   90/ 6000F1C :                     .mono_a
(2)   91/ 6000F1C : 2319                		and	r1,r3
(2)   92/ 6000F1E : 5182                		mov 	@(mchnsnd_bank,r8),r1
(2)   93/ 6000F20 : 231B                		or	r1,r3
(2)   94/ 6000F22 : 6134                		mov.b	@r3+,r1
(2)   95/ 6000F24 : 6213                		mov	r1,r2
(2)   96/ 6000F26 : C804                		tst	#%100,r0
(2)   97/ 6000F28 : 8900                		bt	.mono
(2)   98/ 6000F2A : 6234                		mov.b	@r3+,r2
(2)   99/ 6000F2C :                     .mono:
(2)  100/ 6000F2C : 9326                		mov	#$FF,r3
(2)  101/ 6000F2E : 2139                		and	r3,r1
(2)  102/ 6000F30 : 2239                		and	r3,r2
(2)  103/ 6000F32 :                     	; volume goes here...
(2)  104/ 6000F32 : 5386                		mov 	@(mchnsnd_pitch,r8),r3
(2)  105/ 6000F34 : C804                		tst	#%100,r0
(2)  106/ 6000F36 : 8900                		bt	.mono_i
(2)  107/ 6000F38 : 4300                		shll	r3		
(2)  108/ 6000F3A :                     .mono_i:
(2)  109/ 6000F3A : 343C                		add	r3,r4
(2)  110/ 6000F3C : 1841                		mov	r4,@(mchnsnd_read,r8)
(2)  111/ 6000F3E :                     .skip:
(2)  112/ 6000F3E : 7101                		add	#1,r1
(2)  113/ 6000F40 : 7201                		add	#1,r2
(2)  114/ 6000F42 : 351C                		add	r1,r5
(2)  115/ 6000F44 : 362C                		add	r2,r6
(2)  116/ 6000F46 : 7824                		add	#sizeof_sndchn,r8
(2)  117/ 6000F48 : 4710                		dt	r7
(2)  118/ 6000F4A : 8BCB                		bf	.loop
(2)  119/ 6000F4C :                     		
(2)  120/ 6000F4C :                     	; ***This check is for emus only***
(2)  121/ 6000F4C :                     	; It recreates what happens to the PWM
(2)  122/ 6000F4C :                     	; in real hardware when it overflows
(2)  123/ 6000F4C : 901C                		mov	#$3FF,r0
(2)  124/ 6000F4E : 3507                		cmp/gt	r0,r5
(2)  125/ 6000F50 : 8B00                		bf	.lmuch
(2)  126/ 6000F52 : 6503                		mov	r0,r5
(2)  127/ 6000F54 : 3607                .lmuch:		cmp/gt	r0,r6
(2)  128/ 6000F56 : 8B00                		bf	.rmuch
(2)  129/ 6000F58 : 6603                		mov	r0,r6
(2)  130/ 6000F5A :                     .rmuch:			
(2)  131/ 6000F5A : D309                		mov	#_sysreg+lchwidth,r3
(2)  132/ 6000F5C : D409                		mov	#_sysreg+rchwidth,r4
(2)  133/ 6000F5E : 2351                 		mov.w	r5,@r3
(2)  134/ 6000F60 : 2461                 		mov.w	r6,@r4
(2)  135/ 6000F62 :                     ; 		mov	#_sysreg+monowidth,r3	; Not needed on HW
(2)  136/ 6000F62 :                     ; 		mov.b	@r3,r0
(2)  137/ 6000F62 :                     ; 		tst	#$80,r0
(2)  138/ 6000F62 :                     ; 		bf	.retry
(2)  139/ 6000F62 :                     ; 		mov	#_sysreg+comm4,r3
(2)  140/ 6000F62 :                     ;  		mov.w	r5,@r3
(2)  141/ 6000F62 :                     ;  		mov	r6,r0
(2)  142/ 6000F62 :                     ;  		mov.w	r0,@(2,r3)
(2)  143/ 6000F62 :                      		
(2)  144/ 6000F62 : 69F6                		mov	@r15+,r9
(2)  145/ 6000F64 : 68F6                		mov	@r15+,r8
(2)  146/ 6000F66 : 67F6                		mov	@r15+,r7
(2)  147/ 6000F68 : 66F6                		mov	@r15+,r6
(2)  148/ 6000F6A : 65F6                		mov	@r15+,r5
(2)  149/ 6000F6C : 64F6                		mov	@r15+,r4
(2)  150/ 6000F6E : 63F6                		mov	@r15+,r3
(2)  151/ 6000F70 : 62F6                		mov	@r15+,r2
(2)  152/ 6000F72 : 000B                		rts
(2)  153/ 6000F74 : 0009                		nop
(2)  154/ 6000F76 :                     		align 4
(2)  155/ 6000F78 : 0601 67C4 00FF FFFF 		ltorg
                    2000 4034 2000 4036 
                    03FF                
(2)  156/ 6000F8A :                     
(2)  157/ 6000F8A :                     ; ====================================================================
(2)  158/ 6000F8A :                     ; ----------------------------------------------------------------
(2)  159/ 6000F8A :                     ; Mars PWM control (Runs on VBlank)
(2)  160/ 6000F8A :                     ; ----------------------------------------------------------------
(2)  161/ 6000F8A :                     
(2)  162/ 6000F8A :                     MarsSound_Run:
(2)  163/ 6000F8A : 4F22                		sts	pr,@-r15
(2)  164/ 6000F8C :                     
(2)  165/ 6000F8C : 4F26                		lds	@r15+,pr
(2)  166/ 6000F8E : 000B                		rts
(2)  167/ 6000F90 : 0009                		nop
(2)  168/ 6000F92 :                     		align 4
(2)  169/ 6000F94 :                     
(2)  170/ 6000F94 :                     ; ====================================================================
(2)  171/ 6000F94 :                     ; ----------------------------------------------------------------
(2)  172/ 6000F94 :                     ; Subroutines
(2)  173/ 6000F94 :                     ; ----------------------------------------------------------------
(2)  174/ 6000F94 :                     
(2)  175/ 6000F94 :                     ; --------------------------------------------------------
(2)  176/ 6000F94 :                     ; Init Sound PWM
(2)  177/ 6000F94 :                     ; 
(2)  178/ 6000F94 :                     ; Frequency values:
(2)  179/ 6000F94 :                     ; 23011361 NTSC
(2)  180/ 6000F94 :                     ; 22801467 PAL
(2)  181/ 6000F94 :                     ; 
(2)  182/ 6000F94 :                     ; NOTE: cycle causes a CLICK to sound
(2)  183/ 6000F94 :                     ; --------------------------------------------------------
(2)  184/ 6000F94 :                     
(2)  185/ 6000F94 :                     MarsSound_Init:
(2)  186/ 6000F94 : 4F22                		sts	pr,@-r15
(2)  187/ 6000F96 : 4F13                		stc	gbr,@-r15
(2)  188/ 6000F98 : D03A                		mov	#_sysreg,r0
(2)  189/ 6000F9A : 401E                		ldc	r0,gbr
(2)  190/ 6000F9C : 907E                		mov	#$0105,r0
(2)  191/ 6000F9E : C118                		mov.w	r0,@(timerctl,gbr)
(2)  192/ 6000FA0 : 907D                		mov	#((((23011361<<1)/22050+1)>>1)+1),r0	; 22050 best
(2)  193/ 6000FA2 : C119                		mov.w	r0,@(cycle,gbr)
(2)  194/ 6000FA4 : E001                		mov	#1,r0
(2)  195/ 6000FA6 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)  196/ 6000FA8 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)  197/ 6000FAA : C11C                		mov.w	r0,@(monowidth,gbr)
(2)  198/ 6000FAC :                     
(2)  199/ 6000FAC : E000                		mov	#0,r0
(2)  200/ 6000FAE : D136                		mov	#MarsSnd_PwmChnls,r1
(2)  201/ 6000FB0 : E207                		mov	#MAX_PWMCHNL,r2
(2)  202/ 6000FB2 : E324                		mov	#sizeof_sndchn,r3
(2)  203/ 6000FB4 :                     .clr_enbl:
(2)  204/ 6000FB4 : 1100                		mov	r0,@(mchnsnd_enbl,r1)
(2)  205/ 6000FB6 : 4210                		dt	r2
(2)  206/ 6000FB8 : 8FFC                		bf/s	.clr_enbl
(2)  207/ 6000FBA : 313C                		add	r3,r1
(2)  208/ 6000FBC : 4F17                		ldc	@r15+,gbr
(2)  209/ 6000FBE : 4F26                		lds	@r15+,pr
(2)  210/ 6000FC0 : 000B                		rts
(2)  211/ 6000FC2 : 0009                		nop
(2)  212/ 6000FC4 :                     		align 4
(2)  213/ 6000FC4 :                     
(2)  214/ 6000FC4 :                     ; --------------------------------------------------------
(2)  215/ 6000FC4 :                     ; MarsSound_SetPwm
(2)  216/ 6000FC4 :                     ; 
(2)  217/ 6000FC4 :                     ; Set new sound data to a single channel
(2)  218/ 6000FC4 :                     ; 
(2)  219/ 6000FC4 :                     ; Input:
(2)  220/ 6000FC4 :                     ; r1 | Channel
(2)  221/ 6000FC4 :                     ; r2 | Start address
(2)  222/ 6000FC4 :                     ; r3 | End address
(2)  223/ 6000FC4 :                     ; r4 | Loop address (-1, dont loop)
(2)  224/ 6000FC4 :                     ; r5 | Pitch ($xxxxxx.xx)
(2)  225/ 6000FC4 :                     ; r6 | Volume
(2)  226/ 6000FC4 :                     ; r7 | Flags (Currently: %xxxxxxLR)
(2)  227/ 6000FC4 :                     ; 
(2)  228/ 6000FC4 :                     ; Uses:
(2)  229/ 6000FC4 :                     ; r0,r8-r9
(2)  230/ 6000FC4 :                     ; --------------------------------------------------------
(2)  231/ 6000FC4 :                     
(2)  232/ 6000FC4 :                     MarsSound_SetPwm:
(2)  233/ 6000FC4 : 0902                		stc	sr,r9
(2)  234/ 6000FC6 : 906B                		mov	#$F0,r0
(2)  235/ 6000FC8 : 400E                		ldc	r0,sr
(2)  236/ 6000FCA : D830                		mov	#MarsSnd_PwmChnls,r8
(2)  237/ 6000FCC : E024                		mov 	#sizeof_sndchn,r0
(2)  238/ 6000FCE : 201E                		mulu	r1,r0
(2)  239/ 6000FD0 : 001A                		sts	macl,r0
(2)  240/ 6000FD2 : 380C                		add 	r0,r8
(2)  241/ 6000FD4 : E000                		mov 	#0,r0
(2)  242/ 6000FD6 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  243/ 6000FD8 : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  244/ 6000FDA : 1802                		mov 	r0,@(mchnsnd_bank,r8)
(2)  245/ 6000FDC :                     		
(2)  246/ 6000FDC : 1856                		mov 	r5,@(mchnsnd_pitch,r8)
(2)  247/ 6000FDE : 1868                		mov 	r6,@(mchnsnd_vol,r8)		
(2)  248/ 6000FE0 : 1877                		mov 	r7,@(mchnsnd_flags,r8)
(2)  249/ 6000FE2 : 6023                		mov 	r2,r0				; Set MSB
(2)  250/ 6000FE4 : D72A                		mov 	#$FF000000,r7
(2)  251/ 6000FE6 : 2079                		and 	r7,r0
(2)  252/ 6000FE8 : 1802                		mov 	r0,@(mchnsnd_bank,r8)
(2)  253/ 6000FEA : 6043                		mov 	r4,r0				; Set POINTS
(2)  254/ 6000FEC : 88FF                		cmp/eq	#-1,r0
(2)  255/ 6000FEE : 8900                		bt	.endmrk
(2)  256/ 6000FF0 : 4018                		shll8	r0
(2)  257/ 6000FF2 :                     .endmrk:
(2)  258/ 6000FF2 : 1805                		mov	r0,@(mchnsnd_loop,r8)
(2)  259/ 6000FF4 : 6033                		mov 	r3,r0
(2)  260/ 6000FF6 : 4018                		shll8	r0
(2)  261/ 6000FF8 : 1804                		mov	r0,@(mchnsnd_end,r8)
(2)  262/ 6000FFA : 6023                		mov 	r2,r0
(2)  263/ 6000FFC : 4018                		shll8	r0
(2)  264/ 6000FFE : 1803                		mov 	r0,@(mchnsnd_start,r8)	
(2)  265/ 6001000 : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  266/ 6001002 : E001                		mov 	#1,r0
(2)  267/ 6001004 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  268/ 6001006 : 490E                 		ldc	r9,sr
(2)  269/ 6001008 : 000B                		rts
(2)  270/ 600100A : 0009                		nop
(2)  271/ 600100C :                     		align 4
(2)  272/ 600100C :                     
(2)  273/ 600100C :                     ; --------------------------------------------------------
(2)  274/ 600100C :                     ; MarsSound_MulPwmPitch
(2)  275/ 600100C :                     ; 
(2)  276/ 600100C :                     ; Set pitch data to 8 consecutive sound channels
(2)  277/ 600100C :                     ; starting from specific slot
(2)  278/ 600100C :                     ; 
(2)  279/ 600100C :                     ; Input:
(2)  280/ 600100C :                     ; r1 | Channel pitch slot 0
(2)  281/ 600100C :                     ; r2 | Pitch data
(2)  282/ 600100C :                     ; 
(2)  283/ 600100C :                     ; Uses:
(2)  284/ 600100C :                     ; r3,r4
(2)  285/ 600100C :                     ; --------------------------------------------------------
(2)  286/ 600100C :                     
(2)  287/ 600100C :                     MarsSound_SetPwmPitch:
(2)  288/ 600100C : 0902                		stc	sr,r9
(2)  289/ 600100E : 9047                		mov	#$F0,r0
(2)  290/ 6001010 : 400E                		ldc	r0,sr
(2)  291/ 6001012 : D820                		mov	#MarsSnd_PwmChnls,r8
(2)  292/ 6001014 : E024                		mov 	#sizeof_sndchn,r0
(2)  293/ 6001016 : 201E                		mulu	r1,r0
(2)  294/ 6001018 : 001A                		sts	macl,r0
(2)  295/ 600101A : 380C                		add 	r0,r8
(2)  296/ 600101C :                     
(2)  297/ 600101C : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  298/ 600101E : 8801                		cmp/eq	#1,r0
(2)  299/ 6001020 : 8B01                		bf	.off_1
(2)  300/ 6001022 : 5081                		mov	@(mchnsnd_read,r8),r0
(2)  301/ 6001024 :                     ; 		mov	#$FFFFFF00,r1
(2)  302/ 6001024 :                     ; 		and	r1,r0
(2)  303/ 6001024 :                     ; 		mov	r0,@(mchnsnd_read,r8)
(2)  304/ 6001024 : 1826                		mov	r2,@(mchnsnd_pitch,r8)
(2)  305/ 6001026 :                     .off_1:
(2)  306/ 6001026 : 490E                 		ldc	r9,sr
(2)  307/ 6001028 : 000B                		rts
(2)  308/ 600102A : 0009                		nop
(2)  309/ 600102C :                     		align 4
(2)  310/ 600102C :                     
(2)  311/ 600102C :                     ; --------------------------------------------------------
(2)  312/ 600102C :                     ; MarsSound_MulPwmPitch
(2)  313/ 600102C :                     ; 
(2)  314/ 600102C :                     ; Set pitch data to 8 consecutive sound channels
(2)  315/ 600102C :                     ; starting from specific slot
(2)  316/ 600102C :                     ; 
(2)  317/ 600102C :                     ; Input:
(2)  318/ 600102C :                     ; r1 | Channel pitch slot 0
(2)  319/ 600102C :                     ; r2 | Pitch data
(2)  320/ 600102C :                     ; 
(2)  321/ 600102C :                     ; Uses:
(2)  322/ 600102C :                     ; r3,r4
(2)  323/ 600102C :                     ; --------------------------------------------------------
(2)  324/ 600102C :                     
(2)  325/ 600102C :                     MarsSound_PwmEnable:
(2)  326/ 600102C : 0902                		stc	sr,r9
(2)  327/ 600102E : 9037                		mov	#$F0,r0
(2)  328/ 6001030 : 400E                		ldc	r0,sr
(2)  329/ 6001032 : D819                		mov	#MarsSnd_PwmChnls,r8
(2)  330/ 6001034 : E024                		mov 	#sizeof_sndchn,r0
(2)  331/ 6001036 : 201E                		mulu	r1,r0
(2)  332/ 6001038 : 001A                		sts	macl,r0
(2)  333/ 600103A : 380C                		add 	r0,r8
(2)  334/ 600103C :                     
(2)  335/ 600103C : 1820                		mov	r2,@(mchnsnd_enbl,r8)
(2)  336/ 600103E : 490E                 		ldc	r9,sr
(2)  337/ 6001040 : 000B                		rts
(2)  338/ 6001042 : 0009                		nop
(2)  339/ 6001044 :                     		align 4
(2)  340/ 6001044 :                     		
(2)  341/ 6001044 :                     ; ====================================================================
(2)  342/ 6001044 :                     
(2)  343/ 6001044 :                     		include "data/sound/instr_sdram.asm"
(3)    1/ 6001044 :                     ; ====================================================================
(3)    2/ 6001044 :                     ; ----------------------------------------------------------------
(3)    3/ 6001044 :                     ; PWM Instruments
(3)    4/ 6001044 :                     ; Stored on 32X's SDRAM area
(3)    5/ 6001044 :                     ; but sample data is stored on the 32X's ROM view area
(3)    6/ 6001044 :                     ; ----------------------------------------------------------------
(3)    7/ 6001044 :                     
(3)    8/ 6001044 :                     PwmIns_SPHEAVY1:
(3)    9/ 6001044 : 0225 C2D8           		dc.l PwmInsWav_SPHEAVY1
(3)   10/ 6001048 : 0225 D0AC           		dc.l PwmInsWav_SPHEAVY1_e
(3)   11/ 600104C : FFFF FFFF           		dc.l -1
(3)   12/ 6001050 : 0000 0003           		dc.l %11
(3)   13/ 6001054 :                     PwmIns_MCLSTRNG:
(3)   14/ 6001054 : 0225 D0AC           		dc.l PwmInsWav_MCLSTRNG
(3)   15/ 6001058 : 0225 DF90           		dc.l PwmInsWav_MCLSTRNG_e
(3)   16/ 600105C : FFFF FFFF           		dc.l -1
(3)   17/ 6001060 : 0000 0003           		dc.l %11
(3)   18/ 6001064 :                     PwmIns_WHODSNARE:
(3)   19/ 6001064 : 0225 DF90           		dc.l PwmInsWav_WHODSNARE
(3)   20/ 6001068 : 0225 FF14           		dc.l PwmInsWav_WHODSNARE_e
(3)   21/ 600106C : FFFF FFFF           		dc.l -1
(3)   22/ 6001070 : 0000 0003           		dc.l %11
(3)   23/ 6001074 :                     PwmIns_TECHNOBASSD:
(3)   24/ 6001074 : 0225 FF14           		dc.l PwmInsWav_TECHNOBASSD
(3)   25/ 6001078 : 0226 0567           		dc.l PwmInsWav_TECHNOBASSD_e
(3)   26/ 600107C : FFFF FFFF           		dc.l -1
(3)   27/ 6001080 : 0000 0003           		dc.l %11
(3)   28/ 6001084 :                     
(2)  344/ 6001084 :                     
(2)  345/ 6001084 :                     ; ====================================================================
(2)  346/ 6001084 :                     
(2)  347/ 6001084 : 2000 4000 0601 67C4 		ltorg			; Save literals
                    0601 67C4 FF00 0000 
                    0601 67C4 0601 67C4 
                    0105 0415 00F0      
(2)  348/ 60010A2 :                     
(1)  558/ 60010A2 :                     		align 4
(1)  559/ 60010A4 :                     
(1)  560/ 60010A4 :                     ; ====================================================================
(1)  561/ 60010A4 :                     ; ----------------------------------------------------------------
(1)  562/ 60010A4 :                     ; Master entry
(1)  563/ 60010A4 :                     ; ----------------------------------------------------------------
(1)  564/ 60010A4 :                     
(1)  565/ 60010A4 :                     		align 4
(1)  566/ 60010A4 :                     SH2_M_Entry:
(1)  567/ 60010A4 : DF56                		mov	#CS3|$40000,r15			; Set default Stack for Master
(1)  568/ 60010A6 : 91D1                		mov	#_FRT,r1
(1)  569/ 60010A8 : E000                		mov     #0,r0
(1)  570/ 60010AA : 8010                		mov.b   r0,@(0,r1)
(1)  571/ 60010AC : E0E2                		mov     #$FFFFFFE2,r0
(1)  572/ 60010AE : 8017                		mov.b   r0,@(7,r1)
(1)  573/ 60010B0 : E000                		mov     #0,r0
(1)  574/ 60010B2 : 8014                		mov.b   r0,@(4,r1)
(1)  575/ 60010B4 : E001                		mov     #1,r0
(1)  576/ 60010B6 : 8015                		mov.b   r0,@(5,r1)
(1)  577/ 60010B8 : E000                		mov     #0,r0
(1)  578/ 60010BA : 8016                		mov.b   r0,@(6,r1)
(1)  579/ 60010BC : E001                		mov     #1,r0
(1)  580/ 60010BE : 8011                		mov.b   r0,@(1,r1)
(1)  581/ 60010C0 : E000                		mov     #0,r0
(1)  582/ 60010C2 : 8013                		mov.b   r0,@(3,r1)
(1)  583/ 60010C4 : 8012                		mov.b   r0,@(2,r1)
(1)  584/ 60010C6 : 90C2                		mov.l   #$FFFFFEE2,r0			; Init special interrupt
(1)  585/ 60010C8 : E150                		mov     #$50,r1
(1)  586/ 60010CA : 2011                		mov.w   r1,@r0
(1)  587/ 60010CC : 90C0                		mov.l   #$FFFFFEE4,r0
(1)  588/ 60010CE : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer (VBR + this/4)
(1)  589/ 60010D0 : 4118                		shll8   r1
(1)  590/ 60010D2 : 2011                		mov.w   r1,@r0
(1)  591/ 60010D4 :                     
(1)  592/ 60010D4 :                     ; ------------------------------------------------
(1)  593/ 60010D4 :                     ; Wait for Genesis and Slave CPU
(1)  594/ 60010D4 :                     ; ------------------------------------------------
(1)  595/ 60010D4 :                     
(1)  596/ 60010D4 :                     .wait_md:
(1)  597/ 60010D4 : D24B                		mov 	#_sysreg+comm0,r2		; Wait for Genesis
(1)  598/ 60010D6 : 6022                		mov.l	@r2,r0
(1)  599/ 60010D8 : 8800                		cmp/eq	#0,r0
(1)  600/ 60010DA : 8BFB                		bf	.wait_md
(1)  601/ 60010DC : D14A                		mov.l	#"SLAV",r1
(1)  602/ 60010DE :                     .wait_slave:
(1)  603/ 60010DE : 5022                		mov.l	@(8,r2),r0			; Wait for Slave CPU to finish booting
(1)  604/ 60010E0 : 3010                		cmp/eq	r1,r0
(1)  605/ 60010E2 : 8BFC                		bf	.wait_slave
(1)  606/ 60010E4 : E000                		mov.l	#0,r0				; clear "SLAV"
(1)  607/ 60010E6 : 1202                		mov.l	r0,@(8,r2)
(1)  608/ 60010E8 : 2202                		mov.l	r0,@r2
(1)  609/ 60010EA :                     		
(1)  610/ 60010EA :                     ; ====================================================================
(1)  611/ 60010EA :                     ; ----------------------------------------------------------------
(1)  612/ 60010EA :                     ; Master main code
(1)  613/ 60010EA :                     ; 
(1)  614/ 60010EA :                     ; This CPU is exclusively used for drawing polygons, to interact
(1)  615/ 60010EA :                     ; with models use the Slave CPU instead.
(1)  616/ 60010EA :                     ; ----------------------------------------------------------------
(1)  617/ 60010EA :                     
(1)  618/ 60010EA :                     SH2_M_HotStart:
(1)  619/ 60010EA : DF45                		mov	#CS3|$40000,r15				; Stack again if coming from RESET
(1)  620/ 60010EC : DE47                		mov	#RAM_Mars_Global,r14			; GBR - Global values/variables
(1)  621/ 60010EE : 4E1E                		ldc	r14,gbr
(1)  622/ 60010F0 : 90AF                		mov	#$F0,r0					; Interrupts OFF
(1)  623/ 60010F2 : 400E                		ldc	r0,sr
(1)  624/ 60010F4 : 91AE                		mov	#_CCR,r1
(1)  625/ 60010F6 : E000                		mov	#0,r0					; Cache OFF
(1)  626/ 60010F8 : 2101                		mov.w	r0,@r1
(1)  627/ 60010FA : E019                		mov	#%00011001,r0				; Cache purge / Two-way mode / Cache ON
(1)  628/ 60010FC : 2101                		mov.w	r0,@r1
(1)  629/ 60010FE : D144                		mov	#_sysreg,r1
(1)  630/ 6001100 : E00B                		mov	#VIRQ_ON|CMDIRQ_ON|PWMIRQ_ON,r0		; Enable these interrupts		
(1)  631/ 6001102 : 8011                    		mov.b	r0,@(intmask,r1)
(1)  632/ 6001104 : D143                		mov 	#CACHE_MASTER,r1			; Load 3D Routines on CACHE	
(1)  633/ 6001106 : D244                		mov 	#$C0000000,r2				; Those run more faster here supposedly...
(1)  634/ 6001108 : 93A5                		mov 	#(CACHE_MASTER_E-CACHE_MASTER)/4,r3
(1)  635/ 600110A :                     .copy:
(1)  636/ 600110A : 6016                		mov 	@r1+,r0
(1)  637/ 600110C : 2202                		mov 	r0,@r2
(1)  638/ 600110E : 7204                		add 	#4,r2
(1)  639/ 6001110 : 4310                		dt	r3
(1)  640/ 6001112 : 8BFA                		bf	.copy
(1)  641/ 6001114 :                     		
(1)  642/ 6001114 :                     ; ------------------------------------------------
(1)  643/ 6001114 :                     
(1)  644/ 6001114 : D041                		mov	#MarsVideo_Init,r0		; Init Video
(1)  645/ 6001116 : 400B                		jsr	@r0
(1)  646/ 6001118 : 0009                		nop
(1)  647/ 600111A : BF3B                		bsr	MarsSound_Init			; Init Sound
(1)  648/ 600111C : 0009                		nop
(1)  649/ 600111E :                     		
(1)  650/ 600111E :                     ; ------------------------------------------------
(1)  651/ 600111E :                     
(1)  652/ 600111E : 9199                		mov	#_CCR,r1
(1)  653/ 6001120 : E008                		mov	#%00001000,r0		; Two-way mode
(1)  654/ 6001122 : 2101                		mov.w	r0,@r1
(1)  655/ 6001124 : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1)  656/ 6001126 : 2101                		mov.w	r0,@r1
(1)  657/ 6001128 : E020                		mov.l	#$20,r0			; Interrupts ON
(1)  658/ 600112A : 400E                		ldc	r0,sr
(1)  659/ 600112C :                     
(1)  660/ 600112C :                     ; --------------------------------------------------------
(1)  661/ 600112C :                     ; Loop
(1)  662/ 600112C :                     ; --------------------------------------------------------
(1)  663/ 600112C :                     
(1)  664/ 600112C :                     master_loop:
(1)  665/ 600112C :                     	; --------------------
(1)  666/ 600112C :                     	; DEBUG counter
(1)  667/ 600112C : D435                		mov	#_sysreg+comm0,r4	; DEBUG COUNTER
(1)  668/ 600112E : 6040                		mov.b	@r4,r0
(1)  669/ 6001130 : 7001                		add	#1,r0
(1)  670/ 6001132 : 2400                		mov.b	r0,@r4
(1)  671/ 6001134 :                     	; --------------------
(1)  672/ 6001134 :                     	
(1)  673/ 6001134 : D13A                		mov	#_sysreg+comm14,r1
(1)  674/ 6001136 : 6010                		mov.b	@r1,r0			; Any request from Slave?
(1)  675/ 6001138 : 6203                		mov	r0,r2
(1)  676/ 600113A : C980                		and 	#$80,r0
(1)  677/ 600113C : 8800                		cmp/eq	#0,r0
(1)  678/ 600113E : 8B0D                		bf	.md_req
(1)  679/ 6001140 : 6023                		mov	r2,r0
(1)  680/ 6001142 : C97F                		and	#$7F,r0
(1)  681/ 6001144 : 4008                		shll2	r0
(1)  682/ 6001146 : D137                		mov	#.list,r1
(1)  683/ 6001148 : 001E                		mov	@(r1,r0),r0
(1)  684/ 600114A : 402B                		jmp	@r0
(1)  685/ 600114C : 0009                		nop
(1)  686/ 600114E :                     		align 4
(1)  687/ 6001150 :                     
(1)  688/ 6001150 :                     ; ------------------------------------------------
(1)  689/ 6001150 :                     ; Graphic processing list for Master
(1)  690/ 6001150 :                     ; ------------------------------------------------
(1)  691/ 6001150 :                     
(1)  692/ 6001150 :                     .list:
(1)  693/ 6001150 : 0600 112C           		dc.l master_loop
(1)  694/ 6001154 : 0600 118E           		dc.l .draw_objects
(1)  695/ 6001158 : 0600 112C           		dc.l master_loop
(1)  696/ 600115C :                     
(1)  697/ 600115C :                     ; ------------------------------------------------
(1)  698/ 600115C :                     ; Process Visual/Audio requests from Genesis
(1)  699/ 600115C :                     ; ------------------------------------------------
(1)  700/ 600115C :                     
(1)  701/ 600115C :                     .md_req:
(1)  702/ 600115C : 4F03                		stc	sr,@-r15
(1)  703/ 600115E : 9078                		mov	#$F0,r0
(1)  704/ 6001160 : 400E                		ldc	r0,sr
(1)  705/ 6001162 : ED10                		mov	#MAX_MDTASKS,r13
(1)  706/ 6001164 : DE30                		mov	#RAM_Mars_MdTasksFifo_M,r14
(1)  707/ 6001166 :                     .next_req:
(1)  708/ 6001166 : 2FD6                		mov	r13,@-r15
(1)  709/ 6001168 : 60E2                		mov	@r14,r0
(1)  710/ 600116A : 8800                		cmp/eq	#0,r0
(1)  711/ 600116C : 8903                		bt	.no_task
(1)  712/ 600116E : 400B                		jsr	@r0
(1)  713/ 6001170 : 0009                		nop
(1)  714/ 6001172 : 200A                		xor	r0,r0
(1)  715/ 6001174 : 2E02                		mov	r0,@r14
(1)  716/ 6001176 :                     .no_task:
(1)  717/ 6001176 : E020                		mov	#MAX_MDTSKARG*4,r0
(1)  718/ 6001178 : 6DF6                		mov	@r15+,r13
(1)  719/ 600117A : 4D10                		dt	r13
(1)  720/ 600117C : 8FF3                		bf/s	.next_req
(1)  721/ 600117E : 3E0C                		add	r0,r14
(1)  722/ 6001180 : D127                		mov	#_sysreg+comm14,r1
(1)  723/ 6001182 : 6010                		mov.b	@r1,r0
(1)  724/ 6001184 : C97F                		and	#$7F,r0
(1)  725/ 6001186 : 2100                		mov.b	r0,@r1
(1)  726/ 6001188 : 4F07                		ldc 	@r15+,sr
(1)  727/ 600118A : AFCF                		bra	master_loop
(1)  728/ 600118C : 0009                		nop
(1)  729/ 600118E :                     
(1)  730/ 600118E :                     ; --------------------------------------------------------
(1)  731/ 600118E :                     ; Start building and drawing polygons
(1)  732/ 600118E :                     ; --------------------------------------------------------
(1)  733/ 600118E :                     
(1)  734/ 600118E :                     .draw_objects:
(1)  735/ 600118E : 9061                		mov	#$FFFFFE92,r0
(1)  736/ 6001190 : E108                		mov	#8,r1
(1)  737/ 6001192 : 2010                		mov.b	r1,@r0
(1)  738/ 6001194 : E119                		mov	#$19,r1
(1)  739/ 6001196 : 2010                		mov.b	r1,@r0
(1)  740/ 6001198 : D024                		mov	#MarsVideo_SetWatchdog,r0
(1)  741/ 600119A : 400B                		jsr	@r0
(1)  742/ 600119C : 0009                		nop
(1)  743/ 600119E :                     		
(1)  744/ 600119E :                     	; While we are doing this, the watchdog is
(1)  745/ 600119E :                     	; working on the background drawing the polygons
(1)  746/ 600119E :                     	; using the "pieces" list
(1)  747/ 600119E :                     	; 
(1)  748/ 600119E :                     	; r14 - Polygon pointers list
(1)  749/ 600119E :                     	; r13 - Number of polygons to build
(1)  750/ 600119E : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0	; Start drawing polygons from the READ buffer
(1)  751/ 60011A0 : C801                		tst     #1,r0				; Check for which buffer to use
(1)  752/ 60011A2 : 8903                		bt	.page_2
(1)  753/ 60011A4 : DE22                		mov 	#RAM_Mars_PlgnList_0,r14
(1)  754/ 60011A6 : DD23                		mov	#RAM_Mars_PlgnNum_0,r13
(1)  755/ 60011A8 : A002                		bra	.cont_plgn
(1)  756/ 60011AA : 0009                		nop
(1)  757/ 60011AC :                     .page_2:
(1)  758/ 60011AC : DE22                		mov 	#RAM_Mars_PlgnList_1,r14
(1)  759/ 60011AE : DD23                		mov	#RAM_Mars_PlgnNum_1,r13
(1)  760/ 60011B0 :                     .cont_plgn:
(1)  761/ 60011B0 : 6DD1                		mov.w	@r13,r13
(1)  762/ 60011B2 : 4D15                		cmp/pl	r13
(1)  763/ 60011B4 : 8B0C                		bf	.skip
(1)  764/ 60011B6 :                     .loop:
(1)  765/ 60011B6 : 2FE6                		mov	r14,@-r15
(1)  766/ 60011B8 : 2FD6                		mov	r13,@-r15
(1)  767/ 60011BA : 6EE2                		mov	@r14,r14			; Get location of the polygon
(1)  768/ 60011BC : 4E15                		cmp/pl	r14
(1)  769/ 60011BE : 8B02                		bf	.invalid
(1)  770/ 60011C0 : D01F                		mov 	#MarsVideo_MakePolygon,r0
(1)  771/ 60011C2 : 400B                		jsr	@r0
(1)  772/ 60011C4 : 0009                		nop
(1)  773/ 60011C6 :                     .invalid:
(1)  774/ 60011C6 : 6DF6                		mov	@r15+,r13
(1)  775/ 60011C8 : 6EF6                		mov	@r15+,r14
(1)  776/ 60011CA : 4D10                		dt	r13
(1)  777/ 60011CC : 8FF3                		bf/s	.loop
(1)  778/ 60011CE : 7E04                		add	#4,r14
(1)  779/ 60011D0 :                     .skip:
(1)  780/ 60011D0 :                     
(1)  781/ 60011D0 :                     	; --------------------------------------
(1)  782/ 60011D0 : C50C                .wait_pz: 	mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces remaining on interrupt?
(1)  783/ 60011D2 : 8800                		cmp/eq	#0,r0
(1)  784/ 60011D4 : 8BFC                		bf	.wait_pz
(1)  785/ 60011D6 : C50D                .wait_task:	mov.w	@(marsGbl_DrwTask,gbr),r0	; Any draw task active?
(1)  786/ 60011D8 : 8800                		cmp/eq	#0,r0
(1)  787/ 60011DA : 8BFC                		bf	.wait_task
(1)  788/ 60011DC : 913C                		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1)  789/ 60011DE : 903C                		mov.w   #$A518,r0
(1)  790/ 60011E0 : 2101                		mov.w   r0,@r1
(1)  791/ 60011E2 : D118                		mov	#_vdpreg,r1			; Framebuffer swap request
(1)  792/ 60011E4 : 841B                		mov.b	@(framectl,r1),r0		; watchdog will check for it later
(1)  793/ 60011E6 : CA01                		xor	#1,r0
(1)  794/ 60011E8 : 801B                		mov.b	r0,@(framectl,r1)
(1)  795/ 60011EA : C022                		mov.b	r0,@(marsGbl_CurrFb,gbr)
(1)  796/ 60011EC :                     
(1)  797/ 60011EC :                     	; --------------------
(1)  798/ 60011EC :                     	; DEBUG counter
(1)  799/ 60011EC : D416                		mov	#_sysreg+comm0+1,r4
(1)  800/ 60011EE : 6040                		mov.b	@r4,r0
(1)  801/ 60011F0 : 7001                		add	#1,r0
(1)  802/ 60011F2 : 2400                		mov.b	r0,@r4
(1)  803/ 60011F4 :                     	; --------------------
(1)  804/ 60011F4 :                     
(1)  805/ 60011F4 : D10A                		mov	#_sysreg+comm14,r1		; Clear task number
(1)  806/ 60011F6 : 6010                		mov.b	@r1,r0
(1)  807/ 60011F8 : C980                		and	#$80,r0
(1)  808/ 60011FA : 2100                		mov.b	r0,@r1
(1)  809/ 60011FC : AF96                		bra	master_loop
(1)  810/ 60011FE : 0009                		nop
(1)  811/ 6001200 :                     		align 4
(1)  812/ 6001200 : 0604 0000 2000 4020 		ltorg
                    534C 4156 0600 5828 
                    2000 4000 0600 15FC 
                    C000 0000 0600 0682 
                    2000 402E 0600 1150 
                    0601 61C0 0600 0E74 
                    0601 51C0 0601 67C0 
                    0601 55C0 0601 67C2 
                    C000 037E 2000 4100 
                    2000 4021 FE10 FEE2 
                    FEE4 00F0 FE92 01DA 
                    FE80 A518           
(1)  813/ 600125C :                     
(1)  814/ 600125C :                     ; ====================================================================
(1)  815/ 600125C :                     ; ----------------------------------------------------------------
(1)  816/ 600125C :                     ; Slave entry
(1)  817/ 600125C :                     ; ----------------------------------------------------------------
(1)  818/ 600125C :                     
(1)  819/ 600125C :                     		align 4
(1)  820/ 600125C :                     SH2_S_Entry:
(1)  821/ 600125C : DE4A                		mov	#_sysreg,r14
(1)  822/ 600125E : 4E1E                		ldc	r14,gbr
(1)  823/ 6001260 : 91BE                		mov	#_FRT,r1
(1)  824/ 6001262 : E000                		mov     #0,r0
(1)  825/ 6001264 : 8010                		mov.b   r0,@(0,r1)
(1)  826/ 6001266 : E0E2                		mov     #$FFFFFFE2,r0
(1)  827/ 6001268 : 8017                		mov.b   r0,@(7,r1)
(1)  828/ 600126A : E000                		mov     #0,r0
(1)  829/ 600126C : 8014                		mov.b   r0,@(4,r1)
(1)  830/ 600126E : E001                		mov     #1,r0
(1)  831/ 6001270 : 8015                		mov.b   r0,@(5,r1)
(1)  832/ 6001272 : E000                		mov     #0,r0
(1)  833/ 6001274 : 8016                		mov.b   r0,@(6,r1)
(1)  834/ 6001276 : E001                		mov     #1,r0
(1)  835/ 6001278 : 8011                		mov.b   r0,@(1,r1)
(1)  836/ 600127A : E000                		mov     #0,r0
(1)  837/ 600127C : 8013                		mov.b   r0,@(3,r1)
(1)  838/ 600127E : 8012                		mov.b   r0,@(2,r1)
(1)  839/ 6001280 : 90AF                		mov.l   #$FFFFFEE2,r0
(1)  840/ 6001282 : E150                		mov     #$50,r1
(1)  841/ 6001284 : 2011                		mov.w   r1,@r0
(1)  842/ 6001286 : 90AD                		mov.l   #$FFFFFEE4,r0
(1)  843/ 6001288 : E148                		mov     #$120/4,r1		; VBR + this/4
(1)  844/ 600128A : 4118                		shll8   r1
(1)  845/ 600128C : 2011                		mov.w   r1,@r0
(1)  846/ 600128E :                     		
(1)  847/ 600128E :                     ; ------------------------------------------------
(1)  848/ 600128E :                     ; Wait for Genesis, report to Master SH2
(1)  849/ 600128E :                     ; ------------------------------------------------
(1)  850/ 600128E :                     
(1)  851/ 600128E :                     .wait_md:
(1)  852/ 600128E : D23F                		mov 	#_sysreg+comm0,r2
(1)  853/ 6001290 : 6022                		mov.l	@r2,r0
(1)  854/ 6001292 : 8800                		cmp/eq	#0,r0
(1)  855/ 6001294 : 8BFB                		bf	.wait_md
(1)  856/ 6001296 : D03E                		mov.l	#"SLAV",r0
(1)  857/ 6001298 : 1202                		mov.l	r0,@(8,r2)
(1)  858/ 600129A :                     
(1)  859/ 600129A : 91A4                		mov	#$FFFFFE80,r1
(1)  860/ 600129C : 90A4                		mov.w	#$5A7F,r0			; Watchdog wait timer
(1)  861/ 600129E : 2101                		mov.w	r0,@r1
(1)  862/ 60012A0 : 90A3                		mov.w	#$A538,r0			; Watchdog ON
(1)  863/ 60012A2 : 2101                		mov.w	r0,@r1
(1)  864/ 60012A4 :                     		
(1)  865/ 60012A4 :                     ; ====================================================================
(1)  866/ 60012A4 :                     ; ----------------------------------------------------------------
(1)  867/ 60012A4 :                     ; Slave main code
(1)  868/ 60012A4 :                     ; ----------------------------------------------------------------
(1)  869/ 60012A4 :                     
(1)  870/ 60012A4 :                     SH2_S_HotStart:
(1)  871/ 60012A4 : DF3B                		mov.l	#CS3|$3F000,r15			; Reset stack
(1)  872/ 60012A6 : DE3C                		mov.l	#RAM_Mars_Global,r14		; Reset gbr
(1)  873/ 60012A8 : 4E1E                		ldc	r14,gbr
(1)  874/ 60012AA : 909F                		mov.l	#$F0,r0				; Interrupts OFF
(1)  875/ 60012AC : 400E                		ldc	r0,sr
(1)  876/ 60012AE : 919E                		mov.l	#_CCR,r1
(1)  877/ 60012B0 : E000                		mov	#0,r0				; Cache OFF
(1)  878/ 60012B2 : 2101                		mov.w	r0,@r1
(1)  879/ 60012B4 : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1)  880/ 60012B6 : 2101                		mov.w	r0,@r1
(1)  881/ 60012B8 : D133                		mov	#_sysreg,r1
(1)  882/ 60012BA : E00A                		mov	#VIRQ_ON|CMDIRQ_ON,r0		; Enable these interrupts		
(1)  883/ 60012BC : 8011                    		mov.b	r0,@(intmask,r1)
(1)  884/ 60012BE : D137                		mov 	#CACHE_SLAVE,r1			; Load 3D Routines on CACHE	
(1)  885/ 60012C0 : D237                		mov 	#$C0000000,r2			; Those run more faster here supposedly...
(1)  886/ 60012C2 : 9395                		mov 	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r3
(1)  887/ 60012C4 :                     .copy:
(1)  888/ 60012C4 : 6016                		mov 	@r1+,r0
(1)  889/ 60012C6 : 2202                		mov 	r0,@r2
(1)  890/ 60012C8 : 7204                		add 	#4,r2
(1)  891/ 60012CA : 4310                		dt	r3
(1)  892/ 60012CC : 8BFA                		bf	.copy
(1)  893/ 60012CE :                     
(1)  894/ 60012CE :                     ; ------------------------------------------------
(1)  895/ 60012CE :                     ; REMINDER: 1 meter = $10000
(1)  896/ 60012CE :                     
(1)  897/ 60012CE : D035                		mov	#MarsMdl_Init,r0
(1)  898/ 60012D0 : 400B                		jsr	@r0
(1)  899/ 60012D2 : 0009                		nop
(1)  900/ 60012D4 :                     		
(1)  901/ 60012D4 :                     ; ------------------------------------------------
(1)  902/ 60012D4 :                     
(1)  903/ 60012D4 : 918B                		mov	#_CCR,r1
(1)  904/ 60012D6 : E008                		mov	#%00001000,r0			; Two-way mode
(1)  905/ 60012D8 : 2101                		mov.w	r0,@r1
(1)  906/ 60012DA : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1)  907/ 60012DC : 2101                		mov.w	r0,@r1
(1)  908/ 60012DE : E020                		mov.l	#$20,r0				; Interrupts ON
(1)  909/ 60012E0 : 400E                		ldc	r0,sr
(1)  910/ 60012E2 :                     		
(1)  911/ 60012E2 :                     ; --------------------------------------------------------
(1)  912/ 60012E2 :                     ; Loop
(1)  913/ 60012E2 :                     ; --------------------------------------------------------
(1)  914/ 60012E2 :                     
(1)  915/ 60012E2 :                     slave_loop:
(1)  916/ 60012E2 :                     
(1)  917/ 60012E2 :                     ; ------------------------------------------------
(1)  918/ 60012E2 :                     ; Process tasks other than visual or sound,
(1)  919/ 60012E2 :                     ; ex. object interaction or move the 3d camera
(1)  920/ 60012E2 :                     ; ------------------------------------------------
(1)  921/ 60012E2 :                     
(1)  922/ 60012E2 : D131                		mov	#_sysreg+comm15,r1
(1)  923/ 60012E4 : 6010                		mov.b	@r1,r0
(1)  924/ 60012E6 : C980                		and	#$80,r0
(1)  925/ 60012E8 : 8800                		cmp/eq	#0,r0
(1)  926/ 60012EA : 8912                		bt	.no_req
(1)  927/ 60012EC : ED10                		mov	#MAX_MDTASKS,r13
(1)  928/ 60012EE : DE2F                		mov	#RAM_Mars_MdTasksFifo_S,r14
(1)  929/ 60012F0 :                     .next_req:
(1)  930/ 60012F0 : 2FD6                		mov	r13,@-r15
(1)  931/ 60012F2 : 60E2                		mov	@r14,r0
(1)  932/ 60012F4 : 8800                		cmp/eq	#0,r0
(1)  933/ 60012F6 : 8903                		bt	.no_task
(1)  934/ 60012F8 : 400B                		jsr	@r0
(1)  935/ 60012FA : 0009                		nop
(1)  936/ 60012FC : 200A                		xor	r0,r0
(1)  937/ 60012FE : 2E02                		mov	r0,@r14
(1)  938/ 6001300 :                     .no_task:
(1)  939/ 6001300 : E020                		mov	#MAX_MDTSKARG*4,r0
(1)  940/ 6001302 : 6DF6                		mov	@r15+,r13
(1)  941/ 6001304 : 4D10                		dt	r13
(1)  942/ 6001306 : 8FF3                		bf/s	.next_req
(1)  943/ 6001308 : 3E0C                		add	r0,r14
(1)  944/ 600130A : D127                		mov	#_sysreg+comm15,r1
(1)  945/ 600130C : 6010                		mov.b	@r1,r0
(1)  946/ 600130E : C97F                		and	#$7F,r0
(1)  947/ 6001310 : 2100                		mov.b	r0,@r1
(1)  948/ 6001312 :                     .no_req:
(1)  949/ 6001312 :                     
(1)  950/ 6001312 :                     	; --------------------
(1)  951/ 6001312 :                     	; DEBUG counter
(1)  952/ 6001312 : D427                		mov	#_sysreg+comm2,r4		; DEBUG COUNTER
(1)  953/ 6001314 : 6041                		mov.w	@r4,r0
(1)  954/ 6001316 : 7001                		add	#1,r0
(1)  955/ 6001318 : 2401                		mov.w	r0,@r4
(1)  956/ 600131A :                     	; --------------------
(1)  957/ 600131A :                     	
(1)  958/ 600131A :                     ; --------------------------------------------------------
(1)  959/ 600131A :                     ; Start building polygons from models
(1)  960/ 600131A :                     ; 
(1)  961/ 600131A :                     ; *** CAMERA ANIMATION IS DONE ON THE 68K ***
(1)  962/ 600131A :                     ; --------------------------------------------------------
(1)  963/ 600131A :                     
(1)  964/ 600131A : E000                		mov	#0,r0
(1)  965/ 600131C : C10A                		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(1)  966/ 600131E : D125                		mov 	#RAM_Mars_Polygons_0,r1
(1)  967/ 6001320 : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1)  968/ 6001322 : C801                		tst     #1,r0
(1)  969/ 6001324 : 8900                		bt	.go_mdl
(1)  970/ 6001326 : D124                		mov 	#RAM_Mars_Polygons_1,r1
(1)  971/ 6001328 :                     .go_mdl:
(1)  972/ 6001328 : 6013                		mov	r1,r0
(1)  973/ 600132A : C203                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(1)  974/ 600132C : D023                		mov	#RAM_Mars_Plgn_ZList,r0
(1)  975/ 600132E : C202                		mov	r0,@(marsGbl_CurrZList,gbr)
(1)  976/ 6001330 :                     
(1)  977/ 6001330 :                     ; ----------------------------------------
(1)  978/ 6001330 :                     
(1)  979/ 6001330 : D023                		mov	#MarsLay_Read,r0		; Build layout inside camera
(1)  980/ 6001332 : 400B                		jsr	@r0				; takes 9 object slots
(1)  981/ 6001334 : 0009                		nop
(1)  982/ 6001336 : DE23                		mov	#RAM_Mars_Objects,r14		; Build all objects
(1)  983/ 6001338 : ED40                		mov	#MAX_MODELS,r13
(1)  984/ 600133A :                     .loop:
(1)  985/ 600133A : 50E0                		mov	@(mdl_data,r14),r0		; Object model data == 0 or -1?
(1)  986/ 600133C : 4015                		cmp/pl	r0
(1)  987/ 600133E : 8B04                		bf	.invlid
(1)  988/ 6001340 : 2FD6                		mov	r13,@-r15
(1)  989/ 6001342 : D021                		mov	#MarsMdl_ReadModel,r0
(1)  990/ 6001344 : 400B                		jsr	@r0
(1)  991/ 6001346 : 0009                		nop
(1)  992/ 6001348 : 6DF6                		mov	@r15+,r13
(1)  993/ 600134A :                     .invlid:
(1)  994/ 600134A : 4D10                		dt	r13
(1)  995/ 600134C : 8FF5                		bf/s	.loop
(1)  996/ 600134E : 7E30                		add	#sizeof_mdlobj,r14
(1)  997/ 6001350 :                     .skip:
(1)  998/ 6001350 :                     
(1)  999/ 6001350 :                     ; ----------------------------------------
(1) 1000/ 6001350 :                     
(1) 1001/ 6001350 : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1) 1002/ 6001352 : C801                		tst     #1,r0
(1) 1003/ 6001354 : 8B03                		bf	.page_2
(1) 1004/ 6001356 : DE1D                		mov 	#RAM_Mars_PlgnList_0,r14
(1) 1005/ 6001358 : DD1D                		mov 	#RAM_Mars_PlgnNum_0,r13
(1) 1006/ 600135A : A002                		bra	.swap_now
(1) 1007/ 600135C : 0009                		nop
(1) 1008/ 600135E :                     .page_2:
(1) 1009/ 600135E : DE1D                		mov 	#RAM_Mars_PlgnList_1,r14
(1) 1010/ 6001360 : DD1D                		mov 	#RAM_Mars_PlgnNum_1,r13
(1) 1011/ 6001362 :                     .swap_now:
(1) 1012/ 6001362 : B046                		bsr	slv_sort_z
(1) 1013/ 6001364 : 0009                		nop
(1) 1014/ 6001366 :                     
(1) 1015/ 6001366 :                     ; ----------------------------------------
(1) 1016/ 6001366 :                     
(1) 1017/ 6001366 : D11D                		mov.l	#_sysreg+comm14,r1		; Master CPU still drawing pieces?
(1) 1018/ 6001368 :                     .mstr_busy:
(1) 1019/ 6001368 : 6010                		mov.b	@r1,r0
(1) 1020/ 600136A : C97F                		and	#$7F,r0
(1) 1021/ 600136C : 8800                		cmp/eq	#0,r0
(1) 1022/ 600136E : 8BB8                		bf	slave_loop			; Skip frame
(1) 1023/ 6001370 : C50B                		mov.w	@(marsGbl_PolyBuffNum,gbr),r0	; Swap polygon buffer
(1) 1024/ 6001372 : CA01                 		xor	#1,r0
(1) 1025/ 6001374 : C10B                 		mov.w	r0,@(marsGbl_PolyBuffNum,gbr)
(1) 1026/ 6001376 : D219                		mov	#_sysreg+comm14,r2
(1) 1027/ 6001378 : E101                 		mov	#1,r1				; Set task $01 to Master
(1) 1028/ 600137A : 6020                		mov.b	@r2,r0
(1) 1029/ 600137C : C980                		and	#$80,r0
(1) 1030/ 600137E : 201B                		or	r1,r0
(1) 1031/ 6001380 : 2200                		mov.b	r0,@r2
(1) 1032/ 6001382 : AFAE                		bra	slave_loop
(1) 1033/ 6001384 : 0009                		nop
(1) 1034/ 6001386 :                     		align 4
(1) 1035/ 6001388 : 2000 4000 2000 4020 		ltorg
                    534C 4156 0603 F000 
                    0600 5828 0600 1D64 
                    C000 0000 0600 0ACE 
                    2000 402F 0601 63C0 
                    2000 4022 0600 64C0 
                    0600 9CC0 0601 59C0 
                    0600 0768 0600 58C0 
                    0600 0AE6 0601 51C0 
                    0601 67C0 0601 55C0 
                    0601 67C2 2000 402E 
                    FE10 FEE2 FEE4 FE80 
                    5A7F A538 00F0 FE92 
                    0006                
(1) 1036/ 60013F2 :                     
(1) 1037/ 60013F2 :                     ; --------------------------------------------------------
(1) 1038/ 60013F2 :                     ; Sort all faces in the current buffer
(1) 1039/ 60013F2 :                     ; 
(1) 1040/ 60013F2 :                     ; r14 - Polygon list
(1) 1041/ 60013F2 :                     ; r13 - Number of polygons processed
(1) 1042/ 60013F2 :                     ; --------------------------------------------------------
(1) 1043/ 60013F2 :                     
(1) 1044/ 60013F2 :                     ; Bubble sorting
(1) 1045/ 60013F2 :                     slv_sort_z:
(1) 1046/ 60013F2 : 4F22                		sts	pr,@-r15
(1) 1047/ 60013F4 : E000                		mov	#0,r0					; Reset current PlgnNum
(1) 1048/ 60013F6 : 2D01                		mov.w	r0,@r13
(1) 1049/ 60013F8 : DC19                		mov	#RAM_Mars_Plgn_ZList,r12	
(1) 1050/ 60013FA : EB02                		mov	#2,r11
(1) 1051/ 60013FC : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0		; Check number of faces to sort
(1) 1052/ 60013FE : 30B7                		cmp/gt	r11,r0
(1) 1053/ 6001400 : 8B1C                		bf	.z_fewfaces
(1) 1054/ 6001402 : 6B03                		mov	r0,r11
(1) 1055/ 6001404 :                     ; if faces > 2
(1) 1056/ 6001404 :                     .z_normal:
(1) 1057/ 6001404 : 9B2E                		mov	#MAX_FACES,r11
(1) 1058/ 6001406 : 30B3                		cmp/ge	r11,r0
(1) 1059/ 6001408 : 8B00                		bf	.z_ranout
(1) 1060/ 600140A : 60B3                		mov	r11,r0
(1) 1061/ 600140C :                     .z_ranout:
(1) 1062/ 600140C : 6B03                		mov	r0,r11
(1) 1063/ 600140E : 6A03                		mov	r0,r10
(1) 1064/ 6001410 : 7AFF                		add	#-1,r10
(1) 1065/ 6001412 : 67A3                		mov	r10,r7
(1) 1066/ 6001414 : 77FF                		add	#-1,r7
(1) 1067/ 6001416 : 4715                		cmp/pl	r7
(1) 1068/ 6001418 : 8B1F                		bf	.z_end
(1) 1069/ 600141A :                     .z_outer:
(1) 1070/ 600141A : 68A3                		mov	r10,r8
(1) 1071/ 600141C : 69C3                		mov	r12,r9
(1) 1072/ 600141E :                     .z_inner:
(1) 1073/ 600141E : 6092                		mov	@r9,r0
(1) 1074/ 6001420 : 5192                		mov	@(8,r9),r1
(1) 1075/ 6001422 : 3017                		cmp/gt	r1,r0
(1) 1076/ 6001424 : 8B05                		bf	.z_high			; bf=back to front, bt=front to back
(1) 1077/ 6001426 : 2912                		mov	r1,@r9
(1) 1078/ 6001428 : 1902                		mov	r0,@(8,r9)
(1) 1079/ 600142A : 5091                		mov	@(4,r9),r0
(1) 1080/ 600142C : 5193                		mov	@($C,r9),r1
(1) 1081/ 600142E : 1911                		mov	r1,@(4,r9)
(1) 1082/ 6001430 : 1903                		mov	r0,@($C,r9)
(1) 1083/ 6001432 :                     .z_high:
(1) 1084/ 6001432 : 4810                		dt	r8
(1) 1085/ 6001434 : 8FF3                		bf/s	.z_inner
(1) 1086/ 6001436 : 7908                		add	#8,r9
(1) 1087/ 6001438 : 4710                		dt	r7
(1) 1088/ 600143A : 8BEE                		bf	.z_outer
(1) 1089/ 600143C :                     
(1) 1090/ 600143C :                     ; ----------------------------------------
(1) 1091/ 600143C :                     ; only 1 or 2 faces
(1) 1092/ 600143C :                     ; TODO: this is too much for 2 faces...
(1) 1093/ 600143C :                     
(1) 1094/ 600143C :                     .z_fewfaces:
(1) 1095/ 600143C : 6AC3                		mov	r12,r10
(1) 1096/ 600143E : 69B3                		mov	r11,r9
(1) 1097/ 6001440 : E800                		mov	#0,r8
(1) 1098/ 6001442 :                     .next_face:
(1) 1099/ 6001442 : 57A1                		mov	@(4,r10),r7
(1) 1100/ 6001444 : 4715                		cmp/pl	r7
(1) 1101/ 6001446 : 8B04                		bf	.no_face
(1) 1102/ 6001448 : E000                		mov	#0,r0
(1) 1103/ 600144A : 1A01                		mov	r0,@(4,r10)
(1) 1104/ 600144C : 2E72                		mov	r7,@r14
(1) 1105/ 600144E : 7E04                		add	#4,r14
(1) 1106/ 6001450 : 7801                		add	#1,r8
(1) 1107/ 6001452 :                     .no_face:
(1) 1108/ 6001452 : 4910                		dt	r9
(1) 1109/ 6001454 : 8FF5                		bf/s	.next_face
(1) 1110/ 6001456 : 7A08                		add 	#8,r10
(1) 1111/ 6001458 : 2D81                		mov.w	r8,@r13
(1) 1112/ 600145A :                     .z_end:
(1) 1113/ 600145A : 4F26                		lds	@r15+,pr
(1) 1114/ 600145C : 000B                		rts
(1) 1115/ 600145E : 0009                		nop
(1) 1116/ 6001460 :                     		align 4
(1) 1117/ 6001460 : 0601 59C0 0100      		ltorg
(1) 1118/ 6001466 :                     
(1) 1119/ 6001466 :                     ; ====================================================================
(1) 1120/ 6001466 :                     ; --------------------------------------------------------
(1) 1121/ 6001466 :                     ; Task list for MD-to-MARS tasks, call these 68k side
(1) 1122/ 6001466 :                     ; with the respective arguments
(1) 1123/ 6001466 :                     ; 
(1) 1124/ 6001466 :                     ; *** 68k EXAMPLES ***
(1) 1125/ 6001466 :                     ; 
(1) 1126/ 6001466 :                     ; Single task:
(1) 1127/ 6001466 :                     ; 	move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1) 1128/ 6001466 :                     ; 	moveq	#1,d1
(1) 1129/ 6001466 :                     ; 	bsr	System_MdMars_MstAddTask
(1) 1130/ 6001466 :                     ; 	
(1) 1131/ 6001466 :                     ; Queued task:
(1) 1132/ 6001466 :                     ; 	move.l	#Palette_Intro,d1
(1) 1133/ 6001466 :                     ; 	moveq	#0,d2
(1) 1134/ 6001466 :                     ; 	move.w	#16,d3
(1) 1135/ 6001466 :                     ; 	moveq	#0,d4
(1) 1136/ 6001466 :                     ; 	move.l	#CmdTaskMd_LoadSPal,d0		; Load palette
(1) 1137/ 6001466 :                     ; 	bsr	System_MdMars_MstAddTask
(1) 1138/ 6001466 :                     ;	; then add more requests
(1) 1139/ 6001466 :                     ; 	bsr	System_MdMars_MstSendAll	; <-- Send all and wait
(1) 1140/ 6001466 :                     ; 	; or
(1) 1141/ 6001466 :                     ; 	bsr	System_MdMars_MstSendDrop	; <-- Send all but skip if busy
(1) 1142/ 6001466 :                     ;
(1) 1143/ 6001466 :                     ; Mst: for Master, processes until all draw-tasks finished
(1) 1144/ 6001466 :                     ; Slv: for Slave, processes after sorting model faces
(1) 1145/ 6001466 :                     ; --------------------------------------------------------
(1) 1146/ 6001466 :                     
(1) 1147/ 6001466 :                     		align 4
(1) 1148/ 6001468 :                     
(1) 1149/ 6001468 :                     ; ------------------------------------------------
(1) 1150/ 6001468 :                     ; CALLS EXCLUSIVE TO MASTER CPU
(1) 1151/ 6001468 :                     ; ------------------------------------------------
(1) 1152/ 6001468 :                     
(1) 1153/ 6001468 :                     ; ------------------------------------------------
(1) 1154/ 6001468 :                     ; Set SuperVDP bitmap value
(1) 1155/ 6001468 :                     ;
(1) 1156/ 6001468 :                     ; @($04,r14) - SuperVDP bitmap number (0-3)
(1) 1157/ 6001468 :                     ; ------------------------------------------------
(1) 1158/ 6001468 :                     
(1) 1159/ 6001468 :                     CmdTaskMd_SetBitmap:
(1) 1160/ 6001468 : D151                		mov 	#_vdpreg,r1
(1) 1161/ 600146A : 8515                .wait_fb:	mov.w   @($A,r1),r0
(1) 1162/ 600146C : C802                		tst     #2,r0
(1) 1163/ 600146E : 8BFC                		bf      .wait_fb
(1) 1164/ 6001470 : 50E1                		mov	@($04,r14),r0
(1) 1165/ 6001472 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1166/ 6001474 : 000B                		rts
(1) 1167/ 6001476 : 0009                		nop
(1) 1168/ 6001478 :                     		align 4
(1) 1169/ 6001478 :                     
(1) 1170/ 6001478 :                     ; ------------------------------------------------
(1) 1171/ 6001478 :                     ; Load palette to SuperVDP from MD
(1) 1172/ 6001478 :                     ;
(1) 1173/ 6001478 :                     ; @($04,r14) - Palette data
(1) 1174/ 6001478 :                     ; @($08,r14) - Start from
(1) 1175/ 6001478 :                     ; @($0C,r14) - Number of colors
(1) 1176/ 6001478 :                     ; @($10,r14) - OR value
(1) 1177/ 6001478 :                     ; ------------------------------------------------
(1) 1178/ 6001478 :                     
(1) 1179/ 6001478 :                     CmdTaskMd_LoadSPal:
(1) 1180/ 6001478 : 6DE3                		mov	r14,r13
(1) 1181/ 600147A : 7D04                		add	#4,r13
(1) 1182/ 600147C : 61D6                		mov	@r13+,r1
(1) 1183/ 600147E : 62D6                		mov	@r13+,r2
(1) 1184/ 6001480 : 63D6                		mov	@r13+,r3
(1) 1185/ 6001482 : 64D6                		mov	@r13+,r4
(1) 1186/ 6001484 : D04B                		mov	#MarsVideo_LoadPal,r0
(1) 1187/ 6001486 : 402B                		jmp	@r0
(1) 1188/ 6001488 : 0009                		nop
(1) 1189/ 600148A :                     		align 4
(1) 1190/ 600148C :                     
(1) 1191/ 600148C :                     ; ------------------------------------------------
(1) 1192/ 600148C :                     ; CALLS EXCLUSIVE TO SLAVE CPU
(1) 1193/ 600148C :                     ; ------------------------------------------------
(1) 1194/ 600148C :                     
(1) 1195/ 600148C :                     ; ------------------------------------------------
(1) 1196/ 600148C :                     ; Make new object and insert it to specific slot
(1) 1197/ 600148C :                     ;
(1) 1198/ 600148C :                     ; @($04,r14) - Object slot
(1) 1199/ 600148C :                     ; @($08,r14) - Object data
(1) 1200/ 600148C :                     ; @($0C,r14) - Object options:
(1) 1201/ 600148C :                     ;	       %????????????????????????pppppppp
(1) 1202/ 600148C :                     ;		p - index pixel increment value
(1) 1203/ 600148C :                     ; ------------------------------------------------
(1) 1204/ 600148C :                     
(1) 1205/ 600148C :                     CmdTaskMd_ObjectSet:
(1) 1206/ 600148C : DC4A                		mov	#RAM_Mars_Objects+(sizeof_mdlobj*9),r12
(1) 1207/ 600148E : 6DE3                		mov	r14,r13
(1) 1208/ 6001490 : 7D04                		add	#4,r13
(1) 1209/ 6001492 : 60D6                		mov	@r13+,r0
(1) 1210/ 6001494 : E130                		mov	#sizeof_mdlobj,r1
(1) 1211/ 6001496 : 201E                		mulu	r1,r0
(1) 1212/ 6001498 : 001A                		sts	macl,r0
(1) 1213/ 600149A : 3C0C                		add	r0,r12
(1) 1214/ 600149C : 200A                		xor	r0,r0
(1) 1215/ 600149E : 61D6                		mov	@r13+,r1
(1) 1216/ 60014A0 : 1C10                		mov	r1,@(mdl_data,r12)
(1) 1217/ 60014A2 : 61D6                		mov	@r13+,r1
(1) 1218/ 60014A4 : 1C11                		mov	r1,@(mdl_option,r12)
(1) 1219/ 60014A6 : 1C02                		mov	r0,@(mdl_x_pos,r12)
(1) 1220/ 60014A8 : 1C03                		mov	r0,@(mdl_y_pos,r12)
(1) 1221/ 60014AA : 1C04                		mov	r0,@(mdl_z_pos,r12)
(1) 1222/ 60014AC : 1C05                		mov	r0,@(mdl_x_rot,r12)
(1) 1223/ 60014AE : 1C06                		mov	r0,@(mdl_y_rot,r12)
(1) 1224/ 60014B0 : 1C07                		mov	r0,@(mdl_z_rot,r12)
(1) 1225/ 60014B2 : 000B                		rts
(1) 1226/ 60014B4 : 0009                		nop
(1) 1227/ 60014B6 :                     		align 4
(1) 1228/ 60014B8 :                     		
(1) 1229/ 60014B8 :                     ; ------------------------------------------------
(1) 1230/ 60014B8 :                     ; Move/Rotate object from slot
(1) 1231/ 60014B8 :                     ; 
(1) 1232/ 60014B8 :                     ; @($04,r14) - Object slot
(1) 1233/ 60014B8 :                     ; @($08,r14) - Object X pos
(1) 1234/ 60014B8 :                     ; @($0C,r14) - Object Y pos
(1) 1235/ 60014B8 :                     ; @($10,r14) - Object Z pos
(1) 1236/ 60014B8 :                     ; @($14,r14) - Object X rot
(1) 1237/ 60014B8 :                     ; @($18,r14) - Object Y rot
(1) 1238/ 60014B8 :                     ; @($1C,r14) - Object Z rot
(1) 1239/ 60014B8 :                     ; ------------------------------------------------
(1) 1240/ 60014B8 :                     
(1) 1241/ 60014B8 :                     CmdTaskMd_ObjectPos:
(1) 1242/ 60014B8 : DC40                		mov	#RAM_Mars_Objects+(sizeof_mdlobj*9),r12
(1) 1243/ 60014BA : 6DE3                		mov	r14,r13
(1) 1244/ 60014BC : 7D04                		add	#4,r13
(1) 1245/ 60014BE : 60D6                		mov	@r13+,r0
(1) 1246/ 60014C0 : E130                		mov	#sizeof_mdlobj,r1
(1) 1247/ 60014C2 : 201E                		mulu	r1,r0
(1) 1248/ 60014C4 : 001A                		sts	macl,r0
(1) 1249/ 60014C6 : 3C0C                		add	r0,r12
(1) 1250/ 60014C8 : 61D6                		mov	@r13+,r1
(1) 1251/ 60014CA : 62D6                		mov	@r13+,r2
(1) 1252/ 60014CC : 63D6                		mov	@r13+,r3
(1) 1253/ 60014CE : 64D6                		mov	@r13+,r4
(1) 1254/ 60014D0 : 65D6                		mov	@r13+,r5
(1) 1255/ 60014D2 : 66D6                		mov	@r13+,r6
(1) 1256/ 60014D4 : 1C12                		mov	r1,@(mdl_x_pos,r12)
(1) 1257/ 60014D6 : 1C23                		mov	r2,@(mdl_y_pos,r12)
(1) 1258/ 60014D8 : 1C34                		mov	r3,@(mdl_z_pos,r12)
(1) 1259/ 60014DA : 1C45                		mov	r4,@(mdl_x_rot,r12)
(1) 1260/ 60014DC : 1C56                		mov	r5,@(mdl_y_rot,r12)
(1) 1261/ 60014DE : 1C67                		mov	r6,@(mdl_z_rot,r12)
(1) 1262/ 60014E0 : 000B                		rts
(1) 1263/ 60014E2 : 0009                		nop
(1) 1264/ 60014E4 :                     		align 4
(1) 1265/ 60014E4 :                     
(1) 1266/ 60014E4 :                     ; ------------------------------------------------
(1) 1267/ 60014E4 :                     ; Clear ALL objects, including layout
(1) 1268/ 60014E4 :                     ; ------------------------------------------------
(1) 1269/ 60014E4 :                     
(1) 1270/ 60014E4 :                     CmdTaskMd_ObjectClrAll:
(1) 1271/ 60014E4 : 4F22                		sts	pr,@-r15
(1) 1272/ 60014E6 : D036                		mov	#MarsMdl_Init,r0
(1) 1273/ 60014E8 : 400B                		jsr	@r0
(1) 1274/ 60014EA : 2FE6                		mov	r14,@-r15
(1) 1275/ 60014EC : 6EF6                		mov	@r15+,r14
(1) 1276/ 60014EE : 4F26                		lds	@r15+,pr
(1) 1277/ 60014F0 : 000B                		rts
(1) 1278/ 60014F2 : 0009                		nop
(1) 1279/ 60014F4 :                     		align 4
(1) 1280/ 60014F4 :                     
(1) 1281/ 60014F4 :                     ; ------------------------------------------------
(1) 1282/ 60014F4 :                     ; Set new map data
(1) 1283/ 60014F4 :                     ; 
(1) 1284/ 60014F4 :                     ; @($04,r14) - layout data
(1) 1285/ 60014F4 :                     ; ------------------------------------------------
(1) 1286/ 60014F4 :                     
(1) 1287/ 60014F4 :                     CmdTaskMd_MakeMap:
(1) 1288/ 60014F4 : 4F22                		sts	pr,@-r15
(1) 1289/ 60014F6 : 51E1                		mov	@(4,r14),r1
(1) 1290/ 60014F8 : D032                		mov	#MarsLay_Make,r0
(1) 1291/ 60014FA : 400B                		jsr	@r0
(1) 1292/ 60014FC : 2FE6                		mov	r14,@-r15
(1) 1293/ 60014FE : 6EF6                		mov	@r15+,r14
(1) 1294/ 6001500 : 4F26                		lds	@r15+,pr
(1) 1295/ 6001502 : 000B                		rts
(1) 1296/ 6001504 : 0009                		nop
(1) 1297/ 6001506 :                     		align 4
(1) 1298/ 6001508 :                     		
(1) 1299/ 6001508 :                     ; ------------------------------------------------
(1) 1300/ 6001508 :                     ; Set camera position
(1) 1301/ 6001508 :                     ; 
(1) 1302/ 6001508 :                     ; @($04,r14) - Camera slot (TODO)
(1) 1303/ 6001508 :                     ; @($08,r14) - Camera X pos
(1) 1304/ 6001508 :                     ; @($0C,r14) - Camera Y pos
(1) 1305/ 6001508 :                     ; @($10,r14) - Camera Z pos
(1) 1306/ 6001508 :                     ; @($14,r14) - Camera X rot
(1) 1307/ 6001508 :                     ; @($18,r14) - Camera Y rot
(1) 1308/ 6001508 :                     ; @($1C,r14) - Camera Z rot
(1) 1309/ 6001508 :                     ; ------------------------------------------------
(1) 1310/ 6001508 :                     
(1) 1311/ 6001508 :                     CmdTaskMd_CameraPos:
(1) 1312/ 6001508 : DC2F                		mov	#RAM_Mars_ObjCamera,r12
(1) 1313/ 600150A : 6DE3                		mov	r14,r13
(1) 1314/ 600150C : 7D08                		add	#8,r13
(1) 1315/ 600150E : 61D6                		mov	@r13+,r1
(1) 1316/ 6001510 : 62D6                		mov	@r13+,r2
(1) 1317/ 6001512 : 63D6                		mov	@r13+,r3
(1) 1318/ 6001514 : 64D6                		mov	@r13+,r4
(1) 1319/ 6001516 : 65D6                		mov	@r13+,r5
(1) 1320/ 6001518 : 66D6                		mov	@r13+,r6
(1) 1321/ 600151A : 1C10                		mov	r1,@(cam_x_pos,r12)
(1) 1322/ 600151C : 1C21                		mov	r2,@(cam_y_pos,r12)
(1) 1323/ 600151E : 1C32                		mov	r3,@(cam_z_pos,r12)
(1) 1324/ 6001520 : 1C43                		mov	r4,@(cam_x_rot,r12)
(1) 1325/ 6001522 : 1C54                		mov	r5,@(cam_y_rot,r12)
(1) 1326/ 6001524 : 1C65                		mov	r6,@(cam_z_rot,r12)
(1) 1327/ 6001526 : 000B                		rts
(1) 1328/ 6001528 : 0009                		nop
(1) 1329/ 600152A :                     		align 4
(1) 1330/ 600152C :                     
(1) 1331/ 600152C :                     ; ------------------------------------------------
(1) 1332/ 600152C :                     ; Set PWM to play
(1) 1333/ 600152C :                     ; 
(1) 1334/ 600152C :                     ; @($04,r14) - Channel slot
(1) 1335/ 600152C :                     ; @($08,r14) - Start point
(1) 1336/ 600152C :                     ; @($0C,r14) - End point
(1) 1337/ 600152C :                     ; @($10,r14) - Loop point
(1) 1338/ 600152C :                     ; @($14,r14) - Volume
(1) 1339/ 600152C :                     ; @($18,r14) - Settings: %00000000 00000000LR | LR - output bits
(1) 1340/ 600152C :                     ; @($1C,r14) - Pitch
(1) 1341/ 600152C :                     ; ------------------------------------------------
(1) 1342/ 600152C :                     
(1) 1343/ 600152C :                     CmdTaskMd_PWM_SetChnl:
(1) 1344/ 600152C : 4F22                		sts	pr,@-r15
(1) 1345/ 600152E : 51E1                		mov	@($04,r14),r1
(1) 1346/ 6001530 : 52E2                		mov	@($08,r14),r2
(1) 1347/ 6001532 : 53E3                		mov	@($0C,r14),r3
(1) 1348/ 6001534 : 54E4                		mov	@($10,r14),r4
(1) 1349/ 6001536 : 55E7                		mov	@($1C,r14),r5	; TODO: reorder this
(1) 1350/ 6001538 : 56E5                		mov	@($14,r14),r6
(1) 1351/ 600153A : 57E6                		mov	@($18,r14),r7
(1) 1352/ 600153C : BD42                		bsr	MarsSound_SetPwm
(1) 1353/ 600153E : 0009                		nop
(1) 1354/ 6001540 : 4F26                		lds	@r15+,pr
(1) 1355/ 6001542 : 000B                		rts
(1) 1356/ 6001544 : 0009                		nop
(1) 1357/ 6001546 :                     		align 4
(1) 1358/ 6001548 :                     
(1) 1359/ 6001548 :                     ; ------------------------------------------------
(1) 1360/ 6001548 :                     ; Set PWM pitch to multiple channels
(1) 1361/ 6001548 :                     ; 
(1) 1362/ 6001548 :                     ; @($04,r14) - Channel 0 pitch
(1) 1363/ 6001548 :                     ; @($08,r14) - Channel 1 pitch
(1) 1364/ 6001548 :                     ; @($0C,r14) - Channel 2 pitch
(1) 1365/ 6001548 :                     ; @($10,r14) - Channel 3 pitch
(1) 1366/ 6001548 :                     ; @($14,r14) - Channel 4 pitch
(1) 1367/ 6001548 :                     ; @($18,r14) - Channel 5 pitch
(1) 1368/ 6001548 :                     ; @($1C,r14) - Channel 6 pitch
(1) 1369/ 6001548 :                     ; ------------------------------------------------
(1) 1370/ 6001548 :                     
(1) 1371/ 6001548 :                     CmdTaskMd_PWM_MultPitch:
(1) 1372/ 6001548 : 4F22                		sts	pr,@-r15
(1) 1373/ 600154A : D720                		mov	#$FFFF,r7
(1) 1374/ 600154C : 6DE3                		mov	r14,r13
(1) 1375/ 600154E : 7D04                		add	#4,r13
(1) 1376/ 6001550 : E100                		mov	#0,r1
(1) 1377/ 6001552 :                     	rept MAX_PWMCHNL		; MAX: 7
(1) 1378/ 6001552 :                     		mov	@r13+,r2
(1) 1379/ 6001552 :                     		and	r7,r2
(1) 1380/ 6001552 :                     		bsr	MarsSound_SetPwmPitch
(1) 1381/ 6001552 :                     		nop
(1) 1382/ 6001552 :                     		add	#1,r1
(1) 1383/ 6001552 :                     	endm
(1) 1378/ 6001552 : 62D6                		mov	@r13+,r2
(1) 1379/ 6001554 : 2279                		and	r7,r2
(1) 1380/ 6001556 : BD59                		bsr	MarsSound_SetPwmPitch
(1) 1381/ 6001558 : 0009                		nop
(1) 1382/ 600155A : 7101                		add	#1,r1
(1) 1378/ 600155C : 62D6                		mov	@r13+,r2
(1) 1379/ 600155E : 2279                		and	r7,r2
(1) 1380/ 6001560 : BD54                		bsr	MarsSound_SetPwmPitch
(1) 1381/ 6001562 : 0009                		nop
(1) 1382/ 6001564 : 7101                		add	#1,r1
(1) 1378/ 6001566 : 62D6                		mov	@r13+,r2
(1) 1379/ 6001568 : 2279                		and	r7,r2
(1) 1380/ 600156A : BD4F                		bsr	MarsSound_SetPwmPitch
(1) 1381/ 600156C : 0009                		nop
(1) 1382/ 600156E : 7101                		add	#1,r1
(1) 1378/ 6001570 : 62D6                		mov	@r13+,r2
(1) 1379/ 6001572 : 2279                		and	r7,r2
(1) 1380/ 6001574 : BD4A                		bsr	MarsSound_SetPwmPitch
(1) 1381/ 6001576 : 0009                		nop
(1) 1382/ 6001578 : 7101                		add	#1,r1
(1) 1378/ 600157A : 62D6                		mov	@r13+,r2
(1) 1379/ 600157C : 2279                		and	r7,r2
(1) 1380/ 600157E : BD45                		bsr	MarsSound_SetPwmPitch
(1) 1381/ 6001580 : 0009                		nop
(1) 1382/ 6001582 : 7101                		add	#1,r1
(1) 1378/ 6001584 : 62D6                		mov	@r13+,r2
(1) 1379/ 6001586 : 2279                		and	r7,r2
(1) 1380/ 6001588 : BD40                		bsr	MarsSound_SetPwmPitch
(1) 1381/ 600158A : 0009                		nop
(1) 1382/ 600158C : 7101                		add	#1,r1
(1) 1378/ 600158E : 62D6                		mov	@r13+,r2
(1) 1379/ 6001590 : 2279                		and	r7,r2
(1) 1380/ 6001592 : BD3B                		bsr	MarsSound_SetPwmPitch
(1) 1381/ 6001594 : 0009                		nop
(1) 1382/ 6001596 : 7101                		add	#1,r1
(1) 1384/ 6001598 : 4F26                		lds	@r15+,pr
(1) 1385/ 600159A : 000B                		rts
(1) 1386/ 600159C : 0009                		nop
(1) 1387/ 600159E :                     		align 4
(1) 1388/ 60015A0 :                     
(1) 1389/ 60015A0 :                     ; ------------------------------------------------
(1) 1390/ 60015A0 :                     ; Enable/Disable PWM channels from playing
(1) 1391/ 60015A0 :                     ; 
(1) 1392/ 60015A0 :                     ; @($04,r14) - Channel slot
(1) 1393/ 60015A0 :                     ; @($08,r14) - Enable/Disable/Restart
(1) 1394/ 60015A0 :                     ; ------------------------------------------------
(1) 1395/ 60015A0 :                     
(1) 1396/ 60015A0 :                     CmdTaskMd_PWM_Enable:
(1) 1397/ 60015A0 : 4F22                		sts	pr,@-r15
(1) 1398/ 60015A2 : 51E1                		mov	@($04,r14),r1
(1) 1399/ 60015A4 : 52E2                		mov	@($08,r14),r2
(1) 1400/ 60015A6 : BD41                		bsr	MarsSound_PwmEnable
(1) 1401/ 60015A8 : 0009                		nop
(1) 1402/ 60015AA : 4F26                		lds	@r15+,pr
(1) 1403/ 60015AC : 000B                		rts
(1) 1404/ 60015AE : 0009                		nop
(1) 1405/ 60015B0 :                     		align 4
(1) 1406/ 60015B0 :                     
(1) 1407/ 60015B0 :                     ; ----------------------------------------
(1) 1408/ 60015B0 :                     
(1) 1409/ 60015B0 : 2000 4100 0600 0724 		ltorg
                    0600 5A70 0600 5A70 
                    0600 0ACE 0600 07EA 
                    0600 5878 0000 FFFF 
(1) 1410/ 60015D0 :                     
(1) 1411/ 60015D0 :                     ; =================================================================
(1) 1412/ 60015D0 :                     ; ------------------------------------------------
(1) 1413/ 60015D0 :                     ; Slave | Watchdog interrupt
(1) 1414/ 60015D0 :                     ; ------------------------------------------------
(1) 1415/ 60015D0 :                     
(1) 1416/ 60015D0 :                     s_irq_custom:
(1) 1417/ 60015D0 : 2F26                		mov	r2,@-r15
(1) 1418/ 60015D2 : 910F                		mov	#_FRT,r1
(1) 1419/ 60015D4 : 8417                		mov.b   @(7,r1),r0
(1) 1420/ 60015D6 : CA02                		xor     #2,r0
(1) 1421/ 60015D8 : 8017                		mov.b   r0,@(7,r1)
(1) 1422/ 60015DA :                     
(1) 1423/ 60015DA :                     ; 		mov.w	@(marsGbl_ZSortReq,gbr),r0
(1) 1424/ 60015DA :                     ; 		cmp/eq	#1,r0
(1) 1425/ 60015DA :                     ; 		bf	.no_req
(1) 1426/ 60015DA :                     ; 		xor	r0,r0
(1) 1427/ 60015DA :                     ; 		mov.w	r0,@(marsGbl_ZSortReq,gbr)
(1) 1428/ 60015DA :                     ; 
(1) 1429/ 60015DA :                     ; ; 	; Sorting task starts here
(1) 1430/ 60015DA :                     ; ; 		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0
(1) 1431/ 60015DA :                     ; ; 		cmp/eq	#0,r0
(1) 1432/ 60015DA :                     ; ; 		bt	.no_request
(1) 1433/ 60015DA :                     ; ; 		mov	r3,@-r15
(1) 1434/ 60015DA :                     ; ; 		mov	r4,@-r15
(1) 1435/ 60015DA :                     ; ; 		mov	r5,@-r15
(1) 1436/ 60015DA :                     ; ; 		mov	r6,@-r15
(1) 1437/ 60015DA :                     ; ; 		mov	#CS3+$44,r1
(1) 1438/ 60015DA :                     ; ; 		mov	@r1,r0
(1) 1439/ 60015DA :                     ; ; 		add 	#1,r0
(1) 1440/ 60015DA :                     ; ; 		mov	r0,@r1
(1) 1441/ 60015DA :                     ; ; 		mov	@r15+,r6
(1) 1442/ 60015DA :                     ; ; 		mov	@r15+,r5
(1) 1443/ 60015DA :                     ; ; 		mov	@r15+,r4
(1) 1444/ 60015DA :                     ; ; 		mov	@r15+,r3
(1) 1445/ 60015DA :                     ; ; .no_request:
(1) 1446/ 60015DA :                     ; ; 	; End
(1) 1447/ 60015DA :                     ; ; 
(1) 1448/ 60015DA :                     ; 
(1) 1449/ 60015DA :                     ; .no_req:
(1) 1450/ 60015DA : 910C                		mov	#$FFFFFE80,r1
(1) 1451/ 60015DC : 900C                		mov.w   #$A518,r0		; Watchdog OFF
(1) 1452/ 60015DE : 2101                		mov.w   r0,@r1
(1) 1453/ 60015E0 : CB20                		or      #$20,r0
(1) 1454/ 60015E2 : 2101                		mov.w   r0,@r1
(1) 1455/ 60015E4 : E201                		mov	#1,r2
(1) 1456/ 60015E6 : 9008                		mov.w   #$5A7F,r0		; Timer for next one
(1) 1457/ 60015E8 : 202B                		or	r2,r0
(1) 1458/ 60015EA : 2101                		mov.w	r0,@r1
(1) 1459/ 60015EC : 62F6                		mov	@r15+,r2
(1) 1460/ 60015EE : 000B                		rts
(1) 1461/ 60015F0 : 0009                		nop
(1) 1462/ 60015F2 :                     		align 4
(1) 1463/ 60015F4 : FE10 FE80 A518 5A7F 		ltorg
(1) 1464/ 60015FC :                     
(1) 1465/ 60015FC :                     ; ====================================================================
(1) 1466/ 60015FC :                     ; ----------------------------------------------------------------
(1) 1467/ 60015FC :                     ; Cache routines
(1) 1468/ 60015FC :                     ; ----------------------------------------------------------------
(1) 1469/ 60015FC :                     
(1) 1470/ 60015FC :                     		include "system/mars/cache.asm"
(2)    1/ 60015FC :                     ; ====================================================================
(2)    2/ 60015FC :                     ; ----------------------------------------------------------------
(2)    3/ 60015FC :                     ; Video CACHE routines for Master CPU
(2)    4/ 60015FC :                     ; ----------------------------------------------------------------
(2)    5/ 60015FC :                     
(2)    6/ 60015FC :                     		align 4
(2)    7/ 60015FC :                     CACHE_MASTER:
(2)    8/FFFFFFFFC0000000 :                     		phase $C0000000
(2)    9/FFFFFFFFC0000000 :                     
(2)   10/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   11/FFFFFFFFC0000000 :                     ; MASTER Background tasks
(2)   12/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   13/FFFFFFFFC0000000 :                     
(2)   14/FFFFFFFFC0000000 :                     ; Cache_OnInterrupt:
(2)   15/FFFFFFFFC0000000 :                     m_irq_custom:
(2)   16/FFFFFFFFC0000000 : 912C                		mov	#_FRT,r1
(2)   17/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1), r0
(2)   18/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   19/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   20/FFFFFFFFC0000008 : C50D                		mov.w	@(marsGbl_DrwTask,gbr),r0	; Framebuffer clear request ($08)?
(2)   21/FFFFFFFFC000000A : 8808                		cmp/eq	#8,r0
(2)   22/FFFFFFFFC000000C : 8B2B                		bf	maindrw_tasks
(2)   23/FFFFFFFFC000000E :                     
(2)   24/FFFFFFFFC000000E :                     ; --------------------------------
(2)   25/FFFFFFFFC000000E :                     ; TASK $08 - Clear Framebuffer
(2)   26/FFFFFFFFC000000E :                     ; --------------------------------
(2)   27/FFFFFFFFC000000E :                     
(2)   28/FFFFFFFFC000000E :                     ; .task_08:
(2)   29/FFFFFFFFC000000E : 2F26                		mov	r2,@-r15
(2)   30/FFFFFFFFC0000010 : D110                		mov	#_vdpreg,r1
(2)   31/FFFFFFFFC0000012 : C422                		mov.b	@(marsGbl_CurrFb,gbr),r0
(2)   32/FFFFFFFFC0000014 : 6203                		mov	r0,r2
(2)   33/FFFFFFFFC0000016 : 841B                .wait_frmswp:	mov.b	@(framectl,r1),r0
(2)   34/FFFFFFFFC0000018 : 3200                		cmp/eq	r0,r2
(2)   35/FFFFFFFFC000001A : 8BFC                		bf	.wait_frmswp
(2)   36/FFFFFFFFC000001C : 8515                .wait_fb:	mov.w   @($A,r1), r0		; Framebuffer free?
(2)   37/FFFFFFFFC000001E : C802                		tst     #2,r0
(2)   38/FFFFFFFFC0000020 : 8BFC                		bf      .wait_fb
(2)   39/FFFFFFFFC0000022 : 8513                		mov.w   @(6,r1),r0		; SVDP-fill address
(2)   40/FFFFFFFFC0000024 : 705F                		add     #$5F,r0			; Preincrement
(2)   41/FFFFFFFFC0000026 : 8113                		mov.w   r0,@(6,r1)
(2)   42/FFFFFFFFC0000028 : 9019                		mov.w   #320/2,r0		; SVDP-fill size (320 pixels)
(2)   43/FFFFFFFFC000002A : 8112                		mov.w   r0,@(4,r1)
(2)   44/FFFFFFFFC000002C : E000                		mov     #0,r0			; SVDP-fill pixel data and start filling
(2)   45/FFFFFFFFC000002E : 8114                		mov.w   r0,@(8,r1)		; After finishing, SVDP-address got updated
(2)   46/FFFFFFFFC0000030 : 9116                		mov.l   #$FFFFFE80,r1
(2)   47/FFFFFFFFC0000032 : 9016                		mov.w   #$A518,r0		; OFF
(2)   48/FFFFFFFFC0000034 : 2101                		mov.w   r0,@r1
(2)   49/FFFFFFFFC0000036 : CB20                		or      #$20,r0			; ON
(2)   50/FFFFFFFFC0000038 : 2101                		mov.w   r0,@r1
(2)   51/FFFFFFFFC000003A : 9013                		mov.w   #$5A10,r0
(2)   52/FFFFFFFFC000003C : 2101                		mov.w   r0,@r1
(2)   53/FFFFFFFFC000003E : D106                		mov	#Cach_ClrLines,r1	; Decrement a line to progress
(2)   54/FFFFFFFFC0000040 : 6012                		mov	@r1,r0
(2)   55/FFFFFFFFC0000042 : 4010                		dt	r0
(2)   56/FFFFFFFFC0000044 : 8F02                		bf/s	.on_clr
(2)   57/FFFFFFFFC0000046 : 2102                		mov	r0,@r1
(2)   58/FFFFFFFFC0000048 : E001                		mov	#1,r0			; If finished: set task $01
(2)   59/FFFFFFFFC000004A : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)   60/FFFFFFFFC000004C :                     .on_clr:
(2)   61/FFFFFFFFC000004C : 62F6                		mov	@r15+,r2
(2)   62/FFFFFFFFC000004E : 000B                		rts
(2)   63/FFFFFFFFC0000050 : 0009                		nop
(2)   64/FFFFFFFFC0000052 :                     		align 4
(2)   65/FFFFFFFFC0000054 : 2000 4100 C000 0764 		ltorg
                    FE10 00A0 FE80 A518 
                    5A10                
(2)   66/FFFFFFFFC0000066 :                     
(2)   67/FFFFFFFFC0000066 :                     ; --------------------------------
(2)   68/FFFFFFFFC0000066 :                     ; Main drawing routine
(2)   69/FFFFFFFFC0000066 :                     ; --------------------------------
(2)   70/FFFFFFFFC0000066 :                     
(2)   71/FFFFFFFFC0000066 :                     maindrw_tasks:
(2)   72/FFFFFFFFC0000066 : 4008                		shll2	r0
(2)   73/FFFFFFFFC0000068 : D12B                		mov	#.list,r1
(2)   74/FFFFFFFFC000006A : 001E                		mov	@(r1,r0),r0
(2)   75/FFFFFFFFC000006C : 402B                		jmp	@r0
(2)   76/FFFFFFFFC000006E : 0009                		nop
(2)   77/FFFFFFFFC0000070 :                     		align 4
(2)   78/FFFFFFFFC0000070 :                     .list:
(2)   79/FFFFFFFFC0000070 : C000 00C0           		dc.l drwtsk_01		; (null entry, but failsafe)
(2)   80/FFFFFFFFC0000074 : C000 00C0           		dc.l drwtsk_01		; Main drawing routine
(2)   81/FFFFFFFFC0000078 : C000 007C           		dc.l drwtsk_02		; Resume from solid color
(2)   82/FFFFFFFFC000007C :                     
(2)   83/FFFFFFFFC000007C :                     ; --------------------------------
(2)   84/FFFFFFFFC000007C :                     ; Task $02
(2)   85/FFFFFFFFC000007C :                     ; --------------------------------
(2)   86/FFFFFFFFC000007C :                     
(2)   87/FFFFFFFFC000007C :                     ; TODO: currently it only resumes
(2)   88/FFFFFFFFC000007C :                     ; from solid_color
(2)   89/FFFFFFFFC000007C :                     
(2)   90/FFFFFFFFC000007C :                     drwtsk_02:
(2)   91/FFFFFFFFC000007C : 2F26                		mov	r2,@-r15
(2)   92/FFFFFFFFC000007E : 2F36                		mov	r3,@-r15
(2)   93/FFFFFFFFC0000080 : 2F46                		mov	r4,@-r15
(2)   94/FFFFFFFFC0000082 : 2F56                		mov	r5,@-r15
(2)   95/FFFFFFFFC0000084 : 2F66                		mov	r6,@-r15
(2)   96/FFFFFFFFC0000086 : 2F76                		mov	r7,@-r15
(2)   97/FFFFFFFFC0000088 : 2F86                		mov	r8,@-r15
(2)   98/FFFFFFFFC000008A : 2F96                		mov	r9,@-r15
(2)   99/FFFFFFFFC000008C : 2FA6                		mov	r10,@-r15
(2)  100/FFFFFFFFC000008E : 2FB6                		mov	r11,@-r15
(2)  101/FFFFFFFFC0000090 : 2FC6                		mov	r12,@-r15
(2)  102/FFFFFFFFC0000092 : 2FD6                		mov	r13,@-r15
(2)  103/FFFFFFFFC0000094 : 2FE6                		mov	r14,@-r15
(2)  104/FFFFFFFFC0000096 : 4F12                		sts	macl,@-r15
(2)  105/FFFFFFFFC0000098 : 4F02                		sts	mach,@-r15
(2)  106/FFFFFFFFC000009A : D020                		mov	#Cach_LnDrw_L,r0
(2)  107/FFFFFFFFC000009C : 6E06                		mov	@r0+,r14
(2)  108/FFFFFFFFC000009E : 6D06                		mov	@r0+,r13
(2)  109/FFFFFFFFC00000A0 : 6C06                		mov	@r0+,r12
(2)  110/FFFFFFFFC00000A2 : 6B06                		mov	@r0+,r11
(2)  111/FFFFFFFFC00000A4 : 6A06                		mov	@r0+,r10
(2)  112/FFFFFFFFC00000A6 : 6906                		mov	@r0+,r9
(2)  113/FFFFFFFFC00000A8 : 6806                		mov	@r0+,r8
(2)  114/FFFFFFFFC00000AA : 6706                		mov	@r0+,r7
(2)  115/FFFFFFFFC00000AC : 6606                		mov	@r0+,r6
(2)  116/FFFFFFFFC00000AE : 6506                		mov	@r0+,r5
(2)  117/FFFFFFFFC00000B0 : 6406                		mov	@r0+,r4
(2)  118/FFFFFFFFC00000B2 : 6306                		mov	@r0+,r3
(2)  119/FFFFFFFFC00000B4 : 6206                		mov	@r0+,r2
(2)  120/FFFFFFFFC00000B6 : 6106                		mov	@r0+,r1
(2)  121/FFFFFFFFC00000B8 : E001                		mov	#1,r0
(2)  122/FFFFFFFFC00000BA : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  123/FFFFFFFFC00000BC : A11D                		bra	drwsld_updline
(2)  124/FFFFFFFFC00000BE : 0009                		nop
(2)  125/FFFFFFFFC00000C0 :                     
(2)  126/FFFFFFFFC00000C0 :                     ; --------------------------------
(2)  127/FFFFFFFFC00000C0 :                     ; Task $01
(2)  128/FFFFFFFFC00000C0 :                     ; --------------------------------
(2)  129/FFFFFFFFC00000C0 :                     
(2)  130/FFFFFFFFC00000C0 :                     drwtsk_01:
(2)  131/FFFFFFFFC00000C0 : 2F26                		mov	r2,@-r15
(2)  132/FFFFFFFFC00000C2 : C50C                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces to draw?
(2)  133/FFFFFFFFC00000C4 : 8800                		cmp/eq	#0,r0
(2)  134/FFFFFFFFC00000C6 : 8B03                		bf	.has_pz
(2)  135/FFFFFFFFC00000C8 : E000                		mov	#0,r0				; If none, just end quickly.
(2)  136/FFFFFFFFC00000CA : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  137/FFFFFFFFC00000CC : A139                		bra	drwtask_exit
(2)  138/FFFFFFFFC00000CE : E27F                		mov	#$7F,r2
(2)  139/FFFFFFFFC00000D0 :                     
(2)  140/FFFFFFFFC00000D0 :                     .has_pz:
(2)  141/FFFFFFFFC00000D0 : 2F36                		mov	r3,@-r15
(2)  142/FFFFFFFFC00000D2 : 2F46                		mov	r4,@-r15
(2)  143/FFFFFFFFC00000D4 : 2F56                		mov	r5,@-r15
(2)  144/FFFFFFFFC00000D6 : 2F66                		mov	r6,@-r15
(2)  145/FFFFFFFFC00000D8 : 2F76                		mov	r7,@-r15
(2)  146/FFFFFFFFC00000DA : 2F86                		mov	r8,@-r15
(2)  147/FFFFFFFFC00000DC : 2F96                		mov	r9,@-r15
(2)  148/FFFFFFFFC00000DE : 2FA6                		mov	r10,@-r15
(2)  149/FFFFFFFFC00000E0 : 2FB6                		mov	r11,@-r15
(2)  150/FFFFFFFFC00000E2 : 2FC6                		mov	r12,@-r15
(2)  151/FFFFFFFFC00000E4 : 2FD6                		mov	r13,@-r15
(2)  152/FFFFFFFFC00000E6 : 2FE6                		mov	r14,@-r15
(2)  153/FFFFFFFFC00000E8 : 4F12                		sts	macl,@-r15
(2)  154/FFFFFFFFC00000EA : 4F02                		sts	mach,@-r15
(2)  155/FFFFFFFFC00000EC :                     drwtsk1_newpz:
(2)  156/FFFFFFFFC00000EC : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0	; r14 - Current pieces pointer to READ
(2)  157/FFFFFFFFC00000EE : 6E03                		mov	r0,r14
(2)  158/FFFFFFFFC00000F0 : 59E0                		mov	@(plypz_ypos,r14),r9		; Start grabbing StartY/EndY positions
(2)  159/FFFFFFFFC00000F2 : 6A93                		mov	r9,r10
(2)  160/FFFFFFFFC00000F4 : D00A                		mov	#$FFFF,r0
(2)  161/FFFFFFFFC00000F6 : 4929                		shlr16	r9
(2)  162/FFFFFFFFC00000F8 : 699F                		exts	r9,r9			;  r9 - Top
(2)  163/FFFFFFFFC00000FA : 2A09                		and	r0,r10			; r10 - Bottom
(2)  164/FFFFFFFFC00000FC : 3090                		cmp/eq	r9,r0			; if Top==Bottom, exit
(2)  165/FFFFFFFFC00000FE : 8908                		bt	.invld_y
(2)  166/FFFFFFFFC0000100 : 9010                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2)  167/FFFFFFFFC0000102 : 3903                		cmp/ge	r0,r9
(2)  168/FFFFFFFFC0000104 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2)  169/FFFFFFFFC0000106 : 3A07                		cmp/gt	r0,r10
(2)  170/FFFFFFFFC0000108 : 8B00                		bf	.len_max
(2)  171/FFFFFFFFC000010A : 6A03                		mov	r0,r10
(2)  172/FFFFFFFFC000010C :                     .len_max:
(2)  173/FFFFFFFFC000010C : 3A98                		sub	r9,r10			; r10: Turn it into Y lenght (Bottom - Top)
(2)  174/FFFFFFFFC000010E : 4A15                		cmp/pl	r10
(2)  175/FFFFFFFFC0000110 : 8909                		bt	drwtsk1_vld_y
(2)  176/FFFFFFFFC0000112 :                     .invld_y:
(2)  177/FFFFFFFFC0000112 : A0F7                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2)  178/FFFFFFFFC0000114 : 0009                		nop
(2)  179/FFFFFFFFC0000116 :                     		align 4
(2)  180/FFFFFFFFC0000118 : C000 0070 C000 06CC 		ltorg
                    0000 FFFF 00E0      
(2)  181/FFFFFFFFC0000126 :                     
(2)  182/FFFFFFFFC0000126 :                     ; ------------------------------------
(2)  183/FFFFFFFFC0000126 :                     ; If Y top / Y len are valid:
(2)  184/FFFFFFFFC0000126 :                     ; ------------------------------------
(2)  185/FFFFFFFFC0000126 :                     
(2)  186/FFFFFFFFC0000126 :                     drwtsk1_vld_y:
(2)  187/FFFFFFFFC0000126 : 51E1                		mov	@(plypz_xl,r14),r1		; r1 - X left
(2)  188/FFFFFFFFC0000128 : 52E2                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2)  189/FFFFFFFFC000012A : 53E3                		mov	@(plypz_xr,r14),r3		; r3 - X right
(2)  190/FFFFFFFFC000012C : 54E4                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2)  191/FFFFFFFFC000012E : 50EE                		mov	@(plypz_type,r14),r0		; Check material options
(2)  192/FFFFFFFFC0000130 : 4029                		shlr16	r0
(2)  193/FFFFFFFFC0000132 : 4019                		shlr8	r0
(2)  194/FFFFFFFFC0000134 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2)  195/FFFFFFFFC0000136 : 8B01                 		bf	drwtsk_texmode
(2)  196/FFFFFFFFC0000138 : A08A                		bra	drwtsk_solidmode
(2)  197/FFFFFFFFC000013A : 0009                		nop
(2)  198/FFFFFFFFC000013C :                     
(2)  199/FFFFFFFFC000013C :                     ; ------------------------------------
(2)  200/FFFFFFFFC000013C :                     ; Texture mode
(2)  201/FFFFFFFFC000013C :                     ; 
(2)  202/FFFFFFFFC000013C :                     ; r1  - XL
(2)  203/FFFFFFFFC000013C :                     ; r2  - XL DX
(2)  204/FFFFFFFFC000013C :                     ; r3  - XR
(2)  205/FFFFFFFFC000013C :                     ; r4  - XR DX
(2)  206/FFFFFFFFC000013C :                     ; r5  - SRC XL
(2)  207/FFFFFFFFC000013C :                     ; r6  - SRC XR
(2)  208/FFFFFFFFC000013C :                     ; r7  - SRC YL
(2)  209/FFFFFFFFC000013C :                     ; r8  - SRC YR
(2)  210/FFFFFFFFC000013C :                     ; r9  - Y current
(2)  211/FFFFFFFFC000013C :                     ; r10  - Number of lines
(2)  212/FFFFFFFFC000013C :                     ; ------------------------------------
(2)  213/FFFFFFFFC000013C :                     
(2)  214/FFFFFFFFC000013C :                     drwtsk_texmode:
(2)  215/FFFFFFFFC000013C : C510                		mov.w	@(marsGbl_DivReq_M,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2)  216/FFFFFFFFC000013E : 8801                		cmp/eq	#1,r0				; middle of division
(2)  217/FFFFFFFFC0000140 : 8B02                		bf	.texvalid
(2)  218/FFFFFFFFC0000142 : A0F0                		bra	drwtask_return
(2)  219/FFFFFFFFC0000144 : 0009                		nop
(2)  220/FFFFFFFFC0000146 :                     		align 4
(2)  221/FFFFFFFFC0000148 :                     .texvalid:
(2)  222/FFFFFFFFC0000148 : 55E5                		mov	@(plypz_src_xl,r14),r5		; Texture X left
(2)  223/FFFFFFFFC000014A : 56E9                		mov	@(plypz_src_xr,r14),r6		; Texture X right
(2)  224/FFFFFFFFC000014C : 57E7                		mov	@(plypz_src_yl,r14),r7		; Texture Y up
(2)  225/FFFFFFFFC000014E : 58EB                		mov	@(plypz_src_yr,r14),r8		; Texture Y down
(2)  226/FFFFFFFFC0000150 :                     
(2)  227/FFFFFFFFC0000150 :                     drwsld_nxtline_tex:
(2)  228/FFFFFFFFC0000150 : 4911                		cmp/pz	r9				; Y Line below 0?
(2)  229/FFFFFFFFC0000152 : 8B6B                		bf	drwsld_updline_tex
(2)  230/FFFFFFFFC0000154 : D03D                		mov	drwtex_tagshght,r0		; Y Line after 224?
(2)  231/FFFFFFFFC0000156 : 3903                		cmp/ge	r0,r9
(2)  232/FFFFFFFFC0000158 : 8975                		bt	drwtex_gonxtpz
(2)  233/FFFFFFFFC000015A : 2F26                		mov	r2,@-r15
(2)  234/FFFFFFFFC000015C : 2F46                		mov	r4,@-r15
(2)  235/FFFFFFFFC000015E : 2F56                		mov	r5,@-r15
(2)  236/FFFFFFFFC0000160 : 2F66                		mov	r6,@-r15		
(2)  237/FFFFFFFFC0000162 : 2F76                		mov	r7,@-r15
(2)  238/FFFFFFFFC0000164 : 2F86                		mov	r8,@-r15
(2)  239/FFFFFFFFC0000166 : 2FA6                		mov	r10,@-r15
(2)  240/FFFFFFFFC0000168 : 2FD6                		mov	r13,@-r15
(2)  241/FFFFFFFFC000016A : 6B13                		mov	r1,r11			; r11 - X left copy
(2)  242/FFFFFFFFC000016C : 6C33                		mov	r3,r12			; r12 - X right copy
(2)  243/FFFFFFFFC000016E : 4B29                		shlr16	r11
(2)  244/FFFFFFFFC0000170 : 4C29                		shlr16	r12
(2)  245/FFFFFFFFC0000172 : 6BBF                		exts	r11,r11
(2)  246/FFFFFFFFC0000174 : 6CCF                		exts	r12,r12
(2)  247/FFFFFFFFC0000176 : 60C3                		mov	r12,r0			; r0: X Right - X Left
(2)  248/FFFFFFFFC0000178 : 30B8                		sub	r11,r0
(2)  249/FFFFFFFFC000017A : 4015                		cmp/pl	r0			; Line reversed?
(2)  250/FFFFFFFFC000017C : 8908                		bt	.txrevers
(2)  251/FFFFFFFFC000017E : 60C3                		mov	r12,r0			; Swap XL and XR values
(2)  252/FFFFFFFFC0000180 : 6CB3                		mov	r11,r12
(2)  253/FFFFFFFFC0000182 : 6B03                		mov	r0,r11
(2)  254/FFFFFFFFC0000184 : 6053                		mov	r5,r0
(2)  255/FFFFFFFFC0000186 : 6563                		mov	r6,r5
(2)  256/FFFFFFFFC0000188 : 6603                		mov	r0,r6
(2)  257/FFFFFFFFC000018A : 6073                		mov	r7,r0
(2)  258/FFFFFFFFC000018C : 6783                		mov	r8,r7
(2)  259/FFFFFFFFC000018E : 6803                		mov	r0,r8
(2)  260/FFFFFFFFC0000190 :                     .txrevers:
(2)  261/FFFFFFFFC0000190 : 3CB0                		cmp/eq	r11,r12				; Same X position?
(2)  262/FFFFFFFFC0000192 : 8943                		bt	.tex_skip_line
(2)  263/FFFFFFFFC0000194 : 90EA                		mov	#SCREEN_WIDTH,r0		; X right < 0?
(2)  264/FFFFFFFFC0000196 : 4C15                		cmp/pl	r12
(2)  265/FFFFFFFFC0000198 : 8B40                		bf	.tex_skip_line
(2)  266/FFFFFFFFC000019A : 3B07                		cmp/gt	r0,r11				; X left > 320?
(2)  267/FFFFFFFFC000019C : 893E                		bt	.tex_skip_line
(2)  268/FFFFFFFFC000019E : 62C3                		mov	r12,r2
(2)  269/FFFFFFFFC00001A0 : 60B3                		mov 	r11,r0
(2)  270/FFFFFFFFC00001A2 : 3208                		sub 	r0,r2
(2)  271/FFFFFFFFC00001A4 : 3658                		sub	r5,r6
(2)  272/FFFFFFFFC00001A6 : 3878                		sub	r7,r8
(2)  273/FFFFFFFFC00001A8 :                     
(2)  274/FFFFFFFFC00001A8 :                     	; Calculate new DX values
(2)  275/FFFFFFFFC00001A8 : 90E1                		mov	#_JR,r0				; r6/r2
(2)  276/FFFFFFFFC00001AA : 2022                		mov	r2,@r0
(2)  277/FFFFFFFFC00001AC : 1061                		mov	r6,@(4,r0)
(2)  278/FFFFFFFFC00001AE : 0009                		nop
(2)  279/FFFFFFFFC00001B0 : 5601                		mov	@(4,r0),r6			; r8/r2
(2)  280/FFFFFFFFC00001B2 : 2022                		mov	r2,@r0
(2)  281/FFFFFFFFC00001B4 : 1081                		mov	r8,@(4,r0)
(2)  282/FFFFFFFFC00001B6 : 0009                		nop
(2)  283/FFFFFFFFC00001B8 : 5801                		mov	@(4,r0),r8
(2)  284/FFFFFFFFC00001BA :                     
(2)  285/FFFFFFFFC00001BA :                     	; Limit X destination points
(2)  286/FFFFFFFFC00001BA :                     	; and correct the texture's X positions
(2)  287/FFFFFFFFC00001BA : 90D7                		mov	#SCREEN_WIDTH,r0		; XR point > 320?
(2)  288/FFFFFFFFC00001BC : 3C07                		cmp/gt	r0,r12
(2)  289/FFFFFFFFC00001BE : 8B00                		bf	.tr_fix
(2)  290/FFFFFFFFC00001C0 : 6C03                		mov	r0,r12				; Force XR to 320
(2)  291/FFFFFFFFC00001C2 :                     .tr_fix:
(2)  292/FFFFFFFFC00001C2 : 4B15                		cmp/pl	r11				; XL point < 0?
(2)  293/FFFFFFFFC00001C4 : 8907                		bt	.tl_fix
(2)  294/FFFFFFFFC00001C6 : 62BB                		neg	r11,r2				; Fix texture positions
(2)  295/FFFFFFFFC00001C8 : 326D                		dmuls	r6,r2
(2)  296/FFFFFFFFC00001CA : 001A                		sts	macl,r0
(2)  297/FFFFFFFFC00001CC : 350C                		add	r0,r5
(2)  298/FFFFFFFFC00001CE : 328D                		dmuls	r8,r2
(2)  299/FFFFFFFFC00001D0 : 001A                		sts	macl,r0
(2)  300/FFFFFFFFC00001D2 : 370C                		add	r0,r7
(2)  301/FFFFFFFFC00001D4 : 2BBA                		xor	r11,r11				; And reset XL to 0
(2)  302/FFFFFFFFC00001D6 :                     .tl_fix:
(2)  303/FFFFFFFFC00001D6 : 3CB8                		sub 	r11,r12
(2)  304/FFFFFFFFC00001D8 : 4C15                		cmp/pl	r12
(2)  305/FFFFFFFFC00001DA : 8B1F                		bf	.tex_skip_line
(2)  306/FFFFFFFFC00001DC :                     ; 		mov	#$10,r0				; (Limiter test)
(2)  307/FFFFFFFFC00001DC :                     ; 		cmp/ge	r0,r12
(2)  308/FFFFFFFFC00001DC :                     ; 		bf	.testlwrit
(2)  309/FFFFFFFFC00001DC :                     ; 		mov	r0,r12
(2)  310/FFFFFFFFC00001DC :                     ; .testlwrit:
(2)  311/FFFFFFFFC00001DC : 6093                		mov 	r9,r0				; Y position * $200
(2)  312/FFFFFFFFC00001DE : 4018                		shll8	r0
(2)  313/FFFFFFFFC00001E0 : 4000                		shll	r0
(2)  314/FFFFFFFFC00001E2 : DA5D                		mov 	#_overwrite+$200,r10		; Point to TOPLEFT in framebuffer
(2)  315/FFFFFFFFC00001E4 : 3A0C                		add 	r0,r10				; Add Y
(2)  316/FFFFFFFFC00001E6 : 3ABC                		add 	r11,r10				; Add X
(2)  317/FFFFFFFFC00001E8 : 92C2                		mov	#$1FFF,r2
(2)  318/FFFFFFFFC00001EA : 90C2                		mov	#$FF,r0
(2)  319/FFFFFFFFC00001EC : 5BED                		mov	@(plypz_mtrl,r14),r11		; r11 - texture data
(2)  320/FFFFFFFFC00001EE : 54EE                		mov	@(plypz_type,r14),r4		;  r4 - texture width|palinc
(2)  321/FFFFFFFFC00001F0 : 6D43                		mov	r4,r13
(2)  322/FFFFFFFFC00001F2 : 4429                		shlr16	r4
(2)  323/FFFFFFFFC00001F4 : 2429                		and	r2,r4
(2)  324/FFFFFFFFC00001F6 : 2D09                		and	r0,r13
(2)  325/FFFFFFFFC00001F8 : 2F96                		mov	r9,@-r15
(2)  326/FFFFFFFFC00001FA :                     .tex_xloop:
(2)  327/FFFFFFFFC00001FA : 6273                		mov	r7,r2
(2)  328/FFFFFFFFC00001FC : 4229                		shlr16	r2
(2)  329/FFFFFFFFC00001FE : 242E                		mulu	r2,r4
(2)  330/FFFFFFFFC0000200 : 6253                		mov	r5,r2	   			; Build column index
(2)  331/FFFFFFFFC0000202 : 001A                		sts	macl,r0
(2)  332/FFFFFFFFC0000204 : 4229                		shlr16	r2
(2)  333/FFFFFFFFC0000206 : 302C                		add	r2,r0
(2)  334/FFFFFFFFC0000208 : 00BC                		mov.b	@(r0,r11),r0			; Read pixel
(2)  335/FFFFFFFFC000020A :                     ; 		cmp/eq	#0,r0				; If texture pixel == 0
(2)  336/FFFFFFFFC000020A :                     ; 		bt	.blnk				; then don't add
(2)  337/FFFFFFFFC000020A : 30DC                		add	r13,r0
(2)  338/FFFFFFFFC000020C : C9FF                		and	#$FF,r0
(2)  339/FFFFFFFFC000020E :                     ; .blnk:
(2)  340/FFFFFFFFC000020E : 2A00                		mov.b	r0,@r10	   			; Write pixel
(2)  341/FFFFFFFFC0000210 : 7A01                		add 	#1,r10
(2)  342/FFFFFFFFC0000212 : 356C                		add	r6,r5				; Update X
(2)  343/FFFFFFFFC0000214 : 4C10                		dt	r12
(2)  344/FFFFFFFFC0000216 : 8FF0                		bf/s	.tex_xloop
(2)  345/FFFFFFFFC0000218 : 378C                		add	r8,r7				; Update Y
(2)  346/FFFFFFFFC000021A : 69F6                		mov	@r15+,r9
(2)  347/FFFFFFFFC000021C :                     .tex_skip_line:
(2)  348/FFFFFFFFC000021C : 6DF6                		mov	@r15+,r13
(2)  349/FFFFFFFFC000021E : 6AF6                		mov	@r15+,r10
(2)  350/FFFFFFFFC0000220 : 68F6                		mov	@r15+,r8
(2)  351/FFFFFFFFC0000222 : 67F6                		mov	@r15+,r7
(2)  352/FFFFFFFFC0000224 : 66F6                		mov	@r15+,r6
(2)  353/FFFFFFFFC0000226 : 65F6                		mov	@r15+,r5
(2)  354/FFFFFFFFC0000228 : 64F6                		mov	@r15+,r4
(2)  355/FFFFFFFFC000022A : 62F6                		mov	@r15+,r2
(2)  356/FFFFFFFFC000022C :                     drwsld_updline_tex:
(2)  357/FFFFFFFFC000022C : 50E6                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2)  358/FFFFFFFFC000022E : 350C                		add	r0,r5
(2)  359/FFFFFFFFC0000230 : 50EA                		mov	@(plypz_src_xr_dx,r14),r0
(2)  360/FFFFFFFFC0000232 : 360C                		add	r0,r6	
(2)  361/FFFFFFFFC0000234 : 50E8                		mov	@(plypz_src_yl_dx,r14),r0
(2)  362/FFFFFFFFC0000236 : 370C                		add	r0,r7
(2)  363/FFFFFFFFC0000238 : 50EC                		mov	@(plypz_src_yr_dx,r14),r0
(2)  364/FFFFFFFFC000023A : 380C                		add	r0,r8
(2)  365/FFFFFFFFC000023C : 312C                		add	r2,r1				; Update X postions
(2)  366/FFFFFFFFC000023E : 334C                		add	r4,r3
(2)  367/FFFFFFFFC0000240 : 4A10                		dt	r10
(2)  368/FFFFFFFFC0000242 : 8F85                		bf/s	drwsld_nxtline_tex
(2)  369/FFFFFFFFC0000244 : 7901                		add	#1,r9
(2)  370/FFFFFFFFC0000246 :                     drwtex_gonxtpz:
(2)  371/FFFFFFFFC0000246 : A05D                		bra	drwsld_nextpz
(2)  372/FFFFFFFFC0000248 : 0009                		nop
(2)  373/FFFFFFFFC000024A :                     		align 4
(2)  374/FFFFFFFFC000024C : 0000 00E0           drwtex_tagshght	dc.l	SCREEN_HEIGHT
(2)  375/FFFFFFFFC0000250 :                     
(2)  376/FFFFFFFFC0000250 :                     ; ------------------------------------
(2)  377/FFFFFFFFC0000250 :                     ; Solid Color
(2)  378/FFFFFFFFC0000250 :                     ; ------------------------------------
(2)  379/FFFFFFFFC0000250 :                     
(2)  380/FFFFFFFFC0000250 :                     drwtsk_solidmode:
(2)  381/FFFFFFFFC0000250 : 908F                		mov	#$FF,r0
(2)  382/FFFFFFFFC0000252 : 56ED                		mov	@(plypz_mtrl,r14),r6
(2)  383/FFFFFFFFC0000254 : 55EE                		mov	@(plypz_type,r14),r5
(2)  384/FFFFFFFFC0000256 : 2509                		and	r0,r5
(2)  385/FFFFFFFFC0000258 : 2609                		and	r0,r6
(2)  386/FFFFFFFFC000025A : 365C                		add	r5,r6
(2)  387/FFFFFFFFC000025C : DD3F                		mov	#_vdpreg,r13
(2)  388/FFFFFFFFC000025E :                     drwsld_nxtline:
(2)  389/FFFFFFFFC000025E : 6093                		mov	r9,r0
(2)  390/FFFFFFFFC0000260 : 30AC                		add	r10,r0
(2)  391/FFFFFFFFC0000262 : 4015                		cmp/pl	r0
(2)  392/FFFFFFFFC0000264 : 8B4E                		bf	drwsld_nextpz
(2)  393/FFFFFFFFC0000266 : 4911                		cmp/pz	r9
(2)  394/FFFFFFFFC0000268 : 8B47                		bf	drwsld_updline
(2)  395/FFFFFFFFC000026A : 9083                		mov	#SCREEN_HEIGHT,r0
(2)  396/FFFFFFFFC000026C : 3907                		cmp/gt	r0,r9
(2)  397/FFFFFFFFC000026E : 8949                		bt	drwsld_nextpz
(2)  398/FFFFFFFFC0000270 : 6B13                		mov	r1,r11
(2)  399/FFFFFFFFC0000272 : 6C33                		mov	r3,r12
(2)  400/FFFFFFFFC0000274 : 4B29                		shlr16	r11
(2)  401/FFFFFFFFC0000276 : 4C29                		shlr16	r12
(2)  402/FFFFFFFFC0000278 : 6BBF                		exts	r11,r11
(2)  403/FFFFFFFFC000027A : 6CCF                		exts	r12,r12
(2)  404/FFFFFFFFC000027C : 60C3                		mov	r12,r0
(2)  405/FFFFFFFFC000027E : 30B8                		sub	r11,r0
(2)  406/FFFFFFFFC0000280 : 4015                		cmp/pl	r0
(2)  407/FFFFFFFFC0000282 : 8902                		bt	.revers
(2)  408/FFFFFFFFC0000284 : 60C3                		mov	r12,r0
(2)  409/FFFFFFFFC0000286 : 6CB3                		mov	r11,r12
(2)  410/FFFFFFFFC0000288 : 6B03                		mov	r0,r11
(2)  411/FFFFFFFFC000028A :                     .revers:
(2)  412/FFFFFFFFC000028A : 9074                		mov	#SCREEN_WIDTH-1,r0
(2)  413/FFFFFFFFC000028C : 4C15                		cmp/pl	r12
(2)  414/FFFFFFFFC000028E : 8B34                		bf	drwsld_updline
(2)  415/FFFFFFFFC0000290 : 3B07                		cmp/gt	r0,r11
(2)  416/FFFFFFFFC0000292 : 8932                		bt	drwsld_updline
(2)  417/FFFFFFFFC0000294 : 3C07                		cmp/gt	r0,r12
(2)  418/FFFFFFFFC0000296 : 8B00                		bf	.r_fix
(2)  419/FFFFFFFFC0000298 : 6C03                		mov	r0,r12
(2)  420/FFFFFFFFC000029A :                     .r_fix:
(2)  421/FFFFFFFFC000029A : 4B15                		cmp/pl	r11
(2)  422/FFFFFFFFC000029C : 8900                		bt	.l_fix
(2)  423/FFFFFFFFC000029E : 2BBA                		xor	r11,r11
(2)  424/FFFFFFFFC00002A0 :                     .l_fix:
(2)  425/FFFFFFFFC00002A0 : E0FE                		mov	#-2,r0
(2)  426/FFFFFFFFC00002A2 : 2B09                		and	r0,r11
(2)  427/FFFFFFFFC00002A4 : 2C09                		and	r0,r12
(2)  428/FFFFFFFFC00002A6 : 60C3                		mov	r12,r0
(2)  429/FFFFFFFFC00002A8 : 30B8                		sub	r11,r0
(2)  430/FFFFFFFFC00002AA :                     ; 		mov	#6,r5
(2)  431/FFFFFFFFC00002AA :                     ; 		cmp/gt	r5,r0
(2)  432/FFFFFFFFC00002AA :                     ; 		bf	drwsld_lowpixls
(2)  433/FFFFFFFFC00002AA : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  434/FFFFFFFFC00002AC : C802                		tst	#2,r0
(2)  435/FFFFFFFFC00002AE : 8BFC                		bf	.wait
(2)  436/FFFFFFFFC00002B0 : 60C3                		mov	r12,r0
(2)  437/FFFFFFFFC00002B2 : 30B8                		sub	r11,r0
(2)  438/FFFFFFFFC00002B4 : 4001                		shlr	r0
(2)  439/FFFFFFFFC00002B6 : 81D2                		mov.w	r0,@(4,r13)	; length
(2)  440/FFFFFFFFC00002B8 : 60B3                		mov	r11,r0
(2)  441/FFFFFFFFC00002BA : 4001                		shlr	r0
(2)  442/FFFFFFFFC00002BC : 6593                		mov	r9,r5
(2)  443/FFFFFFFFC00002BE : 7501                		add	#1,r5
(2)  444/FFFFFFFFC00002C0 : 4518                		shll8	r5
(2)  445/FFFFFFFFC00002C2 : 305C                		add	r5,r0
(2)  446/FFFFFFFFC00002C4 : 81D3                		mov.w	r0,@(6,r13)	; address
(2)  447/FFFFFFFFC00002C6 : 6063                		mov	r6,r0
(2)  448/FFFFFFFFC00002C8 : 4018                		shll8	r0
(2)  449/FFFFFFFFC00002CA : 206B                		or	r6,r0
(2)  450/FFFFFFFFC00002CC : 81D4                		mov.w	r0,@(8,r13)	; Set data
(2)  451/FFFFFFFFC00002CE :                     		
(2)  452/FFFFFFFFC00002CE :                     	; If the line is large, leave it to VDP
(2)  453/FFFFFFFFC00002CE :                     	; and exit interrupt, we will come back
(2)  454/FFFFFFFFC00002CE :                     	; with more lines to draw
(2)  455/FFFFFFFFC00002CE : E028                		mov	#$28,r0
(2)  456/FFFFFFFFC00002D0 : 3C03                		cmp/ge	r0,r12
(2)  457/FFFFFFFFC00002D2 : 8B12                		bf	drwsld_updline
(2)  458/FFFFFFFFC00002D4 : E002                		mov	#2,r0
(2)  459/FFFFFFFFC00002D6 : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  460/FFFFFFFFC00002D8 : D021                		mov	#Cach_LnDrw_S,r0
(2)  461/FFFFFFFFC00002DA : 2016                		mov	r1,@-r0
(2)  462/FFFFFFFFC00002DC : 2026                		mov	r2,@-r0
(2)  463/FFFFFFFFC00002DE : 2036                		mov	r3,@-r0
(2)  464/FFFFFFFFC00002E0 : 2046                		mov	r4,@-r0
(2)  465/FFFFFFFFC00002E2 : 2056                		mov	r5,@-r0
(2)  466/FFFFFFFFC00002E4 : 2066                		mov	r6,@-r0
(2)  467/FFFFFFFFC00002E6 : 2076                		mov	r7,@-r0
(2)  468/FFFFFFFFC00002E8 : 2086                		mov	r8,@-r0
(2)  469/FFFFFFFFC00002EA : 2096                		mov	r9,@-r0
(2)  470/FFFFFFFFC00002EC : 20A6                		mov	r10,@-r0
(2)  471/FFFFFFFFC00002EE : 20B6                		mov	r11,@-r0
(2)  472/FFFFFFFFC00002F0 : 20C6                		mov	r12,@-r0
(2)  473/FFFFFFFFC00002F2 : 20D6                		mov	r13,@-r0
(2)  474/FFFFFFFFC00002F4 : 20E6                		mov	r14,@-r0
(2)  475/FFFFFFFFC00002F6 : A016                		bra	drwtask_return
(2)  476/FFFFFFFFC00002F8 : E200                		mov	#0,r2
(2)  477/FFFFFFFFC00002FA :                     drwsld_updline:
(2)  478/FFFFFFFFC00002FA : 312C                		add	r2,r1
(2)  479/FFFFFFFFC00002FC : 334C                		add	r4,r3
(2)  480/FFFFFFFFC00002FE : 4A10                		dt	r10
(2)  481/FFFFFFFFC0000300 : 8FAD                		bf/s	drwsld_nxtline
(2)  482/FFFFFFFFC0000302 : 7901                		add	#1,r9
(2)  483/FFFFFFFFC0000304 :                     		
(2)  484/FFFFFFFFC0000304 :                     ; ------------------------------------
(2)  485/FFFFFFFFC0000304 :                     ; if lower than 6 pixels
(2)  486/FFFFFFFFC0000304 :                     ; (TODO: check this later)
(2)  487/FFFFFFFFC0000304 :                     
(2)  488/FFFFFFFFC0000304 :                     ; drwsld_lowpixls:
(2)  489/FFFFFFFFC0000304 :                     ; 		cmp/pl	r0
(2)  490/FFFFFFFFC0000304 :                     ; 		bf	drwsld_updline
(2)  491/FFFFFFFFC0000304 :                     ; 		mov	r0,r12
(2)  492/FFFFFFFFC0000304 :                     ; 		mov	r9,r0
(2)  493/FFFFFFFFC0000304 :                     ; 		add	#1,r0
(2)  494/FFFFFFFFC0000304 :                     ; 		shll8	r0
(2)  495/FFFFFFFFC0000304 :                     ; 		shll	r0
(2)  496/FFFFFFFFC0000304 :                     ; 		add 	r11,r0
(2)  497/FFFFFFFFC0000304 :                     ; 		mov	#_overwrite+$200,r5
(2)  498/FFFFFFFFC0000304 :                     ; 		add	r0,r5
(2)  499/FFFFFFFFC0000304 :                     ; .wait_fb	mov.w	@(10,r13),r0
(2)  500/FFFFFFFFC0000304 :                     ; 		tst	#2,r0
(2)  501/FFFFFFFFC0000304 :                     ; 		bf	.wait_fb
(2)  502/FFFFFFFFC0000304 :                     ; 		mov	#-1,r0
(2)  503/FFFFFFFFC0000304 :                     ; .perpixl:
(2)  504/FFFFFFFFC0000304 :                     ; 		mov.b	r0,@r5
(2)  505/FFFFFFFFC0000304 :                     ; 		dt	r12
(2)  506/FFFFFFFFC0000304 :                     ; 		bf/s	.perpixl
(2)  507/FFFFFFFFC0000304 :                     ; 		add	#1,r5
(2)  508/FFFFFFFFC0000304 :                     
(2)  509/FFFFFFFFC0000304 :                     ; ------------------------------------		
(2)  510/FFFFFFFFC0000304 :                     		
(2)  511/FFFFFFFFC0000304 :                     drwsld_nextpz:
(2)  512/FFFFFFFFC0000304 : C50C                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; -1 piece
(2)  513/FFFFFFFFC0000306 : 70FF                		add	#-1,r0
(2)  514/FFFFFFFFC0000308 : C10C                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  515/FFFFFFFFC000030A : 7E3C                		add	#sizeof_plypz,r14		; Point to next piece for the next interrupt
(2)  516/FFFFFFFFC000030C : 60E3                		mov	r14,r0
(2)  517/FFFFFFFFC000030E : DE15                		mov	#RAM_Mars_VdpDrwList_e,r14	; End-of-list?
(2)  518/FFFFFFFFC0000310 : 30E3                		cmp/ge	r14,r0
(2)  519/FFFFFFFFC0000312 : 8B00                		bf	.reset_rd
(2)  520/FFFFFFFFC0000314 : D014                		mov	#RAM_Mars_VdpDrwList,r0
(2)  521/FFFFFFFFC0000316 :                     .reset_rd:
(2)  522/FFFFFFFFC0000316 : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  523/FFFFFFFFC0000318 :                     ; 		mov.w	@(marsGbl_PzListCntr,gbr),r0
(2)  524/FFFFFFFFC0000318 :                     ; 		cmp/eq	#0,r0
(2)  525/FFFFFFFFC0000318 :                     ; 		bt/s	.finish_it
(2)  526/FFFFFFFFC0000318 :                     ; 		add	#-1,r0
(2)  527/FFFFFFFFC0000318 :                     ; 		bra	drwtsk1_newpz
(2)  528/FFFFFFFFC0000318 :                     ; 		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  529/FFFFFFFFC0000318 :                     .finish_it:
(2)  530/FFFFFFFFC0000318 : A005                		bra	drwtask_return
(2)  531/FFFFFFFFC000031A : E210                		mov	#$10,r2
(2)  532/FFFFFFFFC000031C :                     
(2)  533/FFFFFFFFC000031C :                     ; --------------------------------
(2)  534/FFFFFFFFC000031C :                     ; Task $00
(2)  535/FFFFFFFFC000031C :                     ; --------------------------------
(2)  536/FFFFFFFFC000031C :                     
(2)  537/FFFFFFFFC000031C :                     drwtsk_00:
(2)  538/FFFFFFFFC000031C : 2F26                		mov	r2,@-r15
(2)  539/FFFFFFFFC000031E : E000                		mov	#0,r0
(2)  540/FFFFFFFFC0000320 : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  541/FFFFFFFFC0000322 : A00E                		bra	drwtask_exit
(2)  542/FFFFFFFFC0000324 : E27F                		mov	#$7F,r2
(2)  543/FFFFFFFFC0000326 :                     
(2)  544/FFFFFFFFC0000326 :                     drwtask_return:
(2)  545/FFFFFFFFC0000326 : 4F06                		lds	@r15+,mach
(2)  546/FFFFFFFFC0000328 : 4F16                		lds	@r15+,macl
(2)  547/FFFFFFFFC000032A : 6EF6                		mov	@r15+,r14
(2)  548/FFFFFFFFC000032C : 6DF6                		mov	@r15+,r13
(2)  549/FFFFFFFFC000032E : 6CF6                		mov	@r15+,r12
(2)  550/FFFFFFFFC0000330 : 6BF6                		mov	@r15+,r11
(2)  551/FFFFFFFFC0000332 : 6AF6                		mov	@r15+,r10
(2)  552/FFFFFFFFC0000334 : 69F6                		mov	@r15+,r9
(2)  553/FFFFFFFFC0000336 : 68F6                		mov	@r15+,r8
(2)  554/FFFFFFFFC0000338 : 67F6                		mov	@r15+,r7
(2)  555/FFFFFFFFC000033A : 66F6                		mov	@r15+,r6
(2)  556/FFFFFFFFC000033C : 65F6                		mov	@r15+,r5
(2)  557/FFFFFFFFC000033E : 64F6                		mov	@r15+,r4
(2)  558/FFFFFFFFC0000340 : 63F6                		mov	@r15+,r3
(2)  559/FFFFFFFFC0000342 :                     drwtask_exit:
(2)  560/FFFFFFFFC0000342 : 9119                		mov.l   #$FFFFFE80,r1
(2)  561/FFFFFFFFC0000344 : 9019                		mov.w   #$A518,r0
(2)  562/FFFFFFFFC0000346 : 2101                		mov.w   r0,@r1
(2)  563/FFFFFFFFC0000348 : CB20                		or      #$20,r0
(2)  564/FFFFFFFFC000034A : 2101                		mov.w   r0,@r1
(2)  565/FFFFFFFFC000034C : 9016                		mov.w   #$5A00,r0
(2)  566/FFFFFFFFC000034E : 202B                		or	r2,r0
(2)  567/FFFFFFFFC0000350 : 2101                		mov.w   r0,@r1
(2)  568/FFFFFFFFC0000352 : 62F6                		mov	@r15+,r2
(2)  569/FFFFFFFFC0000354 : 000B                		rts
(2)  570/FFFFFFFFC0000356 : 0009                		nop
(2)  571/FFFFFFFFC0000358 :                     		align 4
(2)  572/FFFFFFFFC0000358 : 2402 0200 2000 4100 		ltorg
                    C000 0704 0601 51C0 
                    0600 D4C0 0140 FF00 
                    1FFF 00FF 00E0 013F 
                    FE80 A518 5A00      
(2)  573/FFFFFFFFC000037E :                     
(2)  574/FFFFFFFFC000037E :                     ; ------------------------------------------------
(2)  575/FFFFFFFFC000037E :                     ; Read polygon and build pieces
(2)  576/FFFFFFFFC000037E :                     ; 
(2)  577/FFFFFFFFC000037E :                     ; Type bits:
(2)  578/FFFFFFFFC000037E :                     ; %tsp----- -------- -------- --------
(2)  579/FFFFFFFFC000037E :                     ; 
(2)  580/FFFFFFFFC000037E :                     ; p - Figure type: Quad (0) or Triangle (1)
(2)  581/FFFFFFFFC000037E :                     ; s - Polygon type: Normal (0) or Sprite (1)
(2)  582/FFFFFFFFC000037E :                     ; t - Polygon has texture data (1):
(2)  583/FFFFFFFFC000037E :                     ;     polygn_mtrlopt: Texture width
(2)  584/FFFFFFFFC000037E :                     ;     polygn_mtrl   : Texture data address
(2)  585/FFFFFFFFC000037E :                     ;     polygn_srcpnts: Texture X/Y positions for
(2)  586/FFFFFFFFC000037E :                     ;                     each edge (3 or 4)
(2)  587/FFFFFFFFC000037E :                     ; ------------------------------------------------
(2)  588/FFFFFFFFC000037E :                     
(2)  589/FFFFFFFFC000037E :                     MarsVideo_MakePolygon:
(2)  590/FFFFFFFFC000037E : 4F22                		sts	pr,@-r15
(2)  591/FFFFFFFFC0000380 : DC4A                		mov	#CachDDA_Top,r12
(2)  592/FFFFFFFFC0000382 : DD4B                		mov	#CachDDA_Last,r13
(2)  593/FFFFFFFFC0000384 : 50E0                		mov	@(polygn_type,r14),r0
(2)  594/FFFFFFFFC0000386 : 4029                		shlr16	r0
(2)  595/FFFFFFFFC0000388 : 4019                		shlr8	r0
(2)  596/FFFFFFFFC000038A : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  597/FFFFFFFFC000038C : 8B00                		bf	.tringl
(2)  598/FFFFFFFFC000038E : 7D08                		add	#8,r13
(2)  599/FFFFFFFFC0000390 :                     .tringl:
(2)  600/FFFFFFFFC0000390 : 61E3                		mov	r14,r1
(2)  601/FFFFFFFFC0000392 : 62C3                		mov	r12,r2
(2)  602/FFFFFFFFC0000394 : D347                		mov	#CachDDA_Src,r3
(2)  603/FFFFFFFFC0000396 : 7108                		add	#polygn_points,r1
(2)  604/FFFFFFFFC0000398 : C820                		tst	#PLGN_SPRITE,r0			; PLGN_SPRITE set?
(2)  605/FFFFFFFFC000039A : 8930                		bt	.plgn_pnts
(2)  606/FFFFFFFFC000039C :                     		
(2)  607/FFFFFFFFC000039C :                     ; ----------------------------------------
(2)  608/FFFFFFFFC000039C :                     ; Sprite points
(2)  609/FFFFFFFFC000039C :                     ; ----------------------------------------
(2)  610/FFFFFFFFC000039C :                     
(2)  611/FFFFFFFFC000039C :                     ; TODO: rework or get rid of this
(2)  612/FFFFFFFFC000039C :                     .spr_pnts:
(2)  613/FFFFFFFFC000039C : 6815                		mov.w	@r1+,r8		; X pos
(2)  614/FFFFFFFFC000039E : 6915                		mov.w	@r1+,r9		; Y pos
(2)  615/FFFFFFFFC00003A0 :                     
(2)  616/FFFFFFFFC00003A0 : 6415                		mov.w	@r1+,r4
(2)  617/FFFFFFFFC00003A2 : 6615                		mov.w	@r1+,r6
(2)  618/FFFFFFFFC00003A4 : 6515                		mov.w	@r1+,r5
(2)  619/FFFFFFFFC00003A6 : 6715                		mov.w	@r1+,r7
(2)  620/FFFFFFFFC00003A8 : 7104                		add	#2*2,r1
(2)  621/FFFFFFFFC00003AA : 348C                		add	r8,r4
(2)  622/FFFFFFFFC00003AC : 358C                		add 	r8,r5
(2)  623/FFFFFFFFC00003AE : 369C                		add	r9,r6
(2)  624/FFFFFFFFC00003B0 : 379C                		add 	r9,r7
(2)  625/FFFFFFFFC00003B2 : 2252                		mov	r5,@r2		; TR
(2)  626/FFFFFFFFC00003B4 : 7204                		add	#4,r2
(2)  627/FFFFFFFFC00003B6 : 2262                		mov	r6,@r2
(2)  628/FFFFFFFFC00003B8 : 7204                		add	#4,r2
(2)  629/FFFFFFFFC00003BA : 2242                		mov	r4,@r2		; TL
(2)  630/FFFFFFFFC00003BC : 7204                		add	#4,r2
(2)  631/FFFFFFFFC00003BE : 2262                		mov	r6,@r2
(2)  632/FFFFFFFFC00003C0 : 7204                		add	#4,r2
(2)  633/FFFFFFFFC00003C2 : 2242                		mov	r4,@r2		; BL
(2)  634/FFFFFFFFC00003C4 : 7204                		add	#4,r2
(2)  635/FFFFFFFFC00003C6 : 2272                		mov	r7,@r2
(2)  636/FFFFFFFFC00003C8 : 7204                		add	#4,r2
(2)  637/FFFFFFFFC00003CA : 2252                		mov	r5,@r2		; BR
(2)  638/FFFFFFFFC00003CC : 7204                		add	#4,r2
(2)  639/FFFFFFFFC00003CE : 2272                		mov	r7,@r2
(2)  640/FFFFFFFFC00003D0 : 7204                		add	#4,r2
(2)  641/FFFFFFFFC00003D2 :                     
(2)  642/FFFFFFFFC00003D2 : 6415                		mov.w	@r1+,r4
(2)  643/FFFFFFFFC00003D4 : 6615                		mov.w	@r1+,r6
(2)  644/FFFFFFFFC00003D6 : 6515                		mov.w	@r1+,r5
(2)  645/FFFFFFFFC00003D8 : 6715                		mov.w	@r1+,r7
(2)  646/FFFFFFFFC00003DA : 2352                		mov	r5,@r3		; TR
(2)  647/FFFFFFFFC00003DC : 7304                		add	#4,r3
(2)  648/FFFFFFFFC00003DE : 2362                		mov	r6,@r3
(2)  649/FFFFFFFFC00003E0 : 7304                		add	#4,r3
(2)  650/FFFFFFFFC00003E2 : 2342                		mov	r4,@r3		; TL
(2)  651/FFFFFFFFC00003E4 : 7304                		add	#4,r3
(2)  652/FFFFFFFFC00003E6 : 2362                		mov	r6,@r3
(2)  653/FFFFFFFFC00003E8 : 7304                		add	#4,r3
(2)  654/FFFFFFFFC00003EA : 2342                		mov	r4,@r3		; BL
(2)  655/FFFFFFFFC00003EC : 7304                		add	#4,r3
(2)  656/FFFFFFFFC00003EE : 2372                		mov	r7,@r3
(2)  657/FFFFFFFFC00003F0 : 7304                		add	#4,r3
(2)  658/FFFFFFFFC00003F2 : 2352                		mov	r5,@r3		; BR
(2)  659/FFFFFFFFC00003F4 : 7304                		add	#4,r3
(2)  660/FFFFFFFFC00003F6 : 2372                		mov	r7,@r3
(2)  661/FFFFFFFFC00003F8 : 7304                		add	#4,r3
(2)  662/FFFFFFFFC00003FA :                     ; 		mov	#4*2,r0
(2)  663/FFFFFFFFC00003FA :                     ; .sprsrc_pnts:
(2)  664/FFFFFFFFC00003FA :                     ; 		mov.w	@r1+,r0
(2)  665/FFFFFFFFC00003FA :                     ; 		mov.w	@r1+,r4
(2)  666/FFFFFFFFC00003FA :                     ; 		mov	r0,@r3
(2)  667/FFFFFFFFC00003FA :                     ; 		mov	r4,@(4,r3)
(2)  668/FFFFFFFFC00003FA :                     ; 		dt	r0
(2)  669/FFFFFFFFC00003FA :                     ; 		bf/s	.sprsrc_pnts
(2)  670/FFFFFFFFC00003FA :                     ; 		add	#8,r3
(2)  671/FFFFFFFFC00003FA : A014                		bra	.start_math
(2)  672/FFFFFFFFC00003FC : 0009                		nop
(2)  673/FFFFFFFFC00003FE :                     
(2)  674/FFFFFFFFC00003FE :                     ; ----------------------------------------
(2)  675/FFFFFFFFC00003FE :                     ; Polygon points
(2)  676/FFFFFFFFC00003FE :                     ; ----------------------------------------
(2)  677/FFFFFFFFC00003FE :                     
(2)  678/FFFFFFFFC00003FE :                     .plgn_pnts:
(2)  679/FFFFFFFFC00003FE : E804                		mov	#4,r8
(2)  680/FFFFFFFFC0000400 : 9660                		mov	#SCREEN_WIDTH/2,r6
(2)  681/FFFFFFFFC0000402 : E770                		mov	#SCREEN_HEIGHT/2,r7
(2)  682/FFFFFFFFC0000404 :                     .setpnts:
(2)  683/FFFFFFFFC0000404 : 6416                		mov	@r1+,r4
(2)  684/FFFFFFFFC0000406 : 6516                		mov	@r1+,r5
(2)  685/FFFFFFFFC0000408 : 346C                		add	r6,r4
(2)  686/FFFFFFFFC000040A : 357C                		add	r7,r5
(2)  687/FFFFFFFFC000040C : 2242                		mov	r4,@r2
(2)  688/FFFFFFFFC000040E : 1251                		mov	r5,@(4,r2)
(2)  689/FFFFFFFFC0000410 : 4810                		dt	r8
(2)  690/FFFFFFFFC0000412 : 8FF7                		bf/s	.setpnts
(2)  691/FFFFFFFFC0000414 : 7208                		add	#8,r2
(2)  692/FFFFFFFFC0000416 : E804                		mov	#4,r8
(2)  693/FFFFFFFFC0000418 :                     .src_pnts:
(2)  694/FFFFFFFFC0000418 : 6415                		mov.w	@r1+,r4
(2)  695/FFFFFFFFC000041A : 6515                		mov.w	@r1+,r5
(2)  696/FFFFFFFFC000041C : 2342                		mov	r4,@r3
(2)  697/FFFFFFFFC000041E : 1351                		mov	r5,@(4,r3)
(2)  698/FFFFFFFFC0000420 : 4810                		dt	r8
(2)  699/FFFFFFFFC0000422 : 8FF9                		bf/s	.src_pnts
(2)  700/FFFFFFFFC0000424 : 7308                		add	#8,r3
(2)  701/FFFFFFFFC0000426 :                     		
(2)  702/FFFFFFFFC0000426 :                     .start_math:
(2)  703/FFFFFFFFC0000426 : E903                		mov	#3,r9
(2)  704/FFFFFFFFC0000428 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  705/FFFFFFFFC000042A : 8B00                		bf	.ytringl
(2)  706/FFFFFFFFC000042C : 7901                		add	#1,r9
(2)  707/FFFFFFFFC000042E :                     .ytringl:
(2)  708/FFFFFFFFC000042E : DA22                		mov	#$7FFFFFFF,r10
(2)  709/FFFFFFFFC0000430 : EBFF                		mov	#$FFFFFFFF,r11
(2)  710/FFFFFFFFC0000432 : 67C3                		mov 	r12,r7
(2)  711/FFFFFFFFC0000434 : 68C3                		mov	r12,r8
(2)  712/FFFFFFFFC0000436 :                     .find_top:
(2)  713/FFFFFFFFC0000436 : 5071                		mov	@(4,r7),r0
(2)  714/FFFFFFFFC0000438 : 30B7                		cmp/gt	r11,r0
(2)  715/FFFFFFFFC000043A : 8B00                		bf	.is_low
(2)  716/FFFFFFFFC000043C : 6B03                		mov 	r0,r11
(2)  717/FFFFFFFFC000043E :                     .is_low:
(2)  718/FFFFFFFFC000043E : 5081                		mov	@(4,r8),r0
(2)  719/FFFFFFFFC0000440 : 30A7                		cmp/gt	r10,r0
(2)  720/FFFFFFFFC0000442 : 8901                		bt	.is_high
(2)  721/FFFFFFFFC0000444 : 6A03                		mov 	r0,r10
(2)  722/FFFFFFFFC0000446 : 6183                		mov	r8,r1
(2)  723/FFFFFFFFC0000448 :                     .is_high:
(2)  724/FFFFFFFFC0000448 : 7708                		add 	#8,r7
(2)  725/FFFFFFFFC000044A : 4910                		dt	r9
(2)  726/FFFFFFFFC000044C : 8FF3                		bf/s	.find_top
(2)  727/FFFFFFFFC000044E : 7808                		add	#8,r8
(2)  728/FFFFFFFFC0000450 : 3AB3                		cmp/ge	r11,r10			; Already reached end?
(2)  729/FFFFFFFFC0000452 : 8927                		bt	.exit
(2)  730/FFFFFFFFC0000454 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2)  731/FFFFFFFFC0000456 : 8B25                		bf	.exit
(2)  732/FFFFFFFFC0000458 : 9035                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2)  733/FFFFFFFFC000045A : 3A03                		cmp/ge	r0,r10
(2)  734/FFFFFFFFC000045C : 8922                		bt	.exit
(2)  735/FFFFFFFFC000045E :                     		
(2)  736/FFFFFFFFC000045E :                     	; r1 - Main pointer
(2)  737/FFFFFFFFC000045E :                     	; r2 - Left pointer
(2)  738/FFFFFFFFC000045E :                     	; r3 - Right pointer
(2)  739/FFFFFFFFC000045E :                     	; r4 - Left X
(2)  740/FFFFFFFFC000045E :                     	; r5 - Left DX
(2)  741/FFFFFFFFC000045E :                     	; r6 - Right X
(2)  742/FFFFFFFFC000045E :                     	; r7 - Right DX
(2)  743/FFFFFFFFC000045E :                     	; r8 - Left width
(2)  744/FFFFFFFFC000045E :                     	; r9 - Right width
(2)  745/FFFFFFFFC000045E :                     	; r10 - Top Y (gets updated after calling put_piece)
(2)  746/FFFFFFFFC000045E :                     	; r11 - Bottom Y
(2)  747/FFFFFFFFC000045E :                     	; r12 - First DST point
(2)  748/FFFFFFFFC000045E :                     	; r13 - Last DST point
(2)  749/FFFFFFFFC000045E : 6213                		mov	r1,r2				; r2 - X left to process
(2)  750/FFFFFFFFC0000460 : 6313                		mov	r1,r3				; r3 - X right to process
(2)  751/FFFFFFFFC0000462 : B031                		bsr	set_left
(2)  752/FFFFFFFFC0000464 : 0009                		nop
(2)  753/FFFFFFFFC0000466 : B073                		bsr	set_right
(2)  754/FFFFFFFFC0000468 : 0009                		nop
(2)  755/FFFFFFFFC000046A :                     .next_pz:
(2)  756/FFFFFFFFC000046A : 902C                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2)  757/FFFFFFFFC000046C : 3A07                		cmp/gt	r0,r10
(2)  758/FFFFFFFFC000046E : 8919                		bt	.exit
(2)  759/FFFFFFFFC0000470 : 3AB3                		cmp/ge	r11,r10				; Reached Y end?
(2)  760/FFFFFFFFC0000472 : 8917                		bt	.exit
(2)  761/FFFFFFFFC0000474 : C601                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2)  762/FFFFFFFFC0000476 : 6103                		mov	r0,r1
(2)  763/FFFFFFFFC0000478 : D010                		mov	#RAM_Mars_VdpDrwList_e,r0	; pointer reached end of the list?
(2)  764/FFFFFFFFC000047A : 3103                		cmp/ge	r0,r1
(2)  765/FFFFFFFFC000047C : 8B02                		bf	.dontreset
(2)  766/FFFFFFFFC000047E : D010                		mov	#RAM_Mars_VdpDrwList,r0		; Return WRITE pointer to the top of the list
(2)  767/FFFFFFFFC0000480 : 6103                		mov	r0,r1
(2)  768/FFFFFFFFC0000482 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  769/FFFFFFFFC0000484 :                     .dontreset:
(2)  770/FFFFFFFFC0000484 : 4F03                		stc	sr,@-r15			; Stop interrupts (including Watchdog)
(2)  771/FFFFFFFFC0000486 : 0002                		stc	sr,r0
(2)  772/FFFFFFFFC0000488 : CBF0                		or	#$F0,r0
(2)  773/FFFFFFFFC000048A : B0B2                		bsr	put_piece
(2)  774/FFFFFFFFC000048C : 400E                		ldc	r0,sr
(2)  775/FFFFFFFFC000048E : 4F07                		ldc	@r15+,sr			; Restore interrupts
(2)  776/FFFFFFFFC0000490 : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2)  777/FFFFFFFFC0000492 : 8B03                		bf	.lefth2
(2)  778/FFFFFFFFC0000494 : B05C                		bsr	set_right
(2)  779/FFFFFFFFC0000496 : 0009                		nop
(2)  780/FFFFFFFFC0000498 : AFE7                		bra	.next_pz
(2)  781/FFFFFFFFC000049A : 0009                		nop
(2)  782/FFFFFFFFC000049C :                     .lefth2:
(2)  783/FFFFFFFFC000049C : B014                		bsr	set_left
(2)  784/FFFFFFFFC000049E : 0009                		nop
(2)  785/FFFFFFFFC00004A0 : AFE3                		bra	.next_pz
(2)  786/FFFFFFFFC00004A2 : 0009                		nop		
(2)  787/FFFFFFFFC00004A4 :                     .exit:
(2)  788/FFFFFFFFC00004A4 : 4F26                		lds	@r15+,pr
(2)  789/FFFFFFFFC00004A6 : 000B                		rts
(2)  790/FFFFFFFFC00004A8 : 0009                		nop
(2)  791/FFFFFFFFC00004AA :                     		align 4
(2)  792/FFFFFFFFC00004AC : C000 0704 C000 0714 		ltorg
                    C000 0724 7FFF FFFF 
                    0601 51C0 0600 D4C0 
                    00A0 00E0           
(2)  793/FFFFFFFFC00004C8 :                     
(2)  794/FFFFFFFFC00004C8 :                     ; --------------------------------
(2)  795/FFFFFFFFC00004C8 :                     
(2)  796/FFFFFFFFC00004C8 :                     set_left:
(2)  797/FFFFFFFFC00004C8 : 6823                		mov	r2,r8			; Get a copy of Xleft pointer
(2)  798/FFFFFFFFC00004CA : 7820                		add	#$20,r8			; To read Texture SRC points
(2)  799/FFFFFFFFC00004CC : 6482                		mov	@r8,r4
(2)  800/FFFFFFFFC00004CE : 5581                		mov	@(4,r8),r5
(2)  801/FFFFFFFFC00004D0 : D841                		mov	#CachDDA_Src_L,r8
(2)  802/FFFFFFFFC00004D2 : 6043                		mov	r4,r0
(2)  803/FFFFFFFFC00004D4 : 4028                		shll16	r0
(2)  804/FFFFFFFFC00004D6 : 2802                		mov	r0,@r8
(2)  805/FFFFFFFFC00004D8 : 6053                		mov	r5,r0
(2)  806/FFFFFFFFC00004DA : 4028                		shll16	r0
(2)  807/FFFFFFFFC00004DC : 1802                		mov	r0,@(8,r8)
(2)  808/FFFFFFFFC00004DE : 6122                		mov	@r2,r1
(2)  809/FFFFFFFFC00004E0 : 5821                		mov	@(4,r2),r8
(2)  810/FFFFFFFFC00004E2 : 7208                		add	#8,r2
(2)  811/FFFFFFFFC00004E4 : 32D7                		cmp/gt	r13,r2
(2)  812/FFFFFFFFC00004E6 : 8B00                		bf	.lft_ok
(2)  813/FFFFFFFFC00004E8 : 62C3                		mov 	r12,r2
(2)  814/FFFFFFFFC00004EA :                     .lft_ok:
(2)  815/FFFFFFFFC00004EA : 5021                		mov	@(4,r2),r0
(2)  816/FFFFFFFFC00004EC : 3088                		sub	r8,r0
(2)  817/FFFFFFFFC00004EE : 8800                		cmp/eq	#0,r0
(2)  818/FFFFFFFFC00004F0 : 89EA                		bt	set_left
(2)  819/FFFFFFFFC00004F2 : 4011                		cmp/pz	r0
(2)  820/FFFFFFFFC00004F4 : 8B29                		bf	.lft_skip
(2)  821/FFFFFFFFC00004F6 :                     
(2)  822/FFFFFFFFC00004F6 : 400A                		lds	r0,mach
(2)  823/FFFFFFFFC00004F8 : 6823                		mov	r2,r8
(2)  824/FFFFFFFFC00004FA : 7820                		add	#$20,r8
(2)  825/FFFFFFFFC00004FC : 6082                		mov 	@r8,r0
(2)  826/FFFFFFFFC00004FE : 3048                		sub 	r4,r0
(2)  827/FFFFFFFFC0000500 : 5481                		mov 	@(4,r8),r4
(2)  828/FFFFFFFFC0000502 : 3458                		sub 	r5,r4
(2)  829/FFFFFFFFC0000504 : 6503                		mov	r0,r5
(2)  830/FFFFFFFFC0000506 : 4418                		shll8	r4
(2)  831/FFFFFFFFC0000508 : 4518                		shll8	r5
(2)  832/FFFFFFFFC000050A : 080A                		sts	mach,r8
(2)  833/FFFFFFFFC000050C : E001                		mov	#1,r0				; Stopsign for HW Division
(2)  834/FFFFFFFFC000050E : C110                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2)  835/FFFFFFFFC0000510 : 906E                		mov	#_JR,r0				; HW DIV
(2)  836/FFFFFFFFC0000512 : 2082                		mov	r8,@r0
(2)  837/FFFFFFFFC0000514 : 1051                		mov	r5,@(4,r0)
(2)  838/FFFFFFFFC0000516 : 0009                		nop
(2)  839/FFFFFFFFC0000518 : 5501                		mov	@(4,r0),r5
(2)  840/FFFFFFFFC000051A : 9069                		mov	#_JR,r0
(2)  841/FFFFFFFFC000051C : 2082                		mov	r8,@r0
(2)  842/FFFFFFFFC000051E : 1041                		mov	r4,@(4,r0)
(2)  843/FFFFFFFFC0000520 : 0009                		nop
(2)  844/FFFFFFFFC0000522 : 5401                		mov	@(4,r0),r4
(2)  845/FFFFFFFFC0000524 : 4418                		shll8	r4
(2)  846/FFFFFFFFC0000526 : 4518                		shll8	r5
(2)  847/FFFFFFFFC0000528 : D02C                		mov	#CachDDA_Src_L+$C,r0
(2)  848/FFFFFFFFC000052A : 2042                		mov	r4,@r0
(2)  849/FFFFFFFFC000052C : D02C                		mov	#CachDDA_Src_L+4,r0
(2)  850/FFFFFFFFC000052E : 2052                		mov	r5,@r0
(2)  851/FFFFFFFFC0000530 : 6522                		mov	@r2,r5
(2)  852/FFFFFFFFC0000532 : 3518                		sub 	r1,r5
(2)  853/FFFFFFFFC0000534 : 6413                		mov 	r1,r4
(2)  854/FFFFFFFFC0000536 : 4518                		shll8	r5
(2)  855/FFFFFFFFC0000538 : 4428                		shll16	r4
(2)  856/FFFFFFFFC000053A : 9059                		mov	#_JR,r0				; HW DIV
(2)  857/FFFFFFFFC000053C : 2082                		mov	r8,@r0
(2)  858/FFFFFFFFC000053E : 1051                		mov	r5,@(4,r0)
(2)  859/FFFFFFFFC0000540 : 0009                		nop
(2)  860/FFFFFFFFC0000542 : 5501                		mov	@(4,r0),r5
(2)  861/FFFFFFFFC0000544 : E000                		mov	#0,r0				; Resume HW Division
(2)  862/FFFFFFFFC0000546 : C110                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2)  863/FFFFFFFFC0000548 : 4518                		shll8	r5
(2)  864/FFFFFFFFC000054A :                     .lft_skip:
(2)  865/FFFFFFFFC000054A : 000B                		rts
(2)  866/FFFFFFFFC000054C : 0009                		nop
(2)  867/FFFFFFFFC000054E :                     		align 4
(2)  868/FFFFFFFFC0000550 :                     
(2)  869/FFFFFFFFC0000550 :                     ; --------------------------------
(2)  870/FFFFFFFFC0000550 :                     
(2)  871/FFFFFFFFC0000550 :                     set_right:
(2)  872/FFFFFFFFC0000550 : 6933                		mov	r3,r9
(2)  873/FFFFFFFFC0000552 : 7920                		add	#$20,r9
(2)  874/FFFFFFFFC0000554 : 6692                		mov	@r9,r6
(2)  875/FFFFFFFFC0000556 : 5791                		mov	@(4,r9),r7
(2)  876/FFFFFFFFC0000558 : D922                		mov	#CachDDA_Src_R,r9
(2)  877/FFFFFFFFC000055A : 6063                		mov	r6,r0
(2)  878/FFFFFFFFC000055C : 4028                		shll16	r0
(2)  879/FFFFFFFFC000055E : 2902                		mov	r0,@r9
(2)  880/FFFFFFFFC0000560 : 6073                		mov	r7,r0
(2)  881/FFFFFFFFC0000562 : 4028                		shll16	r0
(2)  882/FFFFFFFFC0000564 : 1902                		mov	r0,@(8,r9)
(2)  883/FFFFFFFFC0000566 :                     
(2)  884/FFFFFFFFC0000566 : 6132                		mov	@r3,r1
(2)  885/FFFFFFFFC0000568 : 5931                		mov	@(4,r3),r9
(2)  886/FFFFFFFFC000056A : 73F8                		add	#-8,r3
(2)  887/FFFFFFFFC000056C : 33C3                		cmp/ge	r12,r3
(2)  888/FFFFFFFFC000056E : 8900                		bt	.rgt_ok
(2)  889/FFFFFFFFC0000570 : 63D3                		mov 	r13,r3
(2)  890/FFFFFFFFC0000572 :                     .rgt_ok:
(2)  891/FFFFFFFFC0000572 : 5031                		mov	@(4,r3),r0
(2)  892/FFFFFFFFC0000574 : 3098                		sub	r9,r0
(2)  893/FFFFFFFFC0000576 : 8800                		cmp/eq	#0,r0
(2)  894/FFFFFFFFC0000578 : 89EA                		bt	set_right
(2)  895/FFFFFFFFC000057A : 4011                		cmp/pz	r0
(2)  896/FFFFFFFFC000057C : 8B29                		bf	.rgt_skip
(2)  897/FFFFFFFFC000057E : 400A                		lds	r0,mach
(2)  898/FFFFFFFFC0000580 : 6933                		mov	r3,r9
(2)  899/FFFFFFFFC0000582 : 7920                		add	#$20,r9
(2)  900/FFFFFFFFC0000584 : 6092                		mov 	@r9,r0
(2)  901/FFFFFFFFC0000586 : 3068                		sub 	r6,r0
(2)  902/FFFFFFFFC0000588 : 5691                		mov 	@(4,r9),r6
(2)  903/FFFFFFFFC000058A : 3678                		sub 	r7,r6
(2)  904/FFFFFFFFC000058C : 6703                		mov	r0,r7
(2)  905/FFFFFFFFC000058E : 4618                		shll8	r6
(2)  906/FFFFFFFFC0000590 : 4718                		shll8	r7
(2)  907/FFFFFFFFC0000592 : 090A                		sts	mach,r9
(2)  908/FFFFFFFFC0000594 : E001                		mov	#1,r0				; Resume HW Division
(2)  909/FFFFFFFFC0000596 : C110                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2)  910/FFFFFFFFC0000598 : 902A                		mov	#_JR,r0				; HW DIV
(2)  911/FFFFFFFFC000059A : 2092                		mov	r9,@r0
(2)  912/FFFFFFFFC000059C : 1071                		mov	r7,@(4,r0)
(2)  913/FFFFFFFFC000059E : 0009                		nop
(2)  914/FFFFFFFFC00005A0 : 5701                		mov	@(4,r0),r7
(2)  915/FFFFFFFFC00005A2 : 9025                		mov	#_JR,r0
(2)  916/FFFFFFFFC00005A4 : 2092                		mov	r9,@r0
(2)  917/FFFFFFFFC00005A6 : 1061                		mov	r6,@(4,r0)
(2)  918/FFFFFFFFC00005A8 : 0009                		nop
(2)  919/FFFFFFFFC00005AA : 5601                		mov	@(4,r0),r6
(2)  920/FFFFFFFFC00005AC : 4618                		shll8	r6
(2)  921/FFFFFFFFC00005AE : 4718                		shll8	r7
(2)  922/FFFFFFFFC00005B0 : D00D                		mov	#CachDDA_Src_R+4,r0
(2)  923/FFFFFFFFC00005B2 : 2072                		mov	r7,@r0
(2)  924/FFFFFFFFC00005B4 : D00D                		mov	#CachDDA_Src_R+$C,r0
(2)  925/FFFFFFFFC00005B6 : 2062                		mov	r6,@r0
(2)  926/FFFFFFFFC00005B8 : 6732                		mov	@r3,r7
(2)  927/FFFFFFFFC00005BA : 3718                		sub 	r1,r7
(2)  928/FFFFFFFFC00005BC : 6613                		mov 	r1,r6
(2)  929/FFFFFFFFC00005BE : 4628                		shll16	r6
(2)  930/FFFFFFFFC00005C0 : 4718                		shll8	r7
(2)  931/FFFFFFFFC00005C2 : 9015                		mov	#_JR,r0				; HW DIV
(2)  932/FFFFFFFFC00005C4 : 2092                		mov	r9,@r0
(2)  933/FFFFFFFFC00005C6 : 1071                		mov	r7,@(4,r0)
(2)  934/FFFFFFFFC00005C8 : 0009                		nop
(2)  935/FFFFFFFFC00005CA : 5701                		mov	@(4,r0),r7
(2)  936/FFFFFFFFC00005CC : E000                		mov	#0,r0				; Resume HW Division
(2)  937/FFFFFFFFC00005CE : C110                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2)  938/FFFFFFFFC00005D0 : 4718                		shll8	r7
(2)  939/FFFFFFFFC00005D2 :                     .rgt_skip:
(2)  940/FFFFFFFFC00005D2 : 000B                		rts
(2)  941/FFFFFFFFC00005D4 : 0009                		nop
(2)  942/FFFFFFFFC00005D6 :                     		align 4
(2)  943/FFFFFFFFC00005D8 : C000 0744 C000 0750 		ltorg
                    C000 0748 C000 0754 
                    C000 0758 C000 0760 
                    FF00                
(2)  944/FFFFFFFFC00005F2 :                     
(2)  945/FFFFFFFFC00005F2 :                     ; --------------------------------
(2)  946/FFFFFFFFC00005F2 :                     ; Mark piece
(2)  947/FFFFFFFFC00005F2 :                     ; --------------------------------
(2)  948/FFFFFFFFC00005F2 :                     
(2)  949/FFFFFFFFC00005F2 :                     put_piece:
(2)  950/FFFFFFFFC00005F2 : 5821                		mov	@(4,r2),r8
(2)  951/FFFFFFFFC00005F4 : 5931                		mov	@(4,r3),r9
(2)  952/FFFFFFFFC00005F6 : 38A8                		sub	r10,r8
(2)  953/FFFFFFFFC00005F8 : 39A8                		sub	r10,r9
(2)  954/FFFFFFFFC00005FA : 6083                		mov	r8,r0
(2)  955/FFFFFFFFC00005FC : 3987                		cmp/gt	r8,r9
(2)  956/FFFFFFFFC00005FE : 8900                		bt	.lefth
(2)  957/FFFFFFFFC0000600 : 6093                		mov	r9,r0
(2)  958/FFFFFFFFC0000602 :                     .lefth:
(2)  959/FFFFFFFFC0000602 : 2F26                		mov	r2,@-r15
(2)  960/FFFFFFFFC0000604 : 2F36                		mov	r3,@-r15
(2)  961/FFFFFFFFC0000606 : 2F56                		mov	r5,@-r15
(2)  962/FFFFFFFFC0000608 : 2F76                		mov	r7,@-r15
(2)  963/FFFFFFFFC000060A : 2F86                		mov	r8,@-r15
(2)  964/FFFFFFFFC000060C : 2F96                		mov	r9,@-r15
(2)  965/FFFFFFFFC000060E : 1141                		mov 	r4,@(plypz_xl,r1)
(2)  966/FFFFFFFFC0000610 : 1152                		mov 	r5,@(plypz_xl_dx,r1)
(2)  967/FFFFFFFFC0000612 : 1163                		mov 	r6,@(plypz_xr,r1)
(2)  968/FFFFFFFFC0000614 : 1174                		mov 	r7,@(plypz_xr_dx,r1)
(2)  969/FFFFFFFFC0000616 : 350D                		dmuls	r0,r5
(2)  970/FFFFFFFFC0000618 : 021A                		sts	macl,r2
(2)  971/FFFFFFFFC000061A : 370D                		dmuls	r0,r7
(2)  972/FFFFFFFFC000061C : 031A                		sts	macl,r3
(2)  973/FFFFFFFFC000061E : 342C                		add 	r2,r4
(2)  974/FFFFFFFFC0000620 : 363C                		add	r3,r6
(2)  975/FFFFFFFFC0000622 : 62A3                		mov	r10,r2
(2)  976/FFFFFFFFC0000624 : 3A0C                		add	r0,r10
(2)  977/FFFFFFFFC0000626 : 63A3                		mov	r10,r3
(2)  978/FFFFFFFFC0000628 : 4228                		shll16	r2
(2)  979/FFFFFFFFC000062A : 232B                		or	r2,r3
(2)  980/FFFFFFFFC000062C : 1130                		mov	r3,@(plypz_ypos,r1)
(2)  981/FFFFFFFFC000062E : 2F36                		mov	r3,@-r15
(2)  982/FFFFFFFFC0000630 : D220                		mov	#CachDDA_Src_L,r2
(2)  983/FFFFFFFFC0000632 : 6522                		mov	@r2,r5
(2)  984/FFFFFFFFC0000634 : 1155                		mov	r5,@(plypz_src_xl,r1)
(2)  985/FFFFFFFFC0000636 : 5721                		mov	@(4,r2),r7
(2)  986/FFFFFFFFC0000638 : 1176                		mov	r7,@(plypz_src_xl_dx,r1)
(2)  987/FFFFFFFFC000063A : 5822                		mov	@(8,r2),r8
(2)  988/FFFFFFFFC000063C : 1187                		mov	r8,@(plypz_src_yl,r1)
(2)  989/FFFFFFFFC000063E : 5923                		mov	@($C,r2),r9
(2)  990/FFFFFFFFC0000640 : 1198                		mov	r9,@(plypz_src_yl_dx,r1)
(2)  991/FFFFFFFFC0000642 : 370D                		dmuls	r0,r7
(2)  992/FFFFFFFFC0000644 : 021A                		sts	macl,r2
(2)  993/FFFFFFFFC0000646 : 390D                		dmuls	r0,r9
(2)  994/FFFFFFFFC0000648 : 031A                		sts	macl,r3
(2)  995/FFFFFFFFC000064A : 352C                		add 	r2,r5
(2)  996/FFFFFFFFC000064C : 383C                		add	r3,r8
(2)  997/FFFFFFFFC000064E : D21A                		mov	#CachDDA_Src_L,r2
(2)  998/FFFFFFFFC0000650 : 2252                		mov	r5,@r2
(2)  999/FFFFFFFFC0000652 : 1282                		mov	r8,@(8,r2)
(2) 1000/FFFFFFFFC0000654 : D219                		mov	#CachDDA_Src_R,r2
(2) 1001/FFFFFFFFC0000656 : 6522                		mov	@r2,r5
(2) 1002/FFFFFFFFC0000658 : 1159                		mov	r5,@(plypz_src_xr,r1)
(2) 1003/FFFFFFFFC000065A : 5721                		mov	@(4,r2),r7
(2) 1004/FFFFFFFFC000065C : 117A                		mov	r7,@(plypz_src_xr_dx,r1)
(2) 1005/FFFFFFFFC000065E : 5822                		mov	@(8,r2),r8
(2) 1006/FFFFFFFFC0000660 : 118B                		mov	r8,@(plypz_src_yr,r1)
(2) 1007/FFFFFFFFC0000662 : 5923                		mov	@($C,r2),r9
(2) 1008/FFFFFFFFC0000664 : 119C                		mov	r9,@(plypz_src_yr_dx,r1)
(2) 1009/FFFFFFFFC0000666 : 370D                		dmuls	r0,r7
(2) 1010/FFFFFFFFC0000668 : 021A                		sts	macl,r2
(2) 1011/FFFFFFFFC000066A : 390D                		dmuls	r0,r9
(2) 1012/FFFFFFFFC000066C : 031A                		sts	macl,r3
(2) 1013/FFFFFFFFC000066E : 352C                		add 	r2,r5
(2) 1014/FFFFFFFFC0000670 : 383C                		add	r3,r8
(2) 1015/FFFFFFFFC0000672 : D213                		mov	#CachDDA_Src_R,r2
(2) 1016/FFFFFFFFC0000674 : 2252                		mov	r5,@r2
(2) 1017/FFFFFFFFC0000676 : 1282                		mov	r8,@(8,r2)
(2) 1018/FFFFFFFFC0000678 : 63F6                		mov	@r15+,r3
(2) 1019/FFFFFFFFC000067A : 4315                		cmp/pl	r3			; TOP check, 2 steps
(2) 1020/FFFFFFFFC000067C : 8902                		bt	.top_neg
(2) 1021/FFFFFFFFC000067E : 4328                		shll16	r3
(2) 1022/FFFFFFFFC0000680 : 4315                		cmp/pl	r3
(2) 1023/FFFFFFFFC0000682 : 8B0E                		bf	.bad_piece
(2) 1024/FFFFFFFFC0000684 :                     .top_neg:
(2) 1025/FFFFFFFFC0000684 : 50E1                		mov	@(polygn_mtrl,r14),r0
(2) 1026/FFFFFFFFC0000686 : 110D                		mov 	r0,@(plypz_mtrl,r1)
(2) 1027/FFFFFFFFC0000688 : 50E0                		mov	@(polygn_type,r14),r0
(2) 1028/FFFFFFFFC000068A : 110E                		mov 	r0,@(plypz_type,r1)
(2) 1029/FFFFFFFFC000068C : 713C                		add	#sizeof_plypz,r1
(2) 1030/FFFFFFFFC000068E : 6013                		mov	r1,r0
(2) 1031/FFFFFFFFC0000690 : D80C                		mov	#RAM_Mars_VdpDrwList_e,r8
(2) 1032/FFFFFFFFC0000692 : 3083                		cmp/ge	r8,r0
(2) 1033/FFFFFFFFC0000694 : 8B01                		bf	.dontreset_pz
(2) 1034/FFFFFFFFC0000696 : D00C                		mov	#RAM_Mars_VdpDrwList,r0
(2) 1035/FFFFFFFFC0000698 : 6103                		mov	r0,r1
(2) 1036/FFFFFFFFC000069A :                     .dontreset_pz:
(2) 1037/FFFFFFFFC000069A : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2) 1038/FFFFFFFFC000069C : C50C                		mov.w	@(marsGbl_PzListCntr,gbr),r0
(2) 1039/FFFFFFFFC000069E : 7001                		add	#1,r0
(2) 1040/FFFFFFFFC00006A0 : C10C                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2) 1041/FFFFFFFFC00006A2 :                     .bad_piece:
(2) 1042/FFFFFFFFC00006A2 : 69F6                		mov	@r15+,r9
(2) 1043/FFFFFFFFC00006A4 : 68F6                		mov	@r15+,r8
(2) 1044/FFFFFFFFC00006A6 : 67F6                		mov	@r15+,r7
(2) 1045/FFFFFFFFC00006A8 : 65F6                		mov	@r15+,r5
(2) 1046/FFFFFFFFC00006AA : 63F6                		mov	@r15+,r3
(2) 1047/FFFFFFFFC00006AC : 62F6                		mov	@r15+,r2
(2) 1048/FFFFFFFFC00006AE : 000B                		rts
(2) 1049/FFFFFFFFC00006B0 : 0009                		nop
(2) 1050/FFFFFFFFC00006B2 :                     		align 4
(2) 1051/FFFFFFFFC00006B4 : C000 0744 C000 0744 		ltorg
                    C000 0754 C000 0754 
                    0601 51C0 0600 D4C0 
(2) 1052/FFFFFFFFC00006CC :                     
(2) 1053/FFFFFFFFC00006CC :                     ; ------------------------------------------------
(2) 1054/FFFFFFFFC00006CC :                     
(2) 1055/FFFFFFFFC00006CC :                     		align 4
(2) 1056/FFFFFFFFC00006CC :                     Cach_LnDrw_L	ds.l 14			;
(2) 1057/FFFFFFFFC0000704 :                     Cach_LnDrw_S	ds.l 0			; Reads backwards
(2) 1058/FFFFFFFFC0000704 :                     CachDDA_Top	ds.l 2*2		; First 2 points
(2) 1059/FFFFFFFFC0000714 :                     CachDDA_Last	ds.l 2*2		; Triangle or Quad (+8)
(2) 1060/FFFFFFFFC0000724 :                     CachDDA_Src	ds.l 4*2
(2) 1061/FFFFFFFFC0000744 :                     CachDDA_Src_L	ds.l 4			; X/DX/Y/DX result for textures
(2) 1062/FFFFFFFFC0000754 :                     CachDDA_Src_R	ds.l 4
(2) 1063/FFFFFFFFC0000764 :                     Cach_ClrLines	ds.l 1
(2) 1064/FFFFFFFFC0000768 :                     
(2) 1065/FFFFFFFFC0000768 :                     ; ------------------------------------------------
(2) 1066/ 6001D64 :                     .end:		phase CACHE_MASTER+.end&$1FFF
(2) 1067/ 6001D64 :                     CACHE_MASTER_E:
(2) 1068/ 6001D64 :                     		align 4
(2) 1069/ 6001D64 :                     
(2) 1070/ 6001D64 :                     ; ====================================================================
(2) 1071/ 6001D64 :                     ; ----------------------------------------------------------------
(2) 1072/ 6001D64 :                     ; Video CACHE routines for Slave CPU
(2) 1073/ 6001D64 :                     ; ----------------------------------------------------------------
(2) 1074/ 6001D64 :                     
(2) 1075/ 6001D64 :                     		align 4
(2) 1076/ 6001D64 :                     CACHE_SLAVE:
(2) 1077/FFFFFFFFC0000000 :                     		phase $C0000000
(2) 1078/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2) 1079/FFFFFFFFC0000000 : 534C 4156 4520 4341 		dc.b "SLAVE CACHE CODE GOES HERE"
                    4348 4520 434F 4445 
                    2047 4F45 5320 4845 
                    5245                
(2) 1080/FFFFFFFFC000001A :                     ; ------------------------------------------------
(2) 1081/ 6001D7E :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2) 1082/ 6001D7E :                     CACHE_SLAVE_E:
(2) 1083/ 6001D7E :                     		align 4
(2) 1084/ 6001D80 :                     
(1) 1471/ 6001D80 :                     		
(1) 1472/ 6001D80 :                     ; ====================================================================
(1) 1473/ 6001D80 :                     ; ----------------------------------------------------------------
(1) 1474/ 6001D80 :                     ; Data
(1) 1475/ 6001D80 :                     ; ----------------------------------------------------------------
(1) 1476/ 6001D80 :                     
(1) 1477/ 6001D80 :                     		align 4
(1) 1478/ 6001D80 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1479/ 6004580 :                     		align 4
(1) 1480/ 6004580 :                     		include "data/mars_sdram.asm"
(2)    1/ 6004580 :                     ; ====================================================================
(2)    2/ 6004580 :                     ; ----------------------------------------------------------------
(2)    3/ 6004580 :                     ; SH2 SDRAM user data
(2)    4/ 6004580 :                     ; 
(2)    5/ 6004580 :                     ; This data is stored on SDRAM, it's always available to use
(2)    6/ 6004580 :                     ; and can be re-writeable
(2)    7/ 6004580 :                     ; Put small sections of data like palettes or small models
(2)    8/ 6004580 :                     ; ----------------------------------------------------------------
(2)    9/ 6004580 :                     
(2)   10/ 6004580 :                     		include  "data/mars/objects/incl_sdram.asm"		; Models and palettes will go here
(3)    1/ 6004580 :                     ; --------------------------------------------------------
(3)    2/ 6004580 :                     ; Palettes
(3)    3/ 6004580 :                     ; --------------------------------------------------------
(3)    4/ 6004580 :                     
(3)    5/ 6004580 :                     Palette_Intro:	binclude "data/mars/objects/mtrl/intro_pal.bin"
(3)    6/ 60045A0 :                     		align 4
(3)    7/ 60045A0 :                     Palette_Map:	binclude "data/mars/objects/mtrl/marscity_pal.bin"
(3)    8/ 60047A0 :                     		align 4
(3)    9/ 60047A0 :                     		
(3)   10/ 60047A0 :                     ; --------------------------------------------------------
(3)   11/ 60047A0 :                     ; Objects
(3)   12/ 60047A0 :                     ; --------------------------------------------------------
(3)   13/ 60047A0 :                     
(3)   14/ 60047A0 :                     		include "data/mars/objects/mdl/intro/head.asm"
(4)    1/ 60047A0 :                     MarsObj_intro:
(4)    2/ 60047A0 : 0002 0008           		dc.w 2,8
(4)    3/ 60047A4 : 0600 47B4 0600 4814 		dc.l .vert,.face,.vrtx,.mtrl
                    0600 4844 0600 4864 
(4)    4/ 60047B4 :                     .vert:		binclude "data/mars/objects/mdl/intro/vert.bin"
(4)    5/ 6004814 :                     .face:		binclude "data/mars/objects/mdl/intro/face.bin"
(4)    6/ 6004844 :                     .vrtx:		binclude "data/mars/objects/mdl/intro/vrtx.bin"
(4)    7/ 6004864 :                     .mtrl:		include "data/mars/objects/mdl/intro/mtrl.asm"
(5)    1/ 6004864 : 0205 800C           	 dc.l Textr_intro
(5)    2/ 6004868 : 00B4                	 dc.w 180
(5)    3/ 600486A : 0000                	 dc.w 0
(5)    4/ 600486C :                     
(4)    8/ 600486C :                     		align 4
(4)    9/ 600486C :                     
(3)   15/ 600486C :                     		
(3)   16/ 600486C :                     ; --------------------------------------------------------
(3)   17/ 600486C :                     ; Maps
(3)   18/ 600486C :                     ; --------------------------------------------------------
(3)   19/ 600486C :                     
(3)   20/ 600486C :                     		include "data/mars/maps/map_marscity.asm"
(4)    1/ 600486C :                     ; --------------------------------------------------------
(4)    2/ 600486C :                     ; Map layouts
(4)    3/ 600486C :                     ; --------------------------------------------------------
(4)    4/ 600486C :                     
(4)    5/ 600486C :                     ; Layout block is 10m*10m
(4)    6/ 600486C :                     ; center center: X=E,Y=10
(4)    7/ 600486C :                     
(4)    8/ 600486C :                     TEST_LAYOUT:
(4)    9/ 600486C :                     		include "data/mars/maps/map0_data.asm"
(5)    1/ 600486C : 0600 5070           		dc.l .blocks
(5)    2/ 6004870 :                     		binclude "data/mars/maps/map0_lay.bin"
(5)    3/ 6005070 :                     		align 4
(5)    4/ 6005070 :                     .blocks:
(5)    5/ 6005070 : 0600 5078 0000 0000 		dc.l MarsMapPz_road_main,0
(5)    6/ 6005078 :                     		include "data/mars/maps/pz/road_main.asm"
(6)    1/ 6005078 :                     MarsMapPz_road_main:
(6)    2/ 6005078 : 0040 0051           		dc.w 64,81
(6)    3/ 600507C : 0600 508C 0600 5458 		dc.l .vert,.face,.vrtx,.mtrl
                    0600 56D8 0600 5828 
(6)    4/ 600508C :                     .vert:		binclude "data/mars/maps/pz/road_main_vert.bin"
(6)    5/ 6005458 :                     .face:		binclude "data/mars/maps/pz/road_main_face.bin"
(6)    6/ 60056D8 :                     .vrtx:		binclude "data/mars/maps/pz/road_main_vrtx.bin"
(6)    7/ 6005828 :                     .mtrl:		include "data/mars/maps/pz/road_main_mtrl.asm"
(7)    1/ 6005828 :                     
(6)    8/ 6005828 :                     		align 4
(5)    7/ 6005828 :                     
(4)   10/ 6005828 :                     
(3)   21/ 6005828 :                     
(3)   22/ 6005828 :                     
(2)   11/ 6005828 :                     
(1) 1481/ 6005828 :                     
(1) 1482/ 6005828 :                     ; ====================================================================
(1) 1483/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1484/ 6005828 :                     ; MARS SH2 RAM
(1) 1485/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1486/ 6005828 :                     
(1) 1487/ 6005828 :                     SH2_RAM:
(1) 1488/ 6005828 : (MACRO)             		struct SH2_RAM
(1) 1488/ 6005828 : =$6005828           GLBL_LASTPC     set *
(1) 1488/    9FA0 :                                     dephase
(1) 1488/    9FA0 : =$9FA0              GLBL_LASTORG    set *
(1) 1488/ 6005828 :                                     phase SH2_RAM
(1) 1495/ 6005828 :                     MarsRam_System	ds.b (sizeof_marssys-MarsRam_System)
(1) 1496/ 6005878 :                     MarsRam_Video	ds.b (sizeof_marsvid-MarsRam_Video)
(1) 1497/ 60167C4 :                     MarsRam_Sound	ds.b (sizeof_marssnd-MarsRam_Sound)
(1) 1498/ 60169C0 :                     sizeof_marsram	ds.l 0
(1) 1500/ 60169C0 :                     
(1) 1501/ 60169C0 :                     .here:
(1) 1505/ 60169C0 : (MACRO)             		finish
(1) 1505/ 6005828 :                                     !org GLBL_LASTORG
(1) 1505/ 6005828 :                                     phase GLBL_LASTPC
(1) 1506/ 6005828 :                     		
(1) 1507/ 6005828 :                     ; ====================================================================
(1) 1508/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1509/ 6005828 :                     ; MARS Sound RAM
(1) 1510/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1511/ 6005828 :                     
(1) 1512/ 6005828 : (MACRO)             			struct MarsRam_Sound
(1) 1512/ 6005828 : =$6005828           GLBL_LASTPC     set *
(1) 1512/    9FA0 :                                     dephase
(1) 1512/    9FA0 : =$9FA0              GLBL_LASTORG    set *
(1) 1512/ 60167C4 :                                     phase MARSRAM_SOUND
(1) 1513/ 60167C4 :                     MarsSnd_PwmChnls	ds.b sizeof_sndchn*MAX_PWMCHNL
(1) 1514/ 60168C0 :                     MarsSnd_InstrList	ds.l 64
(1) 1515/ 60169C0 :                     sizeof_marssnd		ds.l 0
(1) 1516/ 60169C0 : (MACRO)             			finish
(1) 1516/ 60167C4 :                                     !org GLBL_LASTORG
(1) 1516/ 6005828 :                                     phase GLBL_LASTPC
(1) 1517/ 6005828 :                     
(1) 1518/ 6005828 :                     ; ====================================================================
(1) 1519/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1520/ 6005828 :                     ; MARS Video RAM
(1) 1521/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1522/ 6005828 :                     
(1) 1523/ 6005828 : (MACRO)             			struct MarsRam_Video
(1) 1523/ 6005828 : =$6005828           GLBL_LASTPC     set *
(1) 1523/    9FA0 :                                     dephase
(1) 1523/    9FA0 : =$9FA0              GLBL_LASTORG    set *
(1) 1523/ 6005878 :                                     phase MARSRAM_VIDEO
(1) 1524/ 6005878 :                     RAM_Mars_ObjCamera	ds.b sizeof_camera		; Camera buffer
(1) 1525/ 60058A0 :                     RAM_Mars_ObjLayout	ds.b sizeof_layout		; Layout buffer
(1) 1526/ 60058C0 :                     RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS	; Objects list
(1) 1527/ 60064C0 :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_FACES	; Polygon list 0
(1) 1528/ 6009CC0 :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_FACES	; Polygon list 1
(1) 1529/ 600D4C0 :                     RAM_Mars_VdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ	; Pieces list
(1) 1530/ 6012EC0 :                     RAM_Mars_FbDrwnBuff	ds.b (SCREEN_WIDTH/8)*SCREEN_HEIGHT
(1) 1531/ 60151C0 :                     RAM_Mars_VdpDrwList_e	ds.l 0				; (end-of-list label)
(1) 1532/ 60151C0 :                     RAM_Mars_PlgnList_0	ds.l MAX_FACES			; Pointer list(s)
(1) 1533/ 60155C0 :                     RAM_Mars_PlgnList_1	ds.l MAX_FACES
(1) 1534/ 60159C0 :                     RAM_Mars_Plgn_ZList	ds.l MAX_FACES*2		; Z value / foward faces
(1) 1535/ 60161C0 :                     RAM_Mars_MdTasksFifo_M	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Request list for Master: SVDP and PWM interaction exclusive
(1) 1536/ 60163C0 :                     RAM_Mars_MdTasksFifo_S	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Request list for Slave: Controlling objects and camera
(1) 1537/ 60165C0 :                     RAM_Mars_Palette	ds.w 256			; Indexed palette
(1) 1538/ 60167C0 :                     RAM_Mars_PlgnNum_0	ds.w 1				; Number of polygons to read, both buffers
(1) 1539/ 60167C2 :                     RAM_Mars_PlgnNum_1	ds.w 1				;
(1) 1540/ 60167C4 :                     sizeof_marsvid		ds.l 0
(1) 1541/ 60167C4 : (MACRO)             			finish
(1) 1541/ 6005878 :                                     !org GLBL_LASTORG
(1) 1541/ 6005828 :                                     phase GLBL_LASTPC
(1) 1542/ 6005828 :                     			
(1) 1543/ 6005828 :                     ; ====================================================================
(1) 1544/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1545/ 6005828 :                     ; MARS System RAM
(1) 1546/ 6005828 :                     ; ----------------------------------------------------------------
(1) 1547/ 6005828 :                     
(1) 1548/ 6005828 : (MACRO)             			struct MarsRam_System
(1) 1548/ 6005828 : =$6005828           GLBL_LASTPC     set *
(1) 1548/    9FA0 :                                     dephase
(1) 1548/    9FA0 : =$9FA0              GLBL_LASTORG    set *
(1) 1548/ 6005828 :                                     phase MARSRAM_SYSTEM
(1) 1549/ 6005828 :                     RAM_Mars_Global		ds.w sizeof_MarsGbl		; keep it as a word
(1) 1550/ 6005878 :                     sizeof_marssys		ds.l 0
(1) 1551/ 6005878 : (MACRO)             			finish
(1) 1551/ 6005828 :                                     !org GLBL_LASTORG
(1) 1551/ 6005828 :                                     phase GLBL_LASTPC
(1) 1552/ 6005828 :                     
      62/ 6005828 :                     		ltorg
      63/ 6005828 :                     		cpu 68000
      64/ 6005828 :                     		padding off
      65/    9FA0 :                     		dephase
      66/    9FA0 :                     MARS_RAMDATA_E:
      67/    9FA0 :                     		align 4
      68/    9FA0 :                     
      69/    9FA0 :                     ; --------------------------------------------------------
      70/    9FA0 :                     ; SINGLE MD BANK
      71/    9FA0 :                     ; 
      72/    9FA0 :                     ; $900000 - $9FFFFF
      73/    9FA0 :                     ; --------------------------------------------------------
      74/    9FA0 :                     
      75/    9FA0 :                     		align 4
      76/  909FA0 :                     		phase $900000+*				; Only one currently
      77/  909FA0 :                     		include "data/md_bank0.asm"
(1)    1/  909FA0 :                     ; ====================================================================
(1)    2/  909FA0 :                     ; ----------------------------------------------------------------
(1)    3/  909FA0 :                     ; Single 68k DATA BANK for MD ($900000-$9FFFFF)
(1)    4/  909FA0 :                     ; for stuff other than DMA transfers
(1)    5/  909FA0 :                     ; 
(1)    6/  909FA0 :                     ; Maximum size: $0FFFFF bytes
(1)    7/  909FA0 :                     ; ----------------------------------------------------------------
(1)    8/  909FA0 :                     
(1)    9/  909FA0 :                     		align $8000
(1)   10/  910000 :                     		include "data/sound/tracks.asm"
(2)    1/  910000 :                     ; ================================================================
(2)    2/  910000 :                     ; ------------------------------------------------------------
(2)    3/  910000 :                     ; DATA SECTION
(2)    4/  910000 :                     ; 
(2)    5/  910000 :                     ; SOUND
(2)    6/  910000 :                     ; ------------------------------------------------------------
(2)    7/  910000 :                     
(2)    8/  910000 :                     gemaInsPsg	macro pitch,psgins
(2)    9/  910000 :                     		dc.b 0,pitch
(2)   10/  910000 :                     		dc.b psgins&$FF,((psgins>>8)&$FF)
(2)   11/  910000 :                     		dc.b 0,0
(2)   12/  910000 :                     		dc.b 0,0
(2)   13/  910000 :                     		endm
(2)   14/  910000 :                     
(2)   15/  910000 :                     gemaInsPsgN	macro pitch,psgins,type
(2)   16/  910000 :                     		dc.b 1,pitch
(2)   17/  910000 :                     		dc.b psgins&$FF,((psgins>>8)&$FF)
(2)   18/  910000 :                     		dc.b type,0
(2)   19/  910000 :                     		dc.b 0,0
(2)   20/  910000 :                     		endm
(2)   21/  910000 :                     
(2)   22/  910000 :                     gemaInsFm	macro pitch,fmins
(2)   23/  910000 :                     		dc.b 2,pitch
(2)   24/  910000 :                     		dc.b fmins&$FF,((fmins>>8)&$FF)
(2)   25/  910000 :                     		dc.b 0,0
(2)   26/  910000 :                     		dc.b 0,0
(2)   27/  910000 :                     		endm
(2)   28/  910000 :                     
(2)   29/  910000 :                     gemaInsFm3	macro pitch,fmins,freq1,freq2,freq3
(2)   30/  910000 :                     		dc.b 3,pitch
(2)   31/  910000 :                     		dc.b fmins&$FF,((fmins>>8)&$FF)
(2)   32/  910000 :                     		dc.b 0,0
(2)   33/  910000 :                     		dc.b 0,0		
(2)   34/  910000 :                     		endm
(2)   35/  910000 :                     		
(2)   36/  910000 :                     ; gemaInsDac	macro pitch,start,len,loop,flags
(2)   37/  910000 :                     ; 		dc.b 4,pitch
(2)   38/  910000 :                     ; 		dc.b start&$FF,((start>>8)&$FF),((start>>16)&$FF)
(2)   39/  910000 :                     ; 		dc.b len&$FF,((len>>8)&$FF),((len>>16)&$FF)
(2)   40/  910000 :                     ; 		dc.b loop&$FF,((loop>>8)&$FF),((loop>>16)&$FF)
(2)   41/  910000 :                     ; 		dc.b 0,0
(2)   42/  910000 :                     ; 		endm
(2)   43/  910000 :                     
(2)   44/  910000 :                     gemaInsPwm	macro pitch,pointer
(2)   45/  910000 :                     		dc.b 5,pitch
(2)   46/  910000 :                     		dc.b ((pointer>>24)&$FF),((pointer>>16)&$FF)
(2)   47/  910000 :                     		dc.b ((pointer>>8)&$FF),pointer&$FF
(2)   48/  910000 :                     		dc.b 0,0
(2)   49/  910000 :                     		endm
(2)   50/  910000 :                     
(2)   51/  910000 :                     gemaInsNull	macro
(2)   52/  910000 :                     		dc.b -1,0
(2)   53/  910000 :                     		dc.b  0,0
(2)   54/  910000 :                     		dc.b  0,0
(2)   55/  910000 :                     		dc.b  0,0
(2)   56/  910000 :                     		endm
(2)   57/  910000 :                     
(2)   58/  910000 :                     ; ------------------------------------------------------------
(2)   59/  910000 :                     
(2)   60/  910000 :                     ; TEST_BLOCKS	binclude "data/sound/tracks/temple_blk.bin"
(2)   61/  910000 :                     ; TEST_PATTERN	binclude "data/sound/tracks/temple_patt.bin"
(2)   62/  910000 :                     ; TEST_INSTR
(2)   63/  910000 :                     ; 		gemaInsPsg  0,PsgIns_01
(2)   64/  910000 :                     ; 		gemaInsPsg  0,PsgIns_01
(2)   65/  910000 :                     ; 		gemaInsPsgN 0,PsgIns_Snare,%101
(2)   66/  910000 :                     ; 
(2)   67/  910000 :                     ; TEST_BLOCKS_2	binclude "data/sound/tracks/kraid_blk.bin"
(2)   68/  910000 :                     ; TEST_PATTERN_2	binclude "data/sound/tracks/kraid_patt.bin"
(2)   69/  910000 :                     ; TEST_INSTR_2
(2)   70/  910000 :                     ; 		gemaInsPsgN 0,PsgIns_Bass,%011
(2)   71/  910000 :                     ; 		gemaInsPsg  0,PsgIns_03
(2)   72/  910000 :                     
(2)   73/  910000 :                     GemaTrk_Yuki_blk:
(2)   74/  910000 :                     		binclude "data/sound/tracks/marscomm_blk.bin"
(2)   75/  91000C :                     GemaTrk_Yuki_patt:
(2)   76/  91000C :                     		binclude "data/sound/tracks/marscomm_patt.bin"
(2)   77/  9115E8 :                     GemaTrk_Yuki_ins:
(2)   78/  9115E8 : (MACRO)             		gemaInsNull
(2)   78/  9115E8 : FF00                                dc.b -1,0
(2)   78/  9115EA : 0000                                dc.b  0,0
(2)   78/  9115EC : 0000                                dc.b  0,0
(2)   78/  9115EE : 0000                                dc.b  0,0
(2)   79/  9115F0 : (MACRO)             		gemaInsNull
(2)   79/  9115F0 : FF00                                dc.b -1,0
(2)   79/  9115F2 : 0000                                dc.b  0,0
(2)   79/  9115F4 : 0000                                dc.b  0,0
(2)   79/  9115F6 : 0000                                dc.b  0,0
(2)   80/  9115F8 : (MACRO)             		gemaInsPwm -17,PwmIns_WHODSNARE
(2)   80/  9115F8 : 05EF                                dc.b 5,-17
(2)   80/  9115FA : 0600                                dc.b ((PWMINS_WHODSNARE>>24)&$FF),((PWMINS_WHODSNARE>>16)&$FF)
(2)   80/  9115FC : 1064                                dc.b ((PWMINS_WHODSNARE>>8)&$FF),PWMINS_WHODSNARE&$FF
(2)   80/  9115FE : 0000                                dc.b 0,0
(2)   81/  911600 : (MACRO)             		gemaInsNull
(2)   81/  911600 : FF00                                dc.b -1,0
(2)   81/  911602 : 0000                                dc.b  0,0
(2)   81/  911604 : 0000                                dc.b  0,0
(2)   81/  911606 : 0000                                dc.b  0,0
(2)   82/  911608 : (MACRO)             		gemaInsNull
(2)   82/  911608 : FF00                                dc.b -1,0
(2)   82/  91160A : 0000                                dc.b  0,0
(2)   82/  91160C : 0000                                dc.b  0,0
(2)   82/  91160E : 0000                                dc.b  0,0
(2)   83/  911610 : (MACRO)             		gemaInsPwm -17,PwmIns_TECHNOBASSD
(2)   83/  911610 : 05EF                                dc.b 5,-17
(2)   83/  911612 : 0600                                dc.b ((PWMINS_TECHNOBASSD>>24)&$FF),((PWMINS_TECHNOBASSD>>16)&$FF)
(2)   83/  911614 : 1074                                dc.b ((PWMINS_TECHNOBASSD>>8)&$FF),PWMINS_TECHNOBASSD&$FF
(2)   83/  911616 : 0000                                dc.b 0,0
(2)   84/  911618 : (MACRO)             		gemaInsPwm -17,PwmIns_SPHEAVY1
(2)   84/  911618 : 05EF                                dc.b 5,-17
(2)   84/  91161A : 0600                                dc.b ((PWMINS_SPHEAVY1>>24)&$FF),((PWMINS_SPHEAVY1>>16)&$FF)
(2)   84/  91161C : 1044                                dc.b ((PWMINS_SPHEAVY1>>8)&$FF),PWMINS_SPHEAVY1&$FF
(2)   84/  91161E : 0000                                dc.b 0,0
(2)   85/  911620 : (MACRO)             		gemaInsPwm -17,PwmIns_MCLSTRNG
(2)   85/  911620 : 05EF                                dc.b 5,-17
(2)   85/  911622 : 0600                                dc.b ((PWMINS_MCLSTRNG>>24)&$FF),((PWMINS_MCLSTRNG>>16)&$FF)
(2)   85/  911624 : 1054                                dc.b ((PWMINS_MCLSTRNG>>8)&$FF),PWMINS_MCLSTRNG&$FF
(2)   85/  911626 : 0000                                dc.b 0,0
(2)   86/  911628 :                     
(1)   11/  911628 :                     
(1)   12/  911628 :                     		align 4
(1)   13/  911628 :                     CAMERA_INTRO:	binclude "data/mars/objects/anim/intro_anim.bin"
(1)   14/  91360C :                     		align 4
(1)   15/  91360C :                     ; TEST_WAV:	binclude "data/sound/test.wav",$2C,$CFFFF
(1)   16/  91360C :                     ; TEST_WAV_e:
(1)   17/  91360C :                     
      78/   1360C :                     		dephase
      79/   1360C :                     
      80/   1360C :                     ; --------------------------------------------------------
      81/   1360C :                     ; DATA for DMA transfers, bank-less
      82/   1360C :                     ; --------------------------------------------------------
      83/   1360C :                     
      84/   1360C :                     		align 4
      85/   1360C :                     		include "data/md_dma.asm"
(1)    1/   1360C :                     ; ====================================================================
(1)    2/   1360C :                     ; ----------------------------------------------------------------
(1)    3/   1360C :                     ; DMA ROM DATA Transfer section, no bank limitations
(1)    4/   1360C :                     ; 
(1)    5/   1360C :                     ; RV bit must be set to access here
(1)    6/   1360C :                     ; ----------------------------------------------------------------
(1)    7/   1360C :                     
(1)    8/   1360C :                     		align $8000
(1)    9/   18000 : 4D44 2044 4D41 2053 		dc.b "MD DMA STUFF"
                    5455 4646           
(1)   10/   1800C :                     ; MdGfx_Bg:
(1)   11/   1800C :                     ; 		binclude "data/md/bg/bg_art.bin"
(1)   12/   1800C :                     ; MdGfx_Bg_e:	align 2
(1)   13/   1800C :                     
      86/   1800C :                     		
      87/   1800C :                     ; --------------------------------------------------------
      88/   1800C :                     ; MARS ROM data for SH2
      89/   1800C :                     ; 
      90/   1800C :                     ; This section will be gone if RV=1
      91/   1800C :                     ; --------------------------------------------------------
      92/   1800C :                     
      93/ 201800C :                     		phase CS1+*
      94/ 201800C :                     		align 4
      95/ 201800C :                     		include "data/mars_rom.asm"
(1)    1/ 201800C :                     ; ====================================================================
(1)    2/ 201800C :                     ; ----------------------------------------------------------------
(1)    3/ 201800C :                     ; SH2 ROM user data
(1)    4/ 201800C :                     ; 
(1)    5/ 201800C :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 201800C :                     ; Note that this section will be gone if the Genesis side is
(1)    7/ 201800C :                     ; perfoming a DMA ROM-to-VDP Transfer (setting RV=1)
(1)    8/ 201800C :                     ; 
(1)    9/ 201800C :                     ; also, reading from here is slow (supposedly)
(1)   10/ 201800C :                     ; ----------------------------------------------------------------
(1)   11/ 201800C :                     
(1)   12/ 201800C :                     		include  "data/mars/objects/incl_rom.asm"	; All textures will go in ROM
(2)    1/ 201800C :                     ; ====================================================================
(2)    2/ 201800C :                     ; ----------------------------------------------------------------
(2)    3/ 201800C :                     ; Put your model textures here
(2)    4/ 201800C :                     ; ----------------------------------------------------------------
(2)    5/ 201800C :                     
(2)    6/ 201800C :                     		align 4
(2)    7/ 201800C :                     Textr_marscity:
(2)    8/ 201800C :                     		binclude "data/mars/objects/mtrl/marscity_art.bin"
(2)    9/ 205800C :                     		align 4
(2)   10/ 205800C :                     Textr_intro:
(2)   11/ 205800C :                     		binclude "data/mars/objects/mtrl/intro_art.bin"
(2)   12/ 205C2D8 :                     		align 4
(2)   13/ 205C2D8 :                     
(1)   13/ 205C2D8 :                     
(1)   14/ 205C2D8 :                     PWM_STEREO:	binclude "data/sound/pwm_st.wav",$2C,$200000
(1)   15/ 225C2D8 :                     PWM_STEREO_e:
(1)   16/ 225C2D8 :                     		align 4
(1)   17/ 225C2D8 :                     PwmInsWav_SPHEAVY1:
(1)   18/ 225C2D8 :                     		binclude "data/sound/instr/smpl/SPHEAVY1.wav",$2C
(1)   19/ 225D0AC :                     PwmInsWav_SPHEAVY1_e:
(1)   20/ 225D0AC :                     		align 4
(1)   21/ 225D0AC :                     PwmInsWav_MCLSTRNG:
(1)   22/ 225D0AC :                     		binclude "data/sound/instr/smpl/MCLSTRNG.wav",$2C
(1)   23/ 225DF90 :                     PwmInsWav_MCLSTRNG_e:
(1)   24/ 225DF90 :                     		align 4
(1)   25/ 225DF90 :                     PwmInsWav_WHODSNARE:
(1)   26/ 225DF90 :                     		binclude "data/sound/instr/smpl/ST-79_whodini-snare.wav",$2C
(1)   27/ 225FF14 :                     PwmInsWav_WHODSNARE_e:
(1)   28/ 225FF14 :                     		align 4
(1)   29/ 225FF14 :                     PwmInsWav_TECHNOBASSD:
(1)   30/ 225FF14 :                     		binclude "data/sound/instr/smpl/ST-72_techno-bassd3.wav",$2C
(1)   31/ 2260567 :                     PwmInsWav_TECHNOBASSD_e:
(1)   32/ 2260567 :                     		align 4
(1)   33/ 2260568 :                     
      96/  260568 :                     		dephase
      97/  260568 :                     
      98/  260568 :                     ; ====================================================================
      99/  260568 :                     ; ---------------------------------------------
     100/  260568 :                     ; End
     101/  260568 :                     ; ---------------------------------------------
     102/  260568 :                     		
     103/  260568 :                     ROM_END:
     104/  260568 :                     ; 		rompad (ROM_END&$FF0000)+$40000
     105/  260568 :                     		align $8000
     106/  268000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 3/22/2021 4:15:49


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ASCII_FONT :                FF09B2 C |  ASCII_FONT_E :              FF19B2 C |
 ASCII_PAL :                 FF0992 C | *ASCII_PAL_E :               FF09B2 C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITHINT :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
 BITJOYA :                        6 - |  BITJOYB :                        4 - |
*BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     3 - |
 BITJOYRIGHT :                    3 - | *BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        2 - |
*BITJOYY :                        1 - | *BITJOYZ :                        0 - |
 BITMAPMD :                       1 - | *BITV30 :                         3 - |
 BITVINT :                        3 - | *BITVINTENBL :                    5 - |
 BLKHEADC :                    1B00 C | *BRANCHEXT :                      0 - |
 CACHDDA_LAST :    FFFFFFFFC0000714 C |  CACHDDA_SRC :     FFFFFFFFC0000724 C |
 CACHDDA_SRC_L :   FFFFFFFFC0000744 C |  CACHDDA_SRC_R :   FFFFFFFFC0000754 C |
 CACHDDA_TOP :     FFFFFFFFC0000704 C |  CACHE_MASTER :             60015FC C |
 CACHE_MASTER_E :           6001D64 C |  CACHE_SLAVE :              6001D64 C |
 CACHE_SLAVE.END : FFFFFFFFC000001A C |  CACHE_SLAVE_E :            6001D7E C |
 CACH_CLRLINES :   FFFFFFFFC0000764 C |
 CACH_CLRLINES.END :                                       FFFFFFFFC0000768 C |
 CACH_LNDRW_L :    FFFFFFFFC00006CC C |  CACH_LNDRW_S :    FFFFFFFFC0000704 C |
 CAMERA_INTRO :              911628 C | *CAM_ANIMDATA :                  18 C |
*CAM_ANIMFRAME :                 1C C | *CAM_ANIMSPD :                   24 C |
*CAM_ANIMTIMER :                 20 C |  CAM_X_POS :                      0 C |
 CAM_X_ROT :                      C C |  CAM_Y_POS :                      4 C |
 CAM_Y_ROT :                     10 C |  CAM_Z_POS :                      8 C |
 CAM_Z_ROT :                     14 C | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CHECK_TICK :                   C2A C |
 CHECK_TICK.CTNOTICK :          C51 C |  CHNL_CHIP :                      0 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_STATUS :                    7 - |  CHNL_TYPE :                      1 - |
 CHNL_VOL :                       4 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  CMDTASKMD_CAMERAPOS :      6001508 C |
 CMDTASKMD_LOADSPAL :       6001478 C |  CMDTASKMD_MAKEMAP :        60014F4 C |
 CMDTASKMD_OBJECTCLRALL :   60014E4 C | *CMDTASKMD_OBJECTPOS :      60014B8 C |
 CMDTASKMD_OBJECTSET :      600148C C | *CMDTASKMD_PWM_ENABLE :     60015A0 C |
*CMDTASKMD_PWM_MULTPITCH :  6001548 C |  CMDTASKMD_PWM_SETCHNL :    600152C C |
 CMDTASKMD_SETBITMAP :      6001468 C |
 CMDTASKMD_SETBITMAP.WAIT_FB :                                      600146A C |
 COM :                            0 - |  COMM0 :                         20 - |
 COMM10 :                        2A - |  COMM12 :                        2C - |
 COMM14 :                        2E - |  COMM15 :                        2F - |
 COMM2 :                         22 - |  COMM4 :                         24 - |
 COMM6 :                         26 - |  COMM8 :                         28 - |
 COMMZFIFO :                   1E00 C |  COMMZREAD :                     2B C |
 COMMZROMBLK :                   2D C |  COMMZROMRD :                    2E C |
 COMMZWRITE :                    2C C | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFF9000 - | *CONTROLLER_2 :    FFFFFFFFFFFF9006 - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - |  CS3 :                      6000000 - |
 CURRINSDATA :                   18 C |  CURRTBLSRCH :                   32 C |
 CURRTICKBITS :                  21 C |  CURRTRKBLKHD :                  14 C |
 CURRTRKDATA :                   16 C | *CURY_MAX :                       9 - |
 CYCLE :                         32 - |  DAC_FILL :                     F17 C |
 DAC_FIRSTFILL :                F25 C |  DAC_ME :                       F03 C |
 DAC_OFF :                      D56 C |  DAC_ON :                       D41 C |
 DAC_PLAY :                     ECF C |  DAC_REFILL :                   F29 C |
 DAC_REFILL.FDF4DONE :          F79 C |  DAC_REFILL.FDF7 :              FEB C |
 DAC_REFILL.FDF72 :             FA4 C |  DAC_REFILL.FDFRETURN :         FEE C |
*DAC_REFILL.KEEPCNTR :          F52 C | *DATE :                   3/22/2021 - |
 DDACCNTR :                      25 C |  DDACFIFOMID :                   28 C |
 DDACPNTR :                      22 C | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - |  DO_MULTIPLY :                  C67 C |
 DO_MULTIPLY.MULBITCLR :        C6F C |  DO_MULTIPLY.MUL_ADD :          C6A C |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      42 C |
 DRV_LOOP.CMND_0 :              10E C |  DRV_LOOP.CMND_TRKPLAY :        113 C |
 DRV_LOOP.CMND_WAV_PITCH :      1D6 C |  DRV_LOOP.CMND_WAV_SET :        16C C |
 DRV_LOOP.LIST :                 C8 C |  DRV_LOOP.NEITHER :              93 C |
 DRV_LOOP.NEXT_CMD :             99 C |  DRV_LOOP.NOBEATS :              7A C |
 DRV_LOOP.NOTICKS :              62 C |  DRWSLD_NEXTPZ :   FFFFFFFFC0000304 C |
*DRWSLD_NEXTPZ.FINISH_IT :                                 FFFFFFFFC0000318 C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC0000316 C |
 DRWSLD_NXTLINE :  FFFFFFFFC000025E C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC00002A0 C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC000028A C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC000029A C |
 DRWSLD_NXTLINE.WAIT :                                     FFFFFFFFC00002AA C |
 DRWSLD_NXTLINE_TEX :                                      FFFFFFFFC0000150 C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                        FFFFFFFFC000021C C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                            FFFFFFFFC00001FA C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                               FFFFFFFFC00001D6 C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                               FFFFFFFFC00001C2 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                             FFFFFFFFC0000190 C |
 DRWSLD_UPDLINE :  FFFFFFFFC00002FA C |
 DRWSLD_UPDLINE_TEX :                                      FFFFFFFFC000022C C |
 DRWTASK_EXIT :    FFFFFFFFC0000342 C |  DRWTASK_RETURN :  FFFFFFFFC0000326 C |
 DRWTEX_GONXTPZ :  FFFFFFFFC0000246 C |  DRWTEX_TAGSHGHT : FFFFFFFFC000024C C |
*DRWTSK1_NEWPZ :   FFFFFFFFC00000EC C |
 DRWTSK1_NEWPZ.INVLD_Y :                                   FFFFFFFFC0000112 C |
 DRWTSK1_NEWPZ.LEN_MAX :                                   FFFFFFFFC000010C C |
 DRWTSK1_VLD_Y :   FFFFFFFFC0000126 C | *DRWTSK_00 :       FFFFFFFFC000031C C |
 DRWTSK_01 :       FFFFFFFFC00000C0 C |
 DRWTSK_01.HAS_PZ :                                        FFFFFFFFC00000D0 C |
 DRWTSK_02 :       FFFFFFFFC000007C C |
 DRWTSK_SOLIDMODE :                                        FFFFFFFFC0000250 C |
 DRWTSK_TEXMODE :  FFFFFFFFC000013C C |
 DRWTSK_TEXMODE.TEXVALID :                                 FFFFFFFFC0000148 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1600 C |  ENGINE_CODE :                  932 C |
 ENGINE_CODE_END :             4778 C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     5 - | *FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FM3VTBL :                     1257 C |  FM6VTBL :                     1268 C |
 FMFREQ_LIST :                 10E3 C | *FMINS_AMBIENT_3 :             14FE C |
*FMINS_BASS_2 :                141E C | *FMINS_BASS_3 :                143E C |
*FMINS_BASS_4 :                145E C | *FMINS_BASS_5 :                147E C |
*FMINS_BASS_6 :                149E C | *FMINS_BASS_7 :                14BE C |
*FMINS_BRASS_GEM :             14DE C | *FMINS_DRUMCLOSEHAT :          13DE C |
*FMINS_DRUMKICK :              139E C | *FMINS_DRUMSNARE :             13BE C |
*FMINS_FM3_CLOSEDHAT :         1376 C | *FMINS_FM3_OPENHAT :           134E C |
*FMINS_PIANO_M1 :              13FE C |  FMVTBL :                      1213 C |
 FM_AUTOSET :                   EB2 C |  FM_SEND_1 :                    EB9 C |
 FM_SEND_2 :                    EC4 C |  FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMATRK_YUKI_BLK :          910000 C |  GEMATRK_YUKI_INS :          9115E8 C |
 GEMATRK_YUKI_PATT :         91000C C |  GEMA_INIT :                    BAC C |
 GET_CMDBYTE :                  C01 C |  GET_CMDBYTE.GETCBYTEL :        C04 C |
 GLBL_LASTORG :                9FA0 - |  GLBL_LASTPC :              6005828 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :              FF03B8 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
 INSDATAC :                    1D00 C | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - |  INTMASK :                        1 - |
 INT_M_LIST :               600026C C |  INT_S_LIST :               60002CC C |
*JOYA :                          40 - | *JOYB :                          10 - |
*JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
 LAY_WIDTH :                     40 - |  LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :              FF097E C |  LITERAL_F_00000000_1 :     6000268 C |
 LITERAL_F_00000001_1 :     60003D0 C |  LITERAL_F_00000002_1 :     60003D8 C |
 LITERAL_F_00000003_1 :     60003EC C |  LITERAL_F_00000004_1 :     60003F4 C |
 LITERAL_F_00000005_1 :     600051C C |  LITERAL_F_00000006_1 :     6000538 C |
 LITERAL_F_00000007_1 :     6000650 C |  LITERAL_F_00000008_1 :     6000678 C |
 LITERAL_F_00000009_1 :     600075C C |  LITERAL_F_0000000A_1 :     60007D8 C |
 LITERAL_F_0000000B_1 :     60007DC C |  LITERAL_F_0000000C_1 :     60007E0 C |
 LITERAL_F_0000000D_1 :     6000AA8 C |  LITERAL_F_0000000E_1 :     6000AAC C |
 LITERAL_F_0000000F_1 :     6000AB0 C |  LITERAL_F_00000010_1 :     6000AB4 C |
 LITERAL_F_00000011_1 :     6000ABC C |  LITERAL_F_00000012_1 :     6000AE0 C |
 LITERAL_F_00000013_1 :     6000D0C C |  LITERAL_F_00000014_1 :     6000E2C C |
 LITERAL_F_00000015_1 :     6000EAC C |  LITERAL_F_00000016_1 :     6000EB0 C |
 LITERAL_F_00000017_1 :     6000EB4 C |  LITERAL_F_00000018_1 :     6000EB8 C |
 LITERAL_F_00000019_1 :     6000F78 C |  LITERAL_F_0000001A_1 :     6001088 C |
 LITERAL_F_0000001B_1 :     600108C C |  LITERAL_F_0000001C_1 :     6001094 C |
 LITERAL_F_0000001D_1 :     6001098 C |  LITERAL_F_0000001E_1 :     600120C C |
 LITERAL_F_0000001F_1 :     6001214 C |  LITERAL_F_00000020_1 :     6001256 C |
 LITERAL_F_00000021_1 :     6001224 C |  LITERAL_F_00000022_1 :     6001228 C |
 LITERAL_F_00000023_1 :     6001230 C |  LITERAL_F_00000024_1 :     6001234 C |
 LITERAL_F_00000025_1 :     6001238 C |  LITERAL_F_00000026_1 :     600123C C |
 LITERAL_F_00000027_1 :     6001240 C |  LITERAL_F_00000028_1 :     6001398 C |
 LITERAL_F_00000029_1 :     600139C C |  LITERAL_F_0000002A_1 :     60013F0 C |
 LITERAL_F_0000002B_1 :     60013AC C |  LITERAL_F_0000002C_1 :     60013B4 C |
 LITERAL_F_0000002D_1 :     60013B8 C |  LITERAL_F_0000002E_1 :     60013BC C |
 LITERAL_F_0000002F_1 :     60013C4 C |  LITERAL_F_00000030_1 :     60013CC C |
 LITERAL_F_00000031_1 :     60013D0 C |  LITERAL_F_00000032_1 :     60013D4 C |
 LITERAL_F_00000033_1 :     60013D8 C |  LITERAL_F_00000034_1 :     6001460 C |
 LITERAL_F_00000035_1 :     60015B8 C |  LITERAL_F_00000036_1 :     60015BC C |
 LITERAL_F_00000037_1 :     60015C8 C |
 LITERAL_F_00000038_1 :                                    FFFFFFFFC0000058 C |
 LITERAL_F_00000039_1 :                                    FFFFFFFFC0000118 C |
 LITERAL_F_0000003A_1 :                                    FFFFFFFFC000011C C |
 LITERAL_F_0000003B_1 :                                    FFFFFFFFC0000360 C |
 LITERAL_F_0000003C_1 :                                    FFFFFFFFC0000364 C |
 LITERAL_F_0000003D_1 :                                    FFFFFFFFC0000368 C |
 LITERAL_F_0000003E_1 :                                    FFFFFFFFC00004AC C |
 LITERAL_F_0000003F_1 :                                    FFFFFFFFC00004B0 C |
 LITERAL_F_00000040_1 :                                    FFFFFFFFC00004B4 C |
 LITERAL_F_00000041_1 :                                    FFFFFFFFC00004BC C |
 LITERAL_F_00000042_1 :                                    FFFFFFFFC00004C0 C |
 LITERAL_F_00000043_1 :                                    FFFFFFFFC00005D8 C |
 LITERAL_F_00000044_1 :                                    FFFFFFFFC00005DC C |
 LITERAL_F_00000045_1 :                                    FFFFFFFFC00005E0 C |
 LITERAL_F_00000046_1 :                                    FFFFFFFFC00005E4 C |
 LITERAL_F_00000047_1 :                                    FFFFFFFFC00005E8 C |
 LITERAL_F_00000048_1 :                                    FFFFFFFFC00005EC C |
 LITERAL_F_00000049_1 :                                    FFFFFFFFC00006B4 C |
 LITERAL_F_0000004A_1 :                                    FFFFFFFFC00006B8 C |
 LITERAL_F_0000004B_1 :                                    FFFFFFFFC00006BC C |
 LITERAL_F_0000004C_1 :                                    FFFFFFFFC00006C0 C |
 LITERAL_F_0000004D_1 :                                    FFFFFFFFC00006C4 C |
 LITERAL_F_0000004E_1 :                                    FFFFFFFFC00006C8 C |
 LITERAL_L_0000E000_1 :     6000D04 C |  LITERAL_L_0000FFFF_1 :     60015CC C |
 LITERAL_L_0000FFFF_2 :                                    FFFFFFFFC0000120 C |
 LITERAL_L_000FFFFF_1 :     6000E30 C |  LITERAL_L_00100000_1 :     6000AB8 C |
 LITERAL_L_00FFFFFF_1 :     6000F7C C |  LITERAL_L_01680000_1 :     6000E34 C |
 LITERAL_L_06000682_1 :     600121C C |  LITERAL_L_06000724_1 :     60015B4 C |
 LITERAL_L_06000768_1 :     60013C0 C |  LITERAL_L_060007EA_1 :     60015C4 C |
 LITERAL_L_06000ACE_1 :     60013A4 C |  LITERAL_L_06000ACE_2 :     60015C0 C |
 LITERAL_L_06000AE6_1 :     60013C8 C |  LITERAL_L_06000E74_1 :     600122C C |
 LITERAL_L_0603EFF8_1 :     6000674 C |  LITERAL_L_0603F000_1 :     6001394 C |
 LITERAL_L_0603FFF8_1 :     6000534 C |  LITERAL_L_06040000_1 :     6001200 C |
 LITERAL_L_20004000_1 :     6000524 C |  LITERAL_L_20004000_2 :     6000664 C |
 LITERAL_L_20004000_3 :     6000750 C |  LITERAL_L_20004000_4 :     6001084 C |
 LITERAL_L_20004000_5 :     6001210 C |  LITERAL_L_20004000_6 :     6001388 C |
 LITERAL_L_20004016_1 :     6000514 C |  LITERAL_L_20004016_2 :     6000660 C |
 LITERAL_L_20004018_1 :     6000510 C |  LITERAL_L_20004018_2 :     600065C C |
 LITERAL_L_2000401A_1 :     60003E0 C |  LITERAL_L_2000401A_2 :     600064C C |
 LITERAL_L_2000401C_1 :     60003DC C |  LITERAL_L_2000401C_2 :     6000648 C |
 LITERAL_L_20004020_1 :     6001204 C |  LITERAL_L_20004020_2 :     600138C C |
 LITERAL_L_20004021_1 :     6001248 C |  LITERAL_L_20004022_1 :     60013B0 C |
 LITERAL_L_20004024_1 :     60003E4 C |  LITERAL_L_20004028_1 :     60003E8 C |
 LITERAL_L_20004028_2 :     6000654 C |  LITERAL_L_2000402E_1 :     60003F0 C |
 LITERAL_L_2000402E_2 :     6001220 C |  LITERAL_L_2000402E_3 :     60013DC C |
 LITERAL_L_2000402F_1 :     6000658 C |  LITERAL_L_2000402F_2 :     60013A8 C |
 LITERAL_L_20004034_1 :     6000F80 C |  LITERAL_L_20004036_1 :     6000F84 C |
 LITERAL_L_20004038_1 :     60003D4 C |  LITERAL_L_20004100_1 :     6000518 C |
 LITERAL_L_20004100_2 :     6000754 C |  LITERAL_L_20004100_3 :     6000EBC C |
 LITERAL_L_20004100_4 :     6001244 C |  LITERAL_L_20004100_5 :     60015B0 C |
 LITERAL_L_20004100_6 :                                    FFFFFFFFC0000054 C |
 LITERAL_L_20004100_7 :                                    FFFFFFFFC000035C C |
 LITERAL_L_20004200_1 :     6000520 C |  LITERAL_L_24000000_1 :     6000758 C |
 LITERAL_L_24020200_1 :                                    FFFFFFFFC0000358 C |
 LITERAL_L_36385550_1 :     6000528 C |  LITERAL_L_36385550_2 :     6000668 C |
 LITERAL_L_3FFFFFFF_1 :     6000D00 C |  LITERAL_L_40000000_1 :     6000AC0 C |
 LITERAL_L_4D5F4F4B_1 :     6000530 C |  LITERAL_L_4D5F4F4B_2 :     6000670 C |
 LITERAL_L_534C4156_1 :     6001208 C |  LITERAL_L_534C4156_2 :     6001390 C |
 LITERAL_L_535F4F4B_1 :     600052C C |  LITERAL_L_535F4F4B_2 :     600066C C |
 LITERAL_L_7FFFFFFF_1 :     6000D08 C |
 LITERAL_L_7FFFFFFF_2 :                                    FFFFFFFFC00004B8 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6001218 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     60013A0 C |
 LITERAL_L_FFFFFFFFFF000000_1 :                                     6001090 C |
 LITERAL_L_FFFFFFFFFFE00000_1 :                                     6000AC8 C |
 LITERAL_L_FFFFFFFFFFF00000_1 :                                     60007E4 C |
 LITERAL_L_FFFFFFFFFFF00000_2 :                                     6000AC4 C |
 LITERAL_W_0080_1 :         6000760 C |
 LITERAL_W_00A0_1 :                                        FFFFFFFFC000005E C |
 LITERAL_W_00A0_2 :                                        FFFFFFFFC00004C4 C |
 LITERAL_W_00A1_1 :         6000EC4 C |  LITERAL_W_00E0_1 :         6000EC2 C |
 LITERAL_W_00E0_2 :                                        FFFFFFFFC0000124 C |
 LITERAL_W_00E0_3 :                                        FFFFFFFFC0000374 C |
 LITERAL_W_00E0_4 :                                        FFFFFFFFC00004C6 C |
 LITERAL_W_00F0_1 :         60003FA C |  LITERAL_W_00F0_2 :         600053E C |
 LITERAL_W_00F0_3 :         600067E C |  LITERAL_W_00F0_4 :         6000764 C |
 LITERAL_W_00F0_5 :         60010A0 C |  LITERAL_W_00F0_6 :         6001252 C |
 LITERAL_W_00F0_7 :         60013EC C |  LITERAL_W_00FF_1 :         6000766 C |
 LITERAL_W_00FF_2 :                                        FFFFFFFFC0000372 C |
 LITERAL_W_0100_1 :         6000762 C |  LITERAL_W_0100_2 :         6000D10 C |
 LITERAL_W_0100_3 :         6001464 C |  LITERAL_W_0105_1 :         600109C C |
 LITERAL_W_013F_1 :                                        FFFFFFFFC0000376 C |
 LITERAL_W_0140_1 :                                        FFFFFFFFC000036C C |
 LITERAL_W_0300_1 :         6000AE4 C |  LITERAL_W_03FF_1 :         6000F88 C |
 LITERAL_W_0415_1 :         600109E C |  LITERAL_W_07FF_1 :         6000EC0 C |
 LITERAL_W_1FFF_1 :         6000ACC C |  LITERAL_W_1FFF_2 :         6000D12 C |
 LITERAL_W_1FFF_3 :                                        FFFFFFFFC0000370 C |
 LITERAL_W_44E0_1 :         6000540 C |  LITERAL_W_44E0_2 :         6000680 C |
 LITERAL_W_5A00_1 :                                        FFFFFFFFC000037C C |
 LITERAL_W_5A10_1 :                                        FFFFFFFFC0000064 C |
 LITERAL_W_5A7F_1 :         60013E8 C |  LITERAL_W_5A7F_2 :         60015FA C |
 LITERAL_W_5AFF_1 :         6000EC8 C |  LITERAL_W_8000_1 :         60007E8 C |
 LITERAL_W_A518_1 :         600125A C |  LITERAL_W_A518_2 :         60015F8 C |
 LITERAL_W_A518_3 :                                        FFFFFFFFC0000062 C |
 LITERAL_W_A518_4 :                                        FFFFFFFFC000037A C |
 LITERAL_W_A538_1 :         6000ECA C |  LITERAL_W_A538_2 :         60013EA C |
 LITERAL_W_FE10_1 :         60003F8 C |  LITERAL_W_FE10_2 :         600053C C |
 LITERAL_W_FE10_3 :         600067C C |  LITERAL_W_FE10_4 :         600124C C |
 LITERAL_W_FE10_5 :         60013E0 C |  LITERAL_W_FE10_6 :         60015F4 C |
 LITERAL_W_FE10_7 :                                        FFFFFFFFC000005C C |
 LITERAL_W_FE80_1 :         6000EC6 C |  LITERAL_W_FE80_2 :         6001258 C |
 LITERAL_W_FE80_3 :         60013E6 C |  LITERAL_W_FE80_4 :         60015F6 C |
 LITERAL_W_FE80_5 :                                        FFFFFFFFC0000060 C |
 LITERAL_W_FE80_6 :                                        FFFFFFFFC0000378 C |
 LITERAL_W_FE92_1 :         6001254 C |  LITERAL_W_FE92_2 :         60013EE C |
 LITERAL_W_FEE2_1 :         600124E C |  LITERAL_W_FEE2_2 :         60013E2 C |
 LITERAL_W_FEE4_1 :         6001250 C |  LITERAL_W_FEE4_2 :         60013E4 C |
 LITERAL_W_FF00_1 :         6000E38 C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC000036E C |
 LITERAL_W_FF00_3 :                                        FFFFFFFFC00005F0 C |
 LITERAL_W_FF60_1 :         6000D14 C | *MACEXP :                         7 - |
 MAINDRW_TASKS :   FFFFFFFFC0000066 C |
 MAINDRW_TASKS.LIST :                                      FFFFFFFFC0000070 C |
*MARS :                           1 - | *MARSCD :                         0 - |
 MARSGBL_CURRFACEPOS :            C C |  MARSGBL_CURRFB :                22 C |
 MARSGBL_CURRZLIST :              8 C |  MARSGBL_DIVREQ_M :              20 C |
 MARSGBL_DRWTASK :               1A C |  MARSGBL_MDLFACESCNTR :          14 C |
*MARSGBL_MDTASKLIST_RQ :         12 C | *MARSGBL_MDTASKLIST_SW :         10 C |
 MARSGBL_PALDMAMIDWR :           24 C |  MARSGBL_PLYPZLIST_R :            0 C |
 MARSGBL_PLYPZLIST_W :            4 C |  MARSGBL_POLYBUFFNUM :           16 C |
 MARSGBL_PZLISTCNTR :            18 C |  MARSGBL_VINTFLAG_M :            1C C |
 MARSGBL_VINTFLAG_S :            1E C | *MARSGBL_ZSORTREQ :              26 C |
 MARSLAY_DRAW :             60007FE C |  MARSLAY_DRAW.BLANK_MDL :   600098E C |
 MARSLAY_DRAW.CENTER_VAL :  600085C C |  MARSLAY_DRAW.CLROLD :      6000808 C |
 MARSLAY_DRAW.DOWN :        6000A30 C |  MARSLAY_DRAW.DOWN_LEFT :   6000A58 C |
 MARSLAY_DRAW.DO_PIECE :    6000960 C |  MARSLAY_DRAW.FRONT :       60009B8 C |
 MARSLAY_DRAW.FRONT_FR :    60009E0 C |  MARSLAY_DRAW.FRONT_LF :    6000A80 C |
 MARSLAY_DRAW.LIST :        6000860 C |  MARSLAY_DRAW.NXT_ONE :     6000966 C |
 MARSLAY_DRAW.RIGHT_DW :    6000A08 C |  MARSLAY_DRAW.XROTLIST :    60009A8 C |
 MARSLAY_MAKE :             60007EA C |  MARSLAY_READ :             6000768 C |
 MARSLAY_READ.NO_LAY :      60007D2 C |  MARSLAY_READ.NO_XR_UPD :   60007CA C |
 MARSLAY_READ.NO_X_UPD :    60007B8 C |  MARSLAY_READ.NO_Y_UPD :    60007A6 C |
 MARSLAY_READ.NO_Z_UPD :    6000794 C |  MARSMAPPZ_ROAD_MAIN :      6005078 C |
 MARSMAPPZ_ROAD_MAIN.FACE : 6005458 C |  MARSMAPPZ_ROAD_MAIN.MTRL : 6005828 C |
 MARSMAPPZ_ROAD_MAIN.VERT : 600508C C |  MARSMAPPZ_ROAD_MAIN.VRTX : 60056D8 C |
 MARSMDL_INIT :             6000ACE C |  MARSMDL_INIT.CLNUP :       6000AD4 C |
 MARSMDL_READMODEL :        6000AE6 C |
 MARSMDL_READMODEL.ALLFCSDONE :                                     6000C88 C |
 MARSMDL_READMODEL.ALLUVDONE :                                      6000BAA C |
 MARSMDL_READMODEL.CAMLIMIT :                                       6000CBC C |
 MARSMDL_READMODEL.CAN_BUILD :                                      6000B4C C |
 MARSMDL_READMODEL.EXIT_MODEL :                                     6000CFA C |
*MARSMDL_READMODEL.FACE_OK :                                        6000CDC C |
 MARSMDL_READMODEL.FACE_OUT :                                       6000CEA C |
 MARSMDL_READMODEL.FINISH_THIS :                                    6000CF2 C |
 MARSMDL_READMODEL.GO_FACES :                                       6000BEA C |
 MARSMDL_READMODEL.NEXT_FACE :                                      6000B40 C |
 MARSMDL_READMODEL.NO_ANIM :                                        6000B2C C |
 MARSMDL_READMODEL.ON_FRAMES :                                      6000B02 C |
 MARSMDL_READMODEL.REVRSCAM :                                       6000CB4 C |
 MARSMDL_READMODEL.SET_TRI :                                        6000B5A C |
 MARSMDL_READMODEL.SOLID_TYPE :                                     6000BD4 C |
 MARSMDL_READMODEL.WAIT_CAMANIM :                                   6000B2A C |
 MARSOBJ_INTRO :            60047A0 C |  MARSOBJ_INTRO.FACE :       6004814 C |
 MARSOBJ_INTRO.MTRL :       6004864 C |  MARSOBJ_INTRO.VERT :       60047B4 C |
 MARSOBJ_INTRO.VRTX :       6004844 C |  MARSRAM_SOUND :            60167C4 C |
 MARSRAM_SYSTEM :           6005828 C |  MARSRAM_VIDEO :            6005878 C |
 MARSSND_INSTRLIST :        60168C0 C |  MARSSND_PWMCHNLS :         60167C4 C |
 MARSSOUND_INIT :           6000F94 C |  MARSSOUND_INIT.CLR_ENBL :  6000FB4 C |
 MARSSOUND_PWMENABLE :      600102C C |  MARSSOUND_READPWM :        6000ECC C |
 MARSSOUND_READPWM.LMUCH :  6000F54 C |  MARSSOUND_READPWM.LOOP :   6000EE4 C |
 MARSSOUND_READPWM.LOOP_ME :                                        6000F0A C |
 MARSSOUND_READPWM.MONO :   6000F2C C |  MARSSOUND_READPWM.MONO_A : 6000F1C C |
 MARSSOUND_READPWM.MONO_I : 6000F3A C |  MARSSOUND_READPWM.ON :     6000EF2 C |
 MARSSOUND_READPWM.READ :   6000F0E C | *MARSSOUND_READPWM.RETRY :  6000EDC C |
 MARSSOUND_READPWM.RMUCH :  6000F5A C |  MARSSOUND_READPWM.SILENT : 6000EEA C |
 MARSSOUND_READPWM.SKIP :   6000F3E C | *MARSSOUND_RUN :            6000F8A C |
 MARSSOUND_SETPWM :         6000FC4 C |  MARSSOUND_SETPWM.ENDMRK :  6000FF2 C |
 MARSSOUND_SETPWMPITCH :    600100C C |
 MARSSOUND_SETPWMPITCH.OFF_1 :                                      6001026 C |
*MARSVIDEO_CLEARFRAME :     60006D0 C |
 MARSVIDEO_CLEARFRAME.LOOP :                                        60006E4 C |
 MARSVIDEO_CLEARFRAME.WAIT :                                        60006F2 C |
 MARSVIDEO_CLEARFRAME.WAIT2 :                                       60006D2 C |
*MARSVIDEO_FRAMESWAP :      6000704 C |
 MARSVIDEO_FRAMESWAP.WAIT_FB :                                      6000706 C |
 MARSVIDEO_FRAMESWAP.WAIT_RESULT :                                  6000716 C |
 MARSVIDEO_INIT :           6000682 C |  MARSVIDEO_INIT.FB_WAIT1 :  60006B2 C |
 MARSVIDEO_INIT.LOOP :      60006A8 C |  MARSVIDEO_INIT.THIS_FB :   60006A0 C |
 MARSVIDEO_INIT.WAIT_RESULT :                                       60006C2 C |
 MARSVIDEO_LOADPAL :        6000724 C | *MARSVIDEO_LOADPAL.BADLEN : 600074A C |
 MARSVIDEO_LOADPAL.LOOP :   600073E C |
 MARSVIDEO_MAKEPOLYGON :                                   FFFFFFFFC000037E C |
 MARSVIDEO_MAKEPOLYGON.DONTRESET :                         FFFFFFFFC0000484 C |
 MARSVIDEO_MAKEPOLYGON.EXIT :                              FFFFFFFFC00004A4 C |
 MARSVIDEO_MAKEPOLYGON.FIND_TOP :                          FFFFFFFFC0000436 C |
 MARSVIDEO_MAKEPOLYGON.IS_HIGH :                           FFFFFFFFC0000448 C |
 MARSVIDEO_MAKEPOLYGON.IS_LOW :                            FFFFFFFFC000043E C |
 MARSVIDEO_MAKEPOLYGON.LEFTH2 :                            FFFFFFFFC000049C C |
 MARSVIDEO_MAKEPOLYGON.NEXT_PZ :                           FFFFFFFFC000046A C |
 MARSVIDEO_MAKEPOLYGON.PLGN_PNTS :                         FFFFFFFFC00003FE C |
 MARSVIDEO_MAKEPOLYGON.SETPNTS :                           FFFFFFFFC0000404 C |
*MARSVIDEO_MAKEPOLYGON.SPR_PNTS :                          FFFFFFFFC000039C C |
 MARSVIDEO_MAKEPOLYGON.SRC_PNTS :                          FFFFFFFFC0000418 C |
 MARSVIDEO_MAKEPOLYGON.START_MATH :                        FFFFFFFFC0000426 C |
 MARSVIDEO_MAKEPOLYGON.TRINGL :                            FFFFFFFFC0000390 C |
 MARSVIDEO_MAKEPOLYGON.YTRINGL :                           FFFFFFFFC000042E C |
 MARSVIDEO_SETWATCHDOG :    6000E74 C |
 MARSVIDEO_SETWATCHDOG.WAIT_FB :                                    6000E92 C |
 MARS_ENTRY :                   800 C |  MARS_ENTRY.ADAPTERENABLE :     872 C |
 MARS_ENTRY.CLRRAM :            8F0 C |  MARS_ENTRY.COPYME :            90C C |
 MARS_ENTRY.HOTSTART :          8BE C |  MARS_ENTRY.INIT :              880 C |
 MARS_ENTRY.NO_MARS :           918 C |  MARS_ENTRY.RAMCODE :           84A C |
 MARS_ENTRY.RESTARTICD :        85A C |  MARS_ENTRY.WAITFRAME :         8D0 C |
 MARS_ENTRY.WM :                892 C |  MARS_ENTRY.WS :                89C C |
 MARS_RAMDATA :                4778 C |  MARS_RAMDATA_E :              9FA0 C |
 MARS_SCOMM :                   B06 C |  MARS_SCOMM.COMM_ME :           B44 C |
 MARS_SCOMM.EXIT :              BA4 C |  MARS_SCOMM.LOOP :              B60 C |
 MARS_SCOMM.WAIT_CMD :          B56 C |  MASTER_IRQ :               6000248 C |
 MASTER_LOOP :              600112C C |  MASTER_LOOP.CONT_PLGN :    60011B0 C |
 MASTER_LOOP.DRAW_OBJECTS : 600118E C |  MASTER_LOOP.INVALID :      60011C6 C |
 MASTER_LOOP.LIST :         6001150 C |  MASTER_LOOP.LOOP :         60011B6 C |
 MASTER_LOOP.MD_REQ :       600115C C |  MASTER_LOOP.NEXT_REQ :     6001166 C |
 MASTER_LOOP.NO_TASK :      6001176 C |  MASTER_LOOP.PAGE_2 :       60011AC C |
 MASTER_LOOP.SKIP :         60011D0 C |  MASTER_LOOP.WAIT_PZ :      60011D0 C |
 MASTER_LOOP.WAIT_TASK :    60011D6 C |  MAX_FACES :                    100 - |
 MAX_MDERAM :                   800 - |  MAX_MDTASKS :                   10 - |
 MAX_MDTSKARG :                   8 - |  MAX_MODELS :                    40 - |
 MAX_PWMCHNL :                    7 - |  MAX_SVDP_PZ :                  180 - |
 MAX_TRKCHN :                    12 - |  MAX_TRKS :                       2 - |
 MAX_ZDIST :       FFFFFFFFFFFFE000 - | *MCD :                            0 - |
 MCHNSND_BANK :                   8 C |  MCHNSND_ENBL :                   0 C |
 MCHNSND_END :                   10 C |  MCHNSND_FLAGS :                 1C C |
 MCHNSND_LOOP :                  14 C |  MCHNSND_PITCH :                 18 C |
 MCHNSND_READ :                   4 C |  MCHNSND_START :                  C C |
 MCHNSND_VOL :                   20 C |  MDLLAY_DATA :                    0 C |
 MDLLAY_X :                       4 C |  MDLLAY_XR_LAST :                1C C |
 MDLLAY_X_LAST :                 10 C |  MDLLAY_Y :                       8 C |
 MDLLAY_Y_LAST :                 14 C |  MDLLAY_Z :                       C C |
 MDLLAY_Z_LAST :                 18 C |  MDLRD_ROTATE :             6000E3A C |
 MDLRD_SETPOINT :           6000D18 C |  MDLRD_SETPOINT.INSIDE :    6000DDA C |
 MDLRD_SETPOINT.LAY_MOVE :  6000D88 C |  MDLRD_SETPOINT.SAVE_Z :    6000E0C C |
 MDLRD_SETPOINT.SAVE_Z2 :   6000E06 C |  MDLRD_SETPOINT.X_LW :      6000E12 C |
 MDLRD_SETPOINT.X_RW :      6000E18 C |  MDLRD_SETPOINT.Y_LW :      6000E1E C |
 MDLRD_SETPOINT.Y_RW :      6000E24 C | *MDLRD_SETPOINT.ZMULTI :    6000DE2 C |
 MDL_ANIMDATA :                  20 C |  MDL_ANIMFRAME :                 24 C |
*MDL_ANIMSPD :                   2C C |  MDL_ANIMTIMER :                 28 C |
 MDL_DATA :                       0 C |  MDL_OPTION :                     4 C |
 MDL_X_POS :                      8 C |  MDL_X_ROT :                     14 C |
 MDL_Y_POS :                      C C |  MDL_Y_ROT :                     18 C |
 MDL_Z_POS :                     10 C |  MDL_Z_ROT :                     1C C |
 MDMDL_CAMANIMATE :          FF3D90 C |
 MDMDL_CAMANIMATE.NO_CAMANIM :                                       FF3DF6 C |
 MDMDL_CAMANIMATE.ON_FRAMES :                                        FF3DC6 C |
 MDRAM_START :             FFFF8800 - |  MD_BANK_SRAM :              A130F1 - |
 MD_ERRADDR :                   930 C |  MD_ERRBUS :                    930 C |
 MD_ERRCHK :                    930 C |  MD_ERRILL :                    930 C |
 MD_ERROREX :                   930 C |  MD_ERRORTRAP :                 930 C |
 MD_ERRPRIVL :                  930 C |  MD_ERRTRAPV :                  930 C |
 MD_ERRZDIV :                   930 C | *MD_GMMODE0 :                FF3B1A C |
 MD_GMMODE0.LIST :           FF3B90 C |  MD_GMMODE0.LOOP :           FF3B7A C |
 MD_GMMODE0.MODE0 :          FF3B98 C |  MD_GMMODE0.MODE0_LOOP :     FF3C08 C |
 MD_GMMODE0.MODE1 :          FF3C3E C |  MD_GMMODE0.MODE1_LOOP :     FF3CF2 C |
 MD_GMMODE0.NOA :            FF3D56 C |  MD_GMMODE0.NOB :            FF3D66 C |
 MD_GMMODE0.NOD :            FF3D26 C |  MD_GMMODE0.NOL :            FF3D36 C |
 MD_GMMODE0.NOR :            FF3D46 C |  MD_GMMODE0.NOU :            FF3D16 C |
 MD_GMMODE0.STAY :           FF3C14 C |  MD_LINE1010 :                  930 C |
 MD_LINE1111 :                  930 C |  MD_MAIN :                   FF3B0E C |
*MD_MARS_ID :                A130EC - |  MD_TRACE :                     930 C |
 MODE :                          18 - |  MODE_INIT :                 FF0388 C |
 MODE_INIT.CLR :             FF0394 C |  MOMCPU :                     68000 - |
*MOMCPUNAME :                 68000 - |  MONOWIDTH :                     38 - |
 M_IRQ_BAD :                6000314 C |  M_IRQ_CMD :                600033C C |
 M_IRQ_CMD.FINISH :         6000392 C |  M_IRQ_CMD.FINISHZ :        60003C6 C |
 M_IRQ_CMD.NEXT_COMM :      6000366 C |  M_IRQ_CMD.NEXT_COMMZ :     600039E C |
 M_IRQ_CMD.PWM_PLAY :       600039C C |  M_IRQ_CMD.WAIT_MD_B :      600036A C |
 M_IRQ_CMD.WAIT_MD_C :      600037A C |  M_IRQ_CMD.WAIT_Z_B :       60003A2 C |
 M_IRQ_CMD.WAIT_Z_C :       60003B2 C |  M_IRQ_CUSTOM :    FFFFFFFFC0000000 C |
 M_IRQ_CUSTOM.ON_CLR :                                     FFFFFFFFC000004C C |
 M_IRQ_CUSTOM.WAIT_FB :                                    FFFFFFFFC000001C C |
 M_IRQ_CUSTOM.WAIT_FRMSWP :                                FFFFFFFFC0000016 C |
 M_IRQ_H :                  60003FC C |  M_IRQ_PWM :                6000318 C |
 M_IRQ_PWM.EXIT :           600032A C |  M_IRQ_V :                  6000418 C |
 M_IRQ_V.COPY_PAL :         6000440 C | *M_IRQ_V.MID_PWRITE :       60004AE C |
 M_IRQ_V.WAIT :             6000426 C |  M_IRQ_VRES :               60004B8 C |
 M_IRQ_VRES.MARS_RESET :    6000502 C |  M_IRQ_VRES.MD_RESET :      60004D0 C |
 M_IRQ_VRES.SH_WAIT :       60004D8 C |  M_IRQ_VRES.VRESLOOP :      600050A C |
*NESTMAX :                      100 - |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PADDINGSOFAR :                   0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
 PALETTE_INTRO :            6004580 C |  PALETTE_MAP :              60045A0 C |
*PEN :                           20 - |  PLAYONCHIP :                   1EF C |
 PLAYONCHIP.CONT_PSG :          2D6 C |  PLAYONCHIP.COPYPSTE_P :        38A C |
 PLAYONCHIP.DO_CHNL :           230 C |  PLAYONCHIP.EFF_X :             279 C |
 PLAYONCHIP.FMPAN_LIST :        297 C |  PLAYONCHIP.FM_INS :            310 C |
 PLAYONCHIP.F_LP :              717 C |  PLAYONCHIP.GETOCT :            5FB C |
 PLAYONCHIP.GET_INSTYPE :       697 C |  PLAYONCHIP.INS_NS :            2CA C |
 PLAYONCHIP.INS_PSG :           2B9 C |  PLAYONCHIP.L_LP :              6F5 C |
 PLAYONCHIP.NEWP :              726 C |  PLAYONCHIP.NGOOD :             711 C |
 PLAYONCHIP.NOLNK :             714 C |  PLAYONCHIP.NORMLPSG :          559 C |
 PLAYONCHIP.NOTE_FM :           58E C |  PLAYONCHIP.NOTE_FM3 :          656 C |
 PLAYONCHIP.NOTE_FM6 :          656 C |  PLAYONCHIP.NOTE_PWM :          657 C |
 PLAYONCHIP.NOTNSE :            49C C |  PLAYONCHIP.NOTNSEV :           3B6 C |
 PLAYONCHIP.NXT_CHNL :          205 C |  PLAYONCHIP.NXT_TRACK :         201 C |
 PLAYONCHIP.PNCONT :            49F C |  PLAYONCHIP.POFF :              576 C |
 PLAYONCHIP.PSGCHNL3 :          54E C | *PLAYONCHIP.PSGVOLTBL :         6DB C |
 PLAYONCHIP.PSTOP :             55E C |  PLAYONCHIP.PVCONT :            3B9 C |
 PLAYONCHIP.PWM_INS :           36E C |  PLAYONCHIP.PWM_STOP :          68E C |
 PLAYONCHIP.REQ_EFF :           261 C |  PLAYONCHIP.REQ_INS :           29B C |
 PLAYONCHIP.REQ_NOTE :          476 C |  PLAYONCHIP.REQ_VOL :           399 C |
 PLAYONCHIP.SETGOOD :           733 C |  PLAYONCHIP.SETLV :             338 C |
 PLAYONCHIP.SRCH_CHNLTBL :      6EC C |  PLAYONCHIP.SRCH_FM :           6BB C |
*PLAYONCHIP.SRCH_FM3 :          6C3 C | *PLAYONCHIP.SRCH_FM6 :          6CB C |
 PLAYONCHIP.SRCH_PSG :          6B3 C |  PLAYONCHIP.SRCH_PSGN :         6AB C |
 PLAYONCHIP.SRCH_PWM :          6D3 C |  PLAYONCHIP.TLV_LV1 :           417 C |
 PLAYONCHIP.TLV_LV2 :           43E C |  PLAYONCHIP.TLV_LV2_OK :        435 C |
 PLAYONCHIP.TLV_LV3 :           45D C |  PLAYONCHIP.TLV_LV4 :           470 C |
 PLAYONCHIP.VOL_FM :            3CF C |  PLGN_SPRITE :                   20 - |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYPZ_MTRL :                    34 C |  PLYPZ_SRC_XL :                  14 C |
 PLYPZ_SRC_XL_DX :               18 C |  PLYPZ_SRC_XR :                  24 C |
 PLYPZ_SRC_XR_DX :               28 C |  PLYPZ_SRC_YL :                  1C C |
 PLYPZ_SRC_YL_DX :               20 C |  PLYPZ_SRC_YR :                  2C C |
 PLYPZ_SRC_YR_DX :               30 C |  PLYPZ_TYPE :                    38 C |
 PLYPZ_XL :                       4 C |  PLYPZ_XL_DX :                    8 C |
 PLYPZ_XR :                       C C |  PLYPZ_XR_DX :                   10 C |
 PLYPZ_YPOS :                     0 C |  POLYGN_MTRL :                    4 C |
 POLYGN_POINTS :                  8 C |  POLYGN_SRCPNTS :                28 C |
 POLYGN_TYPE :                    0 C | *PSGALV :                      1324 C |
*PSGATK :                      1308 C |  PSGCOM :                      1300 C |
*PSGDEC :                      130C C | *PSGDTH :                      1320 C |
*PSGDTL :                      131C C | *PSGENV :                      1318 C |
 PSGFREQ_LIST :                10FB C |  PSGHATMODE :                    2F C |
*PSGINS_00 :                   1330 C | *PSGINS_01 :                   1335 C |
*PSGINS_02 :                   133A C | *PSGINS_03 :                   133F C |
*PSGINS_BASS :                 1344 C | *PSGINS_SNARE :                1349 C |
*PSGLEV :                      1304 C |  PSGNVTBL :                    1209 C |
*PSGRRT :                      1314 C | *PSGSLV :                      1310 C |
*PSGTIM :                      132C C |  PSGVTBL :                     11ED C |
*PSG_CTRL :                  C00011 - |  PSG_ENV :                      D6B C |
 PSG_ENV.ATKEND :               E13 C |  PSG_ENV.CHK2 :                 E1D C |
 PSG_ENV.CHK4 :                 E51 C |  PSG_ENV.CKOF :                 D90 C |
 PSG_ENV.CKON :                 DA2 C | *PSG_ENV.DECTMR :               E22 C |
 PSG_ENV.DKADD :                E3B C |  PSG_ENV.DKSAV :                E43 C |
 PSG_ENV.DKYEND :               E48 C |  PSG_ENV.ENVPROC :              DE9 C |
 PSG_ENV.FLGOFF :               EA9 C |  PSG_ENV.KILLENV :              E66 C |
 PSG_ENV.NEXTPSG :              E90 C |  PSG_ENV.NSKIP :                DE1 C |
 PSG_ENV.PSTEAL :               DD2 C |  PSG_ENV.SETHAT :               DDC C |
 PSG_ENV.TNMODE :               DC6 C |  PSG_ENV.VEDLP :                E73 C |
 PSG_ENV.VLOOP :                D76 C |  PSG_ENV.WRFREQ :               DB5 C |
 PUT_PIECE :       FFFFFFFFC00005F2 C |
 PUT_PIECE.BAD_PIECE :                                     FFFFFFFFC00006A2 C |
 PUT_PIECE.DONTRESET_PZ :                                  FFFFFFFFC000069A C |
 PUT_PIECE.LEFTH : FFFFFFFFC0000602 C |
 PUT_PIECE.TOP_NEG :                                       FFFFFFFFC0000684 C |
*PWMCTL :                        31 - |  PWMINSWAV_MCLSTRNG :       225D0AC C |
 PWMINSWAV_MCLSTRNG_E :     225DF90 C |  PWMINSWAV_SPHEAVY1 :       225C2D8 C |
 PWMINSWAV_SPHEAVY1_E :     225D0AC C |  PWMINSWAV_TECHNOBASSD :    225FF14 C |
 PWMINSWAV_TECHNOBASSD_E :  2260567 C |  PWMINSWAV_WHODSNARE :      225DF90 C |
 PWMINSWAV_WHODSNARE_E :    225FF14 C |  PWMINS_MCLSTRNG :          6001054 C |
 PWMINS_SPHEAVY1 :          6001044 C |  PWMINS_TECHNOBASSD :       6001074 C |
 PWMINS_WHODSNARE :         6001064 C |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  PWMVTBL :                     127A C |
 PWM_STEREO :               205C2D8 C |  PWM_STEREO_E :             225C2D8 C |
*RAM_BGCAMCURR :   FFFFFFFFFFFF8826 C |  RAM_CAMDATA :     FFFFFFFFFFFF8818 C |
 RAM_CAMFRAME :    FFFFFFFFFFFF881C C |  RAM_CAMTIMER :    FFFFFFFFFFFF8820 C |
 RAM_CAM_XPOS :    FFFFFFFFFFFF8800 C |  RAM_CAM_XROT :    FFFFFFFFFFFF880C C |
 RAM_CAM_YPOS :    FFFFFFFFFFFF8804 C |  RAM_CAM_YROT :    FFFFFFFFFFFF8810 C |
 RAM_CAM_ZPOS :    FFFFFFFFFFFF8808 C |  RAM_CAM_ZROT :    FFFFFFFFFFFF8814 C |
 RAM_EXRAMSUB :    FFFFFFFFFFFF9906 C | *RAM_FIFOMARSWRT : FFFFFFFFFFFF964C C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF9638 C |  RAM_INITFLUG :    FFFFFFFFFFFF9644 C |
 RAM_INPUTDATA :   FFFFFFFFFFFF9000 C | *RAM_MARS_FBDRWNBUFF :      6012EC0 C |
 RAM_MARS_GLOBAL :          6005828 C |  RAM_MARS_MDTASKSFIFO_M :   60161C0 C |
 RAM_MARS_MDTASKSFIFO_S :   60163C0 C |  RAM_MARS_OBJCAMERA :       6005878 C |
 RAM_MARS_OBJECTS :         60058C0 C |  RAM_MARS_OBJLAYOUT :       60058A0 C |
 RAM_MARS_PALETTE :         60165C0 C |  RAM_MARS_PLGNLIST_0 :      60151C0 C |
 RAM_MARS_PLGNLIST_1 :      60155C0 C |  RAM_MARS_PLGNNUM_0 :       60167C0 C |
 RAM_MARS_PLGNNUM_1 :       60167C2 C |  RAM_MARS_PLGN_ZLIST :      60159C0 C |
 RAM_MARS_POLYGONS_0 :      60064C0 C |  RAM_MARS_POLYGONS_1 :      6009CC0 C |
 RAM_MARS_VDPDRWLIST :      600D4C0 C |  RAM_MARS_VDPDRWLIST_E :    60151C0 C |
 RAM_MDGLOBAL :    FFFFFFFFFFFF9F06 C |  RAM_MDLCURRMD :   FFFFFFFFFFFF8824 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFF9656 C |  RAM_MDMARSTCNTM : FFFFFFFFFFFF9648 C |
 RAM_MDMARSTCNTS : FFFFFFFFFFFF964A C |  RAM_MDMARSTSKM :  FFFFFFFFFFFF9218 C |
 RAM_MDMARSTSKS :  FFFFFFFFFFFF9418 C |  RAM_MDMARSTSSGL : FFFFFFFFFFFF9618 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFF9650 C |  RAM_MDSOUND :     FFFFFFFFFFFF965C C |
 RAM_MDSYSTEM :    FFFFFFFFFFFF9000 C |  RAM_MDVIDEO :     FFFFFFFFFFFF976C C |
 RAM_MODEBUFF :    FFFFFFFFFFFF8800 C | *RAM_SAVEDATA :    FFFFFFFFFFFF9018 C |
*RAM_SNDINSCOPY :  FFFFFFFFFFFF965C C |  RAM_SNDSAVEREG :  FFFFFFFFFFFF975C C |
*RAM_SYSFLAGS :    FFFFFFFFFFFF964E C |  RAM_SYSRANDSEED : FFFFFFFFFFFF9640 C |
 RAM_SYSRANDVAL :  FFFFFFFFFFFF963C C |  RAM_VDPREGS :     FFFFFFFFFFFF98EE C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFF976E C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFF976C C |
 RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 REQMARSTRNF :                   34 C |  ROM_END :                   260568 C |
 RRT :                           14 - |  SBEATACC :                      1F C |
 SBEATPTCK :                     1D C |  SCREEN_HEIGHT :                 E0 - |
 SCREEN_WIDTH :                 140 - |  SET_LEFT :        FFFFFFFFC00004C8 C |
 SET_LEFT.LFT_OK : FFFFFFFFC00004EA C |
 SET_LEFT.LFT_SKIP :                                       FFFFFFFFC000054A C |
 SET_RIGHT :       FFFFFFFFC0000550 C |
 SET_RIGHT.RGT_OK :                                        FFFFFFFFC0000572 C |
 SET_RIGHT.RGT_SKIP :                                      FFFFFFFFC00005D2 C |
*SET_TEMPO :                    C55 C |  SH2_ERROR :                600030C C |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              60010A4 C |
 SH2_M_ENTRY.WAIT_MD :      60010D4 C |  SH2_M_ENTRY.WAIT_SLAVE :   60010DE C |
 SH2_M_HOTSTART :           60010EA C |  SH2_M_HOTSTART.COPY :      600110A C |
 SH2_RAM :                  6005828 C |  SH2_SLAVE :                6000124 C |
 SH2_S_ENTRY :              600125C C |  SH2_S_ENTRY.WAIT_MD :      600128E C |
 SH2_S_HOTSTART :           60012A4 C |  SH2_S_HOTSTART.COPY :      60012C4 C |
*SHIFT :                          3 - |  SIN_TABLE :                6001D80 C |
 SIZEOF_CAMERA :                 28 C |  SIZEOF_INPUT :                   6 C |
 SIZEOF_LAYOUT :                 20 C |  SIZEOF_MARSGBL :                28 C |
*SIZEOF_MARSRAM :           60169C0 C | *SIZEOF_MARSRAM.HERE :      60169C0 C |
 SIZEOF_MARSSND :           60169C0 C |  SIZEOF_MARSSYS :           6005878 C |
 SIZEOF_MARSVID :           60167C4 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFF8828 C |
 SIZEOF_MDLOBJ :                 30 C |  SIZEOF_MDRAM :    FFFFFFFFFFFF8828 C |
 SIZEOF_MDSND :    FFFFFFFFFFFF976C C |  SIZEOF_MDSYS :    FFFFFFFFFFFF965C C |
 SIZEOF_MDVID :    FFFFFFFFFFFF9906 C |  SIZEOF_PLYPZ :                  3C C |
 SIZEOF_POLYGN :                 38 C |  SIZEOF_SNDCHN :                 24 C |
 SLAVE_IRQ :                60002AC C |  SLAVE_LOOP :               60012E2 C |
 SLAVE_LOOP.GO_MDL :        6001328 C |  SLAVE_LOOP.INVLID :        600134A C |
 SLAVE_LOOP.LOOP :          600133A C | *SLAVE_LOOP.MSTR_BUSY :     6001368 C |
 SLAVE_LOOP.NEXT_REQ :      60012F0 C |  SLAVE_LOOP.NO_REQ :        6001312 C |
 SLAVE_LOOP.NO_TASK :       6001300 C |  SLAVE_LOOP.PAGE_2 :        600135E C |
*SLAVE_LOOP.SKIP :          6001350 C |  SLAVE_LOOP.SWAP_NOW :      6001362 C |
 SLV :                           10 - |  SLV_SORT_Z :               60013F2 C |
 SLV_SORT_Z.NEXT_FACE :     6001442 C |  SLV_SORT_Z.NO_FACE :       6001452 C |
 SLV_SORT_Z.Z_END :         600145A C |  SLV_SORT_Z.Z_FEWFACES :    600143C C |
 SLV_SORT_Z.Z_HIGH :        6001432 C |  SLV_SORT_Z.Z_INNER :       600141E C |
*SLV_SORT_Z.Z_NORMAL :      6001404 C |  SLV_SORT_Z.Z_OUTER :       600141A C |
 SLV_SORT_Z.Z_RANOUT :      600140C C |  SNDLOCKZ80 :                FF1B90 C |
 SNDLOCKZ80.WAIT :           FF1B98 C |  SNDREQ_ENTER :              FF1BB0 C |
 SNDREQ_ENTER.WAIT :         FF1BD6 C |  SNDREQ_EXIT :               FF1BE6 C |
 SNDREQ_SADDR :              FF1C0E C |  SNDREQ_SBYTE :              FF1C16 C |
 SNDREQ_SCMD :               FF1BFC C | *SNDREQ_SLONG :              FF1C0A C |
 SNDREQ_SWORD :              FF1C12 C | *SNDSENDCMD :                FF1BAE C |
 SNDUNLOCKZ80 :              FF1BA4 C | *SOUNDREQ_SETSAMPLE :        FF1B66 C |
 SOUNDREQ_SETTRACK :         FF1B3A C | *SOUND_DMA_PAUSE :           FF1AD0 C |
 SOUND_DMA_PAUSE.RETRY :     FF1AD6 C |  SOUND_DMA_PAUSE.SAFE :      FF1B02 C |
 SOUND_DMA_PAUSE.WAIT :      FF1ADE C | *SOUND_DMA_RESUME :          FF1B0E C |
 SOUND_INIT :                FF19B2 C |  SOUND_INIT.CLEANUP :        FF19D8 C |
 SOUND_INIT.COPY :           FF19EE C |  SOUND_INIT.WAIT :           FF19C2 C |
*SOUND_REQUEST :             FF1B26 C |  SOUND_UPDATE :              FF1ACE C |
 STANDBY :                        2 - | *STRC_XPOS :                      0 C |
*STRC_YPOS :                      2 C |  STR_STATUS :                FF3DFA C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSMDMARS_INSTASK :         FF02FC C |  SYSMDMARS_INSTASK.RAN_OUT : FF030C C |
 SYSMDMARS_TRANSFER :        FF030E C |  SYSMDMARS_TRANSFER.EXIT :   FF0380 C |
 SYSMDMARS_TRANSFER.LOOP :   FF034E C |
*SYSMDMARS_TRANSFER.MID_WRITE :                                      FF0386 C |
 SYSMDMARS_TRANSFER.SLV_SAFE :                                       FF032A C |
 SYSMDMARS_TRANSFER.WAIT_CMD :                                       FF0346 C |
 SYSMDMARS_TRANSFER.W_Z80 :  FF0324 C |  SYSTEM_INIT :               FF0000 C |
 SYSTEM_INIT.CLRINPUT :      FF003E C |  SYSTEM_INIT.WAIT :          FF000E C |
 SYSTEM_INPUT :              FF0082 C |  SYSTEM_INPUT.EXIT :         FF00B0 C |
 SYSTEM_INPUT.GET_ID :       FF0182 C |  SYSTEM_INPUT.ID_0D :        FF00D6 C |
 SYSTEM_INPUT.LIST :         FF00B6 C |  SYSTEM_INPUT.OLDPAD :       FF0134 C |
 SYSTEM_INPUT.PICK_ID :      FF016C C |  SYSTEM_INPUT.STEP_1 :       FF018E C |
 SYSTEM_INPUT.STEP_2 :       FF019A C |  SYSTEM_INPUT.THIS_ONE :     FF0096 C |
*SYSTEM_INPUT.WAIT :         FF0082 C |  SYSTEM_MDMARS_MSTADDTASK :  FF0234 C |
 SYSTEM_MDMARS_MSTSENDALL :  FF0280 C | *SYSTEM_MDMARS_MSTSENDDROP : FF02B0 C |
 SYSTEM_MDMARS_MSTSENDDROP.GO_M :                                    FF02D0 C |
 SYSTEM_MDMARS_MSTTASK :     FF024C C |  SYSTEM_MDMARS_SLVADDTASK :  FF0240 C |
 SYSTEM_MDMARS_SLVSENDALL :  FF0298 C |  SYSTEM_MDMARS_SLVSENDDROP : FF02D6 C |
 SYSTEM_MDMARS_SLVSENDDROP.GO_S :                                    FF02F6 C |
*SYSTEM_MDMARS_SLVTASK :     FF0266 C | *SYSTEM_RANDOM :             FF019C C |
 SYSTEM_SETINTS :            FF01BA C |  SYSTEM_SETINTS.NOHINT :     FF01DE C |
 SYSTEM_SETINTS.NOVINT :     FF01CC C | *SYSTEM_SRAMINIT :           FF01E0 C |
 SYSTEM_SRAMINIT.INITSAVE :  FF01F4 C |  SYSTEM_VSYNC :              FF0208 C |
 SYSTEM_VSYNC.INSIDE :       FF0226 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
*SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                6000542 C |  S_IRQ_CMD :                6000564 C |
 S_IRQ_CMD.FINISH :         60005A4 C |  S_IRQ_CMD.NEXT_COMM :      6000578 C |
 S_IRQ_CMD.WAIT_MD_B :      600057C C |  S_IRQ_CMD.WAIT_MD_C :      600058C C |
 S_IRQ_CUSTOM :             60015D0 C |  S_IRQ_H :                  60005C0 C |
 S_IRQ_PWM :                6000548 C |  S_IRQ_V :                  60005DC C |
 S_IRQ_VRES :               60005F0 C |  S_IRQ_VRES.MARS_RESET :    600063A C |
 S_IRQ_VRES.MD_RESET :      6000608 C |  S_IRQ_VRES.SH_WAIT :       6000614 C |
 S_IRQ_VRES.VRESLOOP :      6000642 C |  TEST_LAYOUT :              600486C C |
 TEST_LAYOUT.BLOCKS :       6005070 C |  TEXTR_INTRO :              205800C C |
*TEXTR_MARSCITY :           201800C C |  TH :                      20000000 - |
 TICKCNT :                       1C C |  TICKFLAG :                      1A C |
*TIME :                     4:15:49 - |  TIMERCTL :                      30 - |
*TMR :                           2C - |  TRANSFERROM :                  C76 C |
 TRANSFERROM.DOUBLE :           C97 C |  TRANSFERROM.TRANSFER :         CC0 C |
 TRANSFERROM.X68KLAST :         D03 C |  TRANSFERROM.X68KLOOP :         CEF C |
 TRANSFERROM.X68KLPCONT :       CF7 C |  TRANSFERROM.X68KLPWT :         D17 C |
 TRANSFERROM.X68KLSTCONT :      D0D C |  TRANSFERROM.X68KLSTWT :        D2C C |
 TRANSFERROM.X68KLSTWTLP :      D30 C |  TRANSFERROM.X68KNOCARRY :      CBA C |
 TRANSFERROM.X68KPWTLP :        D1B C |  TRKBUFF :                     1900 C |
 TRKDATAC :                    1700 C |  TRK_CURRBLK :                   11 - |
 TRK_HALFWAY :                   10 - |  TRK_READ :                       C - |
 TRK_ROMBLK :                     0 - |  TRK_ROMINS :                     6 - |
 TRK_ROMPATT :                    3 - |  TRK_ROMPATTRD :                  9 - |
 TRK_ROWS :                       E - |  TRK_SETBLK :                    12 - |
 TRK_STATUS :                    13 - |  TRK_TICKSET :                   15 - |
 TRK_TICKTMR :                   14 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPDTRACK :                     735 C |
 UPDTRACK.CHLST_UNLK :          AFD C |  UPDTRACK.CLRF :                9A4 C |
 UPDTRACK.CLRF2 :               8D8 C |  UPDTRACK.CLRFE :               97C C |
 UPDTRACK.DECROW :              87A C |  UPDTRACK.EFF_B :               8C3 C |
 UPDTRACK.EXIT :                871 C |  UPDTRACK.FIRST_FILL :          98B C |
 UPDTRACK.INC_CPATT :           885 C |  UPDTRACK.IS_NOTE :             7D3 C |
 UPDTRACK.NEXT :                752 C |  UPDTRACK.NEXT_NOTE :           7C2 C |
 UPDTRACK.NEXT_TRACK :          8F2 C |  UPDTRACK.NO_EFF :              83A C |
 UPDTRACK.NO_INS :              81B C |  UPDTRACK.NO_NOTE :             80F C |
 UPDTRACK.NO_UPDST :            868 C |  UPDTRACK.NO_VOL :              827 C |
 UPDTRACK.OLD_TYPE :            800 C |  UPDTRACK.READ_TRACK :          780 C |
 UPDTRACK.SET_TRACK :           8F9 C |  UPDTRACK.SFXMD :               794 C |
 UPDTRACK.SILNC_CHIP :          A74 C |  UPDTRACK.SIL_FM :              ABB C |
 UPDTRACK.TRACK_END :           96D C |  UPDTRACK.UNLKNOW :             A9D C |
 VARNULLVRAM :                  7FF - | *VAR_MOVESPD :                 2000 - |
*VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - | *VIDEO_AUTOMAP_VERT :        FF0564 C |
 VIDEO_AUTOMAP_VERT.XLOOP :  FF0574 C |  VIDEO_AUTOMAP_VERT.YLOOP :  FF0586 C |
 VIDEO_CLEAR :               FF0404 C | *VIDEO_COPY :                FF0812 C |
 VIDEO_COPY.DMAW :           FF0826 C |  VIDEO_COPY.DMAWE :          FF0880 C |
 VIDEO_FILL :                FF079E C |  VIDEO_FILL.DMAW :           FF07B2 C |
 VIDEO_FILL.DMAWE :          FF07FA C |  VIDEO_INIT :                FF03BA C |
 VIDEO_INIT.CLRRAM :         FF03C4 C |  VIDEO_INIT.COPY :           FF03FA C |
*VIDEO_INIT.EXIT :           FF03EE C |  VIDEO_INIT.LOOP :           FF03E0 C |
 VIDEO_LOADART :             FF0898 C | *VIDEO_LOADMAP :             FF049C C |
 VIDEO_LOADMAP.CONT :        FF04C2 C |  VIDEO_LOADMAP.NODBLE :      FF04E2 C |
 VIDEO_LOADMAP.NONULL :      FF04C0 C |  VIDEO_LOADMAP.XLOOP :       FF04B2 C |
 VIDEO_LOADMAP.YLOOP :       FF04A8 C | *VIDEO_LOADMAP_VERT :        FF04F4 C |
 VIDEO_LOADMAP_VERT.CONT :   FF0528 C |  VIDEO_LOADMAP_VERT.NODBLE : FF054A C |
 VIDEO_LOADMAP_VERT.NONULL : FF0526 C | *VIDEO_LOADMAP_VERT.OUTDBL : FF0554 C |
 VIDEO_LOADMAP_VERT.XLOOP :  FF0502 C |  VIDEO_LOADMAP_VERT.YLOOP :  FF0514 C |
 VIDEO_LOADPAL :             FF0472 C |  VIDEO_LOADPAL.LOOP :        FF0494 C |
 VIDEO_LOADPAL.OUTV :        FF048A C |  VIDEO_PRINT :               FF05CA C |
 VIDEO_PRINT.DONIBL :        FF06E4 C |  VIDEO_PRINT.EXIT :          FF0654 C |
 VIDEO_PRINT.ISBYTE :        FF061E C |  VIDEO_PRINT.ISLONG :        FF0642 C |
 VIDEO_PRINT.ISWORD :        FF0630 C |  VIDEO_PRINT.LNGLOOP :       FF06D4 C |
 VIDEO_PRINT.LOOP :          FF05DE C |  VIDEO_PRINT.LOWR :          FF06F4 C |
 VIDEO_PRINT.NEWJUMP :       FF05D8 C |  VIDEO_PRINT.NEXT :          FF0600 C |
 VIDEO_PRINT.NEXTV :         FF065E C |  VIDEO_PRINT.NOTHING :       FF0700 C |
 VIDEO_PRINT.PUTTEXT :       FF05F2 C |  VIDEO_PRINT.SPECIAL :       FF0604 C |
 VIDEO_PRINT.VBYTE :         FF0690 C |  VIDEO_PRINT.VLONG :         FF06DC C |
 VIDEO_PRINT.VWORD :         FF06B2 C |  VIDEO_PRINTINIT :           FF05A6 C |
 VIDEO_RAMCODE :             FF089E C |  VIDEO_RAMCODE.FROM_RAM :    FF096E C |
 VIDEO_RAMCODE.LOAD_ART :    FF08AE C |  VIDEO_RAMCODE.WAIT :        FF0920 C |
 VIDEO_RAMCODE_E :           FF097E C |  VIDEO_UPDATE :              FF0452 C |
*VIDEO_UPDATE.EXIT :         FF0470 C |  VIDEO_UPDATE.LOOP :         FF0464 C |
 VID_PICKLAYER :             FF0702 C |  VID_PICKLAYER.GOLYR :       FF0752 C |
 VID_PICKLAYER.NOWD :        FF073C C |  VID_PICKLAYER.PLAWND :      FF072A C |
 VID_PICKLAYER.THISSZ :      FF0772 C |  VID_PICKLAYER.THISSZJ :     FF079A C |
 VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :              FF039C C |  VIRQ_ON :                        8 - |
 VRESINTCLR :                    14 - |  WAVE_END :                       B C |
 WAVE_LOOP :                      E C |  WAVE_PITCH :                    11 C |
 WAVE_START :                     8 C |  WAVFREQ_PWM :                  FF3 C |
 WAV_FLAGS :                     13 C | *WHDFLG :                      1328 C |
 X68KSRCLSB :                    29 C |  X68KSRCMID :                    2A C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                  FF1CCE C |
 Z80_CODE_END :              FF3B0E C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      3E C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - | *ZVDP_CTRL :                   7F04 - |
*ZVDP_DATA :                   7F00 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - |  _CCR :                    FFFFFE92 - |
 _DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
 _DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - |  _FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
 _FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
 _JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - |  _OVERWRITE :              24020000 - |
 _PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
 _SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
 _TOCR :                          7 - |  _VDPREG :                 20004100 - |

   1346 symbols
    221 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 3/22/2021 4:15:49


  defined macros:
  ---------------

FINISH                                | GEMAINSFM                            
GEMAINSFM3                            | GEMAINSNULL                          
GEMAINSPSG                            | GEMAINSPSGN                          
GEMAINSPWM                            | ORG                                  
STRUCT                                |

      9 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 3/22/2021 4:15:49


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               | DOUBLEWORD                           

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 3/22/2021 4:15:49


  codepages:
  ----------

STANDARD (0 changed characters)


0.22 seconds assembly time

  11091 lines source file
  11473 lines incl. macro expansions
      7 passes
      0 errors
      0 warnings
