 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 1/11/2021 21:55:29


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; 32X GAME BASE
       4/       0 :                     ; 
       5/       0 :                     ; Started on 16/01/2020
       6/       0 :                     ; +-----------------------------------------------------------------+
       7/       0 :                     
       8/       0 :                     		include	"system/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; AS Main settings
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     		!org 0				; Start at 0
(1)   11/       0 :                     		cpu 		68000		; BASE CPU is 68k (manually changed later)
(1)   12/       0 :                     		padding		off		; Dont pad dc.b
(1)   13/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   14/       0 :                     		supmode 	on 		; Supervisor mode
(1)   15/       0 :                     		dottedstructs	off		; If needed
(1)   16/       0 :                     		page 		0
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ---------------------------------------------
(1)   20/       0 :                     ; Functions
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   24/       0 :                     mapsize		function l,r,( ((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF ); for cell w/h use doubleword
(1)   25/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   26/       0 :                     
(1)   27/       0 :                     ; ====================================================================
(1)   28/       0 :                     ; ---------------------------------------------
(1)   29/       0 :                     ; Macros
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; -------------------------------------
(1)   33/       0 :                     ; Reserve memory space
(1)   34/       0 :                     ; -------------------------------------
(1)   35/       0 :                     
(1)   36/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   37/       0 :                     GLBL_LASTPC	set *
(1)   38/       0 :                     		dephase
(1)   39/       0 :                     GLBL_LASTORG	set *
(1)   40/       0 :                     		phase thisinput
(1)   41/       0 :                     		endm
(1)   42/       0 :                     		
(1)   43/       0 :                     ; -------------------------------------
(1)   44/       0 :                     ; Finish
(1)   45/       0 :                     ; -------------------------------------
(1)   46/       0 :                     
(1)   47/       0 :                     finish		macro				; Then finish custom struct.
(1)   48/       0 :                     		!org GLBL_LASTORG
(1)   49/       0 :                     		phase GLBL_LASTPC
(1)   50/       0 :                     		endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; ; -------------------------------------
(1)   53/       0 :                     ; ; ZERO Fill padding
(1)   54/       0 :                     ; ; -------------------------------------
(1)   55/       0 :                     ; 
(1)   56/       0 :                     ; rompad		macro address			; Zero fill
(1)   57/       0 :                     ; diff := address - *
(1)   58/       0 :                     ; 		if diff < 0
(1)   59/       0 :                     ; 			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   60/       0 :                     ; 		else
(1)   61/       0 :                     ; 			while diff > 1024
(1)   62/       0 :                     ; 				; AS can only generate 1 kb of code on a single line
(1)   63/       0 :                     ; 				dc.b [1024]0
(1)   64/       0 :                     ; diff := diff - 1024
(1)   65/       0 :                     ; 			endm
(1)   66/       0 :                     ; 			dc.b [diff]0
(1)   67/       0 :                     ; 		endif
(1)   68/       0 :                     ; 	endm
(1)   69/       0 :                     	
(1)   70/       0 :                     ; -------------------------------------
(1)   71/       0 :                     ; ORG
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; (taken from s2disasm)
(1)   74/       0 :                     ; -------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     ; paddingSoFar set 0
(1)   77/       0 :                     ; ; 128 = 80h = z80, 32988 = 80DCh = z80unDoC 
(1)   78/       0 :                     ; notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   79/       0 :                     ; 
(1)   80/       0 :                     ; ; make org safer (impossible to overwrite previously assembled bytes) and count padding
(1)   81/       0 :                     ; ; and also make it work in Z80 code without creating a new segment
(1)   82/       0 :                     ; org macro address
(1)   83/       0 :                     ; 	if notZ80(MOMCPU)
(1)   84/       0 :                     ; 		if address < *
(1)   85/       0 :                     ; 			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   86/       0 :                     ; 		elseif address > *
(1)   87/       0 :                     ; paddingSoFar	set paddingSoFar + address - *
(1)   88/       0 :                     ; 			!org address
(1)   89/       0 :                     ; 		endif
(1)   90/       0 :                     ; 	else
(1)   91/       0 :                     ; 		if address < $
(1)   92/       0 :                     ; 			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   93/       0 :                     ; 		else
(1)   94/       0 :                     ; 			while address > $
(1)   95/       0 :                     ; 				db 0
(1)   96/       0 :                     ; 			endm
(1)   97/       0 :                     ; 		endif
(1)   98/       0 :                     ; 	endif
(1)   99/       0 :                     ;     endm
(1)  100/       0 :                     
       9/       0 :                     		include	"system/const.asm"	; MD and MARS Variables are located here
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared RAM and constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$FFFF8800          MDRAM_START	equ $FFFF8800		; Start of working RAM (below it can be CODE or decompressed data)
(1)    7/       0 : =$800               MAX_MDERAM	equ $800		; MAX RAM for Screen Modes
(1)    8/       0 :                     
(1)    9/       0 :                     ; ====================================================================
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     ; MD Video
(1)   12/       0 :                     ; ----------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; ------------------------------------------------
(1)   15/       0 :                     ; vdp_ctrl READ bits
(1)   16/       0 :                     ; ------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 : =$2                 bitHint		equ 2
(1)   19/       0 : =$3                 bitVint		equ 3
(1)   20/       0 : =$1                 bitDma		equ 1
(1)   21/       0 :                     
(1)   22/       0 :                     ; ------------------------------------------------
(1)   23/       0 :                     ; VDP register variables
(1)   24/       0 :                     ; ------------------------------------------------
(1)   25/       0 :                     
(1)   26/       0 :                     ; Register $80
(1)   27/       0 : =$2                 HVStop		equ $02
(1)   28/       0 : =$10                HintEnbl	equ $10
(1)   29/       0 : =$1                 bitHVStop	equ 1
(1)   30/       0 : =$4                 bitHintEnbl	equ 4
(1)   31/       0 :                     
(1)   32/       0 :                     ; Register $81
(1)   33/       0 : =$40                DispEnbl 	equ $40
(1)   34/       0 : =$20                VintEnbl 	equ $20
(1)   35/       0 : =$10                DmaEnbl		equ $10
(1)   36/       0 : =$6                 bitDispEnbl	equ 6
(1)   37/       0 : =$5                 bitVintEnbl	equ 5
(1)   38/       0 : =$4                 bitDmaEnbl	equ 4
(1)   39/       0 : =$3                 bitV30		equ 3
(1)   40/       0 :                     
(1)   41/       0 :                     ; ====================================================================
(1)   42/       0 :                     ; --------------------------------------------------------
(1)   43/       0 :                     ; Contoller reading (call System_Input first)
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     
(1)   46/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   47/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   48/       0 :                     
(1)   49/       0 :                     ; full WORD
(1)   50/       0 : =$1                 JoyUp		equ $0001
(1)   51/       0 : =$2                 JoyDown		equ $0002
(1)   52/       0 : =$4                 JoyLeft		equ $0004
(1)   53/       0 : =$8                 JoyRight	equ $0008
(1)   54/       0 : =$10                JoyB		equ $0010
(1)   55/       0 : =$20                JoyC		equ $0020
(1)   56/       0 : =$40                JoyA		equ $0040
(1)   57/       0 : =$80                JoyStart	equ $0080
(1)   58/       0 : =$100               JoyZ		equ $0100
(1)   59/       0 : =$200               JoyY		equ $0200
(1)   60/       0 : =$400               JoyX		equ $0400
(1)   61/       0 : =$800               JoyMode		equ $0800
(1)   62/       0 :                     
(1)   63/       0 :                     ; right byte $00xx
(1)   64/       0 : =$0                 bitJoyUp	equ 0
(1)   65/       0 : =$1                 bitJoyDown	equ 1
(1)   66/       0 : =$2                 bitJoyLeft	equ 2
(1)   67/       0 : =$3                 bitJoyRight	equ 3
(1)   68/       0 : =$4                 bitJoyB		equ 4
(1)   69/       0 : =$5                 bitJoyC		equ 5
(1)   70/       0 : =$6                 bitJoyA		equ 6
(1)   71/       0 : =$7                 bitJoyStart	equ 7
(1)   72/       0 :                     
(1)   73/       0 :                     ; left byte $xx00
(1)   74/       0 : =$0                 bitJoyZ		equ 0
(1)   75/       0 : =$1                 bitJoyY		equ 1
(1)   76/       0 : =$2                 bitJoyX		equ 2
(1)   77/       0 : =$3                 bitJoyMode	equ 3
(1)   78/       0 :                     
(1)   79/       0 :                     ; ====================================================================
(1)   80/       0 :                     ; --------------------------------------------------------
(1)   81/       0 :                     ; Others
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     
(1)   84/       0 : =$FFFFFFFFFF..      RAM_VBlankGoTo	equ RAM_MdMarsVInt
(1)   85/       0 : =$FFFFFFFFFF..      RAM_HBlankGoTo	equ RAM_MdMarsHInt
(1)   86/       0 : =$7FF               varNullVram	equ $7FF		; Used in some Video routines
(1)   87/       0 :                     
(1)   88/       0 :                     ; ====================================================================
(1)   89/       0 :                     ; ----------------------------------------------------------------
(1)   90/       0 :                     ; Structures
(1)   91/       0 :                     ; ----------------------------------------------------------------
(1)   92/       0 :                     
(1)   93/       0 :                     ; Controller
(1)   94/       0 : (MACRO)             		struct 0
(1)   94/       0 : =$0                 GLBL_LASTPC     set *
(1)   94/       0 :                                     dephase
(1)   94/       0 : =$0                 GLBL_LASTORG    set *
(1)   94/       0 :                                     phase 0
(1)   95/       0 :                     pad_id		ds.b 1
(1)   96/       1 :                     pad_ver		ds.b 1
(1)   97/       2 :                     on_hold		ds.w 1
(1)   98/       4 :                     on_press	ds.w 1
(1)   99/       6 :                     sizeof_input	ds.l 0
(1)  100/       8 : (MACRO)             		finish
(1)  100/       0 :                                     !org GLBL_LASTORG
(1)  100/       0 :                                     phase GLBL_LASTPC
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; ----------------------------------------------------------------
(1)  104/       0 :                     ; System RAM
(1)  105/       0 :                     ; ----------------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 : (MACRO)             		struct RAM_MdSystem
(1)  107/       0 : =$0                 GLBL_LASTPC     set *
(1)  107/       0 :                                     dephase
(1)  107/       0 : =$0                 GLBL_LASTORG    set *
(1)  107/FFFFFFFFFFFF9000 :                                     phase RAM_MDSYSTEM
(1)  108/FFFFFFFFFFFF9000 :                     RAM_InputData	ds.b sizeof_input*4
(1)  109/FFFFFFFFFFFF9018 :                     RAM_SaveData	ds.b $200			; Save data cache (if using SRAM)
(1)  110/FFFFFFFFFFFF9218 :                     RAM_FrameCount	ds.l 1
(1)  111/FFFFFFFFFFFF921C :                     RAM_SysRandVal	ds.l 1
(1)  112/FFFFFFFFFFFF9220 :                     RAM_SysRandSeed	ds.l 1
(1)  113/FFFFFFFFFFFF9224 :                     RAM_initflug	ds.l 1				; "INIT"
(1)  114/FFFFFFFFFFFF9228 :                     RAM_GameMode	ds.w 1				; Master game mode
(1)  115/FFFFFFFFFFFF922A :                     RAM_SysFlags	ds.w 1				; (it's a byte)
(1)  116/FFFFFFFFFFFF922C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  117/FFFFFFFFFFFF9232 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  118/FFFFFFFFFFFF9238 :                     sizeof_mdsys	ds.l 0
(1)  119/FFFFFFFFFFFF9238 : (MACRO)             		finish
(1)  119/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  119/       0 :                                     phase GLBL_LASTPC
(1)  120/       0 :                     
(1)  121/       0 :                     ; ====================================================================
(1)  122/       0 :                     ; ----------------------------------------------------------------
(1)  123/       0 :                     ; Sound 68k RAM
(1)  124/       0 :                     ; ----------------------------------------------------------------
(1)  125/       0 :                     
(1)  126/       0 :                     	; 68k side
(1)  127/       0 : (MACRO)             		struct RAM_MdSound
(1)  127/       0 : =$0                 GLBL_LASTPC     set *
(1)  127/       0 :                                     dephase
(1)  127/       0 : =$0                 GLBL_LASTORG    set *
(1)  127/FFFFFFFFFFFF9238 :                                     phase RAM_MDSOUND
(1)  128/FFFFFFFFFFFF9238 :                     RAM_SoundNull	ds.l 1				; (Unused)
(1)  129/FFFFFFFFFFFF923C :                     sizeof_mdsnd	ds.l 0
(1)  130/FFFFFFFFFFFF923C : (MACRO)             		finish
(1)  130/FFFFFFFFFFFF9238 :                                     !org GLBL_LASTORG
(1)  130/       0 :                                     phase GLBL_LASTPC
(1)  131/       0 :                     		
(1)  132/       0 :                     	; Z80 side
(1)  133/       0 : (MACRO)             		struct $800
(1)  133/       0 : =$0                 GLBL_LASTPC     set *
(1)  133/       0 :                                     dephase
(1)  133/       0 : =$0                 GLBL_LASTORG    set *
(1)  133/     800 :                                     phase $800
(1)  134/     800 :                     sndWavStart	ds.b 2			; Start address (inside or outside z80)
(1)  135/     802 :                     sndWavStartB	ds.b 1			; Start ROM bank * 8000h 
(1)  136/     803 :                     sndWavEnd	ds.b 2			; End address
(1)  137/     805 :                     sndWavEndB	ds.b 1			; End ROM bank *8000h
(1)  138/     806 :                     sndWavLoop	ds.b 2			; Loop address
(1)  139/     808 :                     sndWavLoopB	ds.b 1			; Loop ROM Bank * 8000h
(1)  140/     809 :                     sndWavPitch	ds.b 2			; pitch speed
(1)  141/     80B :                     sndWavFlags	ds.b 1			; playback flags
(1)  142/     80C :                     sndWavReq	ds.b 1			; request byte
(1)  143/     80D : (MACRO)             		finish
(1)  143/     800 :                                     !org GLBL_LASTORG
(1)  143/       0 :                                     phase GLBL_LASTPC
(1)  144/       0 :                     		
(1)  145/       0 :                     ; ====================================================================
(1)  146/       0 :                     ; ----------------------------------------------------------------
(1)  147/       0 :                     ; Video RAM
(1)  148/       0 :                     ; ----------------------------------------------------------------
(1)  149/       0 :                     
(1)  150/       0 : (MACRO)             		struct RAM_MdVideo
(1)  150/       0 : =$0                 GLBL_LASTPC     set *
(1)  150/       0 :                                     dephase
(1)  150/       0 : =$0                 GLBL_LASTORG    set *
(1)  150/FFFFFFFFFFFF923C :                                     phase RAM_MDVIDEO
(1)  151/FFFFFFFFFFFF923C :                     RAM_VidPrntVram	ds.w 1
(1)  152/FFFFFFFFFFFF923E :                     RAM_VidPrntList	ds.w 3*64		; Print Value list: Address, Type
(1)  153/FFFFFFFFFFFF93BE :                     RAM_VdpRegs	ds.b 24			; Register cache
(1)  154/FFFFFFFFFFFF93D6 :                     sizeof_mdvid	ds.l 0
(1)  155/FFFFFFFFFFFF93D8 : (MACRO)             		finish
(1)  155/FFFFFFFFFFFF923C :                                     !org GLBL_LASTORG
(1)  155/       0 :                                     phase GLBL_LASTPC
(1)  156/       0 :                     
(1)  157/       0 :                     ; ====================================================================
(1)  158/       0 :                     ; ----------------------------------------------------------------
(1)  159/       0 :                     ; MD RAM
(1)  160/       0 :                     ;
(1)  161/       0 :                     ; NOTE: If using MCD Uses $FFFD00-$FFFDFF, and
(1)  162/       0 :                     ; stack point is $FFFD00
(1)  163/       0 :                     ; ----------------------------------------------------------------
(1)  164/       0 :                     
(1)  165/       0 : (MACRO)             		struct MDRAM_START
(1)  165/       0 : =$0                 GLBL_LASTPC     set *
(1)  165/       0 :                                     dephase
(1)  165/       0 : =$0                 GLBL_LASTORG    set *
(1)  165/FFFFFFFFFFFF8800 :                                     phase MDRAM_START
(1)  175/FFFFFFFFFFFF8800 :                     RAM_ModeBuff	ds.b MAX_MDERAM				; Second pass, sizes are set
(1)  176/FFFFFFFFFFFF9000 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  177/FFFFFFFFFFFF9238 :                     RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  178/FFFFFFFFFFFF923C :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  179/FFFFFFFFFFFF93D6 :                     RAM_ExRamSub	ds.w $300				; (MANUAL SIZE) routines for doing ROM-to-VDP DMA tasks
(1)  180/FFFFFFFFFFFF99D6 :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal
(1)  181/FFFFFFFFFFFF9A26 :                     sizeof_mdram	ds.l 0
(1)  183/FFFFFFFFFFFF9A28 :                     	
MD RAM ends at: FF9A26
(1)  185/FFFFFFFFFFFF9A28 :                     		message "MD RAM ends at: \{((sizeof_mdram)&$FFFFFF)}"
(1)  187/FFFFFFFFFFFF9A28 : (MACRO)             		finish
(1)  187/FFFFFFFFFFFF8800 :                                     !org GLBL_LASTORG
(1)  187/       0 :                                     phase GLBL_LASTPC
(1)  188/       0 :                     		
(1)  189/       0 :                     ; ====================================================================
(1)  190/       0 :                     ; ----------------------------------------------------------------
(1)  191/       0 :                     ; MD/MARS shared constants
(1)  192/       0 :                     ; ----------------------------------------------------------------
(1)  193/       0 :                     
(1)  194/       0 :                     ; model objects
(1)  195/       0 : (MACRO)             		struct 0
(1)  195/       0 : =$0                 GLBL_LASTPC     set *
(1)  195/       0 :                                     dephase
(1)  195/       0 : =$0                 GLBL_LASTORG    set *
(1)  195/       0 :                                     phase 0
(1)  196/       0 :                     ; mdl_animdata	ds.l 1
(1)  197/       0 :                     ; mdl_animframe	ds.l 1
(1)  198/       0 :                     ; mdl_animtimer	ds.l 1
(1)  199/       0 :                     ; mdl_animspd	ds.l 1
(1)  200/       0 :                     mdl_data	ds.l 1
(1)  201/       4 :                     mdl_x_pos	ds.l 1
(1)  202/       8 :                     mdl_y_pos	ds.l 1
(1)  203/       C :                     mdl_z_pos	ds.l 1
(1)  204/      10 :                     mdl_x_rot	ds.l 1
(1)  205/      14 :                     mdl_y_rot	ds.l 1
(1)  206/      18 :                     mdl_z_rot	ds.l 1
(1)  207/      1C :                     sizeof_mdlobj	ds.l 0
(1)  208/      1C : (MACRO)             		finish
(1)  208/       0 :                                     !org GLBL_LASTORG
(1)  208/       0 :                                     phase GLBL_LASTPC
(1)  209/       0 :                     		
(1)  210/       0 :                     ; field view camera
(1)  211/       0 : (MACRO)             		struct 0
(1)  211/       0 : =$0                 GLBL_LASTPC     set *
(1)  211/       0 :                                     dephase
(1)  211/       0 : =$0                 GLBL_LASTORG    set *
(1)  211/       0 :                                     phase 0
(1)  212/       0 :                     cam_animdata	ds.l 1
(1)  213/       4 :                     cam_animframe	ds.l 1
(1)  214/       8 :                     cam_animtimer	ds.l 1
(1)  215/       C :                     cam_animspd	ds.l 1
(1)  216/      10 :                     cam_x_pos	ds.l 1
(1)  217/      14 :                     cam_y_pos	ds.l 1
(1)  218/      18 :                     cam_z_pos	ds.l 1
(1)  219/      1C :                     cam_x_rot	ds.l 1
(1)  220/      20 :                     cam_y_rot	ds.l 1
(1)  221/      24 :                     cam_z_rot	ds.l 1
(1)  222/      28 :                     sizeof_camera	ds.l 0
(1)  223/      28 : (MACRO)             		finish
(1)  223/       0 :                                     !org GLBL_LASTORG
(1)  223/       0 :                                     phase GLBL_LASTPC
(1)  224/       0 :                     		
(1)  225/       0 : (MACRO)             		struct 0
(1)  225/       0 : =$0                 GLBL_LASTPC     set *
(1)  225/       0 :                                     dephase
(1)  225/       0 : =$0                 GLBL_LASTORG    set *
(1)  225/       0 :                                     phase 0
(1)  226/       0 :                     mdllay_data	ds.l 1
(1)  227/       4 :                     mdllay_x	ds.l 1
(1)  228/       8 :                     mdllay_y	ds.l 1
(1)  229/       C :                     mdllay_z	ds.l 1
(1)  230/      10 :                     sizeof_layout	ds.l 0
(1)  231/      10 : (MACRO)             		finish
(1)  231/       0 :                                     !org GLBL_LASTORG
(1)  231/       0 :                                     phase GLBL_LASTPC
(1)  232/       0 :                     
      10/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Mega drive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; External RAM
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   20/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   21/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   22/       0 : =$A130EC            md_mars_id	equ	$A130EC		; MARS ID "MARS"
(1)   23/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   24/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   25/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   26/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   27/       0 :                     
(1)   28/       0 :                     ; ----------------------------------------------------------------
(1)   29/       0 :                     ; Genesis / Mega drive Z80 map
(1)   30/       0 :                     ; ----------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   33/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   34/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   35/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   36/       0 : =$6000              zbank		equ	$6000		; ROM BANK 24bits %XXXXXXXX X0000000 00000000
(1)   37/       0 : =$7F00              zvdp_data	equ	$7F00		; video data port
(1)   38/       0 : =$7F04              zvdp_ctrl	equ	$7F04		; video control port
(1)   39/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; If a SEGA CD is attached
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$20000             syscd_prgram	equ	$020000		; SubCPU PRG-RAM, up to $1FFFF, banked
(1)   46/       0 : =$200000            syscd_wordram	equ	$200000		; WORD-RAM seen in MAIN-CPU
(1)   47/       0 : =$A12000            syscd_bus	equ	$A12000		; WORD | Sub-CPU BUS/RESET
(1)   48/       0 : =$A12003            syscd_memory	equ	$A12003		; BYTE | Sub-CPU memory mode
(1)   49/       0 : =$A12004            syscd_cdcmode	equ	$A12004		; WORD | CDC Mode
(1)   50/       0 : =$A12006            syscd_hint	equ	$A12006		; WORD | VDP HBlank jump ($FFxxxx)
(1)   51/       0 : =$A12008            syscd_cdchost	equ	$A12008		; WORD | CDC Host
(1)   52/       0 : =$A12008            syscd_stopwtch	equ	$A12008		; WORD | Stopwatch
(1)   53/       0 : =$A1200E            syscd_comm_m	equ	$A1200E		; BYTE | MainCPU R/W comm byte
(1)   54/       0 : =$A1200F            syscd_comm_s	equ	$A1200F		; BYTE | Sub-CPU Read comm byte
(1)   55/       0 : =$A12010            syscd_args_m	equ	$A12010		; DATA | comm R/W list, max size: $E
(1)   56/       0 : =$A12020            syscd_args_s	equ	$A12020		; DATA | comm Read list, max size: $E
(1)   57/       0 :                     
(1)   58/       0 :                     ; ----------------------------------------------------------------
(1)   59/       0 :                     ; If a 32X is attached
(1)   60/       0 :                     ; ----------------------------------------------------------------
(1)   61/       0 :                     
(1)   62/       0 : =$A130EC            sysmars_ID	equ	$A130EC		; MARS ID "MARS"
(1)   63/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X buffer (check for mars_ID first)
(1)   64/       0 :                     
      11/       0 :                     		include	"system/mars/map.asm"	; MARS map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; Variables
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; adapter
(1)   11/       0 : =$1                 CART		equ	%00000001	; 0: CD		/1: Cartridge
(1)   12/       0 : =$2                 ADEN		equ	%00000010	; 0: No MARS	/1: MARS
(1)   13/       0 : =$80                FM		equ	%10000000	; 0: MD		/1: SH
(1)   14/       0 :                     ; framectl
(1)   15/       0 : =$1                 FS		equ	%00000001	; 0: DRAM 0	/1: DRAM 1
(1)   16/       0 : =$2                 FEN		equ	%00000010	; 0: Free	/1: Busy
(1)   17/       0 :                     ; vdpsts
(1)   18/       0 : =$80                VBLK		equ	%10000000
(1)   19/       0 : =$40                HBLK		equ	%01000000
(1)   20/       0 : =$20                PEN		equ	%00100000
(1)   21/       0 :                     
(1)   22/       0 :                     ; --------------------------------------------------------
(1)   23/       0 :                     ; SH2 SIDE MAP
(1)   24/       0 :                     ; --------------------------------------------------------
(1)   25/       0 :                     
(1)   26/       0 : =$0                 CS0		equ	$00000000	; Boot rom & system registers
(1)   27/       0 : =$2000000           CS1		equ	$02000000	; Cart rom
(1)   28/       0 : =$4000000           CS2		equ	$04000000	; Frame buffer
(1)   29/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   30/       0 : =$20000000          TH		equ	$20000000	; Cache thru address start
(1)   31/       0 :                     
(1)   32/       0 :                     ; --------------------------------------------------------
(1)   33/       0 :                     ; MARS System
(1)   34/       0 :                     ; --------------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : =$20004000          _sysreg		equ	$00004000|TH	; SYSREG. | MD SIDE: sysmars_reg
(1)   37/       0 : =$0                 adapter		equ	$00		; adapter control register
(1)   38/       0 : =$1                 intmask		equ	$01		; interrupt mask
(1)   39/       0 : =$2                 standby		equ	$02
(1)   40/       0 : =$5                 hcount		equ	$05		; H Interrupt Counter register
(1)   41/       0 : =$6                 dreqctl		equ	$06		; DREQ control
(1)   42/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   43/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   44/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   45/       0 : =$12                dreqfifo	equ	$12		; FIFO (old name: fifo)
(1)   46/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   47/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   48/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   49/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   50/       0 : =$1C                pwmintclr	equ	$1c		; PWM interrupt clear
(1)   51/       0 :                     
(1)   52/       0 : =$20                comm0		equ	$20		; Communication port
(1)   53/       0 : =$22                comm2		equ	$22		;
(1)   54/       0 : =$24                comm4		equ	$24		;
(1)   55/       0 : =$26                comm6		equ	$26		;
(1)   56/       0 : =$28                comm8		equ	$28		;
(1)   57/       0 : =$2A                comm10		equ	$2A		;
(1)   58/       0 : =$2C                comm12		equ	$2C		;
(1)   59/       0 : =$2E                comm14		equ	$2E		;
(1)   60/       0 : =$2F                comm15		equ	$2F		;
(1)   61/       0 :                     
(1)   62/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   63/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   64/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   65/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   66/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   67/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   68/       0 :                     
(1)   69/       0 :                     ; --------------------------------------------------------
(1)   70/       0 :                     ; MARS Video
(1)   71/       0 :                     ; --------------------------------------------------------
(1)   72/       0 :                     
(1)   73/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; VDPREG.
(1)   74/       0 : =$0                 tvmode		equ	$00		; TV mode register
(1)   75/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode register
(1)   76/       0 : =$3                 shift		equ	$03		; Shift Control register
(1)   77/       0 : =$5                 filllength	equ	$05		; Auto Fill Length register
(1)   78/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   79/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   80/       0 : =$A                 vdpsts		equ	$0a		; VDP Status register
(1)   81/       0 : =$B                 framectl	equ	$0b		; Frame Buffer Control register
(1)   82/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM
(1)   83/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Frame buffer
(1)   84/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Over Write Image
(1)   85/       0 :                     
(1)   86/       0 :                     ; --------------------------------------------------------
(1)   87/       0 :                     ; Other registers
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     
(1)   90/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)   91/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)   92/       0 : =$0                 _TIER		equ	$00		; Timer interrup enable register
(1)   93/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)   94/       0 : =$2                 _FRC_H		equ	$02		; free running counter High
(1)   95/       0 : =$3                 _FRC_L		equ	$03		; free running counter Low
(1)   96/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)   97/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)   98/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)   99/       0 : =$7                 _TOCR		equ	$07		; timer output compare control register
(1)  100/       0 : =$FFFFFE92          _CCR:		equ	$FFFFFE92
(1)  101/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)  102/       0 : =$4                 HIRQ_ON		equ	$04
(1)  103/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)  104/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)  105/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  106/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or result
(1)  107/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result, HIGH
(1)  108/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result, LOW
(1)  109/       0 :                     
(1)  110/       0 :                     ; --------------------------------------------------------
(1)  111/       0 :                     ; MARS DMA
(1)  112/       0 :                     ; --------------------------------------------------------
(1)  113/       0 :                     
(1)  114/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  115/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  116/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  117/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  118/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  119/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  120/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  121/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  122/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  123/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  124/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  125/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  126/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  127/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  128/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  129/       0 :                     
      12/       0 :                     		
      13/       0 :                     ; ====================================================================
      14/       0 :                     ; ----------------------------------------------------------------
      15/       0 :                     ; Header
      16/       0 :                     ; ----------------------------------------------------------------
      17/       0 :                     
      18/       0 :                     		include	"system/head.asm"	; Header, contains 32X specific setup
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEADER FOR 32X
(1)    4/       0 :                     ; 
(1)    5/       0 :                     ; These labels work even if the 32X isn't present
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point
(1)    9/       4 : 0000 03F0           		dc.l $3F0			; Entry point (always $3F0)
(1)   10/       8 : 0000 0934           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0934           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0934           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0934           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0934           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0934           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0934           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0934           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0934           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0934           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0934           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0934           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0934           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0934           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0934           		dc.l MD_ErrorEx	
(1)   25/      44 : 0000 0934           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0934           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0934           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0934           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0934           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0934           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0934           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0934           		dc.l MD_ErrorEx		
(1)   33/      64 : 0000 0934           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0934           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0934           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF 9232           		dc.l RAM_HBlankGoTo		; RAM jump for HBlank (JMP xxxx xxxx)
(1)   37/      74 : 0000 0934           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF 922C           		dc.l RAM_VBlankGoTo		; RAM jump for VBlank (JMP xxxx xxxx)
(1)   39/      7C : 0000 0934           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0934           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0934           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0934           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0934           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0934           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0934           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0934           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0934           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0934           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0934           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0934           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0934           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0934           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0934           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0934           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0934           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0934           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0934           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0934           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0934           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0934           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0934           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0934           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0934           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0934           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0934           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0934           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0934           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0934           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0934           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0934           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0934           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2021.???"
                    3230 3231 2E3F 3F3F 
(1)   74/     120 : 5072 6F79 6563 746F 		dc.b "Proyecto Chirinx                                "
                    2043 6869 7269 6E78 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5072 6F6A 6563 7420 		dc.b "Project Shinrinx                                "
                    5368 696E 7269 6E78 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0
(1)   80/     1A4 : 0009 1CC0           		dc.l ROM_END
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   83/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   84/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   85/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   86/     1BC :                     		align $1F0
(1)   87/     1F0 : 5520 2020 2020 2020 		dc.b "U               "
                    2020 2020 2020 2020 
(1)   88/     200 :                     
(1)   89/     200 :                     ; ====================================================================
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     ; Second header for 32X
(1)   92/     200 :                     ; 
(1)   93/     200 :                     ; These new jumps are for the 68K if the 32X is currently
(1)   94/     200 :                     ; active.
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   98/     206 : 4EF9 0088 0934      		jmp	($880000|MD_ErrBus).l			; Bus error
(1)   99/     20C : 4EF9 0088 0934      		jmp	($880000|MD_ErrAddr).l			; Address error
(1)  100/     212 : 4EF9 0088 0934      		jmp	($880000|MD_ErrIll).l			; ILLEGAL Instruction
(1)  101/     218 : 4EF9 0088 0934      		jmp	($880000|MD_ErrZDiv).l			; Divide by 0
(1)  102/     21E : 4EF9 0088 0934      		jmp	($880000|MD_ErrChk).l			; CHK Instruction
(1)  103/     224 : 4EF9 0088 0934      		jmp	($880000|MD_ErrTrapV).l			; TRAPV Instruction
(1)  104/     22A : 4EF9 0088 0934      		jmp	($880000|MD_ErrPrivl).l			; Privilege violation
(1)  105/     230 : 4EF9 0088 0934      		jmp	($880000|MD_Trace).l			; Trace
(1)  106/     236 : 4EF9 0088 0934      		jmp	($880000|MD_Line1010).l			; Line 1010 Emulator
(1)  107/     23C : 4EF9 0088 0934      		jmp	($880000|MD_Line1111).l			; Line 1111 Emulator
(1)  108/     242 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l			; Error exception
(1)  109/     248 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  110/     24E : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  111/     254 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  112/     25A : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l	
(1)  113/     260 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  114/     266 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  115/     26C : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  116/     272 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  117/     278 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  118/     27E : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  119/     284 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l
(1)  120/     28A : 4EF9 0088 0934      		jmp	($880000|MD_ErrorEx).l		
(1)  121/     290 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  122/     296 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     29C : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2A2 : 4EF9 FFFF 9232      		jmp	(RAM_HBlankGoTo).l			; RAM jump for HBlank (JMP xxxx xxxx)
(1)  125/     2A8 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2AE : 4EF9 FFFF 922C      		jmp	(RAM_VBlankGoTo).l			; RAM jump for VBlank (JMP xxxx xxxx)
(1)  127/     2B4 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2BA : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2C0 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2C6 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2CC : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2D2 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2D8 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2DE : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     2E4 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     2EA : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     2F0 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     2F6 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     2FC : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     302 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     308 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     30E : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     314 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     31A : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     320 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     326 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     32C : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     332 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     338 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     33E : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     344 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     34A : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     350 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     356 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     35C : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  156/     362 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  157/     368 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  158/     36E : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  159/     374 : 4EF9 0088 0934      		jmp	($880000|MD_ErrorTrap).l
(1)  160/     37A :                     
(1)  161/     37A :                     ; ----------------------------------------------------------------
(1)  162/     37A :                     
(1)  163/     37A :                     		align $3C0
(1)  164/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  165/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  166/     3D4 : 0000 35EC           		dc.l MARS_RAMDATA			; Set to 0 if SH2 code points to ROM
(1)  167/     3D8 : 0000 0000           		dc.l 0					; No info, set to zero.
(1)  168/     3DC : 0000 58BC           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; Set to 4 if SH2 code points to ROM
(1)  169/     3E0 : 0600 1218           		dc.l SH2_M_Entry			; Master SH2 PC
(1)  170/     3E4 : 0600 137C           		dc.l SH2_S_Entry			; Slave SH2 PC
(1)  171/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  172/     3EC : 0600 0124           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  173/     3F0 :                     		binclude "system/mars/data/security.bin"
(1)  174/     800 :                     
(1)  175/     800 :                     ; ====================================================================
(1)  176/     800 :                     ; ----------------------------------------------------------------
(1)  177/     800 :                     ; Entry point
(1)  178/     800 :                     ; 
(1)  179/     800 :                     ; must be at $3F0
(1)  180/     800 :                     ; ----------------------------------------------------------------
(1)  181/     800 :                     
(1)  182/     800 :                     MARS_Entry:
(1)  183/     800 : 6500 00E4           		bcs	.no_mars		; if carry set, 32X is not present
(1)  184/     804 : 23FC 0000 0000 FFFF 		move.l	#0,(RAM_initflug).l
                    9224                
(1)  185/     80E : 0800 000F           		btst	#15,d0
(1)  186/     812 : 676C                		beq.s	.init
(1)  187/     814 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  188/     81A : 0815 0000           		btst.b	#0,adapter(a5)		; Adapter enable
(1)  189/     81E : 6652                		bne	.adapterenable
(1)  190/     820 : 2B7C 0000 0000 0028 		move.l	#0,comm8(a5)
(1)  191/     828 : 41FA 0020           		lea	.ramcode(pc),a0		; copy from ROM to WRAM
(1)  192/     82C : 43F9 00FF 0000      		lea	($FF0000).l,a1
(1)  193/     832 : 22D8                		move.l	(a0)+,(a1)+
(1)  194/     834 : 22D8                		move.l	(a0)+,(a1)+
(1)  195/     836 : 22D8                		move.l	(a0)+,(a1)+
(1)  196/     838 : 22D8                		move.l	(a0)+,(a1)+
(1)  197/     83A : 22D8                		move.l	(a0)+,(a1)+
(1)  198/     83C : 22D8                		move.l	(a0)+,(a1)+
(1)  199/     83E : 22D8                		move.l	(a0)+,(a1)+
(1)  200/     840 : 22D8                		move.l	(a0)+,(a1)+
(1)  201/     842 : 41F9 00FF 0000      		lea	($FF0000).l,a0
(1)  202/     848 : 4ED0                		jmp	(a0)			; jump workram
(1)  203/     84A :                     .ramcode:
(1)  204/     84A : 1ABC 0001           		move.b	#1,adapter(a5)		; MARS mode
(1)  205/     84E : 41FA 000A           		lea	.restarticd(pc),a0
(1)  206/     852 : D1FC 0088 0000      		adda.l	#$880000,a0
(1)  207/     858 : 4ED0                		jmp	(a0)
(1)  208/     85A :                     .restarticd:
(1)  209/     85A : 4BF9 00A1 0000      		lea	($A10000).l,a5
(1)  210/     860 : 287C FFFF FFC0      		move.l	#-64,a4
(1)  211/     866 : 3E3C 0F3C           		move.w	#3900,d7
(1)  212/     86A : 43F9 0088 06E4      		lea	($880000+$6E4),a1
(1)  213/     870 : 4ED1                		jmp	(a1)
(1)  214/     872 :                     .adapterenable:
(1)  215/     872 : 4BF9 00A1 5100      		lea	(sysmars_reg),a5
(1)  216/     878 : 0815 0001           		btst.b	#1,adapter(a5)		; SH2 Reset
(1)  217/     87C : 6640                		bne.s	.hotstart
(1)  218/     87E : 60DA                		bra.s	.restarticd
(1)  219/     880 :                     
(1)  220/     880 :                     ; ------------------------------------------------
(1)  221/     880 :                     ; Init
(1)  222/     880 :                     ; ------------------------------------------------
(1)  223/     880 :                     
(1)  224/     880 :                     .init:
(1)  225/     880 : 46FC 2700           		move.w	#$2700,sr
(1)  226/     884 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  227/     88A : 2B7C 3638 5550 002C 		move.l	#"68UP",comm12(a5)			; Report to both SH2 we are done here
(1)  228/     892 : 0CAD 4D5F 4F4B 0020 .wm:		cmp.l	#"M_OK",comm0(a5)			; SH2 Master OK ?
(1)  229/     89A : 66F6                		bne.s	.wm
(1)  230/     89C : 0CAD 535F 4F4B 0024 .ws:		cmp.l	#"S_OK",comm4(a5)			; SH2 Slave OK ?
(1)  231/     8A4 : 66F6                		bne.s	.ws
(1)  232/     8A6 : 7000                		moveq	#0,d0					; Reset comm values
(1)  233/     8A8 : 2B40 0020           		move.l	d0,comm0(a5)
(1)  234/     8AC : 2B40 0024           		move.l	d0,comm4(a5)
(1)  235/     8B0 : 2B40 002C           		move.l	d0,comm12(a5)
(1)  236/     8B4 : 23FC 494E 4954 FFFF 		move.l	#"INIT",(RAM_initflug).l		; Set "INIT" as our boot flag
                    9224                
(1)  237/     8BE :                     .hotstart:
(1)  238/     8BE : 0CB9 494E 4954 FFFF 		cmp.l	#"INIT",(RAM_initflug).l		; Did it write?
                    9224                
(1)  239/     8C8 : 66B6                		bne.s	.init					; Restart everything and try again.
(1)  240/     8CA : 6132                		bsr	MD_Init					; Minimal initialization
(1)  241/     8CC : 41FA 0068           		lea	Engine_Code(pc),a0			; Copy ALL our 68k code to RAM,
(1)  242/     8D0 : 43F9 00FF 0000      		lea	($FF0000),a1				; we can use $880000 but there will be BUS fighting
(1)  243/     8D6 : 303C 3151           		move.w	#Engine_Code_end-Engine_Code/2,d0	; on every instruction (according to 32X.FAQ)
(1)  244/     8DA :                     .copyme:
(1)  245/     8DA : 32D8                		move.w	(a0)+,(a1)+
(1)  246/     8DC : 51C8 FFFC           		dbf	d0,.copyme
(1)  247/     8E0 : 4EF9 00FF 1B56      		jmp	(MD_Main).l				; $FF0000 + MD_Main
(1)  248/     8E6 :                     
(1)  249/     8E6 :                     ; ====================================================================
(1)  250/     8E6 :                     ; ----------------------------------------------------------------
(1)  251/     8E6 :                     ; If 32X is not detected
(1)  252/     8E6 :                     ; ----------------------------------------------------------------
(1)  253/     8E6 :                     
(1)  254/     8E6 :                     .no_mars:
(1)  255/     8E6 : 46FC 2700           		move.w	#$2700,sr				; Disable interrupts
(1)  256/     8EA : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l			; Blue screen
                    0004                
(1)  257/     8F4 : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l
(1)  258/     8FC : 60FE                		bra.s	*
(1)  259/     8FE :                     		
(1)  260/     8FE :                     ; ====================================================================
(1)  261/     8FE :                     ; ----------------------------------------------------------------
(1)  262/     8FE :                     ; Init MD
(1)  263/     8FE :                     ; ----------------------------------------------------------------
(1)  264/     8FE :                     
(1)  265/     8FE :                     MD_Init:
(1)  266/     8FE : 7000                		moveq	#0,d0
(1)  267/     900 : 2C40                		movea.l	d0,a6
(1)  268/     902 : 4E66                		move.l	a6,usp
(1)  269/     904 : 3039 00C0 0004      .waitframe:	move.w	(vdp_ctrl).l,d0		; Wait 1 frame
(1)  270/     90A : 0800 0003           		btst	#bitVint,d0
(1)  271/     90E : 67F4                		beq.s	.waitframe
(1)  272/     910 : 23FC 8004 8144 00C0 		move.l	#$80048144,(vdp_ctrl).l	; Keep display
                    0004                
(1)  273/     91A : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean all RAM before $FFF000
(1)  274/     920 : 303C 3BFF           		move.w	#($F000/4)-1,d0
(1)  275/     924 :                     .clrram:
(1)  276/     924 : 4298                		clr.l	(a0)+
(1)  277/     926 : 51C8 FFFC           		dbf	d0,.clrram
(1)  278/     92A : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clear registers (using 10 LONG zeros from already clean RAM)
(1)  279/     932 : 4E75                		rts
(1)  280/     934 :                     
(1)  281/     934 :                     ; ====================================================================
(1)  282/     934 :                     ; ----------------------------------------------------------------
(1)  283/     934 :                     ; Error traps
(1)  284/     934 :                     ; ----------------------------------------------------------------
(1)  285/     934 :                     
(1)  286/     934 :                     MD_ErrBus:		; Bus error
(1)  287/     934 :                     MD_ErrAddr:		; Address error
(1)  288/     934 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  289/     934 :                     MD_ErrZDiv:		; Divide by 0
(1)  290/     934 :                     MD_ErrChk:		; CHK Instruction
(1)  291/     934 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  292/     934 :                     MD_ErrPrivl:		; Privilege violation
(1)  293/     934 :                     MD_Trace:		; Trace
(1)  294/     934 :                     MD_Line1010:		; Line 1010 Emulator
(1)  295/     934 :                     MD_Line1111:		; Line 1111 Emulator
(1)  296/     934 :                     MD_ErrorEx:		; Error exception
(1)  297/     934 :                     MD_ErrorTrap:
(1)  298/     934 : 4E73                		rte
(1)  299/     936 :                     
      19/     936 :                     
      20/     936 :                     ; ====================================================================
      21/     936 :                     ; ----------------------------------------------------------------
      22/     936 :                     ; 68K CODE Section
      23/     936 :                     ; 
      24/     936 :                     ; Stored on RAM to prevent BUS fighting (Kolibri-style)
      25/     936 :                     ; 
      26/     936 :                     ; or if needed: remove the RAM-copying part from head.asm and
      27/     936 :                     ; change the phase from $FF0000 to $880000 (Size: 512kb)
      28/     936 :                     ; ----------------------------------------------------------------
      29/     936 :                     
      30/     936 :                     Engine_Code:
      31/  FF0000 :                     		phase $FF0000
      32/  FF0000 :                     		include "code/md.asm"
(1)    1/  FF0000 :                     ; ====================================================================
(1)    2/  FF0000 :                     ; ----------------------------------------------------------------
(1)    3/  FF0000 :                     ; MD code (at $FF0000)
(1)    4/  FF0000 :                     ; ----------------------------------------------------------------
(1)    5/  FF0000 :                     
(1)    6/  FF0000 :                     ; ====================================================================
(1)    7/  FF0000 :                     ; ------------------------------------------------------
(1)    8/  FF0000 :                     ; Global RAM
(1)    9/  FF0000 :                     ; ------------------------------------------------------
(1)   10/  FF0000 :                     
(1)   11/  FF0000 : (MACRO)             		struct RAM_MdGlobal
(1)   11/  FF0000 : =$FF0000            GLBL_LASTPC     set *
(1)   11/     936 :                                     dephase
(1)   11/     936 : =$936               GLBL_LASTORG    set *
(1)   11/FFFFFFFFFFFF99D6 :                                     phase RAM_MDGLOBAL
(1)   12/FFFFFFFFFFFF99D6 :                     RAM_MdCamera	ds.b sizeof_camera
(1)   13/FFFFFFFFFFFF99FE :                     RAM_MdModels	ds.b sizeof_mdlobj		; info on /system/mars/video.asm
(1)   14/FFFFFFFFFFFF9A1A :                     RAM_BgCamera	ds.l 1
(1)   15/FFFFFFFFFFFF9A1E :                     RAM_BgCamCurr	ds.l 1
(1)   16/FFFFFFFFFFFF9A22 :                     RAM_MdMdlsUpd	ds.w 1
(1)   17/FFFFFFFFFFFF9A24 :                     RAM_MdGlbExmpl	ds.w 1
(1)   18/FFFFFFFFFFFF9A26 :                     sizeof_mdglbl	ds.l 0
(1)   19/FFFFFFFFFFFF9A28 : (MACRO)             		finish
(1)   19/FFFFFFFFFFFF99D6 :                                     !org GLBL_LASTORG
(1)   19/  FF0000 :                                     phase GLBL_LASTPC
(1)   20/  FF0000 :                     
(1)   21/  FF0000 :                     ; ====================================================================
(1)   22/  FF0000 :                     ; ------------------------------------------------------
(1)   23/  FF0000 :                     ; Variables
(1)   24/  FF0000 :                     ; ------------------------------------------------------
(1)   25/  FF0000 :                     
(1)   26/  FF0000 : =$400               var_MoveSpd	equ	$400
(1)   27/  FF0000 :                     
(1)   28/  FF0000 :                     ; ====================================================================
(1)   29/  FF0000 :                     ; ------------------------------------------------------
(1)   30/  FF0000 :                     ; Structs
(1)   31/  FF0000 :                     ; ------------------------------------------------------
(1)   32/  FF0000 :                     
(1)   33/  FF0000 :                     ; 		struct 0
(1)   34/  FF0000 :                     ; strc_xpos	ds.w 1
(1)   35/  FF0000 :                     ; strc_ypos	ds.w 1
(1)   36/  FF0000 :                     ; 		finish
(1)   37/  FF0000 :                     
(1)   38/  FF0000 :                     ; ====================================================================
(1)   39/  FF0000 :                     ; ------------------------------------------------------
(1)   40/  FF0000 :                     ; RAM for current screen mode
(1)   41/  FF0000 :                     ; ------------------------------------------------------
(1)   42/  FF0000 :                     
(1)   43/  FF0000 :                     ; 		struct RAM_ModeBuff
(1)   44/  FF0000 :                     ; ScrnTest_Info	ds.w 1
(1)   45/  FF0000 :                     ; 		finish
(1)   46/  FF0000 :                     
(1)   47/  FF0000 :                     ; ====================================================================
(1)   48/  FF0000 :                     ; --------------------------------------------------------
(1)   49/  FF0000 :                     ; Include system features
(1)   50/  FF0000 :                     ; --------------------------------------------------------
(1)   51/  FF0000 :                     
(1)   52/  FF0000 :                     		include	"system/md/system.asm"
(2)    1/  FF0000 :                     ; ====================================================================
(2)    2/  FF0000 :                     ; ----------------------------------------------------------------
(2)    3/  FF0000 :                     ; System
(2)    4/  FF0000 :                     ; ----------------------------------------------------------------
(2)    5/  FF0000 :                     
(2)    6/  FF0000 :                     ; ASSEMBLER FLAGS USED:
(2)    7/  FF0000 :                     ; MCD  - Mega CD
(2)    8/  FF0000 :                     ; MARS - 32X
(2)    9/  FF0000 :                     
(2)   10/  FF0000 :                     ; --------------------------------------------------------
(2)   11/  FF0000 :                     ; Init System
(2)   12/  FF0000 :                     ; 
(2)   13/  FF0000 :                     ; Uses:
(2)   14/  FF0000 :                     ; a0-a2,d0-d1
(2)   15/  FF0000 :                     ; --------------------------------------------------------
(2)   16/  FF0000 :                     
(2)   17/  FF0000 :                     System_Init:
(2)   18/  FF0000 : 46FC 2700           		move.w	#$2700,sr
(2)   19/  FF0004 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(2)   20/  FF000C :                     .wait:
(2)   21/  FF000C : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(2)   22/  FF0014 : 66F6                		bne.s	.wait
(2)   23/  FF0016 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(2)   24/  FF0018 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	
(2)   25/  FF001E : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l
(2)   26/  FF0024 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l
(2)   27/  FF002A : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(2)   28/  FF0032 : 41F8 9000           		lea	(RAM_InputData),a0
(2)   29/  FF0036 : 323C 0006           		move.w	#sizeof_input-1/2,d1
(2)   30/  FF003A : 7000                		moveq	#0,d0
(2)   31/  FF003C :                     .clrinput:
(2)   32/  FF003C : 30FC 0000           		move.w	#0,(a0)+
(2)   33/  FF0040 : 51C9 FFFA           		dbf	d1,.clrinput
(2)   34/  FF0044 :                     		
(2)   35/  FF0044 :                     ; 		lea	(RAM_MdSystem),a0
(2)   36/  FF0044 :                     ; 		move.w	#(sizeof_mdsys/4)-1,d1
(2)   37/  FF0044 :                     ; 		moveq	#0,d0
(2)   38/  FF0044 :                     ; .clrinput:
(2)   39/  FF0044 :                     ; 		move.w	d0,(a0)+
(2)   40/  FF0044 :                     ; 		dbf	d1,.clrinput
(2)   41/  FF0044 : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode
(2)   42/  FF0048 : 33C0 FFFF 922C       		move.w	d0,(RAM_VBlankGoTo).l
(2)   43/  FF004E : 33C0 FFFF 9232      		move.w	d0,(RAM_HBlankGoTo).l
(2)   44/  FF0054 : 46FC 2000           		move.w	#$2000,sr
(2)   45/  FF0058 :                     		
(2)   46/  FF0058 : 203C 5625 5769      		move.l	#$56255769,d0
(2)   47/  FF005E : 223C 9511 6102      		move.l	#$95116102,d1
(2)   48/  FF0064 : 23C0 FFFF 921C      		move.l	d0,(RAM_SysRandVal).l
(2)   49/  FF006A : 23C1 FFFF 9220      		move.l	d1,(RAM_SysRandSeed).l
(2)   50/  FF0070 : 203C 00FF 024E      		move.l	#VInt_Default,d0	; Set default ints
(2)   51/  FF0076 : 223C 00FF 0266      		move.l	#Hint_Default,d1
(2)   52/  FF007C : 6122                		bsr	System_SetInts
(2)   53/  FF007E : 6000 0190           		bra	System_SaveInit
(2)   54/  FF0082 :                     		
(2)   55/  FF0082 :                     ; ====================================================================
(2)   56/  FF0082 :                     ; ----------------------------------------------------------------
(2)   57/  FF0082 :                     ; System subroutines
(2)   58/  FF0082 :                     ; ----------------------------------------------------------------
(2)   59/  FF0082 :                     
(2)   60/  FF0082 :                     ; --------------------------------------------------------
(2)   61/  FF0082 :                     ; System_Random
(2)   62/  FF0082 :                     ; 
(2)   63/  FF0082 :                     ; Set random value
(2)   64/  FF0082 :                     ; 
(2)   65/  FF0082 :                     ; Output:
(2)   66/  FF0082 :                     ; d0 | LONG
(2)   67/  FF0082 :                     ; --------------------------------------------------------
(2)   68/  FF0082 :                     
(2)   69/  FF0082 :                     System_Random:
(2)   70/  FF0082 : 2A38 9220           		move.l	(RAM_SysRandSeed),d5
(2)   71/  FF0086 : 2838 921C           		move.l	(RAM_SysRandVal),d4
(2)   72/  FF008A : E39D                		rol.l	#1,d5
(2)   73/  FF008C : E284                		asr.l	#1,d4
(2)   74/  FF008E : D885                		add.l	d5,d4
(2)   75/  FF0090 : 23C5 FFFF 9220      		move.l	d5,(RAM_SysRandSeed).l
(2)   76/  FF0096 : 23C4 FFFF 921C      		move.l	d4,(RAM_SysRandVal).l
(2)   77/  FF009C : 2004                		move.l	d4,d0
(2)   78/  FF009E : 4E75                		rts
(2)   79/  FF00A0 :                     		
(2)   80/  FF00A0 :                     ; --------------------------------------------------------
(2)   81/  FF00A0 :                     ; System_SetInts
(2)   82/  FF00A0 :                     ; 
(2)   83/  FF00A0 :                     ; Set new interrputs
(2)   84/  FF00A0 :                     ; 
(2)   85/  FF00A0 :                     ; d0 | LONG - VBlank
(2)   86/  FF00A0 :                     ; d1 | LONG - HBlank
(2)   87/  FF00A0 :                     ;
(2)   88/  FF00A0 :                     ; Uses:
(2)   89/  FF00A0 :                     ; d4
(2)   90/  FF00A0 :                     ; 
(2)   91/  FF00A0 :                     ; Notes:
(2)   92/  FF00A0 :                     ; setting 0 or negative number will ignore changes
(2)   93/  FF00A0 :                     ; --------------------------------------------------------
(2)   94/  FF00A0 :                     
(2)   95/  FF00A0 :                     System_SetInts:
(2)   96/  FF00A0 : 2800                		move.l	d0,d4
(2)   97/  FF00A2 : 670E                		beq.s	.novint
(2)   98/  FF00A4 : 6B0C                		bmi.s	.novint
(2)   99/  FF00A6 : 88BC 0088 0000      		or.l	#$880000,d4
(2)  100/  FF00AC : 23C4 FFFF 922E       		move.l	d4,(RAM_VBlankGoTo+2).l
(2)  101/  FF00B2 :                     .novint:
(2)  102/  FF00B2 : 2801                		move.l	d1,d4
(2)  103/  FF00B4 : 670E                		beq.s	.nohint
(2)  104/  FF00B6 : 6B0C                		bmi.s	.nohint
(2)  105/  FF00B8 : 88BC 0088 0000      		or.l	#$880000,d4
(2)  106/  FF00BE : 23C4 FFFF 9234      		move.l	d4,(RAM_HBlankGoTo+2).l
(2)  107/  FF00C4 :                     .nohint:
(2)  108/  FF00C4 : 4E75                		rts
(2)  109/  FF00C6 :                     
(2)  110/  FF00C6 :                     ; --------------------------------------------------------
(2)  111/  FF00C6 :                     ; System_VSync
(2)  112/  FF00C6 :                     ; 
(2)  113/  FF00C6 :                     ; Waits for VBlank
(2)  114/  FF00C6 :                     ; 
(2)  115/  FF00C6 :                     ; Uses:
(2)  116/  FF00C6 :                     ; d4
(2)  117/  FF00C6 :                     ; --------------------------------------------------------
(2)  118/  FF00C6 :                     
(2)  119/  FF00C6 :                     System_VSync:
(2)  120/  FF00C6 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(2)  121/  FF00CC : 0804 0003           		btst	#bitVint,d4
(2)  122/  FF00D0 : 67F4                		beq.s	System_VSync
(2)  123/  FF00D2 : 6118                		bsr	System_Input
(2)  124/  FF00D4 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9218                
(2)  125/  FF00DE : 3839 00C0 0004      .inside:	move.w	(vdp_ctrl),d4
(2)  126/  FF00E4 : 0804 0003           		btst	#bitVint,d4
(2)  127/  FF00E8 : 66F4                		bne.s	.inside
(2)  128/  FF00EA : 4E75                		rts
(2)  129/  FF00EC :                     		
(2)  130/  FF00EC :                     ; --------------------------------------------------------
(2)  131/  FF00EC :                     ; System_Input
(2)  132/  FF00EC :                     ; 
(2)  133/  FF00EC :                     ; Uses:
(2)  134/  FF00EC :                     ; d4-d6,a4-a5
(2)  135/  FF00EC :                     ; --------------------------------------------------------
(2)  136/  FF00EC :                     
(2)  137/  FF00EC :                     System_Input:
(2)  138/  FF00EC :                     ; 		move.w	#$0100,(z80_bus).l	; Stop Z80
(2)  139/  FF00EC :                     ; .wait:
(2)  140/  FF00EC :                     ; 		btst	#0,(z80_bus).l		; Wait for it
(2)  141/  FF00EC :                     ; 		bne.s	.wait
(2)  142/  FF00EC :                     		
(2)  143/  FF00EC : 49F9 00A1 0003      		lea	($A10003),a4
(2)  144/  FF00F2 : 4BF8 9000           		lea	(RAM_InputData),a5
(2)  145/  FF00F6 : 6108                		bsr.s	.this_one
(2)  146/  FF00F8 : D8FC 0002           		adda	#2,a4
(2)  147/  FF00FC : DAFC 0006           		adda	#sizeof_input,a5
(2)  148/  FF0100 :                     ; 		bsr.s	.this_one
(2)  149/  FF0100 :                     ; 		move.w	#0,(z80_bus).l
(2)  150/  FF0100 :                     
(2)  151/  FF0100 :                     
(2)  152/  FF0100 :                     	; MARS only
(2)  153/  FF0100 :                     ; 		lea	(sysmars_reg).l,a5
(2)  154/  FF0100 :                     ; 		move.w	(Controller_1+on_hold),d4
(2)  155/  FF0100 :                     ; 		move.w	(Controller_2+on_hold),d5
(2)  156/  FF0100 :                     ; 		move.w	d4,comm12(a5)
(2)  157/  FF0100 :                     ; 		move.w	d5,comm14(a5)
(2)  158/  FF0100 :                     ; 		rts
(2)  159/  FF0100 :                     
(2)  160/  FF0100 :                     ; --------------------------------------------------------	
(2)  161/  FF0100 :                     ; do port
(2)  162/  FF0100 :                     ; --------------------------------------------------------
(2)  163/  FF0100 :                     
(2)  164/  FF0100 :                     .this_one:
(2)  165/  FF0100 : 6100 00D4           		bsr	.find_id
(2)  166/  FF0104 : 1A84                		move.b	d4,pad_id(a5)
(2)  167/  FF0106 : B87C 000F           		cmp.w	#$F,d4
(2)  168/  FF010A : 670E                		beq.s	.exit
(2)  169/  FF010C : C87C 000F           		and.w	#$F,d4
(2)  170/  FF0110 : D844                		add.w	d4,d4
(2)  171/  FF0112 : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(2)  172/  FF0116 : 4EFB 5008           		jmp	.list(pc,d5.w)
(2)  173/  FF011A :                     .exit:
(2)  174/  FF011A : 422D 0001           		clr.b	pad_ver(a5)
(2)  175/  FF011E : 4E75                		rts
(2)  176/  FF0120 :                     
(2)  177/  FF0120 :                     ; --------------------------------------------------------
(2)  178/  FF0120 :                     ; Grab ID
(2)  179/  FF0120 :                     ; --------------------------------------------------------
(2)  180/  FF0120 :                     
(2)  181/  FF0120 : FFFA                .list:		dc.w .exit-.list	; $0
(2)  182/  FF0122 : FFFA                		dc.w .exit-.list
(2)  183/  FF0124 : FFFA                		dc.w .exit-.list
(2)  184/  FF0126 : FFFA                		dc.w .exit-.list
(2)  185/  FF0128 : FFFA                		dc.w .exit-.list	; $4
(2)  186/  FF012A : FFFA                		dc.w .exit-.list
(2)  187/  FF012C : FFFA                		dc.w .exit-.list
(2)  188/  FF012E : FFFA                		dc.w .exit-.list
(2)  189/  FF0130 : FFFA                		dc.w .exit-.list	; $8
(2)  190/  FF0132 : FFFA                		dc.w .exit-.list
(2)  191/  FF0134 : FFFA                		dc.w .exit-.list
(2)  192/  FF0136 : FFFA                		dc.w .exit-.list
(2)  193/  FF0138 : FFFA                		dc.w .exit-.list	; $C
(2)  194/  FF013A : 0020                		dc.w .id_0D-.list
(2)  195/  FF013C : FFFA                		dc.w .exit-.list
(2)  196/  FF013E : FFFA                		dc.w .exit-.list
(2)  197/  FF0140 :                     
(2)  198/  FF0140 :                     ; --------------------------------------------------------
(2)  199/  FF0140 :                     ; ID $0D
(2)  200/  FF0140 :                     ; 
(2)  201/  FF0140 :                     ; Normal controller, Old or New
(2)  202/  FF0140 :                     ; --------------------------------------------------------
(2)  203/  FF0140 :                     
(2)  204/  FF0140 :                     .id_0D:
(2)  205/  FF0140 : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(2)  206/  FF0144 : 4E71                		nop
(2)  207/  FF0146 : 4E71                		nop
(2)  208/  FF0148 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(2)  209/  FF014C : 4E71                		nop
(2)  210/  FF014E : 4E71                		nop
(2)  211/  FF0150 : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(2)  212/  FF0154 : 4E71                		nop
(2)  213/  FF0156 : 4E71                		nop
(2)  214/  FF0158 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(2)  215/  FF015C : 4E71                		nop
(2)  216/  FF015E : 4E71                		nop
(2)  217/  FF0160 : 18BC 0040           		move.b	#$40,(a4)	; 6 button responds
(2)  218/  FF0164 : 4E71                		nop
(2)  219/  FF0166 : 4E71                		nop
(2)  220/  FF0168 : 1814                		move.b	(a4),d4		; Grab ??|MXYZ
(2)  221/  FF016A : 18BC 0000            		move.b	#$00,(a4)
(2)  222/  FF016E : 4E71                  		nop
(2)  223/  FF0170 : 4E71                  		nop
(2)  224/  FF0172 : 1C14                 		move.b	(a4),d6		; Type: $03 old, $0F new
(2)  225/  FF0174 : 18BC 0040            		move.b	#$40,(a4)
(2)  226/  FF0178 : 4E71                 		nop
(2)  227/  FF017A : 4E71                 		nop
(2)  228/  FF017C : CC7C 000F           		and.w	#$F,d6
(2)  229/  FF0180 : E44E                		lsr.w	#2,d6
(2)  230/  FF0182 : CC7C 0001           		and.w	#1,d6
(2)  231/  FF0186 : 6716                		beq.s	.oldpad
(2)  232/  FF0188 : 4604                		not.b	d4
(2)  233/  FF018A : C87C 000F            		and.w	#%1111,d4
(2)  234/  FF018E : 1A2D 0002           		move.b	on_hold(a5),d5
(2)  235/  FF0192 : B905                		eor.b	d4,d5
(2)  236/  FF0194 : 1B44 0002           		move.b	d4,on_hold(a5)
(2)  237/  FF0198 : CA04                		and.b	d4,d5
(2)  238/  FF019A : 1B45 0004           		move.b	d5,on_press(a5)
(2)  239/  FF019E :                     .oldpad:
(2)  240/  FF019E : 1B46 0001           		move.b	d6,pad_ver(a5)
(2)  241/  FF01A2 :                     		
(2)  242/  FF01A2 : 18BC 0000           		move.b	#$00,(a4)	; Show SA??|RLDU
(2)  243/  FF01A6 : 4E71                		nop
(2)  244/  FF01A8 : 4E71                		nop
(2)  245/  FF01AA : 1814                		move.b	(a4),d4
(2)  246/  FF01AC : E50C                		lsl.b	#2,d4
(2)  247/  FF01AE : C83C 00C0           		and.b	#%11000000,d4
(2)  248/  FF01B2 : 18BC 0040           		move.b	#$40,(a4)	; Show ??CB|RLDU
(2)  249/  FF01B6 : 4E71                		nop
(2)  250/  FF01B8 : 4E71                		nop
(2)  251/  FF01BA : 1A14                		move.b	(a4),d5
(2)  252/  FF01BC : CA3C 003F           		and.b	#%00111111,d5
(2)  253/  FF01C0 : 8805                		or.b	d5,d4
(2)  254/  FF01C2 : 4604                		not.b	d4
(2)  255/  FF01C4 : 1A2D 0003           		move.b	on_hold+1(a5),d5
(2)  256/  FF01C8 : B905                		eor.b	d4,d5
(2)  257/  FF01CA : 1B44 0003           		move.b	d4,on_hold+1(a5)
(2)  258/  FF01CE : CA04                		and.b	d4,d5
(2)  259/  FF01D0 : 1B45 0005           		move.b	d5,on_press+1(a5)
(2)  260/  FF01D4 : 4E75                		rts
(2)  261/  FF01D6 :                     		
(2)  262/  FF01D6 :                     ; --------------------------------------------------------
(2)  263/  FF01D6 :                     ; Grab ID
(2)  264/  FF01D6 :                     ; --------------------------------------------------------
(2)  265/  FF01D6 :                     
(2)  266/  FF01D6 :                     .find_id:
(2)  267/  FF01D6 : 7800                		moveq	#0,d4
(2)  268/  FF01D8 : 18BC 0070           		move.b	#%01110000,(a4)		; TH=1,TR=1,TL=1
(2)  269/  FF01DC : 4E71                		nop
(2)  270/  FF01DE : 4E71                		nop
(2)  271/  FF01E0 : 610A                		bsr.s	.get_id
(2)  272/  FF01E2 : 18BC 0030           		move.b	#%00110000,(a4)		; TH=0,TR=1,TL=1
(2)  273/  FF01E6 : 4E71                		nop
(2)  274/  FF01E8 : 4E71                		nop
(2)  275/  FF01EA : D844                		add.w	d4,d4
(2)  276/  FF01EC :                     .get_id:
(2)  277/  FF01EC : 1A14                		move.b	(a4),d5
(2)  278/  FF01EE : 1C05                		move.b	d5,d6
(2)  279/  FF01F0 : CC3C 000C           		and.b	#$C,d6
(2)  280/  FF01F4 : 6702                		beq.s	.step_1
(2)  281/  FF01F6 : 5244                		addq.w	#1,d4
(2)  282/  FF01F8 :                     .step_1:
(2)  283/  FF01F8 : D844                		add.w	d4,d4
(2)  284/  FF01FA : 1C05                		move.b	d5,d6
(2)  285/  FF01FC : CC7C 0003           		and.w	#3,d6
(2)  286/  FF0200 : 6702                		beq.s	.step_2
(2)  287/  FF0202 : 5244                		addq.w	#1,d4
(2)  288/  FF0204 :                     .step_2:
(2)  289/  FF0204 : 4E75                		rts
(2)  290/  FF0206 :                     		
(2)  291/  FF0206 :                     ; 		moveq	#0,d0
(2)  292/  FF0206 :                     ; 		bsr.s	System_ReadPad
(2)  293/  FF0206 :                     ; 		lea	(RAM_Control+(16*4)),a5
(2)  294/  FF0206 :                     ; 		moveq	#1,d0
(2)  295/  FF0206 :                     ; 		bsr.s	System_ReadPad
(2)  296/  FF0206 :                     ; 		
(2)  297/  FF0206 :                     ; 		lea	($A10003).l,a6
(2)  298/  FF0206 :                     ; 		lsl.w	#1,d0
(2)  299/  FF0206 :                     ; 		add.w	d0,a6		; Add result to port
(2)  300/  FF0206 :                     ; 		bsr.s	.srch_pad
(2)  301/  FF0206 :                     ; 		move.b	d0,(a5)
(2)  302/  FF0206 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(2)  303/  FF020E : 4E75                		rts
(2)  304/  FF0210 :                     		
(2)  305/  FF0210 :                     ; --------------------------------------------------------
(2)  306/  FF0210 :                     ; System_SaveInit
(2)  307/  FF0210 :                     ; 
(2)  308/  FF0210 :                     ; Init save data
(2)  309/  FF0210 :                     ; 
(2)  310/  FF0210 :                     ; Uses:
(2)  311/  FF0210 :                     ; a4,d4-d5
(2)  312/  FF0210 :                     ; --------------------------------------------------------
(2)  313/  FF0210 :                     
(2)  314/  FF0210 :                     System_SaveInit:
(2)  316/  FF0210 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(2)  317/  FF0218 : 49F9 0020 0001      		lea	($200001).l,a4
(2)  318/  FF021E : 7800                		moveq	#0,d4
(2)  319/  FF0220 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(2)  320/  FF0224 :                     .initsave:
(2)  321/  FF0224 : 1884                		move.b	d4,(a4)
(2)  322/  FF0226 : D8FC 0002           		adda	#2,a4
(2)  323/  FF022A : 51CD FFF8           		dbf	d5,.initsave
(2)  324/  FF022E : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(2)  326/  FF0236 : 4E75                		rts
(2)  327/  FF0238 :                     
(2)  328/  FF0238 :                     ; ====================================================================
(2)  329/  FF0238 :                     ; ----------------------------------------------------------------
(2)  330/  FF0238 :                     ; Game modes
(2)  331/  FF0238 :                     ; ----------------------------------------------------------------
(2)  332/  FF0238 :                     
(2)  333/  FF0238 :                     Mode_Init:
(2)  334/  FF0238 : 6100 00D0           		bsr	Video_Clear
(2)  335/  FF023C : 49F8 8800           		lea	(RAM_ModeBuff),a4
(2)  336/  FF0240 : 3A3C 03FF           		move.w	#(MAX_MDERAM/2)-1,d5
(2)  337/  FF0244 : 7800                		moveq	#0,d4
(2)  338/  FF0246 :                     .clr:
(2)  339/  FF0246 : 38C4                		move.w	d4,(a4)+
(2)  340/  FF0248 : 51CD FFFC           		dbf	d5,.clr
(2)  341/  FF024C : 4E75                		rts
(2)  342/  FF024E :                     		
(2)  343/  FF024E :                     ; ====================================================================
(2)  344/  FF024E :                     ; ----------------------------------------------------------------
(2)  345/  FF024E :                     ; System: default interrupts
(2)  346/  FF024E :                     ; ----------------------------------------------------------------
(2)  347/  FF024E :                     
(2)  348/  FF024E :                     ; --------------------------------------------------------
(2)  349/  FF024E :                     ; VBlank
(2)  350/  FF024E :                     ; --------------------------------------------------------
(2)  351/  FF024E :                     
(2)  352/  FF024E :                     VInt_Default:
(2)  353/  FF024E : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(2)  354/  FF0252 : 6100 FE98           		bsr	System_Input
(2)  355/  FF0256 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9218                
(2)  356/  FF0260 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(2)  357/  FF0264 : 4E73                		rte
(2)  358/  FF0266 :                     
(2)  359/  FF0266 :                     ; --------------------------------------------------------
(2)  360/  FF0266 :                     ; HBlank
(2)  361/  FF0266 :                     ; --------------------------------------------------------
(2)  362/  FF0266 :                     
(2)  363/  FF0266 :                     HInt_Default:
(2)  364/  FF0266 : 4E73                		rte
(2)  365/  FF0268 :                     	
(2)  366/  FF0268 :                     ; ====================================================================
(2)  367/  FF0268 :                     ; ----------------------------------------------------------------
(2)  368/  FF0268 :                     ; MARS ONLY
(2)  369/  FF0268 :                     ; ----------------------------------------------------------------
(2)  370/  FF0268 :                     		
(2)  371/  FF0268 :                     ; --------------------------------------------------------
(2)  372/  FF0268 :                     ; MdMars_SendData
(2)  373/  FF0268 :                     ; 
(2)  374/  FF0268 :                     ; Transfer data from 68k to SH2 using DREQ
(2)  375/  FF0268 :                     ;
(2)  376/  FF0268 :                     ; Input:
(2)  377/  FF0268 :                     ; a0 - Input data
(2)  378/  FF0268 :                     ; d0 | LONG - Output address (SH2 map)
(2)  379/  FF0268 :                     ; d1 | WORD - Size
(2)  380/  FF0268 :                     ;
(2)  381/  FF0268 :                     ; Uses:
(2)  382/  FF0268 :                     ; d4-d5,a4-a6
(2)  383/  FF0268 :                     ; --------------------------------------------------------
(2)  384/  FF0268 :                     
(2)  385/  FF0268 :                     ; NOTE: broken
(2)  386/  FF0268 :                     
(2)  387/  FF0268 :                     MdMars_SendData:
(2)  388/  FF0268 : 4DF9 00A1 5100      		lea	(sysmars_reg),a6
(2)  389/  FF026E : 3D7C 0000 0006      		move.w	#0,dreqctl(a6)
(2)  390/  FF0274 : 3801                		move.w	d1,d4
(2)  391/  FF0276 : E24C                		lsr.w	#1,d4
(2)  392/  FF0278 : 3D44 0010           		move.w	d4,dreqlen(a6)
(2)  393/  FF027C : 3D7C 0004 0006      		move.w	#%100,dreqctl(a6)
(2)  394/  FF0282 : 2800                		move.l	d0,d4
(2)  395/  FF0284 : 3D44 000E           		move.w	d4,dreqdest+2(a6)
(2)  396/  FF0288 : 4844                		swap	d4
(2)  397/  FF028A : 3D44 000C           		move.w	d4,dreqdest(a6)
(2)  398/  FF028E :                     
(2)  399/  FF028E : 382E 0002           		move.w	2(a6),d4		; CMD Interrupt
(2)  400/  FF0292 : 08C4 0000           		bset	#0,d4
(2)  401/  FF0296 : 3D44 0002           		move.w	d4,2(a6)
(2)  402/  FF029A : 2848                		movea.l	a0,a4
(2)  403/  FF029C : 4BEE 0012           		lea	dreqfifo(a6),a5
(2)  404/  FF02A0 : 3A01                		move.w	d1,d5
(2)  405/  FF02A2 : E64D                		lsr.w	#3,d5
(2)  406/  FF02A4 : 9A7C 0001           		sub.w	#1,d5
(2)  407/  FF02A8 :                     .sendfifo:
(2)  408/  FF02A8 : 3A9C                		move.w	(a4)+,(a5)
(2)  409/  FF02AA : 3A9C                		move.w	(a4)+,(a5)
(2)  410/  FF02AC : 3A9C                		move.w	(a4)+,(a5)
(2)  411/  FF02AE : 3A9C                		move.w	(a4)+,(a5)
(2)  412/  FF02B0 :                     .full:
(2)  413/  FF02B0 : 382E 0006           		move.w	dreqctl(a6),d4
(2)  414/  FF02B4 : 0804 0007           		btst	#7,d4
(2)  415/  FF02B8 : 66F6                		bne.s	.full
(2)  416/  FF02BA : 51CD FFEC           		dbra	d5,.sendfifo
(2)  417/  FF02BE : 4E75                		rts
(2)  418/  FF02C0 :                     
(2)  419/  FF02C0 :                     ; --------------------------------------------------------
(2)  420/  FF02C0 :                     		
(2)  421/  FF02C0 :                     ; ====================================================================
(2)  422/  FF02C0 :                     ; ----------------------------------------------------------------
(2)  423/  FF02C0 :                     ; System data
(2)  424/  FF02C0 :                     ; ----------------------------------------------------------------
(2)  425/  FF02C0 :                     
(1)   53/  FF02C0 :                     		include	"system/md/video.asm"
(2)    1/  FF02C0 :                     ; ====================================================================
(2)    2/  FF02C0 :                     ; ----------------------------------------------------------------
(2)    3/  FF02C0 :                     ; MD Video
(2)    4/  FF02C0 :                     ; ----------------------------------------------------------------
(2)    5/  FF02C0 :                     
(2)    6/  FF02C0 :                     ; ASSEMBLER FLAGS USED:
(2)    7/  FF02C0 :                     ; MCD  - Mega CD
(2)    8/  FF02C0 :                     ; MARS - 32X
(2)    9/  FF02C0 :                     
(2)   10/  FF02C0 :                     ; --------------------------------------------------------
(2)   11/  FF02C0 :                     ; Init Video
(2)   12/  FF02C0 :                     ; 
(2)   13/  FF02C0 :                     ; Uses:
(2)   14/  FF02C0 :                     ; a0-a2,d0-d1
(2)   15/  FF02C0 :                     ; --------------------------------------------------------
(2)   16/  FF02C0 :                     
(2)   17/  FF02C0 :                     Video_Init:		
(2)   18/  FF02C0 : 41F8 923C           		lea	(RAM_MdVideo),a0	; Clear RAM
(2)   19/  FF02C4 : 7000                		moveq	#0,d0
(2)   20/  FF02C6 : 323C 0199           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d1
(2)   21/  FF02CA :                     .clrram:
(2)   22/  FF02CA : 10C0                		move.b	d0,(a0)+
(2)   23/  FF02CC : 51C9 FFFC           		dbf	d1,.clrram
(2)   24/  FF02D0 :                     
(2)   25/  FF02D0 : 41FA 05B2           		lea	list_vdpregs(pc),a0	; Init registers
(2)   26/  FF02D4 : 43F8 93BE           		lea	(RAM_VdpRegs).w,a1
(2)   27/  FF02D8 : 45F9 00C0 0004      		lea	(vdp_ctrl),a2
(2)   28/  FF02DE : 303C 8000           		move.w	#$8000,d0
(2)   29/  FF02E2 : 323C 0012           		move.w	#19-1,d1
(2)   30/  FF02E6 :                     .loop:
(2)   31/  FF02E6 : 1018                		move.b	(a0)+,d0
(2)   32/  FF02E8 : 12C0                		move.b	d0,(a1)+
(2)   33/  FF02EA : 3480                		move.w	d0,(a2)
(2)   34/  FF02EC : D07C 0100           		add.w	#$100,d0
(2)   35/  FF02F0 : 51C9 FFF4           		dbf	d1,.loop
(2)   36/  FF02F4 :                     .exit:
(2)   37/  FF02F4 :                     
(2)   38/  FF02F4 :                     	; 32X ONLY:
(2)   39/  FF02F4 :                     	; Transfer DMA tasks to RAM
(2)   40/  FF02F4 : 41FA 04AE           		lea	Video_RamCode(pc),a0
(2)   41/  FF02F8 : 43F8 93D6           		lea	(RAM_ExRamSub).w,a1
(2)   42/  FF02FC : 303C 006F           		move.w	#((Video_RamCode_e-Video_RamCode)/2)-1,d0
(2)   43/  FF0300 :                     .copy:
(2)   44/  FF0300 : 3218                		move.w	(a0)+,d1
(2)   45/  FF0302 : 32C1                		move.w	d1,(a1)+
(2)   46/  FF0304 : 51C8 FFFA           		dbf	d0,.copy
(2)   47/  FF0308 : 4E75                		rts
(2)   48/  FF030A :                     
(2)   49/  FF030A :                     ; ====================================================================
(2)   50/  FF030A :                     ; ----------------------------------------------------------------
(2)   51/  FF030A :                     ; Video subroutines
(2)   52/  FF030A :                     ; ----------------------------------------------------------------
(2)   53/  FF030A :                     
(2)   54/  FF030A :                     ; --------------------------------------------------------
(2)   55/  FF030A :                     ; Video_Clear
(2)   56/  FF030A :                     ; 
(2)   57/  FF030A :                     ; Clear all video data
(2)   58/  FF030A :                     ; --------------------------------------------------------
(2)   59/  FF030A :                     
(2)   60/  FF030A :                     Video_Clear:
(2)   61/  FF030A : 303C 0000           		move.w	#0,d0			; Clear until $57F
(2)   62/  FF030E : 323C AFE0           		move.w	#$57F*$20,d1
(2)   63/  FF0312 : 343C 0000           		move.w	#0,d2
(2)   64/  FF0316 : 6100 038C           		bsr	Video_Fill
(2)   65/  FF031A : 323C 0FFF           		move.w	#$FFF,d1		; FG/BG size
(2)   66/  FF031E : 1439 FFFF 93C0      		move.b	(RAM_VdpRegs+2).l,d2	; FG
(2)   67/  FF0324 : 0242 0038           		andi.w	#%111000,d2
(2)   68/  FF0328 : E14A                		lsl.w	#8,d2
(2)   69/  FF032A : E54A                		lsl.w	#2,d2
(2)   70/  FF032C : 6100 0376           		bsr	Video_Fill
(2)   71/  FF0330 : 1439 FFFF 93C1      		move.b	(RAM_VdpRegs+3).l,d2	; BG
(2)   72/  FF0336 : 0242 0007           		andi.w	#%000111,d2
(2)   73/  FF033A : E14A                		lsl.w	#8,d2
(2)   74/  FF033C : EB4A                		lsl.w	#5,d2
(2)   75/  FF033E : 6100 0364           		bsr	Video_Fill	
(2)   76/  FF0342 : 323C 0FFF           		move.w	#$FFF,d1		; WD Size
(2)   77/  FF0346 : 1439 FFFF 93C2      		move.b	(RAM_VdpRegs+4).l,d2	; Window
(2)   78/  FF034C : 0242 003E           		andi.w	#%111110,d2
(2)   79/  FF0350 : E14A                		lsl.w	#8,d2
(2)   80/  FF0352 : E54A                		lsl.w	#2,d2
(2)   81/  FF0354 : 6000 034E           		bra	Video_Fill
(2)   82/  FF0358 :                     		
(2)   83/  FF0358 :                     ; ---------------------------------
(2)   84/  FF0358 :                     ; Video_Update
(2)   85/  FF0358 :                     ; 
(2)   86/  FF0358 :                     ; Update registers below $91
(2)   87/  FF0358 :                     ; 
(2)   88/  FF0358 :                     ; Uses:
(2)   89/  FF0358 :                     ; d4-d5,a4-a5
(2)   90/  FF0358 :                     ; ---------------------------------
(2)   91/  FF0358 :                     
(2)   92/  FF0358 :                     Video_Update:
(2)   93/  FF0358 : 49F8 93BE           		lea	(RAM_VdpRegs).w,a4
(2)   94/  FF035C : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(2)   95/  FF0362 : 383C 8000           		move.w	#$8000,d4
(2)   96/  FF0366 : 3A3C 0010           		move.w	#17-1,d5
(2)   97/  FF036A :                     .loop:
(2)   98/  FF036A : 181C                		move.b	(a4)+,d4
(2)   99/  FF036C : 3A84                		move.w	d4,(a5)
(2)  100/  FF036E : D87C 0100           		add.w	#$100,d4
(2)  101/  FF0372 : 51CD FFF6           		dbf	d5,.loop
(2)  102/  FF0376 :                     .exit:
(2)  103/  FF0376 : 4E75                		rts
(2)  104/  FF0378 :                     		
(2)  105/  FF0378 :                     ; --------------------------------------------------------
(2)  106/  FF0378 :                     ; Video_LoadPal
(2)  107/  FF0378 :                     ; 
(2)  108/  FF0378 :                     ; Load palette to VDP
(2)  109/  FF0378 :                     ; 
(2)  110/  FF0378 :                     ; a0 - Palette data
(2)  111/  FF0378 :                     ; d0 - Start at
(2)  112/  FF0378 :                     ; d1 - Num of colors - 1
(2)  113/  FF0378 :                     ; 
(2)  114/  FF0378 :                     ; Uses:
(2)  115/  FF0378 :                     ; a4,d4
(2)  116/  FF0378 :                     ; --------------------------------------------------------
(2)  117/  FF0378 :                     
(2)  118/  FF0378 :                     Video_LoadPal:
(2)  119/  FF0378 : 49F9 00C0 0000      		lea	(vdp_data),a4
(2)  120/  FF037E : 7800                		moveq	#0,d4
(2)  121/  FF0380 : 3800                		move.w	d0,d4
(2)  122/  FF0382 : D844                		add.w	d4,d4
(2)  123/  FF0384 : 0044 C000           		ori.w	#$C000,d4
(2)  124/  FF0388 : 4844                		swap	d4
(2)  125/  FF038A : 2944 0004           		move.l	d4,4(a4)
(2)  126/  FF038E : 3801                		move.w	d1,d4
(2)  127/  FF0390 : 3A2C 0004           .outv: 		move.w	4(a4),d5
(2)  128/  FF0394 : 0805 0003           		btst	#bitVint,d5
(2)  129/  FF0398 : 67F6                		beq.s	.outv
(2)  130/  FF039A :                     .loop:
(2)  131/  FF039A : 3898                		move.w	(a0)+,(a4)
(2)  132/  FF039C : 51CC FFFC           		dbf	d4,.loop
(2)  133/  FF03A0 : 4E75                		rts
(2)  134/  FF03A2 :                     		
(2)  135/  FF03A2 :                     ; --------------------------------------------------------
(2)  136/  FF03A2 :                     ; Video_LoadMap
(2)  137/  FF03A2 :                     ; 
(2)  138/  FF03A2 :                     ; Load map data, Horizontal order
(2)  139/  FF03A2 :                     ; 
(2)  140/  FF03A2 :                     ; a0 - Map data
(2)  141/  FF03A2 :                     ; d0 | LONG - 00|Layer|X|Y, locate(lyr,x,y)  
(2)  142/  FF03A2 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(2)  143/  FF03A2 :                     ; d2 | WORD - VRAM
(2)  144/  FF03A2 :                     
(2)  145/  FF03A2 :                     ; Uses:
(2)  146/  FF03A2 :                     ; a4-a5,d4-d7
(2)  147/  FF03A2 :                     ; --------------------------------------------------------
(2)  148/  FF03A2 :                     
(2)  149/  FF03A2 :                     Video_LoadMap:
(2)  150/  FF03A2 : 49F9 00C0 0000      		lea	(vdp_data),a4
(2)  151/  FF03A8 : 6100 025E           		bsr	vid_PickLayer
(2)  152/  FF03AC :                     		
(2)  153/  FF03AC :                     	; Start here
(2)  154/  FF03AC : 3A01                		move.w	d1,d5
(2)  155/  FF03AE :                     .yloop:
(2)  156/  FF03AE : 4845                		swap	d5
(2)  157/  FF03B0 : 2944 0004           		move.l	d4,4(a4)
(2)  158/  FF03B4 : 2E01                		move.l	d1,d7
(2)  159/  FF03B6 : 4847                		swap	d7
(2)  160/  FF03B8 :                     .xloop:
(2)  161/  FF03B8 : 3A18                		move.w	(a0)+,d5
(2)  162/  FF03BA : BA7C FFFF           		cmp.w	#-1,d5
(2)  163/  FF03BE : 6606                		bne.s	.nonull
(2)  164/  FF03C0 : 3A3C 07FF           		move.w	#varNullVram,d5
(2)  165/  FF03C4 : 6002                		bra.s	.cont
(2)  166/  FF03C6 :                     .nonull:
(2)  167/  FF03C6 : DA42                		add.w	d2,d5
(2)  168/  FF03C8 :                     .cont:
(2)  169/  FF03C8 : 4847                		swap	d7
(2)  170/  FF03CA : 1E39 FFFF 93CA      		move.b	(RAM_VdpRegs+$C).l,d7
(2)  171/  FF03D0 : CE7C 0006           		and.w	#%110,d7
(2)  172/  FF03D4 : BE7C 0006           		cmp.w	#%110,d7
(2)  173/  FF03D8 : 660E                		bne.s	.nodble
(2)  174/  FF03DA : 3E05                		move.w	d5,d7
(2)  175/  FF03DC : E24F                		lsr.w	#1,d7
(2)  176/  FF03DE : CE7C 07FF           		and.w	#$7FF,d7
(2)  177/  FF03E2 : CA7C F800           		and.w	#$F800,d5
(2)  178/  FF03E6 : 8A47                		or.w	d7,d5
(2)  179/  FF03E8 :                     .nodble:
(2)  180/  FF03E8 : 4847                		swap	d7
(2)  181/  FF03EA : 3885                		move.w	d5,(a4)
(2)  182/  FF03EC : 51CF FFCA           		dbf	d7,.xloop
(2)  183/  FF03F0 : D886                		add.l	d6,d4
(2)  184/  FF03F2 : 4845                		swap	d5
(2)  185/  FF03F4 : 51CD FFB8           		dbf	d5,.yloop
(2)  186/  FF03F8 : 4E75                		rts
(2)  187/  FF03FA :                     
(2)  188/  FF03FA :                     ; --------------------------------------------------------
(2)  189/  FF03FA :                     ; Video_LoadMap_Vert
(2)  190/  FF03FA :                     ; 
(2)  191/  FF03FA :                     ; Load map data, Vertical order
(2)  192/  FF03FA :                     ; 
(2)  193/  FF03FA :                     ; a0 - Map data
(2)  194/  FF03FA :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(2)  195/  FF03FA :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(2)  196/  FF03FA :                     ; d2 | WORD - VRAM
(2)  197/  FF03FA :                     
(2)  198/  FF03FA :                     ; Uses:
(2)  199/  FF03FA :                     ; a4-a5,d4-d7
(2)  200/  FF03FA :                     ; --------------------------------------------------------
(2)  201/  FF03FA :                     
(2)  202/  FF03FA :                     Video_LoadMap_Vert:
(2)  203/  FF03FA : 49F9 00C0 0000      		lea	(vdp_data),a4
(2)  204/  FF0400 : 6100 0206           		bsr	vid_PickLayer
(2)  205/  FF0404 :                     		
(2)  206/  FF0404 :                     	; Start here
(2)  207/  FF0404 : 2A01                		move.l	d1,d5
(2)  208/  FF0406 : 4845                		swap	d5
(2)  209/  FF0408 :                     .xloop:
(2)  210/  FF0408 : 4845                		swap	d5
(2)  211/  FF040A : 2F04                		move.l	d4,-(sp)
(2)  212/  FF040C : 3E01                		move.w	d1,d7
(2)  213/  FF040E : 0839 0002 FFFF 93CA 		btst	#2,(RAM_VdpRegs+$C).l
(2)  214/  FF0416 : 6702                		beq.s	.yloop
(2)  215/  FF0418 : E24F                		lsr.w	#1,d7
(2)  216/  FF041A :                     .yloop:
(2)  217/  FF041A : 2944 0004           		move.l	d4,4(a4)
(2)  218/  FF041E : 3A10                		move.w	(a0),d5
(2)  219/  FF0420 : BA7C FFFF           		cmp.w	#-1,d5
(2)  220/  FF0424 : 6606                		bne.s	.nonull
(2)  221/  FF0426 : 3A3C 07FF           		move.w	#varNullVram,d5
(2)  222/  FF042A : 6002                		bra.s	.cont
(2)  223/  FF042C :                     .nonull:
(2)  224/  FF042C : DA42                		add.w	d2,d5
(2)  225/  FF042E :                     .cont:
(2)  226/  FF042E : 4847                		swap	d7
(2)  227/  FF0430 : D0FC 0002           		adda	#2,a0
(2)  228/  FF0434 : 0839 0002 FFFF 93CA 		btst	#2,(RAM_VdpRegs+$C).l
(2)  229/  FF043C : 6712                		beq.s	.nodble
(2)  230/  FF043E : D0FC 0002           		adda	#2,a0
(2)  231/  FF0442 : 3E05                		move.w	d5,d7
(2)  232/  FF0444 : E24F                		lsr.w	#1,d7
(2)  233/  FF0446 : CE7C 07FF           		and.w	#$7FF,d7
(2)  234/  FF044A : CA7C F800           		and.w	#$F800,d5
(2)  235/  FF044E : 8A47                		or.w	d7,d5
(2)  236/  FF0450 :                     .nodble:
(2)  237/  FF0450 : 4847                		swap	d7
(2)  238/  FF0452 : 3885                		move.w	d5,(a4)
(2)  239/  FF0454 : D886                		add.l	d6,d4
(2)  240/  FF0456 : 51CF FFC2           		dbf	d7,.yloop
(2)  241/  FF045A :                     .outdbl:
(2)  242/  FF045A : 281F                		move.l	(sp)+,d4
(2)  243/  FF045C : D8BC 0002 0000      		add.l	#$20000,d4
(2)  244/  FF0462 : 4845                		swap	d5
(2)  245/  FF0464 : 51CD FFA2           		dbf	d5,.xloop
(2)  246/  FF0468 : 4E75                		rts
(2)  247/  FF046A :                     		
(2)  248/  FF046A :                     ; --------------------------------------------------------
(2)  249/  FF046A :                     ; Video_AutoMap_Vert
(2)  250/  FF046A :                     ; 
(2)  251/  FF046A :                     ; Make automatic map, Vertical order
(2)  252/  FF046A :                     ; 
(2)  253/  FF046A :                     ; MCD: Use this to make a virtual screen
(2)  254/  FF046A :                     ; for Stamps
(2)  255/  FF046A :                     ; 
(2)  256/  FF046A :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(2)  257/  FF046A :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(2)  258/  FF046A :                     ; d2 | WORD - VRAM
(2)  259/  FF046A :                     
(2)  260/  FF046A :                     ; Uses:
(2)  261/  FF046A :                     ; a4-a5,d4-d7
(2)  262/  FF046A :                     ; --------------------------------------------------------
(2)  263/  FF046A :                     
(2)  264/  FF046A :                     ; TODO: double interlace
(2)  265/  FF046A :                     
(2)  266/  FF046A :                     Video_AutoMap_Vert:
(2)  267/  FF046A : 49F9 00C0 0000      		lea	(vdp_data),a4
(2)  268/  FF0470 : 6100 0196           		bsr	vid_PickLayer
(2)  269/  FF0474 :                     		
(2)  270/  FF0474 :                     	; Start here
(2)  271/  FF0474 : 3E02                		move.w	d2,d7
(2)  272/  FF0476 : 2A01                		move.l	d1,d5
(2)  273/  FF0478 : 4845                		swap	d5
(2)  274/  FF047A :                     .xloop:
(2)  275/  FF047A : 4845                		swap	d5
(2)  276/  FF047C : 2F04                		move.l	d4,-(sp)
(2)  277/  FF047E : 3A01                		move.w	d1,d5
(2)  278/  FF0480 : 0839 0002 FFFF 93CA 		btst	#2,(RAM_VdpRegs+$C).l
(2)  279/  FF0488 : 6702                		beq.s	.yloop
(2)  280/  FF048A : E24D                		lsr.w	#1,d5
(2)  281/  FF048C :                     .yloop:
(2)  282/  FF048C : 2944 0004           		move.l	d4,4(a4)
(2)  283/  FF0490 : 3887                		move.w	d7,(a4)
(2)  284/  FF0492 : DE7C 0001           		add.w	#1,d7
(2)  285/  FF0496 : D886                		add.l	d6,d4
(2)  286/  FF0498 : 51CD FFF2           		dbf	d5,.yloop
(2)  287/  FF049C :                     
(2)  288/  FF049C : 281F                		move.l	(sp)+,d4
(2)  289/  FF049E : D8BC 0002 0000      		add.l	#$20000,d4
(2)  290/  FF04A4 : 4845                		swap	d5
(2)  291/  FF04A6 : 51CD FFD2           		dbf	d5,.xloop
(2)  292/  FF04AA : 4E75                		rts
(2)  293/  FF04AC :                     
(2)  294/  FF04AC :                     ; --------------------------------------------------------
(2)  295/  FF04AC :                     ; Video_PrintInit
(2)  296/  FF04AC :                     ; 
(2)  297/  FF04AC :                     ; Load palette and font for printing text
(2)  298/  FF04AC :                     ; --------------------------------------------------------
(2)  299/  FF04AC :                     
(2)  300/  FF04AC :                     Video_PrintInit:
(2)  301/  FF04AC : 41FA 03EA           		lea	ASCII_PAL(pc),a0
(2)  302/  FF04B0 : 7030                		moveq	#$30,d0
(2)  303/  FF04B2 : 323C 000F           		move.w	#$F,d1
(2)  304/  FF04B6 : 6100 FEC0           		bsr	Video_LoadPal
(2)  305/  FF04BA : 203C 00FF 08B8      		move.l	#ASCII_FONT,d0
(2)  306/  FF04C0 : 323C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d1
(2)  307/  FF04C4 : 343C 6580           		move.w	#$580|$6000,d2
(2)  308/  FF04C8 : 31C2 923C           		move.w	d2,(RAM_VidPrntVram).w
(2)  309/  FF04CC : 6000 02D0           		bra	Video_LoadArt
(2)  310/  FF04D0 :                     
(2)  311/  FF04D0 :                     ; --------------------------------------------------------
(2)  312/  FF04D0 :                     ; Video_Print
(2)  313/  FF04D0 :                     ; 
(2)  314/  FF04D0 :                     ; Prints string to layer
(2)  315/  FF04D0 :                     ; requires ASCII font
(2)  316/  FF04D0 :                     ; 
(2)  317/  FF04D0 :                     ; a0 - string data
(2)  318/  FF04D0 :                     ; d0 | LONG - 00|Lyr|X|Y, locate(lyr,x,y)
(2)  319/  FF04D0 :                     ; 
(2)  320/  FF04D0 :                     ; Notes:
(2)  321/  FF04D0 :                     ; "//b" - Show BYTE value
(2)  322/  FF04D0 :                     ; "//w" - Show WORD value
(2)  323/  FF04D0 :                     ; "//l" - Show LONG value
(2)  324/  FF04D0 :                     ;   $0A - Next line
(2)  325/  FF04D0 :                     ;   $00 - End of line
(2)  326/  FF04D0 :                     ; 
(2)  327/  FF04D0 :                     ; Uses:
(2)  328/  FF04D0 :                     ; a4-a6,d4-d7
(2)  329/  FF04D0 :                     ; --------------------------------------------------------
(2)  330/  FF04D0 :                     
(2)  331/  FF04D0 :                     Video_Print:
(2)  332/  FF04D0 :                     ; 		movem.l	d3-d7,-(sp)
(2)  333/  FF04D0 :                     ; 		movem.l	a4-a6,-(sp)
(2)  334/  FF04D0 :                     		
(2)  335/  FF04D0 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(2)  336/  FF04D6 : 6100 0130           		bsr	vid_PickLayer
(2)  337/  FF04DA : 4BF8 923E           		lea	(RAM_VidPrntList),a5
(2)  338/  FF04DE :                     .newjump:
(2)  339/  FF04DE : 2D44 0004           		move.l	d4,4(a6)
(2)  340/  FF04E2 : 2A04                		move.l	d4,d5
(2)  341/  FF04E4 :                     .loop:
(2)  342/  FF04E4 : 1E18                		move.b	(a0)+,d7
(2)  343/  FF04E6 : 6772                		beq	.exit
(2)  344/  FF04E8 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(2)  345/  FF04EC : 6718                		beq.s	.next
(2)  346/  FF04EE : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(2)  347/  FF04F2 : 6716                		beq.s	.special
(2)  348/  FF04F4 : 0247 00FF           		andi.w	#$FF,d7
(2)  349/  FF04F8 :                     .puttext:
(2)  350/  FF04F8 : DE78 923C           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(2)  351/  FF04FC : 3C87                		move.w	d7,(a6)
(2)  352/  FF04FE : DABC 0002 0000      		add.l	#$20000,d5
(2)  353/  FF0504 : 60DE                		bra.s	.loop
(2)  354/  FF0506 :                     ; Next line
(2)  355/  FF0506 :                     .next:
(2)  356/  FF0506 : D886                		add.l	d6,d4
(2)  357/  FF0508 : 60D4                		bra.s	.newjump
(2)  358/  FF050A :                     
(2)  359/  FF050A :                     ; Specials
(2)  360/  FF050A :                     .special:
(2)  361/  FF050A : 1E18                		move.b	(a0)+,d7
(2)  362/  FF050C : 0C07 0062           		cmpi.b	#"b",d7
(2)  363/  FF0510 : 6712                		beq.s	.isbyte
(2)  364/  FF0512 : 0C07 0077           		cmpi.b	#"w",d7
(2)  365/  FF0516 : 671E                		beq.s	.isword
(2)  366/  FF0518 : 0C07 006C           		cmpi.b	#"l",d7
(2)  367/  FF051C : 672A                		beq.s	.islong
(2)  368/  FF051E : 3E3C 005C           		move.w	#"\\",d7			; nothing to do
(2)  369/  FF0522 : 60D4                		bra.s	.puttext
(2)  370/  FF0524 :                     		
(2)  371/  FF0524 :                     	; TEMPORAL VALUES
(2)  372/  FF0524 :                     .isbyte:
(2)  373/  FF0524 : 2AC5                		move.l	d5,(a5)+
(2)  374/  FF0526 : 3AFC 0001           		move.w	#1,(a5)+
(2)  375/  FF052A : DABC 0004 0000      		add.l	#$40000,d5
(2)  376/  FF0530 : 2D45 0004           		move.l	d5,4(a6)
(2)  377/  FF0534 : 60AE                		bra	.loop
(2)  378/  FF0536 :                     .isword:
(2)  379/  FF0536 : 2AC5                		move.l	d5,(a5)+
(2)  380/  FF0538 : 3AFC 0002           		move.w	#2,(a5)+
(2)  381/  FF053C : DABC 0008 0000      		add.l	#$80000,d5
(2)  382/  FF0542 : 2D45 0004           		move.l	d5,4(a6)
(2)  383/  FF0546 : 609C                		bra	.loop
(2)  384/  FF0548 :                     .islong:
(2)  385/  FF0548 : 2AC5                		move.l	d5,(a5)+
(2)  386/  FF054A : 3AFC 0003           		move.w	#3,(a5)+
(2)  387/  FF054E : DABC 0010 0000      		add.l	#$100000,d5
(2)  388/  FF0554 : 2D45 0004           		move.l	d5,4(a6)
(2)  389/  FF0558 : 608A                		bra	.loop
(2)  390/  FF055A :                     .exit:
(2)  391/  FF055A :                     
(2)  392/  FF055A :                     ; --------------------------------------------------------
(2)  393/  FF055A :                     ; Print values
(2)  394/  FF055A :                     ; 
(2)  395/  FF055A :                     ; vvvv vvvv tttt
(2)  396/  FF055A :                     ; v - vdp pos
(2)  397/  FF055A :                     ; t - value type
(2)  398/  FF055A :                     ; --------------------------------------------------------
(2)  399/  FF055A :                     
(2)  400/  FF055A : 7800                		moveq	#0,d4
(2)  401/  FF055C : 7A00                		moveq	#0,d5
(2)  402/  FF055E : 7C00                		moveq	#0,d6
(2)  403/  FF0560 : 4BF8 923E           		lea	(RAM_VidPrntList),a5
(2)  404/  FF0564 :                     .nextv:
(2)  405/  FF0564 : 4A95                		tst.l	(a5)
(2)  406/  FF0566 : 6700 009E           		beq	.nothing
(2)  407/  FF056A :                     
(2)  408/  FF056A :                     	; grab value
(2)  409/  FF056A : 7800                		moveq	#0,d4
(2)  410/  FF056C : 1818                		move.b	(a0)+,d4
(2)  411/  FF056E : E19C                		rol.l	#8,d4
(2)  412/  FF0570 : 1818                		move.b	(a0)+,d4
(2)  413/  FF0572 : E19C                		rol.l	#8,d4
(2)  414/  FF0574 : 1818                		move.b	(a0)+,d4
(2)  415/  FF0576 : E19C                		rol.l	#8,d4
(2)  416/  FF0578 : 1818                		move.b	(a0)+,d4
(2)  417/  FF057A : 2844                		movea.l	d4,a4
(2)  418/  FF057C : 7800                		moveq	#0,d4
(2)  419/  FF057E :                     
(2)  420/  FF057E :                     	; get value
(2)  421/  FF057E : 3C2D 0004           		move.w	4(a5),d6
(2)  422/  FF0582 :                     		
(2)  423/  FF0582 : BC7C 0001           		cmp.w	#1,d6		; byte?
(2)  424/  FF0586 : 660E                		bne.s	.vbyte
(2)  425/  FF0588 : 1814                		move.b	(a4),d4
(2)  426/  FF058A : 2D55 0004           		move.l	(a5),4(a6)
(2)  427/  FF058E : E91C                		rol.b	#4,d4
(2)  428/  FF0590 : 6158                		bsr.s	.donibl
(2)  429/  FF0592 : E91C                		rol.b	#4,d4
(2)  430/  FF0594 : 6154                		bsr.s	.donibl
(2)  431/  FF0596 :                     .vbyte:
(2)  432/  FF0596 : BC7C 0002           		cmp.w	#2,d6		; word?
(2)  433/  FF059A : 661C                		bne.s	.vword
(2)  434/  FF059C : 1814                		move.b	(a4),d4
(2)  435/  FF059E : E15C                		rol.w	#8,d4
(2)  436/  FF05A0 : 182C 0001           		move.b	1(a4),d4
(2)  437/  FF05A4 : 2D55 0004           		move.l	(a5),4(a6)
(2)  438/  FF05A8 : E95C                		rol.w	#4,d4
(2)  439/  FF05AA : 613E                		bsr.s	.donibl
(2)  440/  FF05AC : E95C                		rol.w	#4,d4
(2)  441/  FF05AE : 613A                		bsr.s	.donibl
(2)  442/  FF05B0 : E95C                		rol.w	#4,d4
(2)  443/  FF05B2 : 6136                		bsr.s	.donibl
(2)  444/  FF05B4 : E95C                		rol.w	#4,d4
(2)  445/  FF05B6 : 6132                		bsr.s	.donibl
(2)  446/  FF05B8 :                     .vword:
(2)  447/  FF05B8 : BC7C 0003           		cmp.w	#3,d6		; long?
(2)  448/  FF05BC : 6624                		bne.s	.vlong
(2)  449/  FF05BE : 1814                		move.b	(a4),d4
(2)  450/  FF05C0 : E19C                		rol.l	#8,d4
(2)  451/  FF05C2 : 182C 0001           		move.b	1(a4),d4
(2)  452/  FF05C6 : E19C                		rol.l	#8,d4
(2)  453/  FF05C8 : 182C 0002           		move.b	2(a4),d4
(2)  454/  FF05CC : E19C                		rol.l	#8,d4
(2)  455/  FF05CE : 182C 0003           		move.b	3(a4),d4
(2)  456/  FF05D2 : 2D55 0004           		move.l	(a5),4(a6)
(2)  457/  FF05D6 : 3C3C 0007           		move.w	#7,d6
(2)  458/  FF05DA : E99C                .lngloop:	rol.l	#4,d4
(2)  459/  FF05DC : 610C                		bsr.s	.donibl
(2)  460/  FF05DE : 51CE FFFA           		dbf	d6,.lngloop
(2)  461/  FF05E2 :                     .vlong:
(2)  462/  FF05E2 : 429D                		clr.l	(a5)+
(2)  463/  FF05E4 : 425D                		clr.w	(a5)+
(2)  464/  FF05E6 : 6000 FF7C           		bra	.nextv
(2)  465/  FF05EA :                     
(2)  466/  FF05EA :                     ; make nibble byte
(2)  467/  FF05EA :                     .donibl:
(2)  468/  FF05EA : 3A04                		move.w	d4,d5
(2)  469/  FF05EC : 0245 000F           		andi.w	#%1111,d5
(2)  470/  FF05F0 : BA3C 000A           		cmp.b	#$A,d5
(2)  471/  FF05F4 : 6D04                		blt.s	.lowr
(2)  472/  FF05F6 : DA3C 0007           		add.b	#7,d5
(2)  473/  FF05FA :                     .lowr:
(2)  474/  FF05FA : DA7C 0030           		add.w	#"0",d5
(2)  475/  FF05FE : DA78 923C           		add.w	(RAM_VidPrntVram),d5
(2)  476/  FF0602 : 3C85                		move.w	d5,(a6)
(2)  477/  FF0604 : 4E75                		rts
(2)  478/  FF0606 :                     ; exit
(2)  479/  FF0606 :                     .nothing:
(2)  480/  FF0606 :                     ; 		movem.l	(sp)+,a4-a6
(2)  481/  FF0606 :                     ; 		movem.l	(sp)+,d3-d7
(2)  482/  FF0606 : 4E75                		rts
(2)  483/  FF0608 :                     
(2)  484/  FF0608 :                     ; --------------------------------------------------------
(2)  485/  FF0608 :                     ; Shared: pick layer / x pos / y pos and set size
(2)  486/  FF0608 :                     ; --------------------------------------------------------
(2)  487/  FF0608 :                     
(2)  488/  FF0608 :                     vid_PickLayer:
(2)  489/  FF0608 :                     	; Pick layer
(2)  490/  FF0608 : 2C00                		move.l	d0,d6
(2)  491/  FF060A : 4846                		swap	d6
(2)  492/  FF060C : 0806 0000           		btst	#0,d6
(2)  493/  FF0610 : 671E                		beq.s	.plawnd
(2)  494/  FF0612 : 1839 FFFF 93C2      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(2)  495/  FF0618 : 3A04                		move.w	d4,d5
(2)  496/  FF061A : E24D                		lsr.w	#1,d5
(2)  497/  FF061C : 0245 0003           		andi.w	#%11,d5
(2)  498/  FF0620 : 4844                		swap	d4
(2)  499/  FF0622 : 3805                		move.w	d5,d4
(2)  500/  FF0624 : 4844                		swap	d4
(2)  501/  FF0626 : 0244 0001           		andi.w	#1,d4
(2)  502/  FF062A : E14C                		lsl.w	#8,d4
(2)  503/  FF062C : EB4C                		lsl.w	#5,d4
(2)  504/  FF062E : 6028                		bra.s	.golyr
(2)  505/  FF0630 :                     .plawnd:
(2)  506/  FF0630 : 1839 FFFF 93C0      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(2)  507/  FF0636 : 0806 0001           		btst	#1,d6
(2)  508/  FF063A : 6706                		beq.s	.nowd
(2)  509/  FF063C : 1839 FFFF 93C1      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(2)  510/  FF0642 :                     .nowd:		
(2)  511/  FF0642 : 3A04                		move.w	d4,d5
(2)  512/  FF0644 : E84D                		lsr.w	#4,d5
(2)  513/  FF0646 : 0245 0003           		andi.w	#%11,d5
(2)  514/  FF064A : 4844                		swap	d4
(2)  515/  FF064C : 3805                		move.w	d5,d4
(2)  516/  FF064E : 4844                		swap	d4
(2)  517/  FF0650 : 0244 000E           		andi.w	#%00001110,d4
(2)  518/  FF0654 : E14C                		lsl.w	#8,d4
(2)  519/  FF0656 : E54C                		lsl.w	#2,d4
(2)  520/  FF0658 :                     .golyr:
(2)  521/  FF0658 : 0044 4000           		ori.w	#$4000,d4
(2)  522/  FF065C : 3A00                		move.w	d0,d5			; Y start pos
(2)  523/  FF065E : 0245 00FF           		andi.w	#$FF,d5			; Y only
(2)  524/  FF0662 : ED4D                		lsl.w	#6,d5			
(2)  525/  FF0664 : 1C38 93CE           		move.b	(RAM_VdpRegs+$10).w,d6
(2)  526/  FF0668 : 0246 0003           		andi.w	#%11,d6
(2)  527/  FF066C : 670A                		beq.s	.thissz
(2)  528/  FF066E : DA45                		add.w	d5,d5			; H64
(2)  529/  FF0670 : 0246 0002           		andi.w	#%10,d6
(2)  530/  FF0674 : 6702                		beq.s	.thissz
(2)  531/  FF0676 : DA45                		add.w	d5,d5			; H128		
(2)  532/  FF0678 :                     .thissz:
(2)  533/  FF0678 : D845                		add.w	d5,d4
(2)  534/  FF067A : 3A00                		move.w	d0,d5
(2)  535/  FF067C : 0245 FF00           		andi.w	#$FF00,d5		; X only
(2)  536/  FF0680 : EE4D                		lsr.w	#7,d5
(2)  537/  FF0682 : D845                		add.w	d5,d4			; X add
(2)  538/  FF0684 : 4844                		swap	d4
(2)  539/  FF0686 : 7C00                		moveq	#0,d6
(2)  540/  FF0688 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(2)  541/  FF068C : 1A38 93CE           		move.b	(RAM_VdpRegs+$10).w,d5
(2)  542/  FF0690 : 0245 0003           		andi.w	#%11,d5
(2)  543/  FF0694 : 670A                		beq.s	.thisszj
(2)  544/  FF0696 : DC46                		add.w	d6,d6			; H64
(2)  545/  FF0698 : 0245 0002           		andi.w	#%10,d5
(2)  546/  FF069C : 6702                		beq.s	.thisszj
(2)  547/  FF069E : DC46                		add.w	d6,d6			; H128		
(2)  548/  FF06A0 :                     .thisszj:
(2)  549/  FF06A0 : 4846                		swap	d6
(2)  550/  FF06A2 : 4E75                		rts
(2)  551/  FF06A4 :                     		
(2)  552/  FF06A4 :                     ; --------------------------------------------------------
(2)  553/  FF06A4 :                     ; Video_Fill
(2)  554/  FF06A4 :                     ; 
(2)  555/  FF06A4 :                     ; Fill data to VRAM
(2)  556/  FF06A4 :                     ;
(2)  557/  FF06A4 :                     ; d0 | WORD - Fill data
(2)  558/  FF06A4 :                     ; d1 | WORD - Size
(2)  559/  FF06A4 :                     ; d2 | WORD - VRAM
(2)  560/  FF06A4 :                     ; --------------------------------------------------------
(2)  561/  FF06A4 :                     
(2)  562/  FF06A4 :                     Video_Fill:
(2)  563/  FF06A4 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(2)  564/  FF06AA :                     		
(2)  565/  FF06AA : 383C 8100           		move.w	#$8100,d4
(2)  566/  FF06AE : 1838 93BF           		move.b	(RAM_VdpRegs+1),d4
(2)  567/  FF06B2 : 08C4 0004           		bset	#bitDmaEnbl,d4
(2)  568/  FF06B6 : 3884                		move.w	d4,(a4)
(2)  569/  FF06B8 : 3814                .dmaw:		move.w	(a4),d4
(2)  570/  FF06BA : 0804 0001           		btst	#bitDma,d4
(2)  571/  FF06BE : 66F8                		bne.s	.dmaw
(2)  572/  FF06C0 : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(2)  573/  FF06C4 :                     
(2)  574/  FF06C4 :                     	; SIZE
(2)  575/  FF06C4 : 3801                		move.w	d1,d4
(2)  576/  FF06C6 : 2A3C 9400 9300      		move.l	#$94009300,d5
(2)  577/  FF06CC : E24C                		lsr.w	#1,d4
(2)  578/  FF06CE : 1A04                		move.b	d4,d5
(2)  579/  FF06D0 : 4845                		swap	d5
(2)  580/  FF06D2 : E04C                		lsr.w	#8,d4
(2)  581/  FF06D4 : 1A04                		move.b	d4,d5
(2)  582/  FF06D6 : 4845                		swap	d5
(2)  583/  FF06D8 : 2885                		move.l	d5,(a4)
(2)  584/  FF06DA : 38BC 9780           		move.w	#$9780,(a4)		; DMA Fill bit
(2)  585/  FF06DE :                     
(2)  586/  FF06DE :                     	; DESTINATION
(2)  587/  FF06DE : 2802                		move.l	d2,d4
(2)  588/  FF06E0 :                     ; 		lsl.w	#5,d4
(2)  589/  FF06E0 : 3A04                		move.w	d4,d5
(2)  590/  FF06E2 : 0245 3FFF           		andi.w	#$3FFF,d5
(2)  591/  FF06E6 : 0045 4000           		ori.w	#$4000,d5
(2)  592/  FF06EA : 4845                		swap	d5
(2)  593/  FF06EC : 3A04                		move.w	d4,d5
(2)  594/  FF06EE : E04D                		lsr.w	#8,d5
(2)  595/  FF06F0 : EC4D                		lsr.w	#6,d5
(2)  596/  FF06F2 : 0245 0003           		andi.w	#%11,d5
(2)  597/  FF06F6 : 0045 0080           		ori.w	#$80,d5
(2)  598/  FF06FA : 2885                		move.l	d5,(a4)
(2)  599/  FF06FC : 3940 FFFC           		move.w	d0,-4(a4)
(2)  600/  FF0700 : 3814                .dmawe:		move.w	(a4),d4
(2)  601/  FF0702 : 0804 0001           		btst	#bitDma,d4
(2)  602/  FF0706 : 66F8                		bne.s	.dmawe
(2)  603/  FF0708 :                     
(2)  604/  FF0708 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(2)  605/  FF070C : 383C 8100           		move.w	#$8100,d4
(2)  606/  FF0710 : 1838 93BF           		move.b	(RAM_VdpRegs+1),d4
(2)  607/  FF0714 : 3884                		move.w	d4,(a4)
(2)  608/  FF0716 : 4E75                		rts
(2)  609/  FF0718 :                     
(2)  610/  FF0718 :                     ; --------------------------------------------------------
(2)  611/  FF0718 :                     ; Video_Copy
(2)  612/  FF0718 :                     ; 
(2)  613/  FF0718 :                     ; Copy VRAM data to another location
(2)  614/  FF0718 :                     ;
(2)  615/  FF0718 :                     ; d0 | WORD - VRAM Source
(2)  616/  FF0718 :                     ; d1 | WORD - Size
(2)  617/  FF0718 :                     ; d2 | WORD - VRAM Destination
(2)  618/  FF0718 :                     ; --------------------------------------------------------
(2)  619/  FF0718 :                     
(2)  620/  FF0718 :                     Video_Copy:
(2)  621/  FF0718 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(2)  622/  FF071E :                     		
(2)  623/  FF071E : 383C 8100           		move.w	#$8100,d4
(2)  624/  FF0722 : 1838 93BF           		move.b	(RAM_VdpRegs+1),d4
(2)  625/  FF0726 : 08C4 0004           		bset	#bitDmaEnbl,d4
(2)  626/  FF072A : 3884                		move.w	d4,(a4)
(2)  627/  FF072C : 3814                .dmaw:		move.w	(a4),d4
(2)  628/  FF072E : 0804 0001           		btst	#bitDma,d4
(2)  629/  FF0732 : 66F8                		bne.s	.dmaw
(2)  630/  FF0734 : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(2)  631/  FF0738 :                     
(2)  632/  FF0738 :                     	; SIZE
(2)  633/  FF0738 : 3801                		move.w	d1,d4
(2)  634/  FF073A : 2A3C 9400 9300      		move.l	#$94009300,d5
(2)  635/  FF0740 : E24C                		lsr.w	#1,d4
(2)  636/  FF0742 : 1A04                		move.b	d4,d5
(2)  637/  FF0744 : 4845                		swap	d5
(2)  638/  FF0746 : E04C                		lsr.w	#8,d4
(2)  639/  FF0748 : 1A04                		move.b	d4,d5
(2)  640/  FF074A : 4845                		swap	d5
(2)  641/  FF074C : 2885                		move.l	d5,(a4)
(2)  642/  FF074E :                     	
(2)  643/  FF074E :                     	; SOURCE
(2)  644/  FF074E : 2A3C 9600 9500      		move.l	#$96009500,d5
(2)  645/  FF0754 : 3800                		move.w	d0,d4
(2)  646/  FF0756 : 1A04                		move.b	d4,d5
(2)  647/  FF0758 : 4845                		swap	d5
(2)  648/  FF075A : E04C                		lsr.w	#8,d4
(2)  649/  FF075C : 1A04                		move.b	d4,d5
(2)  650/  FF075E : 2885                		move.l	d5,(a4)
(2)  651/  FF0760 : 38BC 97C0           		move.w	#$97C0,(a4)		; DMA Fill bit
(2)  652/  FF0764 :                     		
(2)  653/  FF0764 :                     	; DESTINATION
(2)  654/  FF0764 : 2802                		move.l	d2,d4
(2)  655/  FF0766 :                     ; 		lsl.w	#5,d4
(2)  656/  FF0766 : 3A04                		move.w	d4,d5
(2)  657/  FF0768 : 0245 3FFF           		andi.w	#$3FFF,d5
(2)  658/  FF076C : 0045 4000           		ori.w	#$4000,d5
(2)  659/  FF0770 : 4845                		swap	d5
(2)  660/  FF0772 : 3A04                		move.w	d4,d5
(2)  661/  FF0774 : E04D                		lsr.w	#8,d5
(2)  662/  FF0776 : EC4D                		lsr.w	#6,d5
(2)  663/  FF0778 : 0245 0003           		andi.w	#%11,d5
(2)  664/  FF077C : 0045 00C0           		ori.w	#$C0,d5
(2)  665/  FF0780 : 2885                		move.l	d5,(a4)
(2)  666/  FF0782 : 3940 FFFC           		move.w	d0,-4(a4)
(2)  667/  FF0786 : 3814                .dmawe:		move.w	(a4),d4
(2)  668/  FF0788 : 0804 0001           		btst	#bitDma,d4
(2)  669/  FF078C : 66F8                		bne.s	.dmawe
(2)  670/  FF078E :                     
(2)  671/  FF078E : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(2)  672/  FF0792 : 383C 8100           		move.w	#$8100,d4
(2)  673/  FF0796 : 1838 93BF           		move.b	(RAM_VdpRegs+1),d4
(2)  674/  FF079A : 3884                		move.w	d4,(a4)
(2)  675/  FF079C : 4E75                		rts
(2)  676/  FF079E :                     
(2)  677/  FF079E :                     ; --------------------------------------------------------
(2)  678/  FF079E :                     ; Video_LoadArt
(2)  679/  FF079E :                     ; 
(2)  680/  FF079E :                     ; notes below
(2)  681/  FF079E :                     ; --------------------------------------------------------
(2)  682/  FF079E :                     
(2)  683/  FF079E :                     Video_LoadArt:
(2)  684/  FF079E : 4EF9 FFFF 93D6      		jmp	(RAM_ExRamSub).l	; (first routine)
(2)  685/  FF07A4 :                     
(2)  686/  FF07A4 :                     ; ====================================================================
(2)  687/  FF07A4 :                     ; --------------------------------------------------------
(2)  688/  FF07A4 :                     ; DMA ROM to VDP Transfers
(2)  689/  FF07A4 :                     ; 
(2)  690/  FF07A4 :                     ; These subroutines will be stored on RAM if using 32X
(2)  691/  FF07A4 :                     ; --------------------------------------------------------
(2)  692/  FF07A4 :                     
(2)  693/  FF07A4 :                     Video_RamCode:
(2)  694/  FF07A4 : 6000 000E           		bra.w	.load_art
(2)  695/  FF07A8 : 6000 000A           		bra.w	.load_art
(2)  696/  FF07AC : 6000 0006           		bra.w	.load_art
(2)  697/  FF07B0 : 6000 0002           		bra.w	.load_art
(2)  698/  FF07B4 :                     
(2)  699/  FF07B4 :                     ; --------------------------------------------------------
(2)  700/  FF07B4 :                     ; Load graphics using DMA
(2)  701/  FF07B4 :                     ;
(2)  702/  FF07B4 :                     ; d0 | LONG - Art data
(2)  703/  FF07B4 :                     ; d1 | WORD - Size
(2)  704/  FF07B4 :                     ; d2 | WORD - VRAM (cell)
(2)  705/  FF07B4 :                     ; 
(2)  706/  FF07B4 :                     ; Uses:
(2)  707/  FF07B4 :                     ; d4-d5,a4
(2)  708/  FF07B4 :                     ;
(2)  709/  FF07B4 :                     ; NOTES:
(2)  710/  FF07B4 :                     ; RV bit must be set before starting DMA
(2)  711/  FF07B4 :                     ; --------------------------------------------------------
(2)  712/  FF07B4 :                     
(2)  713/  FF07B4 :                     .load_art:
(2)  714/  FF07B4 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(2)  715/  FF07BA : 383C 8100           		move.w	#$8100,d4
(2)  716/  FF07BE : 1838 93BF           		move.b	(RAM_VdpRegs+1),d4
(2)  717/  FF07C2 : 08C4 0004           		bset	#bitDmaEnbl,d4
(2)  718/  FF07C6 : 3884                		move.w	d4,(a4)
(2)  719/  FF07C8 :                     
(2)  720/  FF07C8 :                     	; SIZE
(2)  721/  FF07C8 : 3801                		move.w	d1,d4
(2)  722/  FF07CA : 2A3C 9400 9300      		move.l	#$94009300,d5
(2)  723/  FF07D0 : E24C                		lsr.w	#1,d4
(2)  724/  FF07D2 : 1A04                		move.b	d4,d5
(2)  725/  FF07D4 : 4845                		swap	d5
(2)  726/  FF07D6 : E04C                		lsr.w	#8,d4
(2)  727/  FF07D8 : 1A04                		move.b	d4,d5
(2)  728/  FF07DA : 4845                		swap	d5
(2)  729/  FF07DC : 2885                		move.l	d5,(a4)
(2)  730/  FF07DE :                     
(2)  731/  FF07DE :                     	; SOURCE
(2)  732/  FF07DE : 2800                		move.l	d0,d4
(2)  733/  FF07E0 : E28C                  		lsr.l	#1,d4
(2)  734/  FF07E2 : 2A3C 9600 9500       		move.l	#$96009500,d5
(2)  735/  FF07E8 : 1A04                 		move.b	d4,d5
(2)  736/  FF07EA : E08C                 		lsr.l	#8,d4
(2)  737/  FF07EC : 4845                 		swap	d5
(2)  738/  FF07EE : 1A04                 		move.b	d4,d5
(2)  739/  FF07F0 : 2885                 		move.l	d5,(a4)
(2)  740/  FF07F2 : 3A3C 9700            		move.w	#$9700,d5
(2)  741/  FF07F6 : E08C                 		lsr.l	#8,d4
(2)  742/  FF07F8 : 1A04                 		move.b	d4,d5
(2)  743/  FF07FA : 3885                 		move.w	d5,(a4)
(2)  744/  FF07FC :                      		
(2)  745/  FF07FC :                     	; DESTINATION
(2)  746/  FF07FC : 3802                		move.w	d2,d4
(2)  747/  FF07FE : C87C 07FF           		and.w	#$7FF,d4
(2)  748/  FF0802 : EB4C                		lsl.w	#5,d4
(2)  749/  FF0804 : 3A04                		move.w	d4,d5
(2)  750/  FF0806 : C8BC 0000 3FE0      		and.l	#$3FE0,d4
(2)  751/  FF080C : 0044 4000           		ori.w	#$4000,d4
(2)  752/  FF0810 : 3884                		move.w	d4,(a4)				; First write
(2)  753/  FF0812 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(2)  754/  FF081A : E04D                		lsr.w	#8,d5
(2)  755/  FF081C : EC4D                		lsr.w	#6,d5
(2)  756/  FF081E : 0245 0003           		andi.w	#%11,d5
(2)  757/  FF0822 : 0045 0080           		ori.w	#$80,d5
(2)  758/  FF0826 :                     .wait:
(2)  759/  FF0826 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for cpu
(2)  760/  FF082E : 66F6                		bne.s	.wait
(2)  761/  FF0830 : 2800                		move.l	d0,d4
(2)  762/  FF0832 : 4844                		swap	d4
(2)  763/  FF0834 : E04C                		lsr.w	#8,d4
(2)  764/  FF0836 : B83C 00FF           		cmp.b	#$FF,d4
(2)  765/  FF083A : 6738                		beq.s	.from_ram
(2)  766/  FF083C : 3839 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d4	; Set RV=1
(2)  767/  FF0842 : 887C 0001           		or.w	#1,d4				; (68k ROM map moves to $000000)
(2)  768/  FF0846 : 33C4 00A1 5106      		move.w	d4,(sysmars_reg+dreqctl).l	; Make sure SH2 isn't touching ROM
(2)  769/  FF084C : 3F05                 		move.w	d5,-(sp)
(2)  770/  FF084E : 389F                		move.w	(sp)+,(a4)			; Second write
(2)  771/  FF0850 : 3839 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d4	; Set RV=0
(2)  772/  FF0856 : C87C 00FE           		and.w	#%11111110,d4			; (68k ROM map returns to $880000)
(2)  773/  FF085A : 33C4 00A1 5106      		move.w	d4,(sysmars_reg+dreqctl).l
(2)  774/  FF0860 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(2)  775/  FF0868 : 383C 8100           		move.w	#$8100,d4
(2)  776/  FF086C : 1838 93BF           		move.b	(RAM_VdpRegs+1),d4
(2)  777/  FF0870 : 3884                		move.w	d4,(a4)
(2)  778/  FF0872 : 4E75                		rts
(2)  779/  FF0874 :                     .from_ram:
(2)  780/  FF0874 : 3F05                 		move.w	d5,-(sp)
(2)  781/  FF0876 : 389F                		move.w	(sp)+,(a4)			; Second write
(2)  782/  FF0878 : 383C 8100           		move.w	#$8100,d4
(2)  783/  FF087C : 1838 93BF           		move.b	(RAM_VdpRegs+1),d4
(2)  784/  FF0880 : 3884                		move.w	d4,(a4)
(2)  785/  FF0882 : 4E75                		rts
(2)  786/  FF0884 :                     		
(2)  787/  FF0884 :                     ; --------------------------------------------------------
(2)  788/  FF0884 :                     
(2)  789/  FF0884 :                     Video_RamCode_e:
(2)  790/  FF0884 :                     		align 2
(2)  791/  FF0884 :                     
(2)  792/  FF0884 :                     ; ====================================================================
(2)  793/  FF0884 :                     ; --------------------------------------------------------
(2)  794/  FF0884 :                     ; Video data
(2)  795/  FF0884 :                     ; --------------------------------------------------------
(2)  796/  FF0884 :                     
(2)  797/  FF0884 :                     list_vdpregs:
(2)  798/  FF0884 : 04                  		dc.b $04			; HBlank int off, HV Counter on
(2)  799/  FF0885 : 44                  		dc.b $44			; Display ON, VBlank int off
(2)  800/  FF0886 : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(2)  801/  FF0887 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(2)  802/  FF0888 : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(2)  803/  FF0889 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(2)  804/  FF088A : 00                  		dc.b $00			; Nothing
(2)  805/  FF088B : 00                  		dc.b $00			; Background color: 0
(2)  806/  FF088C : 00                  		dc.b $00			; Nothing
(2)  807/  FF088D : 00                  		dc.b $00			; Nothing
(2)  808/  FF088E : 00                  		dc.b $00			; HInt value
(2)  809/  FF088F : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(2)  810/  FF0890 : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(2)  811/  FF0891 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(2)  812/  FF0892 : 00                  		dc.b $00			; Nothing
(2)  813/  FF0893 : 02                  		dc.b $02			; VDP Auto increment by $02
(2)  814/  FF0894 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(2)  815/  FF0895 : 00                  		dc.b $00
(2)  816/  FF0896 : 00                  		dc.b $00
(2)  817/  FF0897 :                     		align 2
(2)  818/  FF0898 :                     ASCII_PAL:	;binclude "engine/shared/ascii_pal.bin"
(2)  819/  FF0898 : 0000 0EEE 0CCC 0AAA 		dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(2)  820/  FF08A8 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(2)  821/  FF08B8 :                     ASCII_PAL_e:
(2)  822/  FF08B8 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(2)  823/  FF18B8 :                     ASCII_FONT_e:
(2)  824/  FF18B8 :                     		align 2
(2)  825/  FF18B8 :                     
(1)   54/  FF18B8 :                     		include	"system/md/sound.asm"
(2)    1/  FF18B8 :                     ; ====================================================================
(2)    2/  FF18B8 :                     ; ----------------------------------------------------------------
(2)    3/  FF18B8 :                     ; Sound
(2)    4/  FF18B8 :                     ; ----------------------------------------------------------------
(2)    5/  FF18B8 :                     
(2)    6/  FF18B8 :                     ; --------------------------------------------------------
(2)    7/  FF18B8 :                     ; Init Sound
(2)    8/  FF18B8 :                     ; 
(2)    9/  FF18B8 :                     ; Uses:
(2)   10/  FF18B8 :                     ; a0-a2,d0-d1
(2)   11/  FF18B8 :                     ; --------------------------------------------------------
(2)   12/  FF18B8 :                     
(2)   13/  FF18B8 :                     Sound_Init:
(2)   14/  FF18B8 : 41F8 9238           		lea	(RAM_MdSound),a0		; Clear RAM
(2)   15/  FF18BC : 7000                		moveq	#0,d0
(2)   16/  FF18BE : 323C 0003           		move.w	#(sizeof_mdsnd-RAM_MdSound)-1,d1
(2)   17/  FF18C2 :                     .clrram:
(2)   18/  FF18C2 : 10C0                		move.b	d0,(a0)+
(2)   19/  FF18C4 : 51C9 FFFC           		dbf	d1,.clrram
(2)   20/  FF18C8 :                     
(2)   21/  FF18C8 :                     	; Send Z80 code
(2)   22/  FF18C8 : 33FC 0100 00A1 1100 		move.w	#$100,(z80_bus).l		; Stop Z80
(2)   23/  FF18D0 : 33FC 0100 00A1 1200 		move.w	#$100,(z80_reset).l		; Reset cancel
(2)   24/  FF18D8 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1
(2)   25/  FF18DE : 7000                		moveq	#0,d0
(2)   26/  FF18E0 : 323C 1FFF           		move.w	#$1FFF,d1
(2)   27/  FF18E4 :                     .wait:
(2)   28/  FF18E4 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait bus
(2)   29/  FF18EC : 66F6                		bne.s	.wait
(2)   30/  FF18EE :                     .clear:
(2)   31/  FF18EE : 12C0                		move.b	d0,(a1)+
(2)   32/  FF18F0 : 51C9 FFFC           		dbf	d1,.clear
(2)   33/  FF18F4 : 41FA 00F2           		lea	Z80_CODE(pc),a0			; Send this code
(2)   34/  FF18F8 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1
(2)   35/  FF18FE : 323C 016D           		move.w	#(Z80_END-Z80_CODE)-1,d1
(2)   36/  FF1902 :                     .copy:
(2)   37/  FF1902 : 12D8                		move.b	(a0)+,(a1)+
(2)   38/  FF1904 : 51C9 FFFC           		dbf	d1,.copy
(2)   39/  FF1908 :                     		
(2)   40/  FF1908 :                     	; FM init stuff
(2)   41/  FF1908 :                     	; TODO
(2)   42/  FF1908 :                     
(2)   43/  FF1908 :                     	; Start Z80
(2)   44/  FF1908 : 33FC 0000 00A1 1200 		move.w	#0,(z80_reset).l		; Reset request
(2)   45/  FF1910 : 4E71                		nop
(2)   46/  FF1912 : 4E71                		nop
(2)   47/  FF1914 : 4E71                		nop
(2)   48/  FF1916 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(2)   49/  FF191E : 33FC 0100 00A1 1200 		move.w	#$100,(z80_reset).l		; Reset cancel
(2)   50/  FF1926 : 4E75                		rts
(2)   51/  FF1928 :                     		
(2)   52/  FF1928 :                     ; ====================================================================
(2)   53/  FF1928 :                     ; ----------------------------------------------------------------
(2)   54/  FF1928 :                     ; Subroutines
(2)   55/  FF1928 :                     ; ----------------------------------------------------------------
(2)   56/  FF1928 :                     
(2)   57/  FF1928 :                     ; --------------------------------------------------------
(2)   58/  FF1928 :                     ; Sound_PlaySample
(2)   59/  FF1928 :                     ; 
(2)   60/  FF1928 :                     ; Play sound sample
(2)   61/  FF1928 :                     ; 
(2)   62/  FF1928 :                     ; Input:
(2)   63/  FF1928 :                     ; d0 | LONG - Start address
(2)   64/  FF1928 :                     ; d1 | LONG - End address
(2)   65/  FF1928 :                     ; d2 | LONG - Loop sample point / -1: dont loop
(2)   66/  FF1928 :                     ; d3 | WORD - Pitch
(2)   67/  FF1928 :                     ; --------------------------------------------------------
(2)   68/  FF1928 :                     
(2)   69/  FF1928 :                     Sound_PlaySample:
(2)   70/  FF1928 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(2)   71/  FF1930 : 49F9 00A0 0000      		lea	(z80_cpu),a4
(2)   72/  FF1936 : 2800                		move.l	d0,d4
(2)   73/  FF1938 : 7C00                		moveq	#0,d6
(2)   74/  FF193A : 4A82                		tst.l	d2
(2)   75/  FF193C : 6B06                		bmi.s	.wait
(2)   76/  FF193E : 7C01                		moveq	#1,d6
(2)   77/  FF1940 : 2A02                		move.l	d2,d5
(2)   78/  FF1942 : DA80                		add.l	d0,d5
(2)   79/  FF1944 :                     .wait:
(2)   80/  FF1944 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(2)   81/  FF194C : 66F6                		bne.s	.wait
(2)   82/  FF194E : 1946 080B           		move.b	d6,sndWavFlags(a4)
(2)   83/  FF1952 :                     
(2)   84/  FF1952 :                     	; Set loop
(2)   85/  FF1952 : 4A46                		tst.w	d6
(2)   86/  FF1954 : 6716                		beq.s	.nolp2
(2)   87/  FF1956 : 1945 0806           		move.b	d5,sndWavLoop(a4)
(2)   88/  FF195A : E08D                		lsr.l	#8,d5
(2)   89/  FF195C : 1C05                		move.b	d5,d6
(2)   90/  FF195E : 8C3C 0080           		or.b	#$80,d6
(2)   91/  FF1962 : 1946 0807           		move.b	d6,sndWavLoop+1(a4)
(2)   92/  FF1966 : EE8D                		lsr.l	#7,d5
(2)   93/  FF1968 : 1945 0808           		move.b	d5,sndWavLoop+2(a4)
(2)   94/  FF196C :                     .nolp2:
(2)   95/  FF196C :                     		
(2)   96/  FF196C :                     	; Set start
(2)   97/  FF196C : 1944 0800           		move.b	d4,sndWavStart(a4)
(2)   98/  FF1970 : E08C                		lsr.l	#8,d4
(2)   99/  FF1972 : 1C04                		move.b	d4,d6
(2)  100/  FF1974 : 8C3C 0080           		or.b	#$80,d6
(2)  101/  FF1978 : 1946 0801           		move.b	d6,sndWavStart+1(a4)
(2)  102/  FF197C : EE8C                		lsr.l	#7,d4
(2)  103/  FF197E : 1944 0802           		move.b	d4,sndWavStart+2(a4)
(2)  104/  FF1982 :                     	; Set end
(2)  105/  FF1982 : 2A01                		move.l	d1,d5
(2)  106/  FF1984 : 1945 0803           		move.b	d5,sndWavEnd(a4)
(2)  107/  FF1988 : E08D                		lsr.l	#8,d5
(2)  108/  FF198A : 1C05                		move.b	d5,d6
(2)  109/  FF198C :                     ; 		or.b	#$80,d6
(2)  110/  FF198C : 1946 0804           		move.b	d6,sndWavEnd+1(a4)
(2)  111/  FF1990 : EE8D                		lsr.l	#7,d5
(2)  112/  FF1992 : 1945 0805           		move.b	d5,sndWavEnd+2(a4)
(2)  113/  FF1996 :                     	; Set pitch
(2)  114/  FF1996 : 3803                		move.w	d3,d4
(2)  115/  FF1998 : 1944 0809           		move.b	d4,sndWavPitch(a4)
(2)  116/  FF199C : E08C                		lsr.l	#8,d4
(2)  117/  FF199E : 1944 080A           		move.b	d4,sndWavPitch+1(a4)
(2)  118/  FF19A2 :                     
(2)  119/  FF19A2 :                     	; Request start
(2)  120/  FF19A2 : 197C 0001 080C      		move.b	#1,sndWavReq(a4)
(2)  121/  FF19A8 :                     
(2)  122/  FF19A8 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(2)  123/  FF19B0 : 4E75                		rts
(2)  124/  FF19B2 :                     
(2)  125/  FF19B2 :                     ; --------------------------------------------------------
(2)  126/  FF19B2 :                     ; Sound_SetPitch
(2)  127/  FF19B2 :                     ; 
(2)  128/  FF19B2 :                     ; Set pitch number
(2)  129/  FF19B2 :                     ; 
(2)  130/  FF19B2 :                     ; Input:
(2)  131/  FF19B2 :                     ; d0 | WORD - Pitch data
(2)  132/  FF19B2 :                     ; --------------------------------------------------------
(2)  133/  FF19B2 :                     
(2)  134/  FF19B2 :                     Sound_SetPitch:
(2)  135/  FF19B2 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(2)  136/  FF19BA : 49F9 00A0 0000      		lea	(z80_cpu),a4
(2)  137/  FF19C0 : 3800                		move.w	d0,d4
(2)  138/  FF19C2 : E04C                		lsr.w	#8,d4
(2)  139/  FF19C4 : 3A00                		move.w	d0,d5
(2)  140/  FF19C6 :                     .wait:
(2)  141/  FF19C6 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(2)  142/  FF19CE : 66F6                		bne.s	.wait
(2)  143/  FF19D0 : 1945 0809           		move.b	d5,sndWavPitch(a4)
(2)  144/  FF19D4 : 1944 080A           		move.b	d4,sndWavPitch+1(a4)
(2)  145/  FF19D8 : 197C 0004 080C      		move.b	#4,sndWavReq(a4)	; Request pitch
(2)  146/  FF19DE : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(2)  147/  FF19E6 : 4E75                		rts
(2)  148/  FF19E8 :                     		
(2)  149/  FF19E8 :                     ; ====================================================================
(2)  150/  FF19E8 :                     ; ----------------------------------------------------------------
(2)  151/  FF19E8 :                     ; Sound: Z80 code
(2)  152/  FF19E8 :                     ; ----------------------------------------------------------------
(2)  153/  FF19E8 :                     
(2)  154/  FF19E8 :                     Z80_CODE:
(2)  155/  FF19E8 :                     		cpu Z80
(2)  156/       0 :                     		phase 0
(2)  157/       0 :                     ; --------------------------------------------------------
(2)  158/       0 :                     ; Z80 Starts here
(2)  159/       0 :                     ; --------------------------------------------------------
(2)  160/       0 :                     
(2)  161/       0 : F3                  		di
(2)  162/       1 : ED 56               		im	1
(2)  163/       3 : 31 00 20            		ld	sp,2000h
(2)  164/       6 : 18 3F               		jr	z_init
(2)  165/       8 :                     
(2)  166/       8 :                     ; ------------------------------------------------
(2)  167/       8 :                     ; RST 8
(2)  168/       8 :                     ; ------------------------------------------------
(2)  169/       8 :                     
(2)  170/       8 : E5                  		push	hl
(2)  171/       9 : 21 00 60            		ld	hl,zbank
(2)  172/       C : 77                  		ld	(hl),a
(2)  173/       D : 1F                  		rra
(2)  174/       E : 77                  		ld	(hl),a
(2)  175/       F : 1F                  		rra
(2)  176/      10 : 77                  		ld	(hl),a
(2)  177/      11 : 1F                  		rra
(2)  178/      12 : 77                  		ld	(hl),a
(2)  179/      13 : 1F                  		rra
(2)  180/      14 : 77                  		ld	(hl),a
(2)  181/      15 : 1F                  		rra
(2)  182/      16 : 77                  		ld	(hl),a
(2)  183/      17 : 1F                  		rra
(2)  184/      18 : 77                  		ld	(hl),a
(2)  185/      19 : 1F                  		rra
(2)  186/      1A : 77                  		ld	(hl),a
(2)  187/      1B : 1F                  		rra
(2)  189/      1C : 36 01               		ld	(hl),1
(2)  193/      1E : E1                  		pop	hl
(2)  194/      1F : C9                  		ret
(2)  195/      20 :                     
(2)  196/      20 :                     ; ------------------------------------------------
(2)  197/      20 :                     ; RST 20h
(2)  198/      20 :                     ; ------------------------------------------------
(2)  199/      20 :                     
(2)  200/      20 : 00                  		nop
(2)  201/      21 : 00                  		nop
(2)  202/      22 : 00                  		nop
(2)  203/      23 : 00                  		nop
(2)  204/      24 : 00                  		nop
(2)  205/      25 : 00                  		nop
(2)  206/      26 : 00                  		nop
(2)  207/      27 : 00                  		nop
(2)  208/      28 :                     		
(2)  209/      28 :                     ; ------------------------------------------------
(2)  210/      28 :                     ; RST 28h
(2)  211/      28 :                     ; ------------------------------------------------
(2)  212/      28 :                     
(2)  213/      28 : 00                  		nop
(2)  214/      29 : 00                  		nop
(2)  215/      2A : 00                  		nop
(2)  216/      2B : 00                  		nop
(2)  217/      2C : 00                  		nop
(2)  218/      2D : 00                  		nop
(2)  219/      2E : 00                  		nop
(2)  220/      2F : 00                  		nop
(2)  221/      30 :                     
(2)  222/      30 :                     ; ------------------------------------------------
(2)  223/      30 :                     ; RST 30h
(2)  224/      30 :                     ; ------------------------------------------------
(2)  225/      30 :                     
(2)  226/      30 : 00                  		nop
(2)  227/      31 : 00                  		nop
(2)  228/      32 : 00                  		nop
(2)  229/      33 : 00                  		nop
(2)  230/      34 : 00                  		nop
(2)  231/      35 : 00                  		nop
(2)  232/      36 : 00                  		nop
(2)  233/      37 : 00                  		nop
(2)  234/      38 :                     
(2)  235/      38 :                     ; ------------------------------------------------
(2)  236/      38 :                     ; RST 38h
(2)  237/      38 :                     ; ------------------------------------------------
(2)  238/      38 :                     
(2)  239/      38 : F3                  		di
(2)  240/      39 : F5                  		push	af
(2)  241/      3A : C5                  		push	bc
(2)  242/      3B : D5                  		push	de
(2)  243/      3C : E5                  		push	hl
(2)  244/      3D :                     		
(2)  245/      3D : CD 3E 01            		call	z_vint
(2)  246/      40 :                     
(2)  247/      40 : E1                  		pop	hl
(2)  248/      41 : D1                  		pop	de
(2)  249/      42 : C1                  		pop	bc
(2)  250/      43 : F1                  		pop	af
(2)  251/      44 : FB                  		ei
(2)  252/      45 : ED 45               		retn
(2)  253/      47 :                     
(2)  254/      47 :                     ; ========================================================
(2)  255/      47 :                     ; ------------------------------------------------
(2)  256/      47 :                     ; Init
(2)  257/      47 :                     ; ------------------------------------------------
(2)  258/      47 :                     
(2)  259/      47 :                     z_init:
(2)  260/      47 :                     ; 		ei
(2)  261/      47 : CD 52 01            		call	zsnd_init
(2)  262/      4A :                     
(2)  263/      4A :                     ; ========================================================
(2)  264/      4A :                     ; ------------------------------------------------
(2)  265/      4A :                     ; Loop
(2)  266/      4A :                     ; ------------------------------------------------
(2)  267/      4A :                     
(2)  268/      4A :                     .zloop:
(2)  269/      4A : 00                  		nop
(2)  270/      4B : 00                  		nop
(2)  271/      4C : 3A 0C 08            		ld	a,(sndWavReq)
(2)  272/      4F : B7                  		or	a
(2)  273/      50 : CA 4A 00            		jp	z,.zloop
(2)  274/      53 : F2 B8 00            		jp	p,.request
(2)  275/      56 : 78                  		ld	a,b
(2)  276/      57 : B1                  		or	c
(2)  277/      58 : CA A0 00            		jp	z,.exit
(2)  278/      5B :                     
(2)  279/      5B : 2A 6A 01            		ld	hl,(sndWavRead+1)	; xxxx.00
(2)  280/      5E : 7E                  		ld	a,(hl)
(2)  281/      5F : 32 01 40            		ld	(zym_data_1),a		; expects 2Ah at ctrl_1
(2)  282/      62 :                     	; 0000XX.XX
(2)  283/      62 : 0D                  		dec	c
(2)  284/      63 : 2A 69 01            		ld	hl,(sndWavRead)		; 00xx.xx + pitch
(2)  285/      66 : 19                  		add 	hl,de
(2)  286/      67 : 22 69 01            		ld	(sndWavRead),hl		; check for 0X00.00
(2)  287/      6A : D2 4A 00            		jp	nc,.zloop		; loop 1
(2)  288/      6D :                     	; 00XX00.00
(2)  289/      6D : 05                  		dec	b
(2)  290/      6E : 3A 6B 01            		ld	a,(sndWavRead+2)
(2)  291/      71 : 3C                  		inc 	a			; +01 xx00
(2)  292/      72 : FA 96 00            		jp	m,.midl
(2)  293/      75 :                     	; XX8000.00
(2)  294/      75 : D5                  		push	de
(2)  295/      76 : 5F                  		ld	e,a
(2)  296/      77 : 3A 6C 01            		ld	a,(sndWavBank)
(2)  297/      7A : 3C                  		inc	a			; next rom bank
(2)  298/      7B : 57                  		ld	d,a
(2)  299/      7C : 32 6C 01            		ld	(sndWavBank),a
(2)  300/      7F : CF                  		rst	8
(2)  301/      80 : 01 FF FF            		ld	bc,-1			; full size
(2)  302/      83 : 3A 05 08            		ld	a,(sndWavEndB)		; end bank
(2)  303/      86 : BA                  		cp	d			; bank current == end?
(2)  304/      87 : C2 92 00            		jp	nz,.nxtbnk
(2)  305/      8A : ED 4B 03 08         		ld	bc,(sndWavEnd)		; set end len
(2)  306/      8E : 78                  		ld	a,b
(2)  307/      8F : E6 7F               		and	7Fh
(2)  308/      91 : 47                  		ld	b,a
(2)  309/      92 :                     .nxtbnk:
(2)  310/      92 : 7B                  		ld	a,e
(2)  311/      93 : D1                  		pop	de
(2)  312/      94 : F6 80               		or	80h
(2)  313/      96 :                     .midl:
(2)  314/      96 : 32 6B 01            		ld	(sndWavRead+2),a	; save xx00
(2)  315/      99 : 3E 2A               		ld	a,2Ah			; just in case
(2)  316/      9B : 32 00 40            		ld	(zym_ctrl_1),a
(2)  317/      9E : 18 AA               		jr	.zloop
(2)  318/      A0 :                     		
(2)  319/      A0 :                     ; ----------------------------------------
(2)  320/      A0 :                     ; WAV FINISHED
(2)  321/      A0 :                     ; ----------------------------------------
(2)  322/      A0 :                     
(2)  323/      A0 :                     .exit:
(2)  324/      A0 : 3A 0B 08            		ld	a,(sndWavFlags)
(2)  325/      A3 : CB 47               		bit 	0,a
(2)  326/      A5 : C2 D6 00            		jp	nz,.mkloop
(2)  327/      A8 :                     
(2)  328/      A8 : 3E 2B               		ld	a,2Bh
(2)  329/      AA : 32 00 40            		ld	(zym_ctrl_1),a
(2)  330/      AD : AF                  		xor	a
(2)  331/      AE : 32 01 40            		ld	(zym_data_1),a
(2)  332/      B1 : 5F                  		ld	e,a
(2)  333/      B2 : E6 7F               		and	7Fh
(2)  334/      B4 : 32 0C 08            		ld	(sndWavReq),a
(2)  335/      B7 : 7B                  		ld	a,e
(2)  336/      B8 :                     
(2)  337/      B8 :                     ; ----------------------------------------
(2)  338/      B8 :                     ; WAV REQUEST
(2)  339/      B8 :                     ; 
(2)  340/      B8 :                     ; a - sndWavReq
(2)  341/      B8 :                     ; 01h new/reset
(2)  342/      B8 :                     ; 02h full stop 
(2)  343/      B8 :                     ; 03h pause/unpause
(2)  344/      B8 :                     ; 04h pitch change
(2)  345/      B8 :                     ; ----------------------------------------
(2)  346/      B8 :                     
(2)  347/      B8 :                     .request:
(2)  348/      B8 : E6 0F               		and	1111b
(2)  349/      BA : 3D                  		dec	a
(2)  350/      BB : 87                  		add	a,a
(2)  351/      BC : 11 00 00            		ld	de,0
(2)  352/      BF : 5F                  		ld	e,a
(2)  353/      C0 : 21 CE 00            		ld	hl,.list
(2)  354/      C3 : 19                  		add	hl,de
(2)  355/      C4 : 5E                  		ld	e,(hl)
(2)  356/      C5 : 23                  		inc 	hl
(2)  357/      C6 : 56                  		ld	d,(hl)
(2)  358/      C7 : 62                  		ld	h,d
(2)  359/      C8 : 6B                  		ld	l,e
(2)  360/      C9 : AF                  		xor	a
(2)  361/      CA : 32 0C 08            		ld	(sndWavReq),a
(2)  362/      CD : E9                  		jp	(hl)
(2)  363/      CE :                     		
(2)  364/      CE :                     ; ----------------------------------------
(2)  365/      CE :                     
(2)  366/      CE :                     .list:
(2)  367/      CE : DE 00               		dw .task1
(2)  368/      D0 : 23 01               		dw .task2
(2)  369/      D2 : 2F 01               		dw .task3
(2)  370/      D4 : 32 01               		dw .task4
(2)  371/      D6 :                     
(2)  372/      D6 :                     ; ----------------------------------------
(2)  373/      D6 :                     
(2)  374/      D6 :                     .mkloop:
(2)  375/      D6 : 2A 06 08            		ld	hl,(sndWavLoop)
(2)  376/      D9 : 3A 08 08            		ld	a,(sndWavLoopB)
(2)  377/      DC : 18 06               		jr	.restart
(2)  378/      DE :                     		
(2)  379/      DE :                     ; ----------------------------------------
(2)  380/      DE :                     ; $01 - Reset
(2)  381/      DE :                     ; ----------------------------------------
(2)  382/      DE :                     
(2)  383/      DE :                     .task1:
(2)  384/      DE : 2A 00 08            		ld	hl,(sndWavStart)
(2)  385/      E1 : 3A 02 08            		ld	a,(sndWavStartB)
(2)  386/      E4 :                     
(2)  387/      E4 :                     .restart:
(2)  388/      E4 : CB FC               		set 	7,h
(2)  389/      E6 : 22 6A 01            		ld	(sndWavRead+1),hl
(2)  390/      E9 : 32 6C 01            		ld	(sndWavBank),a
(2)  391/      EC : CF                  		rst	8
(2)  392/      ED : AF                  		xor	a
(2)  393/      EE : 32 69 01            		ld	(sndWavRead),a
(2)  394/      F1 : ED 5B 09 08         		ld	de,(sndWavPitch)	; pitch speed
(2)  395/      F5 :                     		
(2)  396/      F5 : 3E 2B               		ld	a,2Bh
(2)  397/      F7 : 32 00 40            		ld	(zym_ctrl_1),a
(2)  398/      FA : 3A 0C 08            		ld	a,(sndWavReq)
(2)  399/      FD : F6 80               		or	80h
(2)  400/      FF : 32 0C 08            		ld	(sndWavReq),a
(2)  401/     102 : 32 01 40            		ld	(zym_data_1),a
(2)  402/     105 : 3E 2A               		ld	a,2Ah
(2)  403/     107 : 32 00 40            		ld	(zym_ctrl_1),a
(2)  404/     10A :                     		
(2)  405/     10A :                     	; check if same bank
(2)  406/     10A : 01 FF FF            		ld	bc,-1
(2)  407/     10D : 3A 02 08            		ld	a,(sndWavStartB)
(2)  408/     110 : 4F                  		ld	c,a
(2)  409/     111 : 3A 05 08            		ld	a,(sndWavEndB)
(2)  410/     114 : B9                  		cp	c
(2)  411/     115 : C2 4A 00            		jp	nz,.zloop
(2)  412/     118 : ED 4B 03 08         		ld	bc,(sndWavEnd)		; end len
(2)  413/     11C : 78                  		ld	a,b
(2)  414/     11D : E6 7F               		and	7Fh
(2)  415/     11F : 47                  		ld	b,a
(2)  416/     120 : C3 4A 00            		jp	.zloop
(2)  417/     123 :                     	
(2)  418/     123 :                     ; ----------------------------------------
(2)  419/     123 :                     ; $02 - Stop
(2)  420/     123 :                     ; ----------------------------------------
(2)  421/     123 :                     
(2)  422/     123 :                     .task2:
(2)  423/     123 : 3E 2B               		ld	a,2Bh
(2)  424/     125 : 32 00 40            		ld	(zym_ctrl_1),a
(2)  425/     128 : AF                  		xor	a
(2)  426/     129 : 32 01 40            		ld	(zym_data_1),a
(2)  427/     12C : C3 4A 00            		jp	.zloop
(2)  428/     12F :                     		
(2)  429/     12F :                     ; ----------------------------------------
(2)  430/     12F :                     ; $03 - Pause/Unpause
(2)  431/     12F :                     ; ----------------------------------------
(2)  432/     12F :                     
(2)  433/     12F :                     .task3:
(2)  434/     12F : C3 4A 00            		jp	.zloop
(2)  435/     132 :                     
(2)  436/     132 :                     ; ----------------------------------------
(2)  437/     132 :                     ; $04 - Pitch change
(2)  438/     132 :                     ; ----------------------------------------
(2)  439/     132 :                     
(2)  440/     132 :                     .task4:
(2)  441/     132 : ED 5B 09 08         		ld	de,(sndWavPitch)	; pitch speed
(2)  442/     136 : 3E 80               		ld	a,80h
(2)  443/     138 : 32 0C 08            		ld	(sndWavReq),a
(2)  444/     13B : C3 4A 00            		jp	.zloop
(2)  445/     13E :                     
(2)  446/     13E :                     ; ========================================================		
(2)  447/     13E :                     ; ------------------------------------------------
(2)  448/     13E :                     ; VBlank
(2)  449/     13E :                     ; ------------------------------------------------
(2)  450/     13E :                     
(2)  451/     13E :                     z_vint:
(2)  452/     13E :                     
(2)  453/     13E :                     	; Return WAVE byte
(2)  454/     13E : 3A 0C 08            		ld	a,(sndWavReq)
(2)  455/     141 : B7                  		or	a
(2)  456/     142 : F2 51 01            		jp	p,.nope
(2)  457/     145 : 2A 6A 01            		ld	hl,(sndWavRead+1)
(2)  458/     148 : 3E 2A               		ld	a,2Ah
(2)  459/     14A : 32 00 40            		ld	(zym_ctrl_1),a
(2)  460/     14D : 7E                  		ld	a,(hl)
(2)  461/     14E : 32 01 40            		ld	(zym_data_1),a
(2)  462/     151 :                     .nope:
(2)  463/     151 : C9                  		ret
(2)  464/     152 :                     
(2)  465/     152 :                     ; ========================================================		
(2)  466/     152 :                     ; ------------------------------------------------
(2)  467/     152 :                     ; Subroutines
(2)  468/     152 :                     ; ------------------------------------------------
(2)  469/     152 :                     
(2)  470/     152 :                     zsnd_init:
(2)  471/     152 : 3E 2B               		ld	a,2Bh
(2)  472/     154 : 32 00 40            		ld	(zym_ctrl_1),a
(2)  473/     157 : AF                  		xor	a
(2)  474/     158 : 32 01 40            		ld	(zym_data_1),a
(2)  475/     15B :                     		
(2)  476/     15B : 21 11 7F            		ld	hl,zpsg_ctrl
(2)  477/     15E : 01 BF 9F            		ld	bc,9FBFh
(2)  478/     161 : 11 FF DF            		ld	de,0DFFFh
(2)  479/     164 : 70                  		ld	(hl),b
(2)  480/     165 : 71                  		ld	(hl),c
(2)  481/     166 : 72                  		ld	(hl),d
(2)  482/     167 : 73                  		ld	(hl),e
(2)  483/     168 :                     
(2)  484/     168 :                     	; FM/PSG goes here
(2)  485/     168 : C9                  		ret
(2)  486/     169 :                     
(2)  487/     169 :                     ; ========================================================
(2)  488/     169 :                     ; ------------------------------------------------
(2)  489/     169 :                     ; Buffer
(2)  490/     169 :                     ; ------------------------------------------------
(2)  491/     169 :                     
(2)  492/     169 : 00                  sndWavRead	db 0		; 000000.XX
(2)  493/     16A : 00 00               		dw 0		; 00XXXX.00
(2)  494/     16C : 00                  sndWavBank	db 0		; XX0000.00
(2)  495/     16D : 00                  sndWavCopy	db 0
(2)  496/     16E :                     
(2)  497/     16E :                     ; ========================================================
(2)  498/     16E :                     ; ------------------------------------------------
(2)  499/     16E :                     ; User input
(2)  500/     16E :                     ; ------------------------------------------------
(2)  501/     16E :                     
(2)  502/     16E :                     ; --------------------------------------------------------
(2)  503/     16E :                     
(2)  504/     16E :                     		cpu 68000
(2)  505/     16E :                     		padding off
(2)  506/  FF1B56 :                     		phase Z80_CODE+*
(2)  507/  FF1B56 :                     
(2)  508/  FF1B56 :                     Z80_END:
(2)  509/  FF1B56 :                     		align 2
(2)  510/  FF1B56 :                     		
(2)  511/  FF1B56 :                     ; ====================================================================
(2)  512/  FF1B56 :                     ; ----------------------------------------------------------------
(2)  513/  FF1B56 :                     ; Sound data
(2)  514/  FF1B56 :                     ; ----------------------------------------------------------------
(2)  515/  FF1B56 :                     
(1)   55/  FF1B56 :                     
(1)   56/  FF1B56 :                     ; ====================================================================
(1)   57/  FF1B56 :                     ; --------------------------------------------------------
(1)   58/  FF1B56 :                     ; Initialize system
(1)   59/  FF1B56 :                     ; --------------------------------------------------------
(1)   60/  FF1B56 :                     
(1)   61/  FF1B56 :                     MD_Main:
(1)   62/  FF1B56 : 6100 FD60           		bsr 	Sound_init
(1)   63/  FF1B5A : 6100 E764           		bsr 	Video_init
(1)   64/  FF1B5E : 6100 E4A0           		bsr	System_Init
(1)   65/  FF1B62 :                     		
(1)   66/  FF1B62 :                     ; ====================================================================
(1)   67/  FF1B62 :                     ; ------------------------------------------------------
(1)   68/  FF1B62 :                     ; Code start
(1)   69/  FF1B62 :                     ; ------------------------------------------------------
(1)   70/  FF1B62 :                     	
(1)   71/  FF1B62 : 46FC 2700           		move.w	#$2700,sr
(1)   72/  FF1B66 : 6100 E6D0           		bsr	Mode_Init
(1)   73/  FF1B6A : 6100 E940           		bsr	Video_PrintInit
(1)   74/  FF1B6E :                     ; 		lea	str_Title(pc),a0
(1)   75/  FF1B6E :                     ; 		move.l	#locate(0,0,0),d0
(1)   76/  FF1B6E :                     ; 		bsr	Video_Print
(1)   77/  FF1B6E : 08F9 0006 FFFF 93BF 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
(1)   78/  FF1B76 : 6100 E7E0           		bsr	Video_Update
(1)   79/  FF1B7A :                     		
(1)   80/  FF1B7A : 41FA 031A           		lea	MdPal_Bg(pc),a0
(1)   81/  FF1B7E : 303C 0000           		move.w	#0,d0
(1)   82/  FF1B82 : 323C 000F           		move.w	#16-1,d1
(1)   83/  FF1B86 : 6100 E7F0           		bsr	Video_LoadPal
(1)   84/  FF1B8A : 41FA 032A           		lea	MdMap_Bg(pc),a0
(1)   85/  FF1B8E : 203C 0001 0000      		move.l	#locate(1,0,0),d0
(1)   86/  FF1B94 : 223C 003F 001F      		move.l	#mapsize(512,256),d1
(1)   87/  FF1B9A : 343C 0001           		move.w	#1,d2
(1)   88/  FF1B9E : 6100 E802           		bsr	Video_LoadMap
(1)   89/  FF1BA2 : 203C 0001 0000      		move.l	#MdGfx_Bg,d0
(1)   90/  FF1BA8 : 323C 2EC0           		move.w	#(MdGfx_Bg_e-MdGfx_Bg),d1
(1)   91/  FF1BAC : 343C 0001           		move.w	#1,d2
(1)   92/  FF1BB0 : 6100 EBEC           		bsr	Video_LoadArt
(1)   93/  FF1BB4 :                     		
(1)   94/  FF1BB4 :                     ; 		move.l	#CAMERA_ANIM,(RAM_MdCamera+cam_animdata)
(1)   95/  FF1BB4 : 21FC 0000 0000 99D6 		move.l	#0,(RAM_MdCamera+cam_animdata)
(1)   96/  FF1BBC : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)   97/  FF1BC4 :                     
(1)   98/  FF1BC4 :                     ; ====================================================================
(1)   99/  FF1BC4 :                     ; ------------------------------------------------------
(1)  100/  FF1BC4 :                     ; Loop
(1)  101/  FF1BC4 :                     ; ------------------------------------------------------
(1)  102/  FF1BC4 :                     
(1)  103/  FF1BC4 :                     .loop:
(1)  104/  FF1BC4 : 6100 E500           		bsr	System_VSync
(1)  105/  FF1BC8 : 23FC 7C00 0003 00C0 		move.l	#$7C000003,(vdp_ctrl).l
                    0004                
(1)  106/  FF1BD2 : 3039 FFFF 9A1E      		move.w	(RAM_BgCamCurr).l,d0
(1)  107/  FF1BD8 : E648                		lsr.w	#3,d0
(1)  108/  FF1BDA : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)  109/  FF1BE2 : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1)  110/  FF1BE8 : 41FA 0236           		lea	str_Status(pc),a0
(1)  111/  FF1BEC : 203C 0000 0000      		move.l	#locate(0,0,0),d0
(1)  112/  FF1BF2 : 6100 E8DC           		bsr	Video_Print
(1)  113/  FF1BF6 :                     		
(1)  114/  FF1BF6 :                     	; Camera animation
(1)  115/  FF1BF6 : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  116/  FF1BFA : 2010                		move.l	cam_animdata(a0),d0		; If 0 == No animation
(1)  117/  FF1BFC : 6764                		beq.s	.no_camanim
(1)  118/  FF1BFE : 04A8 0000 0001 0008 		sub.l	#1,cam_animtimer(a0)
(1)  119/  FF1C06 : 6A5A                		bpl.s	.no_camanim
(1)  120/  FF1C08 : 217C 0000 0002 0008 		move.l	#1+1,cam_animtimer(a0)		; TEMPORAL timer
(1)  121/  FF1C10 : 2240                		move.l	d0,a1
(1)  122/  FF1C12 : 2219                		move.l	(a1)+,d1
(1)  123/  FF1C14 : 2028 0004           		move.l	cam_animframe(a0),d0
(1)  124/  FF1C18 : D0BC 0000 0001      		add.l	#1,d0
(1)  125/  FF1C1E : B081                		cmp.l	d1,d0
(1)  126/  FF1C20 : 6602                		bne.s	.on_frames
(1)  127/  FF1C22 : 7000                		moveq	#0,d0
(1)  128/  FF1C24 :                     .on_frames:
(1)  129/  FF1C24 : 2140 0004           		move.l	d0,cam_animframe(a0)
(1)  130/  FF1C28 : C0FC 0018           		mulu.w	#$18,d0
(1)  131/  FF1C2C : D2C0                		adda	d0,a1
(1)  132/  FF1C2E : 2159 0010           		move.l	(a1)+,cam_x_pos(a0)
(1)  133/  FF1C32 : 2159 0014           		move.l	(a1)+,cam_y_pos(a0)
(1)  134/  FF1C36 : 2159 0018           		move.l	(a1)+,cam_z_pos(a0)
(1)  135/  FF1C3A : 2219                		move.l	(a1)+,d1
(1)  136/  FF1C3C : 4481                		neg.l	d1
(1)  137/  FF1C3E : 2141 001C           		move.l	d1,cam_x_rot(a0)
(1)  138/  FF1C42 : 2159 0020           		move.l	(a1)+,cam_y_rot(a0)
(1)  139/  FF1C46 : 2159 0024           		move.l	(a1)+,cam_z_rot(a0)
(1)  140/  FF1C4A : 2028 001C           		move.l	cam_x_rot(a0),d0
(1)  141/  FF1C4E : 4480                		neg.l	d0
(1)  142/  FF1C50 : E088                		lsr.l	#8,d0
(1)  143/  FF1C52 : EA88                		lsr.l	#5,d0
(1)  144/  FF1C54 : 33C0 FFFF 9A1A      		move.w	d0,(RAM_BgCamera).l
(1)  145/  FF1C5A : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  146/  FF1C62 :                     .no_camanim:
(1)  147/  FF1C62 :                     
(1)  148/  FF1C62 :                     
(1)  149/  FF1C62 :                     	; Foward/Backward/Left/Right
(1)  150/  FF1C62 : 6168                		bsr	MdMdl_Usercontrol
(1)  151/  FF1C64 : 4A79 FFFF 9A22      		tst.w	(RAM_MdMdlsUpd).l
(1)  152/  FF1C6A : 6700 FF58           		beq	.loop
(1)  153/  FF1C6E : 4279 FFFF 9A22      		clr.w	(RAM_MdMdlsUpd).l
(1)  154/  FF1C74 : 6104                		bsr	MdMars_TrsnfrMdls
(1)  155/  FF1C76 : 6000 FF4C           		bra	.loop
(1)  156/  FF1C7A :                     		
(1)  157/  FF1C7A :                     ; ====================================================================
(1)  158/  FF1C7A :                     ; ------------------------------------------------------
(1)  159/  FF1C7A :                     ; Subroutines
(1)  160/  FF1C7A :                     ; ------------------------------------------------------
(1)  161/  FF1C7A :                     
(1)  162/  FF1C7A :                     MdMars_TrsnfrMdls:
(1)  163/  FF1C7A : 41F9 00A1 5100      		lea	(sysmars_reg),a0
(1)  164/  FF1C80 : 4A28 002F           		tst.b	comm15(a0)
(1)  165/  FF1C84 : 6644                		bne	.no_start
(1)  166/  FF1C86 : 117C 0001 002F      		move.b	#1,comm15(a0)
(1)  167/  FF1C8C : 41F9 00A1 5128      		lea	(sysmars_reg+comm8),a0
(1)  168/  FF1C92 : 43F8 99D6           		lea	(RAM_MdCamera),a1
(1)  169/  FF1C96 : 343C 0009           		move.w	#(sizeof_camera/4)-1,d2
(1)  170/  FF1C9A :                     .paste:
(1)  171/  FF1C9A : 4E71                		nop
(1)  172/  FF1C9C : 4E71                		nop
(1)  173/  FF1C9E : 4E71                		nop
(1)  174/  FF1CA0 : 3010                		move.w	(a0),d0
(1)  175/  FF1CA2 : 66F6                		bne.s	.paste
(1)  176/  FF1CA4 : 3019                		move.w	(a1)+,d0
(1)  177/  FF1CA6 : 3140 0002           		move.w	d0,2(a0)
(1)  178/  FF1CAA : 3019                		move.w	(a1)+,d0
(1)  179/  FF1CAC : 3140 0004           		move.w	d0,4(a0)
(1)  180/  FF1CB0 : 30BC 0001           		move.w	#1,(a0)
(1)  181/  FF1CB4 : 51CA FFE4           		dbf	d2,.paste
(1)  182/  FF1CB8 :                     
(1)  183/  FF1CB8 :                     .busy_2:
(1)  184/  FF1CB8 : 3010                		move.w	(a0),d0				; Wait Slave response
(1)  185/  FF1CBA : 66FC                		bne.s	.busy_2
(1)  186/  FF1CBC : 30BC 0002           		move.w	#2,(a0)				; Transfer finish
(1)  187/  FF1CC0 : 33F9 FFFF 9A1A FFFF 		move.w	(RAM_BgCamera).l,(RAM_BgCamCurr).l
                    9A1E                
(1)  188/  FF1CCA :                     .no_start:
(1)  189/  FF1CCA : 4E75                		rts
(1)  190/  FF1CCC :                     
(1)  191/  FF1CCC :                     MdMdl_Usercontrol:
(1)  192/  FF1CCC : 2A3C 0000 0400      		move.l	#var_MoveSpd,d5
(1)  193/  FF1CD2 : 2C3C FFFF FC00      		move.l	#-var_MoveSpd,d6
(1)  194/  FF1CD8 : 3E38 9002           		move.w	(Controller_1+on_hold),d7
(1)  195/  FF1CDC : 0807 0000           		btst	#bitJoyUp,d7
(1)  196/  FF1CE0 : 6716                		beq.s	.no_up
(1)  197/  FF1CE2 : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  198/  FF1CEA : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  199/  FF1CEE : 2028 0018           		move.l	cam_z_pos(a0),d0
(1)  200/  FF1CF2 : D085                		add.l	d5,d0
(1)  201/  FF1CF4 : 2140 0018           		move.l	d0,cam_z_pos(a0)
(1)  202/  FF1CF8 :                     .no_up:
(1)  203/  FF1CF8 : 0807 0001           		btst	#bitJoyDown,d7
(1)  204/  FF1CFC : 6716                		beq.s	.no_dw
(1)  205/  FF1CFE : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  206/  FF1D06 : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  207/  FF1D0A : 2028 0018           		move.l	cam_z_pos(a0),d0
(1)  208/  FF1D0E : D086                		add.l	d6,d0
(1)  209/  FF1D10 : 2140 0018           		move.l	d0,cam_z_pos(a0)
(1)  210/  FF1D14 :                     .no_dw:
(1)  211/  FF1D14 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  212/  FF1D18 : 6716                		beq.s	.no_lf
(1)  213/  FF1D1A : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  214/  FF1D22 : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  215/  FF1D26 : 2028 0010           		move.l	cam_x_pos(a0),d0
(1)  216/  FF1D2A : D086                		add.l	d6,d0
(1)  217/  FF1D2C : 2140 0010           		move.l	d0,cam_x_pos(a0)
(1)  218/  FF1D30 :                     .no_lf:
(1)  219/  FF1D30 : 0807 0003           		btst	#bitJoyRight,d7
(1)  220/  FF1D34 : 6716                		beq.s	.no_rg
(1)  221/  FF1D36 : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  222/  FF1D3E : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  223/  FF1D42 : 2028 0010           		move.l	cam_x_pos(a0),d0
(1)  224/  FF1D46 : D085                		add.l	d5,d0
(1)  225/  FF1D48 : 2140 0010           		move.l	d0,cam_x_pos(a0)
(1)  226/  FF1D4C :                     .no_rg:
(1)  227/  FF1D4C :                     
(1)  228/  FF1D4C : 0807 0006           		btst	#bitJoyA,d7
(1)  229/  FF1D50 : 6724                		beq.s	.no_a
(1)  230/  FF1D52 : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  231/  FF1D5A : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  232/  FF1D5E : 2028 001C           		move.l	cam_x_rot(a0),d0
(1)  233/  FF1D62 : 2206                		move.l	d6,d1
(1)  234/  FF1D64 : D081                		add.l	d1,d0
(1)  235/  FF1D66 : 2140 001C           		move.l	d0,cam_x_rot(a0)
(1)  236/  FF1D6A : E088                		lsr.l	#8,d0
(1)  237/  FF1D6C : EA88                		lsr.l	#5,d0
(1)  238/  FF1D6E : 4480                		neg.l	d0
(1)  239/  FF1D70 : 33C0 FFFF 9A1A      		move.w	d0,(RAM_BgCamera).l
(1)  240/  FF1D76 :                     .no_a:
(1)  241/  FF1D76 : 0807 0004           		btst	#bitJoyB,d7
(1)  242/  FF1D7A : 6724                		beq.s	.no_b
(1)  243/  FF1D7C : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  244/  FF1D84 : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  245/  FF1D88 : 2028 001C           		move.l	cam_x_rot(a0),d0
(1)  246/  FF1D8C : 2205                		move.l	d5,d1
(1)  247/  FF1D8E : D081                		add.l	d1,d0
(1)  248/  FF1D90 : 2140 001C           		move.l	d0,cam_x_rot(a0)
(1)  249/  FF1D94 : E088                		lsr.l	#8,d0
(1)  250/  FF1D96 : EA88                		lsr.l	#5,d0
(1)  251/  FF1D98 : 4480                		neg.l	d0
(1)  252/  FF1D9A : 33C0 FFFF 9A1A      		move.w	d0,(RAM_BgCamera).l
(1)  253/  FF1DA0 :                     .no_b:
(1)  254/  FF1DA0 :                     	; Reset all
(1)  255/  FF1DA0 : 0807 0005           		btst	#bitJoyC,d7
(1)  256/  FF1DA4 : 6726                		beq.s	.no_c
(1)  257/  FF1DA6 : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  258/  FF1DAE : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  259/  FF1DB2 : 7000                		moveq	#0,d0
(1)  260/  FF1DB4 : 2140 0010           		move.l	d0,cam_x_pos(a0)
(1)  261/  FF1DB8 : 2140 0014           		move.l	d0,cam_y_pos(a0)
(1)  262/  FF1DBC : 2140 0018           		move.l	d0,cam_z_pos(a0)
(1)  263/  FF1DC0 : 2140 001C           		move.l	d0,cam_x_rot(a0)
(1)  264/  FF1DC4 : 2140 0020           		move.l	d0,cam_y_rot(a0)
(1)  265/  FF1DC8 : 2140 0024           		move.l	d0,cam_z_rot(a0)
(1)  266/  FF1DCC :                     .no_c:
(1)  267/  FF1DCC :                     
(1)  268/  FF1DCC :                     
(1)  269/  FF1DCC :                     	; Up/Down
(1)  270/  FF1DCC : 3807                		move.w	d7,d4
(1)  271/  FF1DCE : C87C 0400           		and.w	#JoyX,d4
(1)  272/  FF1DD2 : 6716                		beq.s	.no_x
(1)  273/  FF1DD4 : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  274/  FF1DDC : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  275/  FF1DE0 : 2028 0014           		move.l	cam_y_pos(a0),d0
(1)  276/  FF1DE4 : D085                		add.l	d5,d0
(1)  277/  FF1DE6 : 2140 0014           		move.l	d0,cam_y_pos(a0)
(1)  278/  FF1DEA :                     .no_x:
(1)  279/  FF1DEA : 3807                		move.w	d7,d4
(1)  280/  FF1DEC : C87C 0200           		and.w	#JoyY,d4
(1)  281/  FF1DF0 : 6716                		beq.s	.no_y
(1)  282/  FF1DF2 : 33FC 0001 FFFF 9A22 		move.w	#1,(RAM_MdMdlsUpd).l
(1)  283/  FF1DFA : 41F8 99D6           		lea	(RAM_MdCamera),a0
(1)  284/  FF1DFE : 2028 0014           		move.l	cam_y_pos(a0),d0
(1)  285/  FF1E02 : D086                		add.l	d6,d0
(1)  286/  FF1E04 : 2140 0014           		move.l	d0,cam_y_pos(a0)
(1)  287/  FF1E08 :                     .no_y:
(1)  288/  FF1E08 : 4E75                		rts
(1)  289/  FF1E0A :                     
(1)  290/  FF1E0A :                     ; ====================================================================
(1)  291/  FF1E0A :                     ; ------------------------------------------------------
(1)  292/  FF1E0A :                     ; Interrupts
(1)  293/  FF1E0A :                     ; ------------------------------------------------------
(1)  294/  FF1E0A :                     
(1)  295/  FF1E0A :                     ; --------------------------------------------------
(1)  296/  FF1E0A :                     ; Custom VBlank
(1)  297/  FF1E0A :                     ; --------------------------------------------------
(1)  298/  FF1E0A :                     
(1)  299/  FF1E0A :                     ; --------------------------------------------------
(1)  300/  FF1E0A :                     ; Custom HBlank
(1)  301/  FF1E0A :                     ; --------------------------------------------------
(1)  302/  FF1E0A :                     
(1)  303/  FF1E0A :                     ; ====================================================================
(1)  304/  FF1E0A :                     ; ------------------------------------------------------
(1)  305/  FF1E0A :                     ; DATA
(1)  306/  FF1E0A :                     ; 
(1)  307/  FF1E0A :                     ; short stuff goes here
(1)  308/  FF1E0A :                     ; ------------------------------------------------------
(1)  309/  FF1E0A :                     
(1)  310/  FF1E0A :                     		align 2
(1)  311/  FF1E0A : 5072 6F6A 6563 7420 str_Title:	dc.b "Project Shinrinx-MARS",0
                    5368 696E 7269 6E78 
                    2D4D 4152 5300      
(1)  312/  FF1E20 :                     		align 2
(1)  313/  FF1E20 :                     
(1)  314/  FF1E20 :                     str_Status:
(1)  315/  FF1E20 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w         MD: \\l",$A
                    205C 7720 2020 2020 
                    2020 2020 4D44 3A20 
                    5C6C 0A             
(1)  316/  FF1E3B : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1)  317/  FF1E47 : 5C6C 205C 6C20 5C6C 		dc.b "\\l \\l \\l",$A
                    0A                  
(1)  318/  FF1E50 : 5C6C 205C 6C20 5C6C 		dc.b "\\l \\l \\l",0
                    00                  
(1)  319/  FF1E59 : 00A1 5120           		dc.l sysmars_reg+comm0
(1)  320/  FF1E5D : 00A1 5122           		dc.l sysmars_reg+comm2
(1)  321/  FF1E61 : 00A1 5124           		dc.l sysmars_reg+comm4
(1)  322/  FF1E65 : 00A1 5126           		dc.l sysmars_reg+comm6
(1)  323/  FF1E69 : FFFF 9218           		dc.l RAM_FrameCount
(1)  324/  FF1E6D : 00A1 5128           		dc.l sysmars_reg+comm8
(1)  325/  FF1E71 : 00A1 512A           		dc.l sysmars_reg+comm10
(1)  326/  FF1E75 : 00A1 512C           		dc.l sysmars_reg+comm12
(1)  327/  FF1E79 : 00A1 512E           		dc.l sysmars_reg+comm14
(1)  328/  FF1E7D : FFFF 99E6           		dc.l RAM_MdCamera+cam_x_pos
(1)  329/  FF1E81 : FFFF 99EA           		dc.l RAM_MdCamera+cam_y_pos
(1)  330/  FF1E85 : FFFF 99EE           		dc.l RAM_MdCamera+cam_z_pos
(1)  331/  FF1E89 : FFFF 99F2           		dc.l RAM_MdCamera+cam_x_rot
(1)  332/  FF1E8D : FFFF 99F6           		dc.l RAM_MdCamera+cam_y_rot
(1)  333/  FF1E91 : FFFF 99FA           		dc.l RAM_MdCamera+cam_z_rot
(1)  334/  FF1E95 :                     		align 4
(1)  335/  FF1E96 :                     		
(1)  336/  FF1E96 :                     MdPal_Bg:
(1)  337/  FF1E96 :                     		binclude "data/md/bg/bg_pal.bin"
(1)  338/  FF1EB6 :                     		align 2
(1)  339/  FF1EB6 :                     MdMap_Bg:
(1)  340/  FF1EB6 :                     		binclude "data/md/bg/bg_map.bin"
(1)  341/  FF2CB6 :                     		align 2
(1)  342/  FF2CB6 :                     
      33/    35EC :                     		dephase
      34/    35EC :                     Engine_Code_end:
MD CODE uses: 2CB6
      36/    35EC :                     		message "MD CODE uses: \{Engine_Code_end-Engine_Code}"
      38/    35EC :                     	
      39/    35EC :                     ; ====================================================================
      40/    35EC :                     ; ----------------------------------------------------------------
      41/    35EC :                     ; SH2 CODE for 32X
      42/    35EC :                     ; ----------------------------------------------------------------
      43/    35EC :                     
      44/    35EC :                     		align 4
      45/    35EC :                     MARS_RAMDATA:
      46/    35EC :                     		include "code/mars.asm"
(1)    1/    35EC :                     ; ====================================================================		
(1)    2/    35EC :                     ; ----------------------------------------------------------------
(1)    3/    35EC :                     ; MARS SH2 Section
(1)    4/    35EC :                     ; 
(1)    5/    35EC :                     ; CODE for both CPUs
(1)    6/    35EC :                     ; RAM and some DATA go here
(1)    7/    35EC :                     ; ----------------------------------------------------------------
(1)    8/    35EC :                     
(1)    9/ 6000000 :                     		phase CS3			; now we are at SDRAM
(1)   10/ 6000000 :                     		cpu SH7600			; should be SH7095 but ASL doesn't have it, this is close enough
(1)   11/ 6000000 :                     
(1)   12/ 6000000 :                     ; =================================================================
(1)   13/ 6000000 :                     
(1)   14/ 6000000 :                     		include "system/mars/head.asm"
(2)    1/ 6000000 :                     ; ====================================================================		
(2)    2/ 6000000 :                     ; ----------------------------------------------------------------
(2)    3/ 6000000 :                     ; MASTER CPU HEAD
(2)    4/ 6000000 :                     ; ----------------------------------------------------------------
(2)    5/ 6000000 :                     
(2)    6/ 6000000 :                     		align 4
(2)    7/ 6000000 :                     SH2_Master:
(2)    8/ 6000000 : 0600 1218 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Cold PC,SP
(2)    9/ 6000008 : 0600 1218 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Manual PC,SP
(2)   10/ 6000010 :                     
(2)   11/ 6000010 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(2)   12/ 6000014 : 0000 0000           		dc.l 0				; reserved
(2)   13/ 6000018 : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(2)   14/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(2)   15/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(2)   16/ 6000024 : 0600 030C           		dc.l SH2_Error			; CPU address error
(2)   17/ 6000028 : 0600 030C           		dc.l SH2_Error			; DMA address error
(2)   18/ 600002C : 0600 030C           		dc.l SH2_Error			; NMI vector
(2)   19/ 6000030 : 0600 030C           		dc.l SH2_Error			; User break vector
(2)   20/ 6000034 :                     
(2)   21/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(2)   22/ 600005C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(2)   23/ 6000080 :                     
(2)   24/ 6000080 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(2)   25/ 6000088 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   26/ 6000090 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   27/ 6000098 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   28/ 60000A0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   29/ 60000A8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   30/ 60000B0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   31/ 60000B8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   32/ 60000C0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   33/ 60000C8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   34/ 60000D0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   35/ 60000D8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   36/ 60000E0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   37/ 60000E8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   38/ 60000F0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   39/ 60000F8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   40/ 6000100 :                     
(2)   41/ 6000100 : 0600 0248            		dc.l master_irq			; Level 1 IRQ
(2)   42/ 6000104 : 0600 0248           		dc.l master_irq			; Level 2 & 3 IRQ's
(2)   43/ 6000108 : 0600 0248           		dc.l master_irq			; Level 4 & 5 IRQ's
(2)   44/ 600010C : 0600 0248           		dc.l master_irq			; PWM interupt
(2)   45/ 6000110 : 0600 0248           		dc.l master_irq			; Command interupt
(2)   46/ 6000114 : 0600 0248           		dc.l master_irq			; H Blank interupt
(2)   47/ 6000118 : 0600 0248           		dc.l master_irq			; V Blank interupt
(2)   48/ 600011C : 0600 0248           		dc.l master_irq			; Reset Button
(2)   49/ 6000120 : 0600 0248           		dc.l master_irq			;
(2)   50/ 6000124 :                     
(2)   51/ 6000124 :                     ; ====================================================================
(2)   52/ 6000124 :                     ; ----------------------------------------------------------------
(2)   53/ 6000124 :                     ; SLAVE CPU HEAD
(2)   54/ 6000124 :                     ; ----------------------------------------------------------------
(2)   55/ 6000124 :                     
(2)   56/ 6000124 :                     		align 4
(2)   57/ 6000124 :                     SH2_Slave:
(2)   58/ 6000124 : 0600 137C 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Cold PC,SP
(2)   59/ 600012C : 0600 137C 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Manual PC,SP
(2)   60/ 6000134 :                     
(2)   61/ 6000134 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(2)   62/ 6000138 : 0000 0000           		dc.l 0				; reserved
(2)   63/ 600013C : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(2)   64/ 6000140 : 2010 0400           		dc.l $20100400			; reserved
(2)   65/ 6000144 : 2010 0420           		dc.l $20100420			; reserved
(2)   66/ 6000148 : 0600 030C           		dc.l SH2_Error			; CPU address error
(2)   67/ 600014C : 0600 030C           		dc.l SH2_Error			; DMA address error
(2)   68/ 6000150 : 0600 030C           		dc.l SH2_Error			; NMI vector
(2)   69/ 6000154 : 0600 030C           		dc.l SH2_Error			; User break vector
(2)   70/ 6000158 :                     
(2)   71/ 6000158 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(2)   72/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(2)   73/ 60001A4 :                     
(2)   74/ 60001A4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(2)   75/ 60001AC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   76/ 60001B4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   77/ 60001BC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   78/ 60001C4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   79/ 60001CC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   80/ 60001D4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   81/ 60001DC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   82/ 60001E4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   83/ 60001EC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   84/ 60001F4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   85/ 60001FC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   86/ 6000204 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   87/ 600020C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error		
(2)   88/ 6000214 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   89/ 600021C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(2)   90/ 6000224 :                     
(2)   91/ 6000224 : 0600 02AC            		dc.l slave_irq			; Level 1 IRQ
(2)   92/ 6000228 : 0600 02AC           		dc.l slave_irq			; Level 2 & 3 IRQ's
(2)   93/ 600022C : 0600 02AC           		dc.l slave_irq			; Level 4 & 5 IRQ's
(2)   94/ 6000230 : 0600 02AC           		dc.l slave_irq			; PWM interupt
(2)   95/ 6000234 : 0600 02AC           		dc.l slave_irq			; Command interupt
(2)   96/ 6000238 : 0600 02AC           		dc.l slave_irq			; H Blank interupt
(2)   97/ 600023C : 0600 02AC           		dc.l slave_irq			; V Blank interupt
(2)   98/ 6000240 : 0600 02AC           		dc.l slave_irq			; Reset Button
(2)   99/ 6000244 : 0600 02AC           		dc.l slave_irq
(2)  100/ 6000248 :                     
(2)  101/ 6000248 :                     ; ====================================================================
(2)  102/ 6000248 :                     ; ----------------------------------------------------------------
(2)  103/ 6000248 :                     ; irq
(2)  104/ 6000248 :                     ; 
(2)  105/ 6000248 :                     ; r0-r1 are safe
(2)  106/ 6000248 :                     ; ----------------------------------------------------------------
(2)  107/ 6000248 :                     
(2)  108/ 6000248 :                     		align 4
(2)  109/ 6000248 :                     master_irq:
(2)  110/ 6000248 : 2F06                		mov.l	r0,@-r15
(2)  111/ 600024A : 2F16                		mov.l	r1,@-r15
(2)  112/ 600024C : 4F22                		sts.l	pr,@-r15
(2)  113/ 600024E :                     	
(2)  114/ 600024E : 0002                		stc	sr,r0
(2)  115/ 6000250 : 4009                		shlr2	r0
(2)  116/ 6000252 : C93C                		and	#$3C,r0
(2)  117/ 6000254 : D104                		mov	#int_m_list,r1
(2)  118/ 6000256 : 301C                		add	r1,r0
(2)  119/ 6000258 : 6102                		mov	@r0,r1
(2)  120/ 600025A : 410B                		jsr	@r1
(2)  121/ 600025C : 0009                		nop
(2)  122/ 600025E :                     		
(2)  123/ 600025E : 4F26                		lds.l	@r15+,pr
(2)  124/ 6000260 : 61F6                		mov.l	@r15+,r1
(2)  125/ 6000262 : 60F6                		mov.l	@r15+,r0
(2)  126/ 6000264 : 002B                		rte
(2)  127/ 6000266 : 0009                		nop
(2)  128/ 6000268 :                     		align 4
(2)  129/ 6000268 : 0600 026C           		ltorg
(2)  130/ 600026C :                     
(2)  131/ 600026C :                     ; ------------------------------------------------
(2)  132/ 600026C :                     ; irq list
(2)  133/ 600026C :                     ; ------------------------------------------------
(2)  134/ 600026C :                     
(2)  135/ 600026C :                     		align 4
(2)  136/ 600026C :                     int_m_list:
(2)  137/ 600026C : 0600 0314 0600 0314 		dc.l m_irq_bad,m_irq_bad
(2)  138/ 6000274 : 0600 0314 0600 0314 		dc.l m_irq_bad,m_irq_bad
(2)  139/ 600027C : 0600 0314 C000 009C 		dc.l m_irq_bad,m_irq_custom
(2)  140/ 6000284 : 0600 0318 0600 0318 		dc.l m_irq_pwm,m_irq_pwm
(2)  141/ 600028C : 0600 0334 0600 0334 		dc.l m_irq_cmd,m_irq_cmd
(2)  142/ 6000294 : 0600 0350 0600 0350 		dc.l m_irq_h,m_irq_h
(2)  143/ 600029C : 0600 036C 0600 036C 		dc.l m_irq_v,m_irq_v
(2)  144/ 60002A4 : 0600 03C4 0600 03C4 		dc.l m_irq_vres,m_irq_vres
(2)  145/ 60002AC :                     		
(2)  146/ 60002AC :                     ; ====================================================================
(2)  147/ 60002AC :                     ; ----------------------------------------------------------------
(2)  148/ 60002AC :                     ; irq
(2)  149/ 60002AC :                     ; 
(2)  150/ 60002AC :                     ; r0-r1 are safe
(2)  151/ 60002AC :                     ; ----------------------------------------------------------------
(2)  152/ 60002AC :                     
(2)  153/ 60002AC :                     		align 4
(2)  154/ 60002AC :                     slave_irq:
(2)  155/ 60002AC : 2F06                		mov.l	r0,@-r15
(2)  156/ 60002AE : 2F16                		mov.l	r1,@-r15
(2)  157/ 60002B0 : 4F22                		sts.l	pr,@-r15
(2)  158/ 60002B2 :                     	
(2)  159/ 60002B2 : 0002                		stc	sr,r0
(2)  160/ 60002B4 : 4009                		shlr2	r0
(2)  161/ 60002B6 : C93C                		and	#$3C,r0
(2)  162/ 60002B8 : D155                		mov	#int_s_list,r1
(2)  163/ 60002BA : 301C                		add	r1,r0
(2)  164/ 60002BC : 6102                		mov	@r0,r1
(2)  165/ 60002BE : 410B                		jsr	@r1
(2)  166/ 60002C0 : 0009                		nop
(2)  167/ 60002C2 :                     		
(2)  168/ 60002C2 : 4F26                		lds.l	@r15+,pr
(2)  169/ 60002C4 : 61F6                		mov.l	@r15+,r1
(2)  170/ 60002C6 : 60F6                		mov.l	@r15+,r0
(2)  171/ 60002C8 : 002B                		rte
(2)  172/ 60002CA : 0009                		nop
(2)  173/ 60002CC :                     		
(2)  174/ 60002CC :                     ; ------------------------------------------------
(2)  175/ 60002CC :                     ; irq list
(2)  176/ 60002CC :                     ; ------------------------------------------------
(2)  177/ 60002CC :                     
(2)  178/ 60002CC :                     		align 4
(2)  179/ 60002CC :                     int_s_list:
(2)  180/ 60002CC : 0600 0452 0600 0452 		dc.l s_irq_bad,s_irq_bad
(2)  181/ 60002D4 : 0600 0452 0600 0452 		dc.l s_irq_bad,s_irq_bad
(2)  182/ 60002DC : 0600 0452 0600 1582 		dc.l s_irq_bad,s_irq_custom
(2)  183/ 60002E4 : 0600 0458 0600 0458 		dc.l s_irq_pwm,s_irq_pwm
(2)  184/ 60002EC : 0600 0494 0600 0494 		dc.l s_irq_cmd,s_irq_cmd
(2)  185/ 60002F4 : 0600 04B0 0600 04B0 		dc.l s_irq_h,s_irq_h
(2)  186/ 60002FC : 0600 04CC 0600 04CC 		dc.l s_irq_v,s_irq_v
(2)  187/ 6000304 : 0600 04E0 0600 04E0 		dc.l s_irq_vres,s_irq_vres
(2)  188/ 600030C :                     
(1)   15/ 600030C :                     
(1)   16/ 600030C :                     ; ====================================================================
(1)   17/ 600030C :                     ; ----------------------------------------------------------------
(1)   18/ 600030C :                     ; MARS Global variables (for gbr)
(1)   19/ 600030C :                     ; 
(1)   20/ 600030C :                     ; Shared for both CPUs
(1)   21/ 600030C :                     ; ----------------------------------------------------------------
(1)   22/ 600030C :                     
(1)   23/ 600030C : (MACRO)             			struct 0
(1)   23/ 600030C : =$600030C           GLBL_LASTPC     set *
(1)   23/    38F8 :                                     dephase
(1)   23/    38F8 : =$38F8              GLBL_LASTORG    set *
(1)   23/       0 :                                     phase 0
(1)   24/       0 :                     marsGbl_PlyPzList_R	ds.l 1		; Current graphic piece to draw
(1)   25/       4 :                     marsGbl_PlyPzList_W	ds.l 1		; Current graphic piece to write
(1)   26/       8 :                     marsGbl_CurrZList	ds.l 1		; Current Zsort entry
(1)   27/       C :                     marsGbl_CurrFacePos	ds.l 1		; Current top face of the list while reading model data
(1)   28/      10 :                     marsGbl_MdlFacesCntr	ds.w 1		; And the number of faces stored on that list
(1)   29/      12 :                     marsGbl_PolyBuffNum	ds.w 1		; Buffer switcher: READ/WRITE or WRITE/READ
(1)   30/      14 :                     marsGbl_PzListCntr	ds.w 1		; Number of graphic pieces to draw
(1)   31/      16 :                     marsGbl_DrwTask		ds.w 1		; Drawing task for Watchdog
(1)   32/      18 :                     marsGbl_VIntFlag_M	ds.w 1		; Reset if VBlank finished on Master CPU
(1)   33/      1A :                     marsGbl_VIntFlag_S	ds.w 1		; The same but for Slave CPU
(1)   34/      1C :                     marsGbl_DivReq_M	ds.w 1		; Tell Watchdog we are in the middle of division (skips task)
(1)   35/      1E :                     marsGbl_SlvDrawReq	ds.w 1		; Flag to draw models at the request from MD
(1)   36/      20 :                     marsGbl_CurrFb		ds.w 1
(1)   37/      22 :                     sizeof_MarsGbl		ds.l 0
(1)   38/      24 : (MACRO)             			finish
(1)   38/       0 :                                     !org GLBL_LASTORG
(1)   38/ 600030C :                                     phase GLBL_LASTPC
(1)   39/ 600030C :                     			
(1)   40/ 600030C :                     ; ====================================================================
(1)   41/ 600030C :                     ; ----------------------------------------------------------------
(1)   42/ 600030C :                     ; Error trap
(1)   43/ 600030C :                     ; ----------------------------------------------------------------
(1)   44/ 600030C :                     
(1)   45/ 600030C :                     SH2_Error:
(1)   46/ 600030C : 0009                		nop
(1)   47/ 600030E : AFFD                		bra	SH2_Error
(1)   48/ 6000310 : 0009                		nop
(1)   49/ 6000312 :                     		align 4
(1)   50/ 6000314 :                     
(1)   51/ 6000314 :                     ; ====================================================================		
(1)   52/ 6000314 :                     ; ----------------------------------------------------------------
(1)   53/ 6000314 :                     ; MARS Interrupts for both CPUs
(1)   54/ 6000314 :                     ; ----------------------------------------------------------------
(1)   55/ 6000314 :                     
(1)   56/ 6000314 :                     ; =================================================================
(1)   57/ 6000314 :                     ; ------------------------------------------------
(1)   58/ 6000314 :                     ; Master | Unused interrupt
(1)   59/ 6000314 :                     ; ------------------------------------------------
(1)   60/ 6000314 :                     
(1)   61/ 6000314 :                     m_irq_bad:
(1)   62/ 6000314 : 000B                		rts
(1)   63/ 6000316 : 0009                		nop
(1)   64/ 6000318 :                     		align 4
(1)   65/ 6000318 :                     
(1)   66/ 6000318 :                     ; =================================================================
(1)   67/ 6000318 :                     ; ------------------------------------------------
(1)   68/ 6000318 :                     ; Master | PWM Interrupt
(1)   69/ 6000318 :                     ; ------------------------------------------------
(1)   70/ 6000318 :                     
(1)   71/ 6000318 :                     m_irq_pwm:
(1)   72/ 6000318 : 9196                		mov.l	#$FFFFFE10,r1
(1)   73/ 600031A : 8417                		mov.b	@(7,r1),r0
(1)   74/ 600031C : CA02                		xor	#2,r0
(1)   75/ 600031E : 8017                		mov.b	r0,@(7,r1)
(1)   76/ 6000320 : D13C                		mov	#_sysreg+pwmintclr,r1
(1)   77/ 6000322 : 2101                		mov.w	r0,@r1
(1)   78/ 6000324 : 0009                		nop
(1)   79/ 6000326 : 0009                		nop
(1)   80/ 6000328 : 0009                		nop
(1)   81/ 600032A : 0009                		nop
(1)   82/ 600032C : 0009                		nop
(1)   83/ 600032E : 000B                		rts
(1)   84/ 6000330 : 0009                		nop
(1)   85/ 6000332 :                     		align 4
(1)   86/ 6000334 :                     
(1)   87/ 6000334 :                     ; =================================================================
(1)   88/ 6000334 :                     ; ------------------------------------------------
(1)   89/ 6000334 :                     ; Master | CMD Interrupt (MD request)
(1)   90/ 6000334 :                     ; ------------------------------------------------
(1)   91/ 6000334 :                     
(1)   92/ 6000334 :                     m_irq_cmd:
(1)   93/ 6000334 : 9188                		mov.l	#$FFFFFE10,r1
(1)   94/ 6000336 : 8417                		mov.b	@(7,r1),r0
(1)   95/ 6000338 : CA02                		xor	#2,r0
(1)   96/ 600033A : 8017                		mov.b	r0,@(7,r1)
(1)   97/ 600033C : D136                		mov	#_sysreg+cmdintclr,r1
(1)   98/ 600033E : 2101                		mov.w	r0,@r1
(1)   99/ 6000340 : 0009                		nop
(1)  100/ 6000342 : 0009                		nop
(1)  101/ 6000344 : 0009                		nop
(1)  102/ 6000346 : 0009                		nop
(1)  103/ 6000348 : 0009                		nop
(1)  104/ 600034A : 000B                		rts
(1)  105/ 600034C : 0009                		nop
(1)  106/ 600034E :                     		align 4
(1)  107/ 6000350 :                     		
(1)  108/ 6000350 :                     ; =================================================================
(1)  109/ 6000350 :                     ; ------------------------------------------------
(1)  110/ 6000350 :                     ; Master | HBlank
(1)  111/ 6000350 :                     ; ------------------------------------------------
(1)  112/ 6000350 :                     
(1)  113/ 6000350 :                     m_irq_h:
(1)  114/ 6000350 : 917A                		mov.l	#$FFFFFE10,r1
(1)  115/ 6000352 : 8417                		mov.b	@(7,r1),r0
(1)  116/ 6000354 : CA02                		xor	#2,r0
(1)  117/ 6000356 : 8017                		mov.b	r0,@(7,r1)
(1)  118/ 6000358 : D130                		mov	#_sysreg+hintclr,r1
(1)  119/ 600035A : 2101                		mov.w	r0,@r1
(1)  120/ 600035C : 0009                		nop
(1)  121/ 600035E : 0009                		nop
(1)  122/ 6000360 : 0009                		nop
(1)  123/ 6000362 : 0009                		nop
(1)  124/ 6000364 : 0009                		nop
(1)  125/ 6000366 : 000B                		rts
(1)  126/ 6000368 : 0009                		nop
(1)  127/ 600036A :                     		align 4
(1)  128/ 600036C :                     		
(1)  129/ 600036C :                     ; =================================================================
(1)  130/ 600036C :                     ; ------------------------------------------------
(1)  131/ 600036C :                     ; Master | VBlank
(1)  132/ 600036C :                     ; ------------------------------------------------
(1)  133/ 600036C :                     
(1)  134/ 600036C :                     m_irq_v:
(1)  135/ 600036C :                     
(1)  136/ 600036C :                     ; ----------------------------------
(1)  137/ 600036C :                     ; Update Indexed-palette
(1)  138/ 600036C :                     ; ----------------------------------
(1)  139/ 600036C : D12C                		mov 	#_vdpreg,r1
(1)  140/ 600036E : 8515                .min_r		mov.w	@(10,r1),r0		; Wait for FEN to clear
(1)  141/ 6000370 : C902                		and	#%10,r0
(1)  142/ 6000372 : 8802                		cmp/eq	#2,r0
(1)  143/ 6000374 : 89FB                		bt	.min_r
(1)  144/ 6000376 : 2F26                		mov.l	r2,@-r15
(1)  145/ 6000378 : 2F36                		mov.l	r3,@-r15
(1)  146/ 600037A : 2F46                		mov.l	r4,@-r15
(1)  147/ 600037C : 2F56                		mov.l	r5,@-r15
(1)  148/ 600037E : 2F66                		mov.l	r6,@-r15
(1)  149/ 6000380 : D127                		mov.l	#_vdpreg,r1			; Wait for palette access ok
(1)  150/ 6000382 : 841A                .wait		mov.b	@(vdpsts,r1),r0
(1)  151/ 6000384 : C820                		tst	#$20,r0
(1)  152/ 6000386 : 89FC                		bt	.wait
(1)  153/ 6000388 : D126                		mov.l	#RAM_Mars_Palette,r1		; Send palette stored on RAM
(1)  154/ 600038A : D227                		mov.l	#_palette,r2
(1)  155/ 600038C : 935D                 		mov.l	#256,r3
(1)  156/ 600038E : 945D                		mov.l	#%0101011011110001,r4		; transfer size 2 / burst
(1)  157/ 6000390 : E580                		mov.l	#_DMASOURCE0,r5 		; _DMASOURCE = $ffffff80
(1)  158/ 6000392 : E6B0                		mov.l	#_DMAOPERATION,r6 		; _DMAOPERATION = $ffffffb0
(1)  159/ 6000394 : 2512                		mov.l	r1,@r5				; set source address
(1)  160/ 6000396 : 1521                		mov.l	r2,@(4,r5)			; set destination address
(1)  161/ 6000398 : 1532                		mov.l	r3,@(8,r5)			; set length
(1)  162/ 600039A : 200A                		xor	r0,r0
(1)  163/ 600039C : 2602                		mov.l	r0,@r6				; Stop OPERATION
(1)  164/ 600039E : 200A                		xor	r0,r0
(1)  165/ 60003A0 : 1503                		mov.l	r0,@($C,r5)			; clear TE bit
(1)  166/ 60003A2 : 1543                		mov.l	r4,@($C,r5)			; load mode
(1)  167/ 60003A4 : 7001                		add	#1,r0
(1)  168/ 60003A6 : 2602                		mov.l	r0,@r6				; Start OPERATION
(1)  169/ 60003A8 : 66F6                		mov.l	@r15+,r6
(1)  170/ 60003AA : 65F6                		mov.l	@r15+,r5
(1)  171/ 60003AC : 64F6                		mov.l	@r15+,r4
(1)  172/ 60003AE : 63F6                		mov.l	@r15+,r3
(1)  173/ 60003B0 : 62F6                		mov.l	@r15+,r2
(1)  174/ 60003B2 : E000                		mov 	#0,r0				; Clear VintFlag for Master
(1)  175/ 60003B4 : C10C                		mov.w	r0,@(marsGbl_VIntFlag_M,gbr)
(1)  176/ 60003B6 : 9147                		mov.l	#$FFFFFE10,r1
(1)  177/ 60003B8 : 8417                		mov.b	@(7,r1),r0
(1)  178/ 60003BA : CA02                		xor	#2,r0
(1)  179/ 60003BC : 8017                		mov.b	r0,@(7,r1)
(1)  180/ 60003BE : D11B                		mov	#_sysreg+vintclr,r1
(1)  181/ 60003C0 : 000B                		rts
(1)  182/ 60003C2 : 2101                		mov.w	r0,@r1
(1)  183/ 60003C4 :                     		align 4
(1)  184/ 60003C4 :                     		
(1)  185/ 60003C4 :                     ; =================================================================
(1)  186/ 60003C4 :                     ; ------------------------------------------------
(1)  187/ 60003C4 :                     ; Master | VRES Interrupt (If user pressed RESET)
(1)  188/ 60003C4 :                     ; ------------------------------------------------
(1)  189/ 60003C4 :                     
(1)  190/ 60003C4 :                     m_irq_vres:
(1)  191/ 60003C4 : D01A                		mov.l	#_sysreg,r0
(1)  192/ 60003C6 : 401E                		ldc	r0,gbr
(1)  193/ 60003C8 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  194/ 60003CA : C406                		mov.b	@(dreqctl,gbr),r0
(1)  195/ 60003CC : C801                		tst	#1,r0
(1)  196/ 60003CE : 8B18                		bf	.mars_reset
(1)  197/ 60003D0 :                     .md_reset:
(1)  198/ 60003D0 : D118                		mov.l	#"68UP",r1		; wait for the 68K to show up
(1)  199/ 60003D2 : C60B                		mov.l	@(comm12,gbr),r0
(1)  200/ 60003D4 : 3100                		cmp/eq	r0,r1
(1)  201/ 60003D6 : 8BFB                		bf	.md_reset
(1)  202/ 60003D8 :                     .sh_wait:
(1)  203/ 60003D8 : D117                		mov.l	#"S_OK",r1		; wait for the Slave CPU to show up
(1)  204/ 60003DA : C609                		mov.l	@(comm4,gbr),r0
(1)  205/ 60003DC : 3100                		cmp/eq	r0,r1
(1)  206/ 60003DE : 8BFB                		bf	.sh_wait
(1)  207/ 60003E0 : D016                		mov.l	#"M_OK",r0		; let the others know master ready
(1)  208/ 60003E2 : C208                		mov.l	r0,@(comm0,gbr)
(1)  209/ 60003E4 : DF16                		mov.l	#CS3|$40000-8,r15	; Set reset values
(1)  210/ 60003E6 : D017                		mov.l	#SH2_M_HotStart,r0
(1)  211/ 60003E8 : 2F02                		mov.l	r0,@r15
(1)  212/ 60003EA : 9030                		mov.w	#$F0,r0
(1)  213/ 60003EC : 1F01                		mov.l	r0,@(4,r15)
(1)  214/ 60003EE : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  215/ 60003F0 : E000                		mov.l	#0,r0
(1)  216/ 60003F2 : 2102                		mov.l	r0,@r1			; Turn any DMA tasks OFF
(1)  217/ 60003F4 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  218/ 60003F6 : E000                		mov.l	#0,r0
(1)  219/ 60003F8 : 2102                		mov.l	r0,@r1
(1)  220/ 60003FA : 9129                		mov.l	#%0100010011100000,r1
(1)  221/ 60003FC : 2102                		mov.l	r0,@r1			; Channel control
(1)  222/ 60003FE : 002B                		rte
(1)  223/ 6000400 : 0009                		nop
(1)  224/ 6000402 :                     .mars_reset:
(1)  225/ 6000402 : 9121                		mov.l	#_FRT,r1
(1)  226/ 6000404 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  227/ 6000406 : CB01                		or	#$01,r0
(1)  228/ 6000408 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  229/ 600040A :                     .vresloop:
(1)  230/ 600040A : AFFE                		bra	.vresloop
(1)  231/ 600040C : 0009                		nop
(1)  232/ 600040E :                     		align 4
(1)  233/ 6000410 : 0600 02CC 2000 401C 		ltorg				; Save MASTER IRQ literals here
                    2000 401A 2000 4018 
                    2000 4100 0600 5900 
                    2000 4200 2000 4016 
                    2000 4000 3638 5550 
                    535F 4F4B 4D5F 4F4B 
                    0603 FFF8 0600 125C 
                    FE10 0100 56F1 00F0 
                    44E0                
(1)  234/ 6000452 :                     
(1)  235/ 6000452 :                     ; =================================================================
(1)  236/ 6000452 :                     ; ------------------------------------------------
(1)  237/ 6000452 :                     ; Master | Watchdog interrupt
(1)  238/ 6000452 :                     ; ------------------------------------------------
(1)  239/ 6000452 :                     
(1)  240/ 6000452 :                     ; m_irq_custom:
(1)  241/ 6000452 :                     ; see video.asm
(1)  242/ 6000452 :                     
(1)  243/ 6000452 :                     ; =================================================================
(1)  244/ 6000452 :                     ; ------------------------------------------------
(1)  245/ 6000452 :                     ; Unused
(1)  246/ 6000452 :                     ; ------------------------------------------------
(1)  247/ 6000452 :                     
(1)  248/ 6000452 :                     s_irq_bad:
(1)  249/ 6000452 : 000B                		rts
(1)  250/ 6000454 : 0009                		nop
(1)  251/ 6000456 :                     		align 4
(1)  252/ 6000458 :                     
(1)  253/ 6000458 :                     ; =================================================================
(1)  254/ 6000458 :                     ; ------------------------------------------------
(1)  255/ 6000458 :                     ; Slave | PWM Interrupt
(1)  256/ 6000458 :                     ; ------------------------------------------------
(1)  257/ 6000458 :                     
(1)  258/ 6000458 :                     s_irq_pwm:
(1)  259/ 6000458 : D134                		mov	#_sysreg+monowidth,r1
(1)  260/ 600045A : 6010                		mov.b	@r1,r0
(1)  261/ 600045C : C880                 		tst	#$80,r0
(1)  262/ 600045E : 8B11                 		bf	.exit
(1)  263/ 6000460 : 2F26                		mov.l	r2,@-r15
(1)  264/ 6000462 : 2F36                		mov.l	r3,@-r15
(1)  265/ 6000464 : 2F46                		mov.l	r4,@-r15
(1)  266/ 6000466 : 2F56                		mov.l	r5,@-r15
(1)  267/ 6000468 : 2F66                		mov.l	r6,@-r15
(1)  268/ 600046A : 2F76                		mov.l	r7,@-r15
(1)  269/ 600046C : 2F86                		mov.l	r8,@-r15
(1)  270/ 600046E : 4F22                		sts	pr,@-r15
(1)  271/ 6000470 : B65C                		bsr	MarsSound_PWM
(1)  272/ 6000472 : 0009                		nop
(1)  273/ 6000474 : 4F26                		lds	@r15+,pr
(1)  274/ 6000476 : 68F6                		mov.l	@r15+,r8
(1)  275/ 6000478 : 67F6                		mov.l	@r15+,r7
(1)  276/ 600047A : 66F6                		mov.l	@r15+,r6
(1)  277/ 600047C : 65F6                		mov.l	@r15+,r5
(1)  278/ 600047E : 64F6                		mov.l	@r15+,r4
(1)  279/ 6000480 : 63F6                		mov.l	@r15+,r3
(1)  280/ 6000482 : 62F6                		mov.l	@r15+,r2
(1)  281/ 6000484 :                     .exit:
(1)  282/ 6000484 : 9168                		mov.l	#$FFFFFE10,r1
(1)  283/ 6000486 : 8417                		mov.b	@(7,r1),r0
(1)  284/ 6000488 : CA02                		xor	#2,r0
(1)  285/ 600048A : 8017                		mov.b	r0,@(7,r1)
(1)  286/ 600048C : D128                		mov	#_sysreg+pwmintclr,r1
(1)  287/ 600048E : 2101                		mov.w	r0,@r1
(1)  288/ 6000490 : 000B                		rts
(1)  289/ 6000492 : 0009                		nop
(1)  290/ 6000494 :                     		align 4
(1)  291/ 6000494 :                     
(1)  292/ 6000494 :                     ; =================================================================
(1)  293/ 6000494 :                     ; ------------------------------------------------
(1)  294/ 6000494 :                     ; Slave | CMD Interrupt (MD request)
(1)  295/ 6000494 :                     ; ------------------------------------------------
(1)  296/ 6000494 :                     
(1)  297/ 6000494 :                     s_irq_cmd:
(1)  298/ 6000494 : 9160                		mov.l	#$FFFFFE10,r1
(1)  299/ 6000496 : 8417                		mov.b	@(7,r1),r0
(1)  300/ 6000498 : CA02                		xor	#2,r0
(1)  301/ 600049A : 8017                		mov.b	r0,@(7,r1)
(1)  302/ 600049C : D125                		mov	#_sysreg+cmdintclr,r1
(1)  303/ 600049E : 2101                		mov.w	r0,@r1
(1)  304/ 60004A0 : 0009                		nop
(1)  305/ 60004A2 : 0009                		nop
(1)  306/ 60004A4 : 0009                		nop
(1)  307/ 60004A6 : 0009                		nop
(1)  308/ 60004A8 : 0009                		nop
(1)  309/ 60004AA : 000B                		rts
(1)  310/ 60004AC : 0009                		nop
(1)  311/ 60004AE :                     		align 4
(1)  312/ 60004B0 :                     
(1)  313/ 60004B0 :                     ; =================================================================
(1)  314/ 60004B0 :                     ; ------------------------------------------------
(1)  315/ 60004B0 :                     ; Slave | HBlank
(1)  316/ 60004B0 :                     ; ------------------------------------------------
(1)  317/ 60004B0 :                     
(1)  318/ 60004B0 :                     s_irq_h:
(1)  319/ 60004B0 : 9152                		mov.l	#$FFFFFE10,r1
(1)  320/ 60004B2 : 8417                		mov.b	@(7,r1),r0
(1)  321/ 60004B4 : CA02                		xor	#2,r0
(1)  322/ 60004B6 : 8017                		mov.b	r0,@(7,r1)
(1)  323/ 60004B8 : D11F                		mov	#_sysreg+hintclr,r1
(1)  324/ 60004BA : 2101                		mov.w	r0,@r1
(1)  325/ 60004BC : 0009                		nop
(1)  326/ 60004BE : 0009                		nop
(1)  327/ 60004C0 : 0009                		nop
(1)  328/ 60004C2 : 0009                		nop
(1)  329/ 60004C4 : 0009                		nop
(1)  330/ 60004C6 : 000B                		rts
(1)  331/ 60004C8 : 0009                		nop
(1)  332/ 60004CA :                     		align 4
(1)  333/ 60004CC :                     
(1)  334/ 60004CC :                     ; =================================================================
(1)  335/ 60004CC :                     ; ------------------------------------------------
(1)  336/ 60004CC :                     ; Slave | VBlank
(1)  337/ 60004CC :                     ; ------------------------------------------------
(1)  338/ 60004CC :                     
(1)  339/ 60004CC :                     s_irq_v:
(1)  340/ 60004CC : E000                		mov 	#0,r0				; Clear VintFlag for Slave
(1)  341/ 60004CE : C10D                		mov.w	r0,@(marsGbl_VIntFlag_S,gbr)
(1)  342/ 60004D0 : 9142                		mov.l	#$FFFFFE10,r1
(1)  343/ 60004D2 : 8417                		mov.b	@(7,r1),r0
(1)  344/ 60004D4 : CA02                		xor	#2,r0
(1)  345/ 60004D6 : 8017                		mov.b	r0,@(7,r1)
(1)  346/ 60004D8 : D118                		mov	#_sysreg+vintclr,r1
(1)  347/ 60004DA : 000B                		rts
(1)  348/ 60004DC : 2101                		mov.w	r0,@r1
(1)  349/ 60004DE :                     		align 4
(1)  350/ 60004E0 :                     
(1)  351/ 60004E0 :                     ; =================================================================
(1)  352/ 60004E0 :                     ; ------------------------------------------------
(1)  353/ 60004E0 :                     ; Slave | VRES Interrupt (If user pressed RESET)
(1)  354/ 60004E0 :                     ; ------------------------------------------------
(1)  355/ 60004E0 :                     
(1)  356/ 60004E0 :                     s_irq_vres:
(1)  357/ 60004E0 : D017                		mov.l	#_sysreg,r0
(1)  358/ 60004E2 : 401E                		ldc	r0,gbr
(1)  359/ 60004E4 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  360/ 60004E6 : C406                		mov.b	@(dreqctl,gbr),r0
(1)  361/ 60004E8 : C801                		tst	#1,r0
(1)  362/ 60004EA : 8B18                		bf	.mars_reset
(1)  363/ 60004EC :                     .md_reset:
(1)  364/ 60004EC : D115                		mov.l	#"68UP",r1		; wait for the 68k to show up
(1)  365/ 60004EE : C60B                		mov.l	@(comm12,gbr),r0
(1)  366/ 60004F0 : 3100                		cmp/eq	r0,r1
(1)  367/ 60004F2 : 8BFB                		bf	.md_reset
(1)  368/ 60004F4 : D014                		mov.l	#"S_OK",r0		; tell the others slave is ready
(1)  369/ 60004F6 : C209                		mov.l	r0,@(comm4,gbr)
(1)  370/ 60004F8 :                     .sh_wait:
(1)  371/ 60004F8 : D114                		mov.l	#"M_OK",r1		; wait for the slave to show up
(1)  372/ 60004FA : C608                		mov.l	@(comm0,gbr),r0
(1)  373/ 60004FC : 3100                		cmp/eq	r0,r1
(1)  374/ 60004FE : 8BFB                		bf	.sh_wait
(1)  375/ 6000500 : DF13                		mov.l	#CS3|$3F000-8,r15
(1)  376/ 6000502 : D014                		mov.l	#SH2_S_HotStart,r0
(1)  377/ 6000504 : 2F02                		mov.l	r0,@r15
(1)  378/ 6000506 : 9028                		mov.w	#$F0,r0
(1)  379/ 6000508 : 1F01                		mov.l	r0,@(4,r15)
(1)  380/ 600050A : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  381/ 600050C : E000                		mov.l	#0,r0
(1)  382/ 600050E : 2102                		mov.l	r0,@r1			; DMA off
(1)  383/ 6000510 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  384/ 6000512 : E000                		mov.l	#0,r0
(1)  385/ 6000514 : 2102                		mov.l	r0,@r1
(1)  386/ 6000516 : 9121                		mov.l	#%0100010011100000,r1
(1)  387/ 6000518 : 2102                		mov.l	r0,@r1			; Channel control
(1)  388/ 600051A : 002B                		rte
(1)  389/ 600051C : 0009                		nop
(1)  390/ 600051E :                     .mars_reset:
(1)  391/ 600051E : 911B                		mov.l	#_FRT,r1
(1)  392/ 6000520 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  393/ 6000522 : CB01                		or	#$01,r0
(1)  394/ 6000524 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  395/ 6000526 :                     .vresloop:
(1)  396/ 6000526 : AFFE                		bra	.vresloop
(1)  397/ 6000528 : 0009                		nop
(1)  398/ 600052A :                     		align 4
(1)  399/ 600052C : 2000 4038 2000 401C 		ltorg			; Save Slave IRQ literals
                    2000 401A 2000 4018 
                    2000 4016 2000 4000 
                    3638 5550 535F 4F4B 
                    4D5F 4F4B 0603 EFF8 
                    0600 13BA FE10 00F0 
                    44E0                
(1)  400/ 600055E :                     
(1)  401/ 600055E :                     ; ====================================================================
(1)  402/ 600055E :                     ; ----------------------------------------------------------------
(1)  403/ 600055E :                     ; MARS System features
(1)  404/ 600055E :                     ; ----------------------------------------------------------------
(1)  405/ 600055E :                     
(1)  406/ 600055E :                     		include "system/mars/video.asm"
(2)    1/ 600055E :                     ; ====================================================================
(2)    2/ 600055E :                     ; ----------------------------------------------------------------
(2)    3/ 600055E :                     ; MARS Video
(2)    4/ 600055E :                     ; ----------------------------------------------------------------
(2)    5/ 600055E :                     
(2)    6/ 600055E :                     ; MARS Polygons
(2)    7/ 600055E :                     ; 
(2)    8/ 600055E :                     ; type format:
(2)    9/ 600055E :                     ;   0 - end-of-list
(2)   10/ 600055E :                     ;  -1 - skip polygon (already drawn)
(2)   11/ 600055E :                     ; $03 - triangle
(2)   12/ 600055E :                     ; $04 - quad
(2)   13/ 600055E :                     
(2)   14/ 600055E :                     ; ----------------------------------------
(2)   15/ 600055E :                     ; Settings
(2)   16/ 600055E :                     ; ----------------------------------------
(2)   17/ 600055E :                     
(2)   18/ 600055E : =$400               MAX_FACES	equ	1024		; Maximum polygon faces (models,sprites) to store on buffer
(2)   19/ 600055E : =$180               MAX_SVDP_PZ	equ	384		; This list loops on both read and write, increase the value if needed
(2)   20/ 600055E : =$10                MAX_MODELS	equ	16
(2)   21/ 600055E : =$FFFFFFFFFF..      MAX_ZDIST	equ	-$400		; Max drawing distance (-Z max)
(2)   22/ 600055E :                     
(2)   23/ 600055E :                     ; ----------------------------------------
(2)   24/ 600055E :                     ; Variables
(2)   25/ 600055E :                     ; ----------------------------------------
(2)   26/ 600055E :                     
(2)   27/ 600055E : =$140               SCREEN_WIDTH	equ	320
(2)   28/ 600055E : =$E0                SCREEN_HEIGHT	equ	224
(2)   29/ 600055E :                     
(2)   30/ 600055E :                     ; MSB
(2)   31/ 600055E : =$80                PLGN_TEXURE	equ	%10000000
(2)   32/ 600055E : =$40                PLGN_TRI	equ	%01000000
(2)   33/ 600055E : =$20                PLGN_SPRITE	equ	%00100000
(2)   34/ 600055E :                     
(2)   35/ 600055E :                     ; ----------------------------------------
(2)   36/ 600055E :                     ; Structs
(2)   37/ 600055E :                     ; ----------------------------------------
(2)   38/ 600055E :                     
(2)   39/ 600055E :                     ; model objects
(2)   40/ 600055E :                     ; 		struct 0		; MOVED to system/const.asm (shared with MD)
(2)   41/ 600055E :                     ; mdl_data	ds.l 1
(2)   42/ 600055E :                     ; mdl_x_pos	ds.l 1
(2)   43/ 600055E :                     ; mdl_y_pos	ds.l 1
(2)   44/ 600055E :                     ; mdl_z_pos	ds.l 1
(2)   45/ 600055E :                     ; mdl_x_rot	ds.l 1
(2)   46/ 600055E :                     ; mdl_y_rot	ds.l 1
(2)   47/ 600055E :                     ; mdl_z_rot	ds.l 1
(2)   48/ 600055E :                     ; sizeof_mdlobj	ds.l 0
(2)   49/ 600055E :                     ; 		finish
(2)   50/ 600055E :                     
(2)   51/ 600055E :                     ; OUTPUT polygon piece data
(2)   52/ 600055E : (MACRO)             		struct 0
(2)   52/ 600055E : =$600055E           GLBL_LASTPC     set *
(2)   52/    3B4A :                                     dephase
(2)   52/    3B4A : =$3B4A              GLBL_LASTORG    set *
(2)   52/       0 :                                     phase 0
(2)   53/       0 :                     plypz_ypos	ds.l 1			; Ytop | Ybottom
(2)   54/       4 :                     plypz_xl	ds.l 1
(2)   55/       8 :                     plypz_xl_dx	ds.l 1
(2)   56/       C :                     plypz_xr	ds.l 1
(2)   57/      10 :                     plypz_xr_dx	ds.l 1
(2)   58/      14 :                     plypz_src_xl	ds.l 1
(2)   59/      18 :                     plypz_src_xl_dx	ds.l 1
(2)   60/      1C :                     plypz_src_yl	ds.l 1
(2)   61/      20 :                     plypz_src_yl_dx	ds.l 1
(2)   62/      24 :                     plypz_src_xr	ds.l 1
(2)   63/      28 :                     plypz_src_xr_dx	ds.l 1
(2)   64/      2C :                     plypz_src_yr	ds.l 1
(2)   65/      30 :                     plypz_src_yr_dx	ds.l 1
(2)   66/      34 :                     plypz_mtrl	ds.l 1
(2)   67/      38 :                     plypz_mtrlopt	ds.l 1			; Type | Option
(2)   68/      3C :                     sizeof_plypz	ds.l 0
(2)   69/      3E : (MACRO)             		finish
(2)   69/       0 :                                     !org GLBL_LASTORG
(2)   69/ 600055E :                                     phase GLBL_LASTPC
(2)   70/ 600055E :                     
(2)   71/ 600055E : (MACRO)             		struct 0
(2)   71/ 600055E : =$600055E           GLBL_LASTPC     set *
(2)   71/    3B4A :                                     dephase
(2)   71/    3B4A : =$3B4A              GLBL_LASTORG    set *
(2)   71/       0 :                                     phase 0
(2)   72/       0 :                     polygn_type	ds.l 1		; %MST0 0000 wwww wwww | Type bits and Material option (Width or PalIncr)
(2)   73/       4 :                     polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)   74/       8 :                     polygn_points	ds.l 4*2	; X/Y positions
(2)   75/      28 :                     polygn_srcpnts	ds.w 4*2	; X/Y texture points (16-bit), ignored on solidcolor
(2)   76/      38 :                     sizeof_polygn	ds.l 0
(2)   77/      3A : (MACRO)             		finish
(2)   77/       0 :                                     !org GLBL_LASTORG
(2)   77/ 600055E :                                     phase GLBL_LASTPC
(2)   78/ 600055E :                     
(2)   79/ 600055E :                     ; ====================================================================
(2)   80/ 600055E :                     ; ----------------------------------------------------------------
(2)   81/ 600055E :                     ; Init Video
(2)   82/ 600055E :                     ; 
(2)   83/ 600055E :                     ; Uses:
(2)   84/ 600055E :                     ; a0-a2,d0-d1
(2)   85/ 600055E :                     ; ----------------------------------------------------------------
(2)   86/ 600055E :                     
(2)   87/ 600055E :                     MarsVideo_Init:
(2)   88/ 600055E : 4F22                		sts	pr,@-r15
(2)   89/ 6000560 : D42F                		mov	#_sysreg,r4
(2)   90/ 6000562 : 9067                		mov 	#FM,r0			; SVDP permission for SH2 (here)
(2)   91/ 6000564 : 8040                  		mov.b	r0,@(adapter,r4)
(2)   92/ 6000566 : D42F                		mov 	#_vdpreg,r4
(2)   93/ 6000568 : B008                		bsr	.this_fb		; Init line tables for both framebuffers
(2)   94/ 600056A : 0009                		nop
(2)   95/ 600056C : B006                		bsr	.this_fb
(2)   96/ 600056E : 0009                		nop
(2)   97/ 6000570 : E001                		mov	#1,r0			; Use bitmap mode $01
(2)   98/ 6000572 : 8041                		mov.b	r0,@(bitmapmd,r4)
(2)   99/ 6000574 : 4F26                		lds	@r15+,pr
(2)  100/ 6000576 : 000B                		rts
(2)  101/ 6000578 : 0009                		nop
(2)  102/ 600057A :                     		align 4
(2)  103/ 600057C :                     
(2)  104/ 600057C :                     ; ------------------------------------------------
(2)  105/ 600057C :                     ; Init current framebuffer
(2)  106/ 600057C :                     ; ------------------------------------------------
(2)  107/ 600057C :                     
(2)  108/ 600057C :                     .this_fb:
(2)  109/ 600057C : D12A                 		mov	#_framebuffer,r1
(2)  110/ 600057E : 905A                		mov	#$200/2,r0		; START line data
(2)  111/ 6000580 : 925A                		mov	#240,r2			; Vertical lines to set
(2)  112/ 6000582 : 6303                		mov	r0,r3			; Increment value (copy from r0)
(2)  113/ 6000584 :                     .loop:
(2)  114/ 6000584 : 2101                		mov.w	r0,@r1
(2)  115/ 6000586 : 7102                		add	#2,r1
(2)  116/ 6000588 : 303C                		add	r3,r0
(2)  117/ 600058A : 4210                		dt	r2
(2)  118/ 600058C : 8BFA                		bf	.loop
(2)  119/ 600058E :                     		
(2)  120/ 600058E : 8545                .fb_wait1:	mov.w   @($A,r4),r0
(2)  121/ 6000590 : C802                		tst     #2,r0
(2)  122/ 6000592 : 8BFC                		bf      .fb_wait1
(2)  123/ 6000594 : 8545                		mov.w   @($A,r4), r0
(2)  124/ 6000596 : CA01                		xor     #1,r0
(2)  125/ 6000598 : 8145                		mov.w   r0,@($A,r4)
(2)  126/ 600059A : C901                		and     #1,r0
(2)  127/ 600059C : 6103                		mov     r0,r1
(2)  128/ 600059E :                     .wait_result:
(2)  129/ 600059E : 8545                		mov.w   @($A,r4),r0
(2)  130/ 60005A0 : C901                		and     #1,r0
(2)  131/ 60005A2 : 3100                		cmp/eq  r0,r1
(2)  132/ 60005A4 : 8BFB                		bf      .wait_result
(2)  133/ 60005A6 : 000B                		rts
(2)  134/ 60005A8 : 0009                		nop
(2)  135/ 60005AA :                     		align 4
(2)  136/ 60005AC :                     
(2)  137/ 60005AC :                     ; ------------------------------------
(2)  138/ 60005AC :                     ; Generate division table
(2)  139/ 60005AC :                     ; it's faster than doing on HW
(2)  140/ 60005AC :                     ; everytime
(2)  141/ 60005AC :                     ; 
(2)  142/ 60005AC :                     ; r1 - x/?
(2)  143/ 60005AC :                     ; r2 - Output
(2)  144/ 60005AC :                     ; 
(2)  145/ 60005AC :                     ; zero division will be a
(2)  146/ 60005AC :                     ; copy of ??/1
(2)  147/ 60005AC :                     ; 
(2)  148/ 60005AC :                     ; Example:
(2)  149/ 60005AC :                     ; 	mov	#RAM_YourDivTable,r0
(2)  150/ 60005AC :                     ; 	mov	@(r0,r2),r0	; (??/xx) << 2
(2)  151/ 60005AC :                     ; 	dmuls	r6,r0		; (xx/r0)
(2)  152/ 60005AC :                     ; 	sts	macl,r6
(2)  153/ 60005AC :                     ; 	sts	mach,r0
(2)  154/ 60005AC :                     ; 	xtrct   r0,r6		; Result
(2)  155/ 60005AC :                     ; ------------------------------------
(2)  156/ 60005AC :                     
(2)  157/ 60005AC :                     ; Mars_MkDivTable:
(2)  158/ 60005AC :                     ; 		mov	#$FFFFFF00,r6
(2)  159/ 60005AC :                     ; 		mov	#MAX_DIVTABLE,r4
(2)  160/ 60005AC :                     ; 		mov     #0,r5
(2)  161/ 60005AC :                     ; 		shll16  r1
(2)  162/ 60005AC :                     ; .loop:
(2)  163/ 60005AC :                     ; 		mov	r5,r0
(2)  164/ 60005AC :                     ; 		cmp/eq	#0,r0
(2)  165/ 60005AC :                     ; 		bf	.dontzer
(2)  166/ 60005AC :                     ; 		mov	#1,r0
(2)  167/ 60005AC :                     ; .dontzer:
(2)  168/ 60005AC :                     ; 		mov	r5,@r6
(2)  169/ 60005AC :                     ; 		mov	r1,@(4,r6)
(2)  170/ 60005AC :                     ; 		nop
(2)  171/ 60005AC :                     ; 		mov	@(4,r6),r0
(2)  172/ 60005AC :                     ; 		mov	r0,@r2
(2)  173/ 60005AC :                     ; 		add     #4,r2
(2)  174/ 60005AC :                     ; 		add     #1,r5
(2)  175/ 60005AC :                     ; 		dt      r4
(2)  176/ 60005AC :                     ; 		bf	.loop
(2)  177/ 60005AC :                     ; 		rts
(2)  178/ 60005AC :                     ; 		nop
(2)  179/ 60005AC :                     ; 		align 4
(2)  180/ 60005AC :                     		
(2)  181/ 60005AC :                     ; ------------------------------------
(2)  182/ 60005AC :                     ; MarsVideo_ClearFrame
(2)  183/ 60005AC :                     ; 
(2)  184/ 60005AC :                     ; Clear the current framebuffer
(2)  185/ 60005AC :                     ; ------------------------------------
(2)  186/ 60005AC :                     
(2)  187/ 60005AC :                     MarsVideo_ClearFrame:
(2)  188/ 60005AC : D11D                		mov	#_vdpreg,r1
(2)  189/ 60005AE : 8515                .wait2		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  190/ 60005B0 : C902                		and	#%10,r0
(2)  191/ 60005B2 : 8802                		cmp/eq	#2,r0
(2)  192/ 60005B4 : 89FB                		bt	.wait2
(2)  193/ 60005B6 :                     		
(2)  194/ 60005B6 : 9240                		mov	#255,r2			; 256 words per pass
(2)  195/ 60005B8 : 933D                		mov	#$100,r3		; Starting address
(2)  196/ 60005BA : E400                		mov	#0,r4			; Clear to zero
(2)  197/ 60005BC : 953B                		mov	#256,r5			; Increment address by 256
(2)  198/ 60005BE : 963B                		mov	#((512*240)/256)/2,r6	; 140 passes
(2)  199/ 60005C0 :                     .loop
(2)  200/ 60005C0 : 6023                		mov	r2,r0
(2)  201/ 60005C2 : 8112                		mov.w	r0,@(4,r1)		; Set length
(2)  202/ 60005C4 : 6033                		mov	r3,r0
(2)  203/ 60005C6 : 8113                		mov.w	r0,@(6,r1)		; Set address
(2)  204/ 60005C8 : 6043                		mov	r4,r0
(2)  205/ 60005CA : 8114                		mov.w	r0,@(8,r1)		; Set data
(2)  206/ 60005CC : 335C                		add	r5,r3
(2)  207/ 60005CE :                     		
(2)  208/ 60005CE : 8515                .wait		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  209/ 60005D0 : C902                		and	#%10,r0
(2)  210/ 60005D2 : 8802                		cmp/eq	#2,r0
(2)  211/ 60005D4 : 89FB                		bt	.wait
(2)  212/ 60005D6 : 4610                		dt	r6
(2)  213/ 60005D8 : 8BF2                		bf	.loop
(2)  214/ 60005DA : 000B                		rts
(2)  215/ 60005DC : 0009                		nop
(2)  216/ 60005DE :                     		align 4
(2)  217/ 60005E0 :                     
(2)  218/ 60005E0 :                     ; ------------------------------------
(2)  219/ 60005E0 :                     ; MarsVideo_FrameSwap
(2)  220/ 60005E0 :                     ; ------------------------------------
(2)  221/ 60005E0 :                     
(2)  222/ 60005E0 :                     MarsVideo_FrameSwap:
(2)  223/ 60005E0 : D210                		mov.l	#_vdpreg,r2
(2)  224/ 60005E2 :                     .wait_fb:
(2)  225/ 60005E2 : 8525                		mov.w	@($A,r2),r0
(2)  226/ 60005E4 : C802                		tst	#2,r0
(2)  227/ 60005E6 : 8BFC                		bf	.wait_fb
(2)  228/ 60005E8 : 8525                		mov.w	@($A,r2),r0
(2)  229/ 60005EA : CA01                		xor	#1,r0
(2)  230/ 60005EC : 8125                		mov.w	r0,@($A,r2)
(2)  231/ 60005EE : C901                		and	#1,r0
(2)  232/ 60005F0 : 6103                		mov	r0,r1
(2)  233/ 60005F2 :                     .wait_result:
(2)  234/ 60005F2 : 8525                		mov.w	@($A,r2),r0
(2)  235/ 60005F4 : C901                		and	#1,r0
(2)  236/ 60005F6 : 3100                		cmp/eq	r0,r1
(2)  237/ 60005F8 : 8BFB                		bf	.wait_result
(2)  238/ 60005FA : 000B                		rts
(2)  239/ 60005FC : 0009                		nop
(2)  240/ 60005FE :                     		align 4
(2)  241/ 6000600 :                     
(2)  242/ 6000600 :                     ; ------------------------------------
(2)  243/ 6000600 :                     ; MarsVdp_LoadPal
(2)  244/ 6000600 :                     ; 
(2)  245/ 6000600 :                     ; Load palette to RAM, the
(2)  246/ 6000600 :                     ; Palette will be transfered on VBlank
(2)  247/ 6000600 :                     ;
(2)  248/ 6000600 :                     ; Input:
(2)  249/ 6000600 :                     ; r1 - Data
(2)  250/ 6000600 :                     ; r2 - Start at
(2)  251/ 6000600 :                     ; r3 - Number of colors
(2)  252/ 6000600 :                     ; 
(2)  253/ 6000600 :                     ; Uses:
(2)  254/ 6000600 :                     ; r0,r4-r6
(2)  255/ 6000600 :                     ; ------------------------------------
(2)  256/ 6000600 :                     
(2)  257/ 6000600 :                     MarsVideo_LoadPal:
(2)  258/ 6000600 : 6413                		mov 	r1,r4
(2)  259/ 6000602 : D50A                		mov 	#RAM_Mars_Palette,r5
(2)  260/ 6000604 : 6023                		mov 	r2,r0
(2)  261/ 6000606 : 4000                		shll	r0
(2)  262/ 6000608 : 350C                		add 	r0,r5
(2)  263/ 600060A : 6633                		mov 	r3,r6
(2)  264/ 600060C : D708                		mov	#$8000,r7
(2)  265/ 600060E :                     .loop:
(2)  266/ 600060E : 6045                		mov.w	@r4+,r0
(2)  267/ 6000610 : 207B                		or	r7,r0
(2)  268/ 6000612 : 2501                		mov.w	r0,@r5
(2)  269/ 6000614 : 7502                		add 	#2,r5
(2)  270/ 6000616 : 4610                		dt	r6
(2)  271/ 6000618 : 8BF9                		bf	.loop
(2)  272/ 600061A : 000B                		rts
(2)  273/ 600061C : 0009                		nop
(2)  274/ 600061E :                     		align 4
(2)  275/ 6000620 : 2000 4000 2000 4100 		ltorg
                    2400 0000 0600 5900 
                    0000 8000 0080 0100 
                    00F0 00FF           
(2)  276/ 600063C :                     
(2)  277/ 600063C :                     ; ====================================================================
(2)  278/ 600063C :                     ; ----------------------------------------------------------------
(2)  279/ 600063C :                     ; 3D MODEL RENDERER
(2)  280/ 600063C :                     ; ----------------------------------------------------------------
(2)  281/ 600063C :                     
(2)  282/ 600063C :                     MarsMdl_Init:
(2)  283/ 600063C : 4F22                		sts	pr,@-r15
(2)  284/ 600063E : E000                		mov	#0,r0
(2)  285/ 6000640 : D104                		mov	#RAM_Mars_Objects,r1
(2)  286/ 6000642 : E207                		mov	#sizeof_mdlobj/4,r2
(2)  287/ 6000644 :                     .clnup:
(2)  288/ 6000644 : 2102                		mov	r0,@r1
(2)  289/ 6000646 : 4210                		dt	r2
(2)  290/ 6000648 : 8FFC                		bf/s	.clnup
(2)  291/ 600064A : 7104                		add	#4,r1
(2)  292/ 600064C : 4F26                		lds	@r15+,pr
(2)  293/ 600064E : 000B                		rts
(2)  294/ 6000650 : 0009                		nop
(2)  295/ 6000652 :                     		align 4
(2)  296/ 6000654 : 0600 9B3C           		ltorg
(2)  297/ 6000658 :                     
(2)  298/ 6000658 :                     ; ------------------------------------------------
(2)  299/ 6000658 :                     ; MarsMdl_ReadModel
(2)  300/ 6000658 :                     ; 
(2)  301/ 6000658 :                     ; r14 - Current model address
(2)  302/ 6000658 :                     ; ------------------------------------------------
(2)  303/ 6000658 :                     
(2)  304/ 6000658 :                     MarsMdl_ReadModel:
(2)  305/ 6000658 : 4F22                		sts	pr,@-r15
(2)  306/ 600065A :                     
(2)  307/ 600065A :                     	; TODO: rework on this later
(2)  308/ 600065A :                     ; 		mov	@(mdl_animdata,r14),r13
(2)  309/ 600065A :                     ; 		cmp/pl	r13
(2)  310/ 600065A :                     ; 		bf	.no_anim
(2)  311/ 600065A :                     ; 		mov	@(mdl_animtimer,r14),r0
(2)  312/ 600065A :                     ; 		add	#-1,r0
(2)  313/ 600065A :                     ; 		cmp/pl 	r0
(2)  314/ 600065A :                     ; 		bt	.wait_camanim
(2)  315/ 600065A :                     ; 		mov	@r13+,r2
(2)  316/ 600065A :                     ; 		mov	@(mdl_animframe,r14),r0
(2)  317/ 600065A :                     ; 		add	#1,r0
(2)  318/ 600065A :                     ; 		cmp/eq	r2,r0
(2)  319/ 600065A :                     ; 		bf	.on_frames
(2)  320/ 600065A :                     ; 		xor	r0,r0
(2)  321/ 600065A :                     ; .on_frames:
(2)  322/ 600065A :                     ; 		mov	r0,r1
(2)  323/ 600065A :                     ; 		mov	r0,@(mdl_animframe,r14)
(2)  324/ 600065A :                     ; 		mov	#$18,r0
(2)  325/ 600065A :                     ; 		mulu	r0,r1
(2)  326/ 600065A :                     ; 		sts	macl,r0 	
(2)  327/ 600065A :                     ; 		add	r0,r13
(2)  328/ 600065A :                     ; 		mov	@r13+,r1
(2)  329/ 600065A :                     ; 		mov	@r13+,r2
(2)  330/ 600065A :                     ; 		mov	@r13+,r3
(2)  331/ 600065A :                     ; 		mov	@r13+,r4
(2)  332/ 600065A :                     ; 		mov	@r13+,r5
(2)  333/ 600065A :                     ; 		mov	@r13+,r6
(2)  334/ 600065A :                     ; 		mov	r1,@(mdl_x_pos,r14)
(2)  335/ 600065A :                     ; 		mov	r2,@(mdl_y_pos,r14)
(2)  336/ 600065A :                     ; 		mov	r3,@(mdl_z_pos,r14)
(2)  337/ 600065A :                     ; 		mov	r4,@(mdl_x_rot,r14)
(2)  338/ 600065A :                     ; 		mov	r5,@(mdl_y_rot,r14)
(2)  339/ 600065A :                     ; 		mov	r6,@(mdl_z_rot,r14)
(2)  340/ 600065A :                     ; 		mov	#1,r0				; TEMPORAL timer
(2)  341/ 600065A :                     ; .wait_camanim:
(2)  342/ 600065A :                     ; 		mov	r0,@(mdl_animtimer,r14)	
(2)  343/ 600065A :                     ; .no_anim:
(2)  344/ 600065A :                     
(2)  345/ 600065A :                     	; Now start reading
(2)  346/ 600065A : C603                		mov	@(marsGbl_CurrFacePos,gbr),r0
(2)  347/ 600065C : 6D03                		mov	r0,r13				; r13 - output faces
(2)  348/ 600065E : 5CE0                		mov	@(mdl_data,r14),r12		; r12 - model header
(2)  349/ 6000660 : 5BC2                		mov 	@(8,r12),r11			; r11 - face data
(2)  350/ 6000662 : 5AC1                		mov 	@(4,r12),r10			; r10 - vertice data (X,Y,Z)
(2)  351/ 6000664 : 69C1                		mov.w	@r12,r9				;  r9 - Number of faces used on model
(2)  352/ 6000666 : C602                		mov	@(marsGbl_CurrZList,gbr),r0	;  r8 - Zlist for sorting
(2)  353/ 6000668 : 6803                		mov	r0,r8
(2)  354/ 600066A :                     .next_face:
(2)  355/ 600066A : C508                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Ran out of space to store faces?
(2)  356/ 600066C : 91D8                		mov	#MAX_FACES,r1
(2)  357/ 600066E : 3013                		cmp/ge	r1,r0
(2)  358/ 6000670 : 8B01                		bf	.can_build
(2)  359/ 6000672 : A0CC                		bra	.exit_model
(2)  360/ 6000674 : 0009                		nop
(2)  361/ 6000676 :                     .can_build:
(2)  362/ 6000676 : 64B5                		mov.w	@r11+,r4			; Read type from model
(2)  363/ 6000678 : E703                		mov	#3,r7				; r7 - Current polygon type: triangle (3)
(2)  364/ 600067A : 6043                		mov	r4,r0
(2)  365/ 600067C : 4019                		shlr8	r0
(2)  366/ 600067E : C840                		tst	#PLGN_TRI,r0			; Model face uses triangle?
(2)  367/ 6000680 : 8B00                		bf	.set_tri
(2)  368/ 6000682 : 7701                		add	#1,r7				; Face is quad, r7 = 4 points
(2)  369/ 6000684 :                     .set_tri:
(2)  370/ 6000684 : 4415                		cmp/pl	r4				; Faces uses texture?
(2)  371/ 6000686 : 8936                		bt	.solid_type
(2)  372/ 6000688 :                     
(2)  373/ 6000688 :                     ; --------------------------------
(2)  374/ 6000688 :                     ; Set texture material
(2)  375/ 6000688 :                     ; --------------------------------
(2)  376/ 6000688 :                     
(2)  377/ 6000688 : 56C3                		mov	@($C,r12),r6			; r6 - Material data
(2)  378/ 600068A : 65D3                		mov	r13,r5				; r5 - Go to UV section 
(2)  379/ 600068C : 7528                		add 	#polygn_srcpnts,r5
(2)  380/ 600068E : 6373                		mov	r7,r3				; r3 - copy of current face points (3 or 4)
(2)  381/ 6000690 :                     
(2)  382/ 6000690 :                     	; New method
(2)  383/ 6000690 :                     	rept 3
(2)  384/ 6000690 :                     		mov.w	@r11+,r0			; Read UV index			
(2)  385/ 6000690 :                     		extu	r0,r0
(2)  386/ 6000690 :                     		shll2	r0
(2)  387/ 6000690 :                     		mov	@(r6,r0),r0
(2)  388/ 6000690 :                     		mov.w	r0,@(2,r5)
(2)  389/ 6000690 :                     		shlr16	r0
(2)  390/ 6000690 :                     		mov.w	r0,@r5
(2)  391/ 6000690 :                     		add	#4,r5
(2)  392/ 6000690 :                     	endm
(2)  384/ 6000690 : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  385/ 6000692 : 600D                		extu	r0,r0
(2)  386/ 6000694 : 4008                		shll2	r0
(2)  387/ 6000696 : 006E                		mov	@(r6,r0),r0
(2)  388/ 6000698 : 8151                		mov.w	r0,@(2,r5)
(2)  389/ 600069A : 4029                		shlr16	r0
(2)  390/ 600069C : 2501                		mov.w	r0,@r5
(2)  391/ 600069E : 7504                		add	#4,r5
(2)  384/ 60006A0 : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  385/ 60006A2 : 600D                		extu	r0,r0
(2)  386/ 60006A4 : 4008                		shll2	r0
(2)  387/ 60006A6 : 006E                		mov	@(r6,r0),r0
(2)  388/ 60006A8 : 8151                		mov.w	r0,@(2,r5)
(2)  389/ 60006AA : 4029                		shlr16	r0
(2)  390/ 60006AC : 2501                		mov.w	r0,@r5
(2)  391/ 60006AE : 7504                		add	#4,r5
(2)  384/ 60006B0 : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  385/ 60006B2 : 600D                		extu	r0,r0
(2)  386/ 60006B4 : 4008                		shll2	r0
(2)  387/ 60006B6 : 006E                		mov	@(r6,r0),r0
(2)  388/ 60006B8 : 8151                		mov.w	r0,@(2,r5)
(2)  389/ 60006BA : 4029                		shlr16	r0
(2)  390/ 60006BC : 2501                		mov.w	r0,@r5
(2)  391/ 60006BE : 7504                		add	#4,r5
(2)  393/ 60006C0 : E003                		mov	#3,r0			; Triangle?
(2)  394/ 60006C2 : 3700                		cmp/eq	r0,r7
(2)  395/ 60006C4 : 8906                		bt	.alluvdone
(2)  396/ 60006C6 : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  397/ 60006C8 : 600D                		extu	r0,r0
(2)  398/ 60006CA : 4008                		shll2	r0
(2)  399/ 60006CC : 006E                		mov	@(r6,r0),r0
(2)  400/ 60006CE : 8151                		mov.w	r0,@(2,r5)
(2)  401/ 60006D0 : 4029                		shlr16	r0
(2)  402/ 60006D2 : 2501                		mov.w	r0,@r5
(2)  403/ 60006D4 :                     .alluvdone:
(2)  404/ 60006D4 :                     
(2)  405/ 60006D4 : 6043                		mov	r4,r0
(2)  406/ 60006D6 : 95A4                		mov	#$1FFF,r5
(2)  407/ 60006D8 : 2059                		and	r5,r0
(2)  408/ 60006DA : 4008                		shll2	r0
(2)  409/ 60006DC : 4000                		shll	r0
(2)  410/ 60006DE : 56C4                		mov	@($10,r12),r6
(2)  411/ 60006E0 : 360C                		add	r0,r6
(2)  412/ 60006E2 : D04C                		mov	#$E000,r0		; grab special bits
(2)  413/ 60006E4 : 2409                		and	r0,r4
(2)  414/ 60006E6 : 4428                		shll16	r4
(2)  415/ 60006E8 : 5061                		mov	@(4,r6),r0
(2)  416/ 60006EA : 240B                		or	r0,r4
(2)  417/ 60006EC : 1D40                		mov	r4,@(polygn_type,r13)
(2)  418/ 60006EE : 6062                		mov	@r6,r0
(2)  419/ 60006F0 : 1D01                		mov	r0,@(polygn_mtrl,r13)
(2)  420/ 60006F2 : A007                		bra	.go_faces
(2)  421/ 60006F4 : 0009                		nop
(2)  422/ 60006F6 :                     
(2)  423/ 60006F6 :                     ; --------------------------------
(2)  424/ 60006F6 :                     ; Set texture material
(2)  425/ 60006F6 :                     ; --------------------------------
(2)  426/ 60006F6 :                     
(2)  427/ 60006F6 :                     .solid_type:
(2)  428/ 60006F6 : 6043                		mov	r4,r0
(2)  429/ 60006F8 : D546                		mov	#$E000,r5
(2)  430/ 60006FA : 2459                		and	r5,r4
(2)  431/ 60006FC : 4428                		shll16	r4
(2)  432/ 60006FE : 1D40                		mov	r4,@(polygn_type,r13)		; Set type 0 (tri) or quad (1)
(2)  433/ 6000700 : C9FF                		and	#$FF,r0
(2)  434/ 6000702 : 1D01                		mov	r0,@(polygn_mtrl,r13)		; Set pixel color (0-255)
(2)  435/ 6000704 :                     
(2)  436/ 6000704 :                     ; --------------------------------
(2)  437/ 6000704 :                     ; Read faces
(2)  438/ 6000704 :                     ; --------------------------------
(2)  439/ 6000704 :                     
(2)  440/ 6000704 :                     .go_faces:
(2)  441/ 6000704 : 61D3                		mov	r13,r1
(2)  442/ 6000706 : 7108                		add 	#polygn_points,r1
(2)  443/ 6000708 : 66B3                		mov	r11,r6
(2)  444/ 600070A : 6073                		mov	r7,r0
(2)  445/ 600070C : 4000                		shll	r0
(2)  446/ 600070E : 3B0C                		add	r0,r11
(2)  447/ 6000710 : 2F86                		mov 	r8,@-r15
(2)  448/ 6000712 : 2F96                		mov 	r9,@-r15
(2)  449/ 6000714 : 2FB6                		mov 	r11,@-r15
(2)  450/ 6000716 : 2FC6                		mov 	r12,@-r15
(2)  451/ 6000718 : 2FD6                		mov 	r13,@-r15
(2)  452/ 600071A : 9883                		mov	#-160,r8
(2)  453/ 600071C : 698B                		neg	r8,r9
(2)  454/ 600071E : EB90                		mov	#-112,r11
(2)  455/ 6000720 : 6CBB                		neg	r11,r12
(2)  456/ 6000722 : D53D                		mov	#$7FFFFFFF,r5
(2)  457/ 6000724 : EDFF                		mov	#$FFFFFFFF,r13
(2)  458/ 6000726 :                     
(2)  459/ 6000726 :                     	; New method, might speed up
(2)  460/ 6000726 :                     	; a little...
(2)  461/ 6000726 :                     	rept 3
(2)  462/ 6000726 :                     		mov	#0,r0
(2)  463/ 6000726 :                     		mov.w 	@r6+,r0
(2)  464/ 6000726 :                     		mov	#$C,r4
(2)  465/ 6000726 :                     		mulu	r4,r0
(2)  466/ 6000726 :                     		sts	macl,r0
(2)  467/ 6000726 :                     		mov	r10,r4
(2)  468/ 6000726 :                     		add 	r0,r4
(2)  469/ 6000726 :                     		mov	@r4,r2
(2)  470/ 6000726 :                     		mov	@(4,r4),r3
(2)  471/ 6000726 :                     		mov	@(8,r4),r4
(2)  472/ 6000726 :                     		bsr	mdlrd_setpoint
(2)  473/ 6000726 :                     		nop
(2)  474/ 6000726 :                     		mov	r2,@r1
(2)  475/ 6000726 :                     		mov	r3,@(4,r1)
(2)  476/ 6000726 :                     		add	#8,r1
(2)  477/ 6000726 :                     	endm
(2)  462/ 6000726 : E000                		mov	#0,r0
(2)  463/ 6000728 : 6065                		mov.w 	@r6+,r0
(2)  464/ 600072A : E40C                		mov	#$C,r4
(2)  465/ 600072C : 204E                		mulu	r4,r0
(2)  466/ 600072E : 001A                		sts	macl,r0
(2)  467/ 6000730 : 64A3                		mov	r10,r4
(2)  468/ 6000732 : 340C                		add 	r0,r4
(2)  469/ 6000734 : 6242                		mov	@r4,r2
(2)  470/ 6000736 : 5341                		mov	@(4,r4),r3
(2)  471/ 6000738 : 5442                		mov	@(8,r4),r4
(2)  472/ 600073A : B075                		bsr	mdlrd_setpoint
(2)  473/ 600073C : 0009                		nop
(2)  474/ 600073E : 2122                		mov	r2,@r1
(2)  475/ 6000740 : 1131                		mov	r3,@(4,r1)
(2)  476/ 6000742 : 7108                		add	#8,r1
(2)  462/ 6000744 : E000                		mov	#0,r0
(2)  463/ 6000746 : 6065                		mov.w 	@r6+,r0
(2)  464/ 6000748 : E40C                		mov	#$C,r4
(2)  465/ 600074A : 204E                		mulu	r4,r0
(2)  466/ 600074C : 001A                		sts	macl,r0
(2)  467/ 600074E : 64A3                		mov	r10,r4
(2)  468/ 6000750 : 340C                		add 	r0,r4
(2)  469/ 6000752 : 6242                		mov	@r4,r2
(2)  470/ 6000754 : 5341                		mov	@(4,r4),r3
(2)  471/ 6000756 : 5442                		mov	@(8,r4),r4
(2)  472/ 6000758 : B066                		bsr	mdlrd_setpoint
(2)  473/ 600075A : 0009                		nop
(2)  474/ 600075C : 2122                		mov	r2,@r1
(2)  475/ 600075E : 1131                		mov	r3,@(4,r1)
(2)  476/ 6000760 : 7108                		add	#8,r1
(2)  462/ 6000762 : E000                		mov	#0,r0
(2)  463/ 6000764 : 6065                		mov.w 	@r6+,r0
(2)  464/ 6000766 : E40C                		mov	#$C,r4
(2)  465/ 6000768 : 204E                		mulu	r4,r0
(2)  466/ 600076A : 001A                		sts	macl,r0
(2)  467/ 600076C : 64A3                		mov	r10,r4
(2)  468/ 600076E : 340C                		add 	r0,r4
(2)  469/ 6000770 : 6242                		mov	@r4,r2
(2)  470/ 6000772 : 5341                		mov	@(4,r4),r3
(2)  471/ 6000774 : 5442                		mov	@(8,r4),r4
(2)  472/ 6000776 : B057                		bsr	mdlrd_setpoint
(2)  473/ 6000778 : 0009                		nop
(2)  474/ 600077A : 2122                		mov	r2,@r1
(2)  475/ 600077C : 1131                		mov	r3,@(4,r1)
(2)  476/ 600077E : 7108                		add	#8,r1
(2)  478/ 6000780 : E003                		mov	#3,r0			; Triangle?
(2)  479/ 6000782 : 3700                		cmp/eq	r0,r7
(2)  480/ 6000784 : 890D                		bt	.allfcsdone
(2)  481/ 6000786 : E000                		mov	#0,r0			; Do forth point for Quad
(2)  482/ 6000788 : 6065                		mov.w 	@r6+,r0
(2)  483/ 600078A : E40C                		mov	#$C,r4
(2)  484/ 600078C : 204E                		mulu	r4,r0
(2)  485/ 600078E : 001A                		sts	macl,r0
(2)  486/ 6000790 : 64A3                		mov	r10,r4
(2)  487/ 6000792 : 340C                		add 	r0,r4
(2)  488/ 6000794 : 6242                		mov	@r4,r2
(2)  489/ 6000796 : 5341                		mov	@(4,r4),r3
(2)  490/ 6000798 : 5442                		mov	@(8,r4),r4
(2)  491/ 600079A : B045                		bsr	mdlrd_setpoint
(2)  492/ 600079C : 0009                		nop
(2)  493/ 600079E : 2122                		mov	r2,@r1
(2)  494/ 60007A0 : 1131                		mov	r3,@(4,r1)
(2)  495/ 60007A2 :                     .allfcsdone:
(2)  496/ 60007A2 :                     
(2)  497/ 60007A2 : 6183                		mov	r8,r1
(2)  498/ 60007A4 : 6293                		mov	r9,r2
(2)  499/ 60007A6 : 63B3                		mov	r11,r3
(2)  500/ 60007A8 : 64C3                		mov	r12,r4
(2)  501/ 60007AA : 66D3                		mov	r13,r6
(2)  502/ 60007AC : 6DF6                		mov	@r15+,r13
(2)  503/ 60007AE : 6CF6                		mov	@r15+,r12
(2)  504/ 60007B0 : 6BF6                		mov	@r15+,r11
(2)  505/ 60007B2 : 69F6                		mov	@r15+,r9
(2)  506/ 60007B4 : 68F6                		mov	@r15+,r8
(2)  507/ 60007B6 :                     		
(2)  508/ 60007B6 :                     	; NOTE: if you don't like how the perspective works
(2)  509/ 60007B6 :                     	; change this register depending how you want to ignore
(2)  510/ 60007B6 :                     	; faces closer to the camera:
(2)  511/ 60007B6 :                     	; 
(2)  512/ 60007B6 :                     	; r5 - Back Z point, keep affine limitations
(2)  513/ 60007B6 :                     	; r6 - Front Z point, skip face but larger faces are affected
(2)  514/ 60007B6 : 4511                		cmp/pz	r5
(2)  515/ 60007B8 : 8921                		bt	.face_out
(2)  516/ 60007BA : D018                		mov	#RAM_Mars_ObjCamera,r0
(2)  517/ 60007BC : 5705                		mov	@(cam_y_pos,r0),r7
(2)  518/ 60007BE : 4719                		shlr8	r7
(2)  519/ 60007C0 : 677F                		exts	r7,r7
(2)  520/ 60007C2 : 4715                		cmp/pl	r7
(2)  521/ 60007C4 : 8B00                		bf	.revrscam
(2)  522/ 60007C6 : 677B                		neg	r7,r7
(2)  523/ 60007C8 :                     .revrscam:
(2)  524/ 60007C8 : 902D                		mov	#MAX_ZDIST,r0
(2)  525/ 60007CA : 3703                		cmp/ge	r0,r7
(2)  526/ 60007CC : 8900                		bt	.camlimit
(2)  527/ 60007CE : 6703                		mov	r0,r7
(2)  528/ 60007D0 :                     .camlimit:
(2)  529/ 60007D0 :                     ; 		cmp/pl	r6
(2)  530/ 60007D0 :                     ; 		bt	.face_out
(2)  531/ 60007D0 : 9029                		mov	#MAX_ZDIST,r0		; Draw distance
(2)  532/ 60007D2 : 307C                		add 	r7,r0
(2)  533/ 60007D4 : 3503                		cmp/ge	r0,r5
(2)  534/ 60007D6 : 8B12                		bf	.face_out
(2)  535/ 60007D8 :                     		
(2)  536/ 60007D8 : 9024                		mov	#-(SCREEN_WIDTH/2),r0
(2)  537/ 60007DA : 3107                		cmp/gt	r0,r1
(2)  538/ 60007DC : 8B0F                		bf	.face_out
(2)  539/ 60007DE : 600B                		neg	r0,r0
(2)  540/ 60007E0 : 3203                		cmp/ge	r0,r2
(2)  541/ 60007E2 : 890C                		bt	.face_out
(2)  542/ 60007E4 : E090                		mov	#-(SCREEN_HEIGHT/2),r0
(2)  543/ 60007E6 : 3307                		cmp/gt	r0,r3
(2)  544/ 60007E8 : 8B09                		bf	.face_out
(2)  545/ 60007EA : 600B                		neg	r0,r0
(2)  546/ 60007EC : 3403                		cmp/ge	r0,r4
(2)  547/ 60007EE : 8906                		bt	.face_out
(2)  548/ 60007F0 :                     
(2)  549/ 60007F0 :                     ; --------------------------------
(2)  550/ 60007F0 :                     
(2)  551/ 60007F0 :                     .face_ok:
(2)  552/ 60007F0 : C508                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Add 1 face to the list
(2)  553/ 60007F2 : 7001                		add	#1,r0
(2)  554/ 60007F4 : C108                		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(2)  555/ 60007F6 : 2852                		mov	r5,@r8				; Store current Z to Zlist
(2)  556/ 60007F8 : 18D1                		mov	r13,@(4,r8)			; And it's address
(2)  557/ 60007FA : 7808                		add	#8,r8
(2)  558/ 60007FC : 7D38                		add	#sizeof_polygn,r13
(2)  559/ 60007FE :                     .face_out:
(2)  560/ 60007FE : 4910                		dt	r9
(2)  561/ 6000800 : 8901                		bt	.finish_this
(2)  562/ 6000802 : AF32                		bra	.next_face
(2)  563/ 6000804 : 0009                		nop
(2)  564/ 6000806 :                     .finish_this:
(2)  565/ 6000806 : 6083                		mov	r8,r0
(2)  566/ 6000808 : C202                		mov	r0,@(marsGbl_CurrZList,gbr)
(2)  567/ 600080A : 60D3                		mov	r13,r0
(2)  568/ 600080C : C203                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(2)  569/ 600080E :                     .exit_model:
(2)  570/ 600080E : 4F26                		lds	@r15+,pr
(2)  571/ 6000810 : 000B                		rts
(2)  572/ 6000812 : 0009                		nop
(2)  573/ 6000814 :                     		align 4
(2)  574/ 6000814 : 0000 E000 7FFF FFFF 		ltorg
                    0600 9B04 0400 1FFF 
                    FF60 FC00           
(2)  575/ 6000828 :                     
(2)  576/ 6000828 :                     ; ----------------------------------------	
(2)  577/ 6000828 :                     ; Modify position to current point
(2)  578/ 6000828 :                     ; ----------------------------------------
(2)  579/ 6000828 :                     
(2)  580/ 6000828 :                     		align 4
(2)  581/ 6000828 :                     mdlrd_setpoint:
(2)  582/ 6000828 : 4F22                		sts	pr,@-r15
(2)  583/ 600082A : 2F56                		mov 	r5,@-r15
(2)  584/ 600082C : 2F66                		mov 	r6,@-r15
(2)  585/ 600082E : 2F76                		mov 	r7,@-r15
(2)  586/ 6000830 : 2F86                		mov 	r8,@-r15
(2)  587/ 6000832 : 2F96                		mov 	r9,@-r15
(2)  588/ 6000834 : 2FA6                		mov 	r10,@-r15
(2)  589/ 6000836 : 2FB6                		mov 	r11,@-r15
(2)  590/ 6000838 :                     		
(2)  591/ 6000838 :                     	; Object rotation
(2)  592/ 6000838 : 6523                		mov	r2,r5			; r5 - X
(2)  593/ 600083A : 6643                		mov	r4,r6			; r6 - Z
(2)  594/ 600083C : 50E4                  		mov 	@(mdl_x_rot,r14),r0
(2)  595/ 600083E : B088                  		bsr	mdlrd_rotate
(2)  596/ 6000840 : 4019                		shlr8	r0
(2)  597/ 6000842 : 6273                   		mov	r7,r2
(2)  598/ 6000844 : 6533                   		mov	r3,r5
(2)  599/ 6000846 : 6683                  		mov	r8,r6
(2)  600/ 6000848 : 50E5                  		mov 	@(mdl_y_rot,r14),r0
(2)  601/ 600084A : B082                  		bsr	mdlrd_rotate
(2)  602/ 600084C : 4019                		shlr8	r0
(2)  603/ 600084E : 6483                   		mov	r8,r4
(2)  604/ 6000850 : 6523                   		mov	r2,r5
(2)  605/ 6000852 : 6673                   		mov	r7,r6
(2)  606/ 6000854 : 50E6                   		mov 	@(mdl_z_rot,r14),r0
(2)  607/ 6000856 : B07C                  		bsr	mdlrd_rotate
(2)  608/ 6000858 : 4019                		shlr8	r0
(2)  609/ 600085A : 6273                   		mov	r7,r2
(2)  610/ 600085C : 6383                   		mov	r8,r3
(2)  611/ 600085E : 50E1                		mov	@(mdl_x_pos,r14),r0
(2)  612/ 6000860 : 4019                		shlr8	r0
(2)  613/ 6000862 : 600F                		exts	r0,r0
(2)  614/ 6000864 : 320C                		add 	r0,r2
(2)  615/ 6000866 : 50E2                		mov	@(mdl_y_pos,r14),r0
(2)  616/ 6000868 : 4019                		shlr8	r0
(2)  617/ 600086A : 600F                		exts	r0,r0
(2)  618/ 600086C : 330C                		add 	r0,r3
(2)  619/ 600086E : 50E3                		mov	@(mdl_z_pos,r14),r0
(2)  620/ 6000870 : 4019                		shlr8	r0
(2)  621/ 6000872 : 600F                		exts	r0,r0
(2)  622/ 6000874 : 340C                		add 	r0,r4
(2)  623/ 6000876 :                     
(2)  624/ 6000876 :                     	; Include camera changes
(2)  625/ 6000876 : DB34                		mov 	#RAM_Mars_ObjCamera,r11
(2)  626/ 6000878 : 50B4                		mov	@(cam_x_pos,r11),r0
(2)  627/ 600087A : 4019                		shlr8	r0
(2)  628/ 600087C : 4001                		shlr	r0
(2)  629/ 600087E : 600F                		exts	r0,r0
(2)  630/ 6000880 : 3208                		sub 	r0,r2
(2)  631/ 6000882 : 50B5                		mov	@(cam_y_pos,r11),r0
(2)  632/ 6000884 : 4019                		shlr8	r0
(2)  633/ 6000886 : 4001                		shlr	r0
(2)  634/ 6000888 : 600F                		exts	r0,r0
(2)  635/ 600088A : 3308                		sub 	r0,r3
(2)  636/ 600088C : 50B6                		mov	@(cam_z_pos,r11),r0
(2)  637/ 600088E : 4019                		shlr8	r0
(2)  638/ 6000890 : 4001                		shlr	r0
(2)  639/ 6000892 : 600F                		exts	r0,r0
(2)  640/ 6000894 : 340C                		add 	r0,r4
(2)  641/ 6000896 :                     
(2)  642/ 6000896 : 6523                		mov	r2,r5
(2)  643/ 6000898 : 6643                		mov	r4,r6
(2)  644/ 600089A : 50B7                  		mov 	@(cam_x_rot,r11),r0
(2)  645/ 600089C : B059                  		bsr	mdlrd_rotate
(2)  646/ 600089E : 4019                		shlr8	r0
(2)  647/ 60008A0 : 6273                   		mov	r7,r2
(2)  648/ 60008A2 : 6483                   		mov	r8,r4
(2)  649/ 60008A4 : 6533                   		mov	r3,r5
(2)  650/ 60008A6 : 6683                  		mov	r8,r6
(2)  651/ 60008A8 : 50B8                  		mov 	@(cam_y_rot,r11),r0
(2)  652/ 60008AA : B052                  		bsr	mdlrd_rotate
(2)  653/ 60008AC : 4019                		shlr8	r0
(2)  654/ 60008AE : 6483                   		mov	r8,r4
(2)  655/ 60008B0 : 6523                   		mov	r2,r5
(2)  656/ 60008B2 : 6673                   		mov	r7,r6
(2)  657/ 60008B4 : 50B9                   		mov 	@(cam_z_rot,r11),r0
(2)  658/ 60008B6 : B04C                  		bsr	mdlrd_rotate
(2)  659/ 60008B8 : 4019                		shlr8	r0
(2)  660/ 60008BA : 6273                   		mov	r7,r2
(2)  661/ 60008BC : 6383                   		mov	r8,r3
(2)  662/ 60008BE :                     
(2)  663/ 60008BE : 9847                		mov 	#_JR,r8
(2)  664/ 60008C0 : D722                		mov	#256<<16,r7
(2)  665/ 60008C2 : 604B                		neg	r4,r0		; reverse Z
(2)  666/ 60008C4 : 4015                		cmp/pl	r0
(2)  667/ 60008C6 : 8915                		bt	.inside
(2)  668/ 60008C8 :                     		
(2)  669/ 60008C8 : 6043                		mov	r4,r0
(2)  670/ 60008CA : 7040                		add 	#64,r0
(2)  671/ 60008CC : 4028                		shll16	r0
(2)  672/ 60008CE : 6503                		mov	r0,r5
(2)  673/ 60008D0 : 325D                		dmuls	r5,r2
(2)  674/ 60008D2 : 000A                		sts	mach,r0
(2)  675/ 60008D4 : 021A                		sts	macl,r2
(2)  676/ 60008D6 : 220D                		xtrct	r0,r2
(2)  677/ 60008D8 : 335D                		dmuls	r5,r3
(2)  678/ 60008DA : 000A                		sts	mach,r0
(2)  679/ 60008DC : 031A                		sts	macl,r3
(2)  680/ 60008DE : 230D                		xtrct	r0,r3
(2)  681/ 60008E0 :                     	rept 4
(2)  682/ 60008E0 :                     		shar	r2
(2)  683/ 60008E0 :                     		shar	r3
(2)  684/ 60008E0 :                     	endm
(2)  682/ 60008E0 : 4221                		shar	r2
(2)  683/ 60008E2 : 4321                		shar	r3
(2)  682/ 60008E4 : 4221                		shar	r2
(2)  683/ 60008E6 : 4321                		shar	r3
(2)  682/ 60008E8 : 4221                		shar	r2
(2)  683/ 60008EA : 4321                		shar	r3
(2)  682/ 60008EC : 4221                		shar	r2
(2)  683/ 60008EE : 4321                		shar	r3
(2)  685/ 60008F0 : A00D                		bra	.zmulti
(2)  686/ 60008F2 : 0009                		nop
(2)  687/ 60008F4 :                     .inside:
(2)  688/ 60008F4 : 7040                		add 	#64,r0
(2)  689/ 60008F6 : 2802                		mov 	r0,@r8
(2)  690/ 60008F8 : 1871                		mov 	r7,@(4,r8)
(2)  691/ 60008FA : 0009                		nop
(2)  692/ 60008FC : 5781                		mov 	@(4,r8),r7
(2)  693/ 60008FE : 327D                		dmuls	r7,r2
(2)  694/ 6000900 : 000A                		sts	mach,r0
(2)  695/ 6000902 : 021A                		sts	macl,r2
(2)  696/ 6000904 : 220D                		xtrct	r0,r2
(2)  697/ 6000906 : 337D                		dmuls	r7,r3
(2)  698/ 6000908 : 000A                		sts	mach,r0
(2)  699/ 600090A : 031A                		sts	macl,r3
(2)  700/ 600090C : 230D                		xtrct	r0,r3
(2)  701/ 600090E :                     .zmulti:
(2)  702/ 600090E :                     
(2)  703/ 600090E :                     
(2)  704/ 600090E : 6BF6                		mov	@r15+,r11
(2)  705/ 6000910 : 6AF6                		mov	@r15+,r10
(2)  706/ 6000912 : 69F6                		mov	@r15+,r9
(2)  707/ 6000914 : 68F6                		mov	@r15+,r8
(2)  708/ 6000916 : 67F6                		mov	@r15+,r7
(2)  709/ 6000918 : 66F6                		mov	@r15+,r6
(2)  710/ 600091A : 65F6                		mov	@r15+,r5
(2)  711/ 600091C :                     		
(2)  712/ 600091C :                     	; Set the most far limit points
(2)  713/ 600091C :                     	; for each direction (X,Y,Z)
(2)  714/ 600091C : 34D7                		cmp/gt	r13,r4
(2)  715/ 600091E : 8B00                		bf	.save_z2
(2)  716/ 6000920 : 6D43                		mov	r4,r13
(2)  717/ 6000922 :                     .save_z2:
(2)  718/ 6000922 : 3457                		cmp/gt	r5,r4
(2)  719/ 6000924 : 8900                		bt	.save_z
(2)  720/ 6000926 : 6543                		mov	r4,r5
(2)  721/ 6000928 :                     .save_z:
(2)  722/ 6000928 : 3287                		cmp/gt	r8,r2
(2)  723/ 600092A : 8B00                		bf	.x_lw
(2)  724/ 600092C : 6823                		mov	r2,r8
(2)  725/ 600092E :                     .x_lw:
(2)  726/ 600092E : 3297                		cmp/gt	r9,r2
(2)  727/ 6000930 : 8900                		bt	.x_rw
(2)  728/ 6000932 : 6923                		mov	r2,r9
(2)  729/ 6000934 :                     .x_rw:
(2)  730/ 6000934 : 33B7                		cmp/gt	r11,r3
(2)  731/ 6000936 : 8B00                		bf	.y_lw
(2)  732/ 6000938 : 6B33                		mov	r3,r11
(2)  733/ 600093A :                     .y_lw:
(2)  734/ 600093A : 33C7                		cmp/gt	r12,r3
(2)  735/ 600093C : 8900                		bt	.y_rw
(2)  736/ 600093E : 6C33                		mov	r3,r12
(2)  737/ 6000940 :                     .y_rw:
(2)  738/ 6000940 :                     
(2)  739/ 6000940 : 4F26                		lds	@r15+,pr
(2)  740/ 6000942 : 000B                		rts
(2)  741/ 6000944 : 0009                		nop
(2)  742/ 6000946 :                     		align 4
(2)  743/ 6000948 : 0600 9B04 0100 0000 		ltorg
                    FF00                
(2)  744/ 6000952 :                     
(2)  745/ 6000952 :                     ; ------------------------------
(2)  746/ 6000952 :                     ; Rotate point
(2)  747/ 6000952 :                     ;
(2)  748/ 6000952 :                     ; Entry:
(2)  749/ 6000952 :                     ; r5: x
(2)  750/ 6000952 :                     ; r6: y
(2)  751/ 6000952 :                     ; r0: theta
(2)  752/ 6000952 :                     ;
(2)  753/ 6000952 :                     ; Returns:
(2)  754/ 6000952 :                     ; r7: (x  cos @) + (y sin @)
(2)  755/ 6000952 :                     ; r8: (x -sin @) + (y cos @)
(2)  756/ 6000952 :                     ; ------------------------------
(2)  757/ 6000952 :                     
(2)  758/ 6000952 :                     mdlrd_rotate:
(2)  759/ 6000952 : 9741                    		mov	#$7FF,r7
(2)  760/ 6000954 : 2079                    		and	r7,r0
(2)  761/ 6000956 : 4008                   		shll2	r0
(2)  762/ 6000958 : D71A                		mov	#sin_table,r7
(2)  763/ 600095A : D81B                		mov	#sin_table+$800,r8
(2)  764/ 600095C : 097E                		mov	@(r0,r7),r9
(2)  765/ 600095E : 0A8E                		mov	@(r0,r8),r10
(2)  766/ 6000960 :                     
(2)  767/ 6000960 : 3A5D                		dmuls	r5,r10		; x cos @
(2)  768/ 6000962 : 071A                		sts	macl,r7
(2)  769/ 6000964 : 000A                		sts	mach,r0
(2)  770/ 6000966 : 270D                		xtrct	r0,r7
(2)  771/ 6000968 : 396D                		dmuls	r6,r9		; y sin @
(2)  772/ 600096A : 081A                		sts	macl,r8
(2)  773/ 600096C : 000A                		sts	mach,r0
(2)  774/ 600096E : 280D                		xtrct	r0,r8
(2)  775/ 6000970 : 378C                		add	r8,r7
(2)  776/ 6000972 :                     
(2)  777/ 6000972 : 699B                		neg	r9,r9
(2)  778/ 6000974 : 395D                		dmuls	r5,r9		; x -sin @
(2)  779/ 6000976 : 081A                		sts	macl,r8
(2)  780/ 6000978 : 000A                		sts	mach,r0
(2)  781/ 600097A : 280D                		xtrct	r0,r8
(2)  782/ 600097C : 3A6D                		dmuls	r6,r10		; y cos @
(2)  783/ 600097E : 091A                		sts	macl,r9
(2)  784/ 6000980 : 000A                		sts	mach,r0
(2)  785/ 6000982 : 290D                		xtrct	r0,r9
(2)  786/ 6000984 : 389C                		add	r9,r8
(2)  787/ 6000986 : 000B                 		rts
(2)  788/ 6000988 : 0009                		nop
(2)  789/ 600098A :                     		align 4
(2)  790/ 600098C :                     		
(2)  791/ 600098C :                     ;    		shlr8	r0
(2)  792/ 600098C :                     ;     		mov	#$7FF,r7
(2)  793/ 600098C :                     ;     		and	r7,r0
(2)  794/ 600098C :                     ;    		shll2	r0
(2)  795/ 600098C :                     ; 		mov	#sin_table,r7
(2)  796/ 600098C :                     ; 		mov	#sin_table+$800,r8
(2)  797/ 600098C :                     ; 		mov	@(r0,r7),r9		; r3
(2)  798/ 600098C :                     ; 		mov	@(r0,r8),r10		; r4
(2)  799/ 600098C :                     ; 		dmuls	r5,r10		; x cos @
(2)  800/ 600098C :                     ; 		sts	macl,r7
(2)  801/ 600098C :                     ; 		sts	mach,r0
(2)  802/ 600098C :                     ; 		xtrct	r0,r7
(2)  803/ 600098C :                     ; 		dmuls	r6,r9		; y sin @
(2)  804/ 600098C :                     ; 		sts	macl,r8
(2)  805/ 600098C :                     ; 		sts	mach,r0
(2)  806/ 600098C :                     ; 		xtrct	r0,r8
(2)  807/ 600098C :                     ; 		add	r8,r7
(2)  808/ 600098C :                     ; 		neg	r9,r9
(2)  809/ 600098C :                     ; 		dmuls	r5,r9		; x -sin @
(2)  810/ 600098C :                     ; 		sts	macl,r8
(2)  811/ 600098C :                     ; 		sts	mach,r0
(2)  812/ 600098C :                     ; 		xtrct	r0,r8
(2)  813/ 600098C :                     ; 		dmuls	r6,r10		; y cos @
(2)  814/ 600098C :                     ; 		sts	macl,r9
(2)  815/ 600098C :                     ; 		sts	mach,r0
(2)  816/ 600098C :                     ; 		xtrct	r0,r9
(2)  817/ 600098C :                     ; 		add	r9,r8
(2)  818/ 600098C :                     ;  		rts
(2)  819/ 600098C :                     ; 		nop
(2)  820/ 600098C :                     ; 		align 4
(2)  821/ 600098C :                     ; 		ltorg
(2)  822/ 600098C :                     	
(2)  823/ 600098C :                     ; ------------------------------------------------
(2)  824/ 600098C :                     ; MarsVideo_SetWatchdog
(2)  825/ 600098C :                     ; 
(2)  826/ 600098C :                     ; Starts interrupt for drawing the polygon pieces
(2)  827/ 600098C :                     ; ------------------------------------------------
(2)  828/ 600098C :                     
(2)  829/ 600098C :                     MarsVideo_SetWatchdog:
(2)  830/ 600098C : 4F03                		stc	sr,@-r15
(2)  831/ 600098E : 0002                		stc	sr,r0
(2)  832/ 6000990 : CBF0                		or	#$F0,r0				; Disable interrupts
(2)  833/ 6000992 : 400E                		ldc	r0,sr
(2)  834/ 6000994 : D00D                		mov	#RAM_Mars_VdpDrwList,r0		; Prepare piece drawing list on both READ and WRITE pointers
(2)  835/ 6000996 : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  836/ 6000998 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  837/ 600099A : E000                		mov	#0,r0				; Reset polygon pieces counter
(2)  838/ 600099C : C10A                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  839/ 600099E :                     
(2)  840/ 600099E : D10C                		mov	#Cach_ClrLines,r1		; Line counter for the framebuffer-clear routine
(2)  841/ 60009A0 : 901B                		mov	#$E0,r0
(2)  842/ 60009A2 : 2101                		mov.w	r0,@r1
(2)  843/ 60009A4 : E008                		mov	#8,r0				; Set drawing task to $08 (Clear framebuffer)
(2)  844/ 60009A6 : C10B                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  845/ 60009A8 : D10A                		mov	#_vdpreg,r1
(2)  846/ 60009AA :                     .wait_fb:
(2)  847/ 60009AA : 8515                		mov.w	@($A,r1), r0			; Framebuffer available?
(2)  848/ 60009AC : C802                		tst	#2,r0
(2)  849/ 60009AE : 8BFC                		bf	.wait_fb
(2)  850/ 60009B0 : 9014                		mov.w	#$A1,r0				; Pre-start SVDP fill line at address $A1
(2)  851/ 60009B2 : 8113                		mov.w	r0,@(6,r1)
(2)  852/ 60009B4 : 9113                		mov	#$FFFFFE80,r1
(2)  853/ 60009B6 : 9013                		mov.w	#$5AFF,r0			; Interrupt priority(?)
(2)  854/ 60009B8 : 2101                		mov.w	r0,@r1
(2)  855/ 60009BA : 9012                		mov.w	#$A538,r0			; Enable watchdog (piece drawing routines)
(2)  856/ 60009BC : 2101                		mov.w	r0,@r1
(2)  857/ 60009BE : 4F07                		ldc	@r15+,sr			; Restore interrupts
(2)  858/ 60009C0 : 000B                		rts
(2)  859/ 60009C2 : 0009                		nop
(2)  860/ 60009C4 :                     		align 4
(2)  861/ 60009C4 : 0600 15D0 0600 1DD0 		ltorg
                    0602 5CFC C000 0098 
                    2000 4100 07FF 00E0 
                    00A1 FE80 5AFF A538 
(2)  862/ 60009E4 :                     
(2)  863/ 60009E4 :                     ; ====================================================================
(2)  864/ 60009E4 :                     ; ----------------------------------------------------------------
(2)  865/ 60009E4 :                     ; Video CACHE routines
(2)  866/ 60009E4 :                     ; ----------------------------------------------------------------
(2)  867/ 60009E4 :                     
(2)  868/ 60009E4 :                     		align 4
(2)  869/ 60009E4 :                     CACHE_START:
(2)  870/FFFFFFFFC0000000 :                     		phase $C0000000
(2)  871/FFFFFFFFC0000000 :                     
(2)  872/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)  873/FFFFFFFFC0000000 :                     
(2)  874/FFFFFFFFC0000000 :                     Cach_LnDrw_L	ds.l 14			;
(2)  875/FFFFFFFFC0000038 :                     Cach_LnDrw_S	ds.l 0			; Reads backwards
(2)  876/FFFFFFFFC0000038 :                     CachDDA_Top	ds.l 2*2		; First 2 points
(2)  877/FFFFFFFFC0000048 :                     CachDDA_Last	ds.l 2*2		; Triangle or Quad (+8)
(2)  878/FFFFFFFFC0000058 :                     CachDDA_Src	ds.l 4*2
(2)  879/FFFFFFFFC0000078 :                     CachDDA_Src_L	ds.l 4			; X/DX/Y/DX result for textures
(2)  880/FFFFFFFFC0000088 :                     CachDDA_Src_R	ds.l 4
(2)  881/FFFFFFFFC0000098 :                     Cach_ClrLines	ds.w 1
(2)  882/FFFFFFFFC000009A :                     
(2)  883/FFFFFFFFC000009A :                     ; ------------------------------------------------
(2)  884/FFFFFFFFC000009A :                     ; MASTER Background tasks
(2)  885/FFFFFFFFC000009A :                     ; ------------------------------------------------
(2)  886/FFFFFFFFC000009A :                     
(2)  887/FFFFFFFFC000009A :                     		align 4
(2)  888/FFFFFFFFC000009C :                     ; Cache_OnInterrupt:
(2)  889/FFFFFFFFC000009C :                     m_irq_custom:
(2)  890/FFFFFFFFC000009C : 912C                		mov	#$FFFFFE10,r1
(2)  891/FFFFFFFFC000009E : 8417                		mov.b	@(7,r1), r0
(2)  892/FFFFFFFFC00000A0 : CA02                		xor	#2,r0
(2)  893/FFFFFFFFC00000A2 : 8017                		mov.b	r0,@(7,r1)
(2)  894/FFFFFFFFC00000A4 : C50B                		mov.w	@(marsGbl_DrwTask,gbr),r0	; Framebuffer clear request?
(2)  895/FFFFFFFFC00000A6 : 8808                		cmp/eq	#8,r0
(2)  896/FFFFFFFFC00000A8 : 8B2B                		bf	maindrw_tasks
(2)  897/FFFFFFFFC00000AA :                     
(2)  898/FFFFFFFFC00000AA :                     ; --------------------------------
(2)  899/FFFFFFFFC00000AA :                     ; TASK $08 - Clear Framebuffer
(2)  900/FFFFFFFFC00000AA :                     ; --------------------------------
(2)  901/FFFFFFFFC00000AA :                     
(2)  902/FFFFFFFFC00000AA :                     .task_01:
(2)  903/FFFFFFFFC00000AA : 2F26                		mov	r2,@-r15
(2)  904/FFFFFFFFC00000AC : D110                		mov	#_vdpreg,r1
(2)  905/FFFFFFFFC00000AE : C420                		mov.b	@(marsGbl_CurrFb,gbr),r0
(2)  906/FFFFFFFFC00000B0 : 6203                		mov	r0,r2
(2)  907/FFFFFFFFC00000B2 : 841B                .wait_frmswp:	mov.b	@(framectl,r1),r0
(2)  908/FFFFFFFFC00000B4 : 3200                		cmp/eq	r0,r2
(2)  909/FFFFFFFFC00000B6 : 8BFC                		bf	.wait_frmswp
(2)  910/FFFFFFFFC00000B8 : 8515                .wait_fb:	mov.w   @($A,r1), r0		; Framebuffer free?
(2)  911/FFFFFFFFC00000BA : C802                		tst     #2,r0
(2)  912/FFFFFFFFC00000BC : 8BFC                		bf      .wait_fb
(2)  913/FFFFFFFFC00000BE : 8513                		mov.w   @(6,r1),r0		; SVDP-fill address
(2)  914/FFFFFFFFC00000C0 : 705F                		add     #$5F,r0			; Preincrement
(2)  915/FFFFFFFFC00000C2 : 8113                		mov.w   r0,@(6,r1)
(2)  916/FFFFFFFFC00000C4 : 9019                		mov.w   #320/2,r0		; SVDP-fill size (320 pixels)
(2)  917/FFFFFFFFC00000C6 : 8112                		mov.w   r0,@(4,r1)
(2)  918/FFFFFFFFC00000C8 : E000                		mov     #0,r0			; SVDP-fill pixel data and start filling
(2)  919/FFFFFFFFC00000CA : 8114                		mov.w   r0,@(8,r1)		; After finishing, SVDP-address got updated
(2)  920/FFFFFFFFC00000CC : 9116                		mov.l   #$FFFFFE80,r1		; Interrupt delay(?)
(2)  921/FFFFFFFFC00000CE : 9016                		mov.w   #$A518,r0		; OFF
(2)  922/FFFFFFFFC00000D0 : 2101                		mov.w   r0,@r1
(2)  923/FFFFFFFFC00000D2 : CB20                		or      #$20,r0			; ON
(2)  924/FFFFFFFFC00000D4 : 2101                		mov.w   r0,@r1
(2)  925/FFFFFFFFC00000D6 : 9013                		mov.w   #$5A10,r0
(2)  926/FFFFFFFFC00000D8 : 2101                		mov.w   r0,@r1
(2)  927/FFFFFFFFC00000DA : D106                		mov	#Cach_ClrLines,r1	; Decrement number of lines to progress
(2)  928/FFFFFFFFC00000DC : 6011                		mov.w	@r1,r0
(2)  929/FFFFFFFFC00000DE : 4010                		dt	r0
(2)  930/FFFFFFFFC00000E0 : 8F02                		bf/s	.on_clr
(2)  931/FFFFFFFFC00000E2 : 2101                		mov.w	r0,@r1
(2)  932/FFFFFFFFC00000E4 : E001                		mov	#1,r0			; If done: set task $01
(2)  933/FFFFFFFFC00000E6 : C10B                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  934/FFFFFFFFC00000E8 :                     .on_clr:
(2)  935/FFFFFFFFC00000E8 : 62F6                		mov	@r15+,r2
(2)  936/FFFFFFFFC00000EA : 000B                		rts
(2)  937/FFFFFFFFC00000EC : 0009                		nop
(2)  938/FFFFFFFFC00000EE :                     		align 4
(2)  939/FFFFFFFFC00000F0 : 2000 4100 C000 0098 		ltorg
                    FE10 00A0 FE80 A518 
                    5A10                
(2)  940/FFFFFFFFC0000102 :                     
(2)  941/FFFFFFFFC0000102 :                     ; --------------------------------
(2)  942/FFFFFFFFC0000102 :                     ; Main drawing routine
(2)  943/FFFFFFFFC0000102 :                     ; --------------------------------
(2)  944/FFFFFFFFC0000102 :                     
(2)  945/FFFFFFFFC0000102 :                     maindrw_tasks:
(2)  946/FFFFFFFFC0000102 : 4008                		shll2	r0
(2)  947/FFFFFFFFC0000104 : D12B                		mov	#.list,r1
(2)  948/FFFFFFFFC0000106 : 001E                		mov	@(r1,r0),r0
(2)  949/FFFFFFFFC0000108 : 402B                		jmp	@r0
(2)  950/FFFFFFFFC000010A : 0009                		nop
(2)  951/FFFFFFFFC000010C :                     		align 4
(2)  952/FFFFFFFFC000010C :                     .list:
(2)  953/FFFFFFFFC000010C : C000 015C           		dc.l drwtsk_01		; (null entry, but failsafe)
(2)  954/FFFFFFFFC0000110 : C000 015C           		dc.l drwtsk_01		; Main drawing routine
(2)  955/FFFFFFFFC0000114 : C000 0118           		dc.l drwtsk_02		; Resume from solid color
(2)  956/FFFFFFFFC0000118 :                     
(2)  957/FFFFFFFFC0000118 :                     ; --------------------------------
(2)  958/FFFFFFFFC0000118 :                     ; Task $02
(2)  959/FFFFFFFFC0000118 :                     ; --------------------------------
(2)  960/FFFFFFFFC0000118 :                     
(2)  961/FFFFFFFFC0000118 :                     ; TODO: currently it only resumes
(2)  962/FFFFFFFFC0000118 :                     ; from solid_color
(2)  963/FFFFFFFFC0000118 :                     
(2)  964/FFFFFFFFC0000118 :                     drwtsk_02:
(2)  965/FFFFFFFFC0000118 : 2F26                		mov	r2,@-r15
(2)  966/FFFFFFFFC000011A : 2F36                		mov	r3,@-r15
(2)  967/FFFFFFFFC000011C : 2F46                		mov	r4,@-r15
(2)  968/FFFFFFFFC000011E : 2F56                		mov	r5,@-r15
(2)  969/FFFFFFFFC0000120 : 2F66                		mov	r6,@-r15
(2)  970/FFFFFFFFC0000122 : 2F76                		mov	r7,@-r15
(2)  971/FFFFFFFFC0000124 : 2F86                		mov	r8,@-r15
(2)  972/FFFFFFFFC0000126 : 2F96                		mov	r9,@-r15
(2)  973/FFFFFFFFC0000128 : 2FA6                		mov	r10,@-r15
(2)  974/FFFFFFFFC000012A : 2FB6                		mov	r11,@-r15
(2)  975/FFFFFFFFC000012C : 2FC6                		mov	r12,@-r15
(2)  976/FFFFFFFFC000012E : 2FD6                		mov	r13,@-r15
(2)  977/FFFFFFFFC0000130 : 2FE6                		mov	r14,@-r15
(2)  978/FFFFFFFFC0000132 : 4F12                		sts	macl,@-r15
(2)  979/FFFFFFFFC0000134 : 4F02                		sts	mach,@-r15
(2)  980/FFFFFFFFC0000136 : D020                		mov	#Cach_LnDrw_L,r0
(2)  981/FFFFFFFFC0000138 : 6E06                		mov	@r0+,r14
(2)  982/FFFFFFFFC000013A : 6D06                		mov	@r0+,r13
(2)  983/FFFFFFFFC000013C : 6C06                		mov	@r0+,r12
(2)  984/FFFFFFFFC000013E : 6B06                		mov	@r0+,r11
(2)  985/FFFFFFFFC0000140 : 6A06                		mov	@r0+,r10
(2)  986/FFFFFFFFC0000142 : 6906                		mov	@r0+,r9
(2)  987/FFFFFFFFC0000144 : 6806                		mov	@r0+,r8
(2)  988/FFFFFFFFC0000146 : 6706                		mov	@r0+,r7
(2)  989/FFFFFFFFC0000148 : 6606                		mov	@r0+,r6
(2)  990/FFFFFFFFC000014A : 6506                		mov	@r0+,r5
(2)  991/FFFFFFFFC000014C : 6406                		mov	@r0+,r4
(2)  992/FFFFFFFFC000014E : 6306                		mov	@r0+,r3
(2)  993/FFFFFFFFC0000150 : 6206                		mov	@r0+,r2
(2)  994/FFFFFFFFC0000152 : 6106                		mov	@r0+,r1
(2)  995/FFFFFFFFC0000154 : E001                		mov	#1,r0
(2)  996/FFFFFFFFC0000156 : C10B                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  997/FFFFFFFFC0000158 : A10F                		bra	drwsld_updline
(2)  998/FFFFFFFFC000015A : 0009                		nop
(2)  999/FFFFFFFFC000015C :                     
(2) 1000/FFFFFFFFC000015C :                     ; --------------------------------
(2) 1001/FFFFFFFFC000015C :                     ; Task $01
(2) 1002/FFFFFFFFC000015C :                     ; --------------------------------
(2) 1003/FFFFFFFFC000015C :                     
(2) 1004/FFFFFFFFC000015C :                     drwtsk_01:
(2) 1005/FFFFFFFFC000015C : 2F26                		mov	r2,@-r15
(2) 1006/FFFFFFFFC000015E : C50A                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces to draw?
(2) 1007/FFFFFFFFC0000160 : 8800                		cmp/eq	#0,r0
(2) 1008/FFFFFFFFC0000162 : 8B03                		bf	.has_pz
(2) 1009/FFFFFFFFC0000164 : E000                		mov	#0,r0				; If none, just end quickly.
(2) 1010/FFFFFFFFC0000166 : C10B                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2) 1011/FFFFFFFFC0000168 : A12B                		bra	drwtask_exit
(2) 1012/FFFFFFFFC000016A : E27F                		mov	#$7F,r2
(2) 1013/FFFFFFFFC000016C :                     
(2) 1014/FFFFFFFFC000016C :                     .has_pz:
(2) 1015/FFFFFFFFC000016C : 2F36                		mov	r3,@-r15
(2) 1016/FFFFFFFFC000016E : 2F46                		mov	r4,@-r15
(2) 1017/FFFFFFFFC0000170 : 2F56                		mov	r5,@-r15
(2) 1018/FFFFFFFFC0000172 : 2F66                		mov	r6,@-r15
(2) 1019/FFFFFFFFC0000174 : 2F76                		mov	r7,@-r15
(2) 1020/FFFFFFFFC0000176 : 2F86                		mov	r8,@-r15
(2) 1021/FFFFFFFFC0000178 : 2F96                		mov	r9,@-r15
(2) 1022/FFFFFFFFC000017A : 2FA6                		mov	r10,@-r15
(2) 1023/FFFFFFFFC000017C : 2FB6                		mov	r11,@-r15
(2) 1024/FFFFFFFFC000017E : 2FC6                		mov	r12,@-r15
(2) 1025/FFFFFFFFC0000180 : 2FD6                		mov	r13,@-r15
(2) 1026/FFFFFFFFC0000182 : 2FE6                		mov	r14,@-r15
(2) 1027/FFFFFFFFC0000184 : 4F12                		sts	macl,@-r15
(2) 1028/FFFFFFFFC0000186 : 4F02                		sts	mach,@-r15
(2) 1029/FFFFFFFFC0000188 :                     drwtsk1_newpz:
(2) 1030/FFFFFFFFC0000188 : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0	; r14 - Current pieces pointer to READ
(2) 1031/FFFFFFFFC000018A : 6E03                		mov	r0,r14
(2) 1032/FFFFFFFFC000018C : 59E0                		mov	@(plypz_ypos,r14),r9		; Start grabbing StartY/EndY positions
(2) 1033/FFFFFFFFC000018E : 6A93                		mov	r9,r10
(2) 1034/FFFFFFFFC0000190 : D00A                		mov	#$FFFF,r0
(2) 1035/FFFFFFFFC0000192 : 4929                		shlr16	r9
(2) 1036/FFFFFFFFC0000194 : 699F                		exts	r9,r9			;  r9 - Top
(2) 1037/FFFFFFFFC0000196 : 2A09                		and	r0,r10			; r10 - Bottom
(2) 1038/FFFFFFFFC0000198 : 3090                		cmp/eq	r9,r0			; if Top==Bottom, exit
(2) 1039/FFFFFFFFC000019A : 8908                		bt	.invld_y
(2) 1040/FFFFFFFFC000019C : 9010                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2) 1041/FFFFFFFFC000019E : 3903                		cmp/ge	r0,r9
(2) 1042/FFFFFFFFC00001A0 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2) 1043/FFFFFFFFC00001A2 : 3A07                		cmp/gt	r0,r10
(2) 1044/FFFFFFFFC00001A4 : 8B00                		bf	.len_max
(2) 1045/FFFFFFFFC00001A6 : 6A03                		mov	r0,r10
(2) 1046/FFFFFFFFC00001A8 :                     .len_max:
(2) 1047/FFFFFFFFC00001A8 : 3A98                		sub	r9,r10			; r10: Turn it into Y lenght (Bottom - Top)
(2) 1048/FFFFFFFFC00001AA : 4A15                		cmp/pl	r10
(2) 1049/FFFFFFFFC00001AC : 8909                		bt	drwtsk1_vld_y
(2) 1050/FFFFFFFFC00001AE :                     .invld_y:
(2) 1051/FFFFFFFFC00001AE : A0E9                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2) 1052/FFFFFFFFC00001B0 : 0009                		nop
(2) 1053/FFFFFFFFC00001B2 :                     		align 4
(2) 1054/FFFFFFFFC00001B4 : C000 010C C000 0000 		ltorg
                    0000 FFFF 00E0      
(2) 1055/FFFFFFFFC00001C2 :                     
(2) 1056/FFFFFFFFC00001C2 :                     ; ------------------------------------
(2) 1057/FFFFFFFFC00001C2 :                     ; If Y top / Y len are valid:
(2) 1058/FFFFFFFFC00001C2 :                     ; ------------------------------------
(2) 1059/FFFFFFFFC00001C2 :                     
(2) 1060/FFFFFFFFC00001C2 :                     drwtsk1_vld_y:
(2) 1061/FFFFFFFFC00001C2 : 51E1                		mov	@(plypz_xl,r14),r1		; r1 - X left
(2) 1062/FFFFFFFFC00001C4 : 52E2                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2) 1063/FFFFFFFFC00001C6 : 53E3                		mov	@(plypz_xr,r14),r3		; r3 - X right
(2) 1064/FFFFFFFFC00001C8 : 54E4                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2) 1065/FFFFFFFFC00001CA : 50EE                		mov	@(plypz_mtrlopt,r14),r0		; Check material options
(2) 1066/FFFFFFFFC00001CC : 4029                		shlr16	r0
(2) 1067/FFFFFFFFC00001CE : 4019                		shlr8	r0
(2) 1068/FFFFFFFFC00001D0 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2) 1069/FFFFFFFFC00001D2 : 8B03                 		bf	.texture_line
(2) 1070/FFFFFFFFC00001D4 : A07C                		bra	.solid_color
(2) 1071/FFFFFFFFC00001D6 : 0009                		nop
(2) 1072/FFFFFFFFC00001D8 :                     
(2) 1073/FFFFFFFFC00001D8 :                     ; ------------------------------------
(2) 1074/FFFFFFFFC00001D8 :                     ; Texture mode
(2) 1075/FFFFFFFFC00001D8 :                     ; 
(2) 1076/FFFFFFFFC00001D8 :                     ; r1  - XL
(2) 1077/FFFFFFFFC00001D8 :                     ; r2  - XL DX
(2) 1078/FFFFFFFFC00001D8 :                     ; r3  - XR
(2) 1079/FFFFFFFFC00001D8 :                     ; r4  - XR DX
(2) 1080/FFFFFFFFC00001D8 :                     ; r5  - SRC XL
(2) 1081/FFFFFFFFC00001D8 :                     ; r6  - SRC XR
(2) 1082/FFFFFFFFC00001D8 :                     ; r7  - SRC YL
(2) 1083/FFFFFFFFC00001D8 :                     ; r8  - SRC YR
(2) 1084/FFFFFFFFC00001D8 :                     ; r9  - Y current
(2) 1085/FFFFFFFFC00001D8 :                     ; r10  - Number of lines
(2) 1086/FFFFFFFFC00001D8 :                     ; ------------------------------------
(2) 1087/FFFFFFFFC00001D8 :                     
(2) 1088/FFFFFFFFC00001D8 :                     .tex_gonxtpz:
(2) 1089/FFFFFFFFC00001D8 : A0D4                		bra	drwsld_nextpz
(2) 1090/FFFFFFFFC00001DA : 0009                		nop
(2) 1091/FFFFFFFFC00001DC :                     .texture_line:
(2) 1092/FFFFFFFFC00001DC : C50E                		mov.w	@(marsGbl_DivReq_M,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2) 1093/FFFFFFFFC00001DE : 8801                		cmp/eq	#1,r0				; middle of division
(2) 1094/FFFFFFFFC00001E0 : 8B01                		bf	.texvalid
(2) 1095/FFFFFFFFC00001E2 : A0E0                		bra	drwtask_return
(2) 1096/FFFFFFFFC00001E4 : 0009                		nop
(2) 1097/FFFFFFFFC00001E6 :                     .texvalid:
(2) 1098/FFFFFFFFC00001E6 : 55E5                		mov	@(plypz_src_xl,r14),r5		; Texture X left
(2) 1099/FFFFFFFFC00001E8 : 56E9                		mov	@(plypz_src_xr,r14),r6		; Texture X right
(2) 1100/FFFFFFFFC00001EA : 57E7                		mov	@(plypz_src_yl,r14),r7		; Texture Y up
(2) 1101/FFFFFFFFC00001EC : 58EB                		mov	@(plypz_src_yr,r14),r8		; Texture Y down
(2) 1102/FFFFFFFFC00001EE :                     .tex_next_line:
(2) 1103/FFFFFFFFC00001EE : 4911                		cmp/pz	r9				; Y Line below 0?
(2) 1104/FFFFFFFFC00001F0 : 8B5F                		bf	.tex_skip_line
(2) 1105/FFFFFFFFC00001F2 : 90FB                		mov	#SCREEN_HEIGHT,r0		; Y Line after 224?
(2) 1106/FFFFFFFFC00001F4 : 3903                		cmp/ge	r0,r9
(2) 1107/FFFFFFFFC00001F6 : 89EF                		bt	.tex_gonxtpz
(2) 1108/FFFFFFFFC00001F8 : 2F26                		mov	r2,@-r15
(2) 1109/FFFFFFFFC00001FA : 2F46                		mov	r4,@-r15
(2) 1110/FFFFFFFFC00001FC : 2F56                		mov	r5,@-r15
(2) 1111/FFFFFFFFC00001FE : 2F66                		mov	r6,@-r15		
(2) 1112/FFFFFFFFC0000200 : 2F76                		mov	r7,@-r15
(2) 1113/FFFFFFFFC0000202 : 2F86                		mov	r8,@-r15
(2) 1114/FFFFFFFFC0000204 : 2FA6                		mov	r10,@-r15
(2) 1115/FFFFFFFFC0000206 : 6B13                		mov	r1,r11			; r11 - X left copy
(2) 1116/FFFFFFFFC0000208 : 6C33                		mov	r3,r12			; r12 - X right copy
(2) 1117/FFFFFFFFC000020A : 4B29                		shlr16	r11
(2) 1118/FFFFFFFFC000020C : 4C29                		shlr16	r12
(2) 1119/FFFFFFFFC000020E : 6BBF                		exts	r11,r11
(2) 1120/FFFFFFFFC0000210 : 6CCF                		exts	r12,r12
(2) 1121/FFFFFFFFC0000212 : 60C3                		mov	r12,r0			; r0: X Right - X Left
(2) 1122/FFFFFFFFC0000214 : 30B8                		sub	r11,r0
(2) 1123/FFFFFFFFC0000216 : 4015                		cmp/pl	r0			; Line reversed?
(2) 1124/FFFFFFFFC0000218 : 8908                		bt	.txrevers
(2) 1125/FFFFFFFFC000021A : 60C3                		mov	r12,r0			; Swap XL and XR values
(2) 1126/FFFFFFFFC000021C : 6CB3                		mov	r11,r12
(2) 1127/FFFFFFFFC000021E : 6B03                		mov	r0,r11
(2) 1128/FFFFFFFFC0000220 : 6053                		mov	r5,r0
(2) 1129/FFFFFFFFC0000222 : 6563                		mov	r6,r5
(2) 1130/FFFFFFFFC0000224 : 6603                		mov	r0,r6
(2) 1131/FFFFFFFFC0000226 : 6073                		mov	r7,r0
(2) 1132/FFFFFFFFC0000228 : 6783                		mov	r8,r7
(2) 1133/FFFFFFFFC000022A : 6803                		mov	r0,r8
(2) 1134/FFFFFFFFC000022C :                     .txrevers:
(2) 1135/FFFFFFFFC000022C : 3CB0                		cmp/eq	r11,r12			; Same X position?
(2) 1136/FFFFFFFFC000022E : 8939                		bt	.tex_upd_line
(2) 1137/FFFFFFFFC0000230 : 90DD                		mov	#SCREEN_WIDTH,r0	; X right < 0?
(2) 1138/FFFFFFFFC0000232 : 4C15                		cmp/pl	r12
(2) 1139/FFFFFFFFC0000234 : 8B36                		bf	.tex_upd_line
(2) 1140/FFFFFFFFC0000236 : 3B07                		cmp/gt	r0,r11			; X left > 320?
(2) 1141/FFFFFFFFC0000238 : 8934                		bt	.tex_upd_line
(2) 1142/FFFFFFFFC000023A : 62C3                		mov	r12,r2
(2) 1143/FFFFFFFFC000023C : 60B3                		mov 	r11,r0
(2) 1144/FFFFFFFFC000023E : 3208                		sub 	r0,r2
(2) 1145/FFFFFFFFC0000240 : 3658                		sub	r5,r6
(2) 1146/FFFFFFFFC0000242 : 3878                		sub	r7,r8
(2) 1147/FFFFFFFFC0000244 :                     
(2) 1148/FFFFFFFFC0000244 :                     	; Calculate new DX values
(2) 1149/FFFFFFFFC0000244 : 90D4                		mov	#_JR,r0				; r6/r2
(2) 1150/FFFFFFFFC0000246 : 2022                		mov	r2,@r0
(2) 1151/FFFFFFFFC0000248 : 1061                		mov	r6,@(4,r0)
(2) 1152/FFFFFFFFC000024A : 0009                		nop
(2) 1153/FFFFFFFFC000024C : 5601                		mov	@(4,r0),r6			; r8/r2
(2) 1154/FFFFFFFFC000024E : 2022                		mov	r2,@r0
(2) 1155/FFFFFFFFC0000250 : 1081                		mov	r8,@(4,r0)
(2) 1156/FFFFFFFFC0000252 : 0009                		nop
(2) 1157/FFFFFFFFC0000254 : 5801                		mov	@(4,r0),r8
(2) 1158/FFFFFFFFC0000256 :                     
(2) 1159/FFFFFFFFC0000256 :                     	; Limit X destination points
(2) 1160/FFFFFFFFC0000256 :                     	; and correct the texture's X positions
(2) 1161/FFFFFFFFC0000256 : 90CA                		mov	#SCREEN_WIDTH,r0		; XR point > 320?
(2) 1162/FFFFFFFFC0000258 : 3C07                		cmp/gt	r0,r12
(2) 1163/FFFFFFFFC000025A : 8B00                		bf	.tr_fix
(2) 1164/FFFFFFFFC000025C : 6C03                		mov	r0,r12				; Force XR to 320
(2) 1165/FFFFFFFFC000025E :                     .tr_fix:
(2) 1166/FFFFFFFFC000025E : 4B15                		cmp/pl	r11				; XL point < 0?
(2) 1167/FFFFFFFFC0000260 : 8907                		bt	.tl_fix
(2) 1168/FFFFFFFFC0000262 : 62BB                		neg	r11,r2				; Fix texture positions
(2) 1169/FFFFFFFFC0000264 : 326D                		dmuls	r6,r2
(2) 1170/FFFFFFFFC0000266 : 001A                		sts	macl,r0
(2) 1171/FFFFFFFFC0000268 : 350C                		add	r0,r5
(2) 1172/FFFFFFFFC000026A : 328D                		dmuls	r8,r2
(2) 1173/FFFFFFFFC000026C : 001A                		sts	macl,r0
(2) 1174/FFFFFFFFC000026E : 370C                		add	r0,r7
(2) 1175/FFFFFFFFC0000270 : 2BBA                		xor	r11,r11				; And reset XL to 0
(2) 1176/FFFFFFFFC0000272 :                     .tl_fix:
(2) 1177/FFFFFFFFC0000272 : 3CB8                		sub 	r11,r12
(2) 1178/FFFFFFFFC0000274 : 4C15                		cmp/pl	r12
(2) 1179/FFFFFFFFC0000276 : 8B15                		bf	.tex_upd_line
(2) 1180/FFFFFFFFC0000278 :                     ; 		mov	#$10,r0				; (Limiter test)
(2) 1181/FFFFFFFFC0000278 :                     ; 		cmp/ge	r0,r12
(2) 1182/FFFFFFFFC0000278 :                     ; 		bf	.testlwrit
(2) 1183/FFFFFFFFC0000278 :                     ; 		mov	r0,r12
(2) 1184/FFFFFFFFC0000278 :                     ; .testlwrit:
(2) 1185/FFFFFFFFC0000278 : 6093                		mov 	r9,r0				; Y position * $200
(2) 1186/FFFFFFFFC000027A : 4018                		shll8	r0
(2) 1187/FFFFFFFFC000027C : 4000                		shll	r0
(2) 1188/FFFFFFFFC000027E : DA56                		mov 	#_overwrite+$200,r10		; Point to first usable line
(2) 1189/FFFFFFFFC0000280 : 3A0C                		add 	r0,r10				; Add Y
(2) 1190/FFFFFFFFC0000282 : 3ABC                		add 	r11,r10				; Add X
(2) 1191/FFFFFFFFC0000284 : 5BED                		mov	@(plypz_mtrl,r14),r11		; r11 - texture data
(2) 1192/FFFFFFFFC0000286 : 54EE                		mov	@(plypz_mtrlopt,r14),r4		;  r4 - texture width
(2) 1193/FFFFFFFFC0000288 :                     .tex_xloop:
(2) 1194/FFFFFFFFC0000288 : 6273                		mov	r7,r2
(2) 1195/FFFFFFFFC000028A : 4229                		shlr16	r2
(2) 1196/FFFFFFFFC000028C : 242E                		mulu	r2,r4
(2) 1197/FFFFFFFFC000028E : 6253                		mov	r5,r2	   			; Build column index
(2) 1198/FFFFFFFFC0000290 : 001A                		sts	macl,r0
(2) 1199/FFFFFFFFC0000292 : 4229                		shlr16	r2
(2) 1200/FFFFFFFFC0000294 : 302C                		add	r2,r0
(2) 1201/FFFFFFFFC0000296 : 00BC                		mov.b	@(r0,r11),r0			; Read pixel
(2) 1202/FFFFFFFFC0000298 : 2A00                		mov.b	r0,@r10	   			; Write pixel
(2) 1203/FFFFFFFFC000029A : 7A01                		add 	#1,r10
(2) 1204/FFFFFFFFC000029C : 356C                		add	r6,r5				; Update X
(2) 1205/FFFFFFFFC000029E : 4C10                		dt	r12
(2) 1206/FFFFFFFFC00002A0 : 8FF2                		bf/s	.tex_xloop
(2) 1207/FFFFFFFFC00002A2 : 378C                		add	r8,r7				; Update Y
(2) 1208/FFFFFFFFC00002A4 :                     .tex_upd_line:
(2) 1209/FFFFFFFFC00002A4 : 6AF6                		mov	@r15+,r10
(2) 1210/FFFFFFFFC00002A6 : 68F6                		mov	@r15+,r8
(2) 1211/FFFFFFFFC00002A8 : 67F6                		mov	@r15+,r7
(2) 1212/FFFFFFFFC00002AA : 66F6                		mov	@r15+,r6
(2) 1213/FFFFFFFFC00002AC : 65F6                		mov	@r15+,r5
(2) 1214/FFFFFFFFC00002AE : 64F6                		mov	@r15+,r4
(2) 1215/FFFFFFFFC00002B0 : 62F6                		mov	@r15+,r2
(2) 1216/FFFFFFFFC00002B2 :                     .tex_skip_line:
(2) 1217/FFFFFFFFC00002B2 : 50E6                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2) 1218/FFFFFFFFC00002B4 : 350C                		add	r0,r5
(2) 1219/FFFFFFFFC00002B6 : 50EA                		mov	@(plypz_src_xr_dx,r14),r0
(2) 1220/FFFFFFFFC00002B8 : 360C                		add	r0,r6	
(2) 1221/FFFFFFFFC00002BA : 50E8                		mov	@(plypz_src_yl_dx,r14),r0
(2) 1222/FFFFFFFFC00002BC : 370C                		add	r0,r7
(2) 1223/FFFFFFFFC00002BE : 50EC                		mov	@(plypz_src_yr_dx,r14),r0
(2) 1224/FFFFFFFFC00002C0 : 380C                		add	r0,r8
(2) 1225/FFFFFFFFC00002C2 : 312C                		add	r2,r1				; Update X postions
(2) 1226/FFFFFFFFC00002C4 : 334C                		add	r4,r3
(2) 1227/FFFFFFFFC00002C6 : 4A10                		dt	r10
(2) 1228/FFFFFFFFC00002C8 : 8F91                		bf/s	.tex_next_line
(2) 1229/FFFFFFFFC00002CA : 7901                		add	#1,r9
(2) 1230/FFFFFFFFC00002CC :                     
(2) 1231/FFFFFFFFC00002CC : A05A                		bra	drwsld_nextpz
(2) 1232/FFFFFFFFC00002CE : 0009                		nop
(2) 1233/FFFFFFFFC00002D0 :                     
(2) 1234/FFFFFFFFC00002D0 :                     ; ------------------------------------
(2) 1235/FFFFFFFFC00002D0 :                     ; Solid Color
(2) 1236/FFFFFFFFC00002D0 :                     ; ------------------------------------
(2) 1237/FFFFFFFFC00002D0 :                     
(2) 1238/FFFFFFFFC00002D0 :                     .solid_color:
(2) 1239/FFFFFFFFC00002D0 : 908F                		mov	#$FF,r0
(2) 1240/FFFFFFFFC00002D2 : 56ED                		mov	@(plypz_mtrl,r14),r6
(2) 1241/FFFFFFFFC00002D4 : 55EE                		mov	@(plypz_mtrlopt,r14),r5
(2) 1242/FFFFFFFFC00002D6 : 2509                		and	r0,r5
(2) 1243/FFFFFFFFC00002D8 : 2609                		and	r0,r6
(2) 1244/FFFFFFFFC00002DA : 365C                		add	r5,r6
(2) 1245/FFFFFFFFC00002DC : DD3F                		mov	#_vdpreg,r13
(2) 1246/FFFFFFFFC00002DE :                     drwsld_nxtline:
(2) 1247/FFFFFFFFC00002DE : 6093                		mov	r9,r0
(2) 1248/FFFFFFFFC00002E0 : 30AC                		add	r10,r0
(2) 1249/FFFFFFFFC00002E2 : 4015                		cmp/pl	r0
(2) 1250/FFFFFFFFC00002E4 : 8B4E                		bf	drwsld_nextpz
(2) 1251/FFFFFFFFC00002E6 : 4911                		cmp/pz	r9
(2) 1252/FFFFFFFFC00002E8 : 8B47                		bf	drwsld_updline
(2) 1253/FFFFFFFFC00002EA : 907F                		mov	#SCREEN_HEIGHT,r0
(2) 1254/FFFFFFFFC00002EC : 3907                		cmp/gt	r0,r9
(2) 1255/FFFFFFFFC00002EE : 8949                		bt	drwsld_nextpz
(2) 1256/FFFFFFFFC00002F0 : 6B13                		mov	r1,r11
(2) 1257/FFFFFFFFC00002F2 : 6C33                		mov	r3,r12
(2) 1258/FFFFFFFFC00002F4 : 4B29                		shlr16	r11
(2) 1259/FFFFFFFFC00002F6 : 4C29                		shlr16	r12
(2) 1260/FFFFFFFFC00002F8 : 6BBF                		exts	r11,r11
(2) 1261/FFFFFFFFC00002FA : 6CCF                		exts	r12,r12
(2) 1262/FFFFFFFFC00002FC : 60C3                		mov	r12,r0
(2) 1263/FFFFFFFFC00002FE : 30B8                		sub	r11,r0
(2) 1264/FFFFFFFFC0000300 : 4015                		cmp/pl	r0
(2) 1265/FFFFFFFFC0000302 : 8902                		bt	.revers
(2) 1266/FFFFFFFFC0000304 : 60C3                		mov	r12,r0
(2) 1267/FFFFFFFFC0000306 : 6CB3                		mov	r11,r12
(2) 1268/FFFFFFFFC0000308 : 6B03                		mov	r0,r11
(2) 1269/FFFFFFFFC000030A :                     .revers:
(2) 1270/FFFFFFFFC000030A : 9073                		mov	#SCREEN_WIDTH-1,r0
(2) 1271/FFFFFFFFC000030C : 4C15                		cmp/pl	r12
(2) 1272/FFFFFFFFC000030E : 8B34                		bf	drwsld_updline
(2) 1273/FFFFFFFFC0000310 : 3B07                		cmp/gt	r0,r11
(2) 1274/FFFFFFFFC0000312 : 8932                		bt	drwsld_updline
(2) 1275/FFFFFFFFC0000314 : 3C07                		cmp/gt	r0,r12
(2) 1276/FFFFFFFFC0000316 : 8B00                		bf	.r_fix
(2) 1277/FFFFFFFFC0000318 : 6C03                		mov	r0,r12
(2) 1278/FFFFFFFFC000031A :                     .r_fix:
(2) 1279/FFFFFFFFC000031A : 4B15                		cmp/pl	r11
(2) 1280/FFFFFFFFC000031C : 8900                		bt	.l_fix
(2) 1281/FFFFFFFFC000031E : 2BBA                		xor	r11,r11
(2) 1282/FFFFFFFFC0000320 :                     .l_fix:
(2) 1283/FFFFFFFFC0000320 : E0FE                		mov	#-2,r0
(2) 1284/FFFFFFFFC0000322 : 2B09                		and	r0,r11
(2) 1285/FFFFFFFFC0000324 : 2C09                		and	r0,r12
(2) 1286/FFFFFFFFC0000326 : 60C3                		mov	r12,r0
(2) 1287/FFFFFFFFC0000328 : 30B8                		sub	r11,r0
(2) 1288/FFFFFFFFC000032A :                     ; 		mov	#6,r5
(2) 1289/FFFFFFFFC000032A :                     ; 		cmp/gt	r5,r0
(2) 1290/FFFFFFFFC000032A :                     ; 		bf	drwsld_lowpixls
(2) 1291/FFFFFFFFC000032A : 85D5                .wait:		mov.w	@(10,r13),r0
(2) 1292/FFFFFFFFC000032C : C802                		tst	#2,r0
(2) 1293/FFFFFFFFC000032E : 8BFC                		bf	.wait
(2) 1294/FFFFFFFFC0000330 : 60C3                		mov	r12,r0
(2) 1295/FFFFFFFFC0000332 : 30B8                		sub	r11,r0
(2) 1296/FFFFFFFFC0000334 : 4001                		shlr	r0
(2) 1297/FFFFFFFFC0000336 : 81D2                		mov.w	r0,@(4,r13)	; length
(2) 1298/FFFFFFFFC0000338 : 60B3                		mov	r11,r0
(2) 1299/FFFFFFFFC000033A : 4001                		shlr	r0
(2) 1300/FFFFFFFFC000033C : 6593                		mov	r9,r5
(2) 1301/FFFFFFFFC000033E : 7501                		add	#1,r5
(2) 1302/FFFFFFFFC0000340 : 4518                		shll8	r5
(2) 1303/FFFFFFFFC0000342 : 305C                		add	r5,r0
(2) 1304/FFFFFFFFC0000344 : 81D3                		mov.w	r0,@(6,r13)	; address
(2) 1305/FFFFFFFFC0000346 : 6063                		mov	r6,r0
(2) 1306/FFFFFFFFC0000348 : 4018                		shll8	r0
(2) 1307/FFFFFFFFC000034A : 206B                		or	r6,r0
(2) 1308/FFFFFFFFC000034C : 81D4                		mov.w	r0,@(8,r13)	; Set data
(2) 1309/FFFFFFFFC000034E :                     		
(2) 1310/FFFFFFFFC000034E :                     	; If the line is large, leave it to VDP
(2) 1311/FFFFFFFFC000034E :                     	; and exit interrupt, we will come back
(2) 1312/FFFFFFFFC000034E :                     	; with more lines to draw
(2) 1313/FFFFFFFFC000034E : E028                		mov	#$28,r0
(2) 1314/FFFFFFFFC0000350 : 3C03                		cmp/ge	r0,r12
(2) 1315/FFFFFFFFC0000352 : 8B12                		bf	drwsld_updline
(2) 1316/FFFFFFFFC0000354 : E002                		mov	#2,r0
(2) 1317/FFFFFFFFC0000356 : C10B                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2) 1318/FFFFFFFFC0000358 : D021                		mov	#Cach_LnDrw_S,r0
(2) 1319/FFFFFFFFC000035A : 2016                		mov	r1,@-r0
(2) 1320/FFFFFFFFC000035C : 2026                		mov	r2,@-r0
(2) 1321/FFFFFFFFC000035E : 2036                		mov	r3,@-r0
(2) 1322/FFFFFFFFC0000360 : 2046                		mov	r4,@-r0
(2) 1323/FFFFFFFFC0000362 : 2056                		mov	r5,@-r0
(2) 1324/FFFFFFFFC0000364 : 2066                		mov	r6,@-r0
(2) 1325/FFFFFFFFC0000366 : 2076                		mov	r7,@-r0
(2) 1326/FFFFFFFFC0000368 : 2086                		mov	r8,@-r0
(2) 1327/FFFFFFFFC000036A : 2096                		mov	r9,@-r0
(2) 1328/FFFFFFFFC000036C : 20A6                		mov	r10,@-r0
(2) 1329/FFFFFFFFC000036E : 20B6                		mov	r11,@-r0
(2) 1330/FFFFFFFFC0000370 : 20C6                		mov	r12,@-r0
(2) 1331/FFFFFFFFC0000372 : 20D6                		mov	r13,@-r0
(2) 1332/FFFFFFFFC0000374 : 20E6                		mov	r14,@-r0
(2) 1333/FFFFFFFFC0000376 : A016                		bra	drwtask_return
(2) 1334/FFFFFFFFC0000378 : E200                		mov	#0,r2
(2) 1335/FFFFFFFFC000037A :                     drwsld_updline:
(2) 1336/FFFFFFFFC000037A : 312C                		add	r2,r1
(2) 1337/FFFFFFFFC000037C : 334C                		add	r4,r3
(2) 1338/FFFFFFFFC000037E : 4A10                		dt	r10
(2) 1339/FFFFFFFFC0000380 : 8FAD                		bf/s	drwsld_nxtline
(2) 1340/FFFFFFFFC0000382 : 7901                		add	#1,r9
(2) 1341/FFFFFFFFC0000384 :                     		
(2) 1342/FFFFFFFFC0000384 :                     ; ------------------------------------
(2) 1343/FFFFFFFFC0000384 :                     ; if lower than 6 pixels
(2) 1344/FFFFFFFFC0000384 :                     ; (TODO: check this later)
(2) 1345/FFFFFFFFC0000384 :                     
(2) 1346/FFFFFFFFC0000384 :                     ; drwsld_lowpixls:
(2) 1347/FFFFFFFFC0000384 :                     ; 		cmp/pl	r0
(2) 1348/FFFFFFFFC0000384 :                     ; 		bf	drwsld_updline
(2) 1349/FFFFFFFFC0000384 :                     ; 		mov	r0,r12
(2) 1350/FFFFFFFFC0000384 :                     ; 		mov	r9,r0
(2) 1351/FFFFFFFFC0000384 :                     ; 		add	#1,r0
(2) 1352/FFFFFFFFC0000384 :                     ; 		shll8	r0
(2) 1353/FFFFFFFFC0000384 :                     ; 		shll	r0
(2) 1354/FFFFFFFFC0000384 :                     ; 		add 	r11,r0
(2) 1355/FFFFFFFFC0000384 :                     ; 		mov	#_overwrite+$200,r5
(2) 1356/FFFFFFFFC0000384 :                     ; 		add	r0,r5
(2) 1357/FFFFFFFFC0000384 :                     ; .wait_fb	mov.w	@(10,r13),r0
(2) 1358/FFFFFFFFC0000384 :                     ; 		tst	#2,r0
(2) 1359/FFFFFFFFC0000384 :                     ; 		bf	.wait_fb
(2) 1360/FFFFFFFFC0000384 :                     ; 		mov	#-1,r0
(2) 1361/FFFFFFFFC0000384 :                     ; .perpixl:
(2) 1362/FFFFFFFFC0000384 :                     ; 		mov.b	r0,@r5
(2) 1363/FFFFFFFFC0000384 :                     ; 		dt	r12
(2) 1364/FFFFFFFFC0000384 :                     ; 		bf/s	.perpixl
(2) 1365/FFFFFFFFC0000384 :                     ; 		add	#1,r5
(2) 1366/FFFFFFFFC0000384 :                     
(2) 1367/FFFFFFFFC0000384 :                     ; ------------------------------------		
(2) 1368/FFFFFFFFC0000384 :                     		
(2) 1369/FFFFFFFFC0000384 :                     drwsld_nextpz:
(2) 1370/FFFFFFFFC0000384 : C50A                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; -1 piece
(2) 1371/FFFFFFFFC0000386 : 70FF                		add	#-1,r0
(2) 1372/FFFFFFFFC0000388 : C10A                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2) 1373/FFFFFFFFC000038A : 7E3C                		add	#sizeof_plypz,r14		; Point to next piece for the next interrupt
(2) 1374/FFFFFFFFC000038C : 60E3                		mov	r14,r0
(2) 1375/FFFFFFFFC000038E : DE15                		mov	#RAM_Mars_VdpDrwList_e,r14	; End-of-list?
(2) 1376/FFFFFFFFC0000390 : 30E3                		cmp/ge	r14,r0
(2) 1377/FFFFFFFFC0000392 : 8B00                		bf	.reset_rd
(2) 1378/FFFFFFFFC0000394 : D014                		mov	#RAM_Mars_VdpDrwList,r0
(2) 1379/FFFFFFFFC0000396 :                     .reset_rd:
(2) 1380/FFFFFFFFC0000396 : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2) 1381/FFFFFFFFC0000398 :                     ; 		mov.w	@(marsGbl_PzListCntr,gbr),r0
(2) 1382/FFFFFFFFC0000398 :                     ; 		cmp/eq	#0,r0
(2) 1383/FFFFFFFFC0000398 :                     ; 		bt/s	.finish_it
(2) 1384/FFFFFFFFC0000398 :                     ; 		add	#-1,r0
(2) 1385/FFFFFFFFC0000398 :                     ; 		bra	drwtsk1_newpz
(2) 1386/FFFFFFFFC0000398 :                     ; 		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2) 1387/FFFFFFFFC0000398 :                     .finish_it:
(2) 1388/FFFFFFFFC0000398 : A005                		bra	drwtask_return
(2) 1389/FFFFFFFFC000039A : E210                		mov	#$10,r2
(2) 1390/FFFFFFFFC000039C :                     
(2) 1391/FFFFFFFFC000039C :                     ; --------------------------------
(2) 1392/FFFFFFFFC000039C :                     ; Task $00
(2) 1393/FFFFFFFFC000039C :                     ; --------------------------------
(2) 1394/FFFFFFFFC000039C :                     
(2) 1395/FFFFFFFFC000039C :                     drwtsk_00:
(2) 1396/FFFFFFFFC000039C : 2F26                		mov	r2,@-r15
(2) 1397/FFFFFFFFC000039E : E000                		mov	#0,r0
(2) 1398/FFFFFFFFC00003A0 : C10B                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2) 1399/FFFFFFFFC00003A2 : A00E                		bra	drwtask_exit
(2) 1400/FFFFFFFFC00003A4 : E27F                		mov	#$7F,r2
(2) 1401/FFFFFFFFC00003A6 :                     
(2) 1402/FFFFFFFFC00003A6 :                     drwtask_return:
(2) 1403/FFFFFFFFC00003A6 : 4F06                		lds	@r15+,mach
(2) 1404/FFFFFFFFC00003A8 : 4F16                		lds	@r15+,macl
(2) 1405/FFFFFFFFC00003AA : 6EF6                		mov	@r15+,r14
(2) 1406/FFFFFFFFC00003AC : 6DF6                		mov	@r15+,r13
(2) 1407/FFFFFFFFC00003AE : 6CF6                		mov	@r15+,r12
(2) 1408/FFFFFFFFC00003B0 : 6BF6                		mov	@r15+,r11
(2) 1409/FFFFFFFFC00003B2 : 6AF6                		mov	@r15+,r10
(2) 1410/FFFFFFFFC00003B4 : 69F6                		mov	@r15+,r9
(2) 1411/FFFFFFFFC00003B6 : 68F6                		mov	@r15+,r8
(2) 1412/FFFFFFFFC00003B8 : 67F6                		mov	@r15+,r7
(2) 1413/FFFFFFFFC00003BA : 66F6                		mov	@r15+,r6
(2) 1414/FFFFFFFFC00003BC : 65F6                		mov	@r15+,r5
(2) 1415/FFFFFFFFC00003BE : 64F6                		mov	@r15+,r4
(2) 1416/FFFFFFFFC00003C0 : 63F6                		mov	@r15+,r3
(2) 1417/FFFFFFFFC00003C2 :                     drwtask_exit:
(2) 1418/FFFFFFFFC00003C2 : 9118                		mov.l   #$FFFFFE80,r1
(2) 1419/FFFFFFFFC00003C4 : 9018                		mov.w   #$A518,r0
(2) 1420/FFFFFFFFC00003C6 : 2101                		mov.w   r0,@r1
(2) 1421/FFFFFFFFC00003C8 : CB20                		or      #$20,r0
(2) 1422/FFFFFFFFC00003CA : 2101                		mov.w   r0,@r1
(2) 1423/FFFFFFFFC00003CC : 9015                		mov.w   #$5A00,r0
(2) 1424/FFFFFFFFC00003CE : 202B                		or	r2,r0
(2) 1425/FFFFFFFFC00003D0 : 2101                		mov.w   r0,@r1
(2) 1426/FFFFFFFFC00003D2 : 62F6                		mov	@r15+,r2
(2) 1427/FFFFFFFFC00003D4 : 000B                		rts
(2) 1428/FFFFFFFFC00003D6 : 0009                		nop
(2) 1429/FFFFFFFFC00003D8 :                     		align 4
(2) 1430/FFFFFFFFC00003D8 : 2402 0200 2000 4100 		ltorg
                    C000 0038 0602 B6FC 
                    0602 5CFC 00E0 0140 
                    FF00 00FF 013F FE80 
                    A518 5A00           
(2) 1431/FFFFFFFFC00003FC :                     
(2) 1432/FFFFFFFFC00003FC :                     ; ------------------------------------------------
(2) 1433/FFFFFFFFC00003FC :                     ; Read polygon and build pieces
(2) 1434/FFFFFFFFC00003FC :                     ; 
(2) 1435/FFFFFFFFC00003FC :                     ; Type bits:
(2) 1436/FFFFFFFFC00003FC :                     ; %tsp----- -------- -------- --------
(2) 1437/FFFFFFFFC00003FC :                     ; 
(2) 1438/FFFFFFFFC00003FC :                     ; p - Figure type: Quad (0) or Triangle (1)
(2) 1439/FFFFFFFFC00003FC :                     ; s - Polygon type: Normal (0) or Sprite (1)
(2) 1440/FFFFFFFFC00003FC :                     ; t - Polygon has texture data (1):
(2) 1441/FFFFFFFFC00003FC :                     ;     polygn_mtrlopt: Texture width
(2) 1442/FFFFFFFFC00003FC :                     ;     polygn_mtrl   : Texture data address
(2) 1443/FFFFFFFFC00003FC :                     ;     polygn_srcpnts: Texture X/Y positions for
(2) 1444/FFFFFFFFC00003FC :                     ;                     each edge (3 or 4)
(2) 1445/FFFFFFFFC00003FC :                     ; ------------------------------------------------
(2) 1446/FFFFFFFFC00003FC :                     
(2) 1447/FFFFFFFFC00003FC :                     MarsVideo_MakePolygon:
(2) 1448/FFFFFFFFC00003FC : 4F22                		sts	pr,@-r15
(2) 1449/FFFFFFFFC00003FE : DC4A                		mov	#CachDDA_Top,r12
(2) 1450/FFFFFFFFC0000400 : DD4A                		mov	#CachDDA_Last,r13
(2) 1451/FFFFFFFFC0000402 : 50E0                		mov	@(polygn_type,r14),r0
(2) 1452/FFFFFFFFC0000404 : 4029                		shlr16	r0
(2) 1453/FFFFFFFFC0000406 : 4019                		shlr8	r0
(2) 1454/FFFFFFFFC0000408 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2) 1455/FFFFFFFFC000040A : 8B00                		bf	.tringl
(2) 1456/FFFFFFFFC000040C : 7D08                		add	#8,r13
(2) 1457/FFFFFFFFC000040E :                     .tringl:
(2) 1458/FFFFFFFFC000040E : 61E3                		mov	r14,r1
(2) 1459/FFFFFFFFC0000410 : 62C3                		mov	r12,r2
(2) 1460/FFFFFFFFC0000412 : D347                		mov	#CachDDA_Src,r3
(2) 1461/FFFFFFFFC0000414 : 7108                		add	#polygn_points,r1
(2) 1462/FFFFFFFFC0000416 : C820                		tst	#PLGN_SPRITE,r0			; PLGN_SPRITE set?
(2) 1463/FFFFFFFFC0000418 : 8930                		bt	.plgn_pnts
(2) 1464/FFFFFFFFC000041A :                     		
(2) 1465/FFFFFFFFC000041A :                     ; ----------------------------------------
(2) 1466/FFFFFFFFC000041A :                     ; Sprite points
(2) 1467/FFFFFFFFC000041A :                     ; ----------------------------------------
(2) 1468/FFFFFFFFC000041A :                     
(2) 1469/FFFFFFFFC000041A :                     ; TODO: rework or get rid of this
(2) 1470/FFFFFFFFC000041A :                     .spr_pnts:
(2) 1471/FFFFFFFFC000041A : 6815                		mov.w	@r1+,r8		; X pos
(2) 1472/FFFFFFFFC000041C : 6915                		mov.w	@r1+,r9		; Y pos
(2) 1473/FFFFFFFFC000041E :                     
(2) 1474/FFFFFFFFC000041E : 6415                		mov.w	@r1+,r4
(2) 1475/FFFFFFFFC0000420 : 6615                		mov.w	@r1+,r6
(2) 1476/FFFFFFFFC0000422 : 6515                		mov.w	@r1+,r5
(2) 1477/FFFFFFFFC0000424 : 6715                		mov.w	@r1+,r7
(2) 1478/FFFFFFFFC0000426 : 7104                		add	#2*2,r1
(2) 1479/FFFFFFFFC0000428 : 348C                		add	r8,r4
(2) 1480/FFFFFFFFC000042A : 358C                		add 	r8,r5
(2) 1481/FFFFFFFFC000042C : 369C                		add	r9,r6
(2) 1482/FFFFFFFFC000042E : 379C                		add 	r9,r7
(2) 1483/FFFFFFFFC0000430 : 2252                		mov	r5,@r2		; TR
(2) 1484/FFFFFFFFC0000432 : 7204                		add	#4,r2
(2) 1485/FFFFFFFFC0000434 : 2262                		mov	r6,@r2
(2) 1486/FFFFFFFFC0000436 : 7204                		add	#4,r2
(2) 1487/FFFFFFFFC0000438 : 2242                		mov	r4,@r2		; TL
(2) 1488/FFFFFFFFC000043A : 7204                		add	#4,r2
(2) 1489/FFFFFFFFC000043C : 2262                		mov	r6,@r2
(2) 1490/FFFFFFFFC000043E : 7204                		add	#4,r2
(2) 1491/FFFFFFFFC0000440 : 2242                		mov	r4,@r2		; BL
(2) 1492/FFFFFFFFC0000442 : 7204                		add	#4,r2
(2) 1493/FFFFFFFFC0000444 : 2272                		mov	r7,@r2
(2) 1494/FFFFFFFFC0000446 : 7204                		add	#4,r2
(2) 1495/FFFFFFFFC0000448 : 2252                		mov	r5,@r2		; BR
(2) 1496/FFFFFFFFC000044A : 7204                		add	#4,r2
(2) 1497/FFFFFFFFC000044C : 2272                		mov	r7,@r2
(2) 1498/FFFFFFFFC000044E : 7204                		add	#4,r2
(2) 1499/FFFFFFFFC0000450 :                     
(2) 1500/FFFFFFFFC0000450 : 6415                		mov.w	@r1+,r4
(2) 1501/FFFFFFFFC0000452 : 6615                		mov.w	@r1+,r6
(2) 1502/FFFFFFFFC0000454 : 6515                		mov.w	@r1+,r5
(2) 1503/FFFFFFFFC0000456 : 6715                		mov.w	@r1+,r7
(2) 1504/FFFFFFFFC0000458 : 2352                		mov	r5,@r3		; TR
(2) 1505/FFFFFFFFC000045A : 7304                		add	#4,r3
(2) 1506/FFFFFFFFC000045C : 2362                		mov	r6,@r3
(2) 1507/FFFFFFFFC000045E : 7304                		add	#4,r3
(2) 1508/FFFFFFFFC0000460 : 2342                		mov	r4,@r3		; TL
(2) 1509/FFFFFFFFC0000462 : 7304                		add	#4,r3
(2) 1510/FFFFFFFFC0000464 : 2362                		mov	r6,@r3
(2) 1511/FFFFFFFFC0000466 : 7304                		add	#4,r3
(2) 1512/FFFFFFFFC0000468 : 2342                		mov	r4,@r3		; BL
(2) 1513/FFFFFFFFC000046A : 7304                		add	#4,r3
(2) 1514/FFFFFFFFC000046C : 2372                		mov	r7,@r3
(2) 1515/FFFFFFFFC000046E : 7304                		add	#4,r3
(2) 1516/FFFFFFFFC0000470 : 2352                		mov	r5,@r3		; BR
(2) 1517/FFFFFFFFC0000472 : 7304                		add	#4,r3
(2) 1518/FFFFFFFFC0000474 : 2372                		mov	r7,@r3
(2) 1519/FFFFFFFFC0000476 : 7304                		add	#4,r3
(2) 1520/FFFFFFFFC0000478 :                     ; 		mov	#4*2,r0
(2) 1521/FFFFFFFFC0000478 :                     ; .sprsrc_pnts:
(2) 1522/FFFFFFFFC0000478 :                     ; 		mov.w	@r1+,r0
(2) 1523/FFFFFFFFC0000478 :                     ; 		mov.w	@r1+,r4
(2) 1524/FFFFFFFFC0000478 :                     ; 		mov	r0,@r3
(2) 1525/FFFFFFFFC0000478 :                     ; 		mov	r4,@(4,r3)
(2) 1526/FFFFFFFFC0000478 :                     ; 		dt	r0
(2) 1527/FFFFFFFFC0000478 :                     ; 		bf/s	.sprsrc_pnts
(2) 1528/FFFFFFFFC0000478 :                     ; 		add	#8,r3
(2) 1529/FFFFFFFFC0000478 : A014                		bra	.start_math
(2) 1530/FFFFFFFFC000047A : 0009                		nop
(2) 1531/FFFFFFFFC000047C :                     
(2) 1532/FFFFFFFFC000047C :                     ; ----------------------------------------
(2) 1533/FFFFFFFFC000047C :                     ; Polygon points
(2) 1534/FFFFFFFFC000047C :                     ; ----------------------------------------
(2) 1535/FFFFFFFFC000047C :                     
(2) 1536/FFFFFFFFC000047C :                     .plgn_pnts:
(2) 1537/FFFFFFFFC000047C : E804                		mov	#4,r8
(2) 1538/FFFFFFFFC000047E : 965F                		mov	#SCREEN_WIDTH/2,r6
(2) 1539/FFFFFFFFC0000480 : E770                		mov	#SCREEN_HEIGHT/2,r7
(2) 1540/FFFFFFFFC0000482 :                     .setpnts:
(2) 1541/FFFFFFFFC0000482 : 6416                		mov	@r1+,r4
(2) 1542/FFFFFFFFC0000484 : 6516                		mov	@r1+,r5
(2) 1543/FFFFFFFFC0000486 : 346C                		add	r6,r4
(2) 1544/FFFFFFFFC0000488 : 357C                		add	r7,r5
(2) 1545/FFFFFFFFC000048A : 2242                		mov	r4,@r2
(2) 1546/FFFFFFFFC000048C : 1251                		mov	r5,@(4,r2)
(2) 1547/FFFFFFFFC000048E : 4810                		dt	r8
(2) 1548/FFFFFFFFC0000490 : 8FF7                		bf/s	.setpnts
(2) 1549/FFFFFFFFC0000492 : 7208                		add	#8,r2
(2) 1550/FFFFFFFFC0000494 : E804                		mov	#4,r8
(2) 1551/FFFFFFFFC0000496 :                     .src_pnts:
(2) 1552/FFFFFFFFC0000496 : 6415                		mov.w	@r1+,r4
(2) 1553/FFFFFFFFC0000498 : 6515                		mov.w	@r1+,r5
(2) 1554/FFFFFFFFC000049A : 2342                		mov	r4,@r3
(2) 1555/FFFFFFFFC000049C : 1351                		mov	r5,@(4,r3)
(2) 1556/FFFFFFFFC000049E : 4810                		dt	r8
(2) 1557/FFFFFFFFC00004A0 : 8FF9                		bf/s	.src_pnts
(2) 1558/FFFFFFFFC00004A2 : 7308                		add	#8,r3
(2) 1559/FFFFFFFFC00004A4 :                     		
(2) 1560/FFFFFFFFC00004A4 :                     .start_math:
(2) 1561/FFFFFFFFC00004A4 : E903                		mov	#3,r9
(2) 1562/FFFFFFFFC00004A6 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2) 1563/FFFFFFFFC00004A8 : 8B00                		bf	.ytringl
(2) 1564/FFFFFFFFC00004AA : 7901                		add	#1,r9
(2) 1565/FFFFFFFFC00004AC :                     .ytringl:
(2) 1566/FFFFFFFFC00004AC : DA21                		mov	#$7FFFFFFF,r10
(2) 1567/FFFFFFFFC00004AE : EBFF                		mov	#$FFFFFFFF,r11
(2) 1568/FFFFFFFFC00004B0 : 67C3                		mov 	r12,r7
(2) 1569/FFFFFFFFC00004B2 : 68C3                		mov	r12,r8
(2) 1570/FFFFFFFFC00004B4 :                     .find_top:
(2) 1571/FFFFFFFFC00004B4 : 5071                		mov	@(4,r7),r0
(2) 1572/FFFFFFFFC00004B6 : 30B7                		cmp/gt	r11,r0
(2) 1573/FFFFFFFFC00004B8 : 8B00                		bf	.is_low
(2) 1574/FFFFFFFFC00004BA : 6B03                		mov 	r0,r11
(2) 1575/FFFFFFFFC00004BC :                     .is_low:
(2) 1576/FFFFFFFFC00004BC : 5081                		mov	@(4,r8),r0
(2) 1577/FFFFFFFFC00004BE : 30A7                		cmp/gt	r10,r0
(2) 1578/FFFFFFFFC00004C0 : 8901                		bt	.is_high
(2) 1579/FFFFFFFFC00004C2 : 6A03                		mov 	r0,r10
(2) 1580/FFFFFFFFC00004C4 : 6183                		mov	r8,r1
(2) 1581/FFFFFFFFC00004C6 :                     .is_high:
(2) 1582/FFFFFFFFC00004C6 : 7708                		add 	#8,r7
(2) 1583/FFFFFFFFC00004C8 : 4910                		dt	r9
(2) 1584/FFFFFFFFC00004CA : 8FF3                		bf/s	.find_top
(2) 1585/FFFFFFFFC00004CC : 7808                		add	#8,r8
(2) 1586/FFFFFFFFC00004CE : 3AB3                		cmp/ge	r11,r10			; Already reached end?
(2) 1587/FFFFFFFFC00004D0 : 8927                		bt	.exit
(2) 1588/FFFFFFFFC00004D2 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2) 1589/FFFFFFFFC00004D4 : 8B25                		bf	.exit
(2) 1590/FFFFFFFFC00004D6 : 9034                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2) 1591/FFFFFFFFC00004D8 : 3A03                		cmp/ge	r0,r10
(2) 1592/FFFFFFFFC00004DA : 8922                		bt	.exit
(2) 1593/FFFFFFFFC00004DC :                     		
(2) 1594/FFFFFFFFC00004DC :                     	; r1 - Main pointer
(2) 1595/FFFFFFFFC00004DC :                     	; r2 - Left pointer
(2) 1596/FFFFFFFFC00004DC :                     	; r3 - Right pointer
(2) 1597/FFFFFFFFC00004DC :                     	; r4 - Left X
(2) 1598/FFFFFFFFC00004DC :                     	; r5 - Left DX
(2) 1599/FFFFFFFFC00004DC :                     	; r6 - Right X
(2) 1600/FFFFFFFFC00004DC :                     	; r7 - Right DX
(2) 1601/FFFFFFFFC00004DC :                     	; r8 - Left width
(2) 1602/FFFFFFFFC00004DC :                     	; r9 - Right width
(2) 1603/FFFFFFFFC00004DC :                     	; r10 - Top Y (gets updated after calling put_piece)
(2) 1604/FFFFFFFFC00004DC :                     	; r11 - Bottom Y
(2) 1605/FFFFFFFFC00004DC :                     	; r12 - First DST point
(2) 1606/FFFFFFFFC00004DC :                     	; r13 - Last DST point
(2) 1607/FFFFFFFFC00004DC : 6213                		mov	r1,r2				; r2 - X left to process
(2) 1608/FFFFFFFFC00004DE : 6313                		mov	r1,r3				; r3 - X right to process
(2) 1609/FFFFFFFFC00004E0 : B030                		bsr	set_left
(2) 1610/FFFFFFFFC00004E2 : 0009                		nop
(2) 1611/FFFFFFFFC00004E4 : B072                		bsr	set_right
(2) 1612/FFFFFFFFC00004E6 : 0009                		nop
(2) 1613/FFFFFFFFC00004E8 :                     .next_pz:
(2) 1614/FFFFFFFFC00004E8 : 902B                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2) 1615/FFFFFFFFC00004EA : 3A07                		cmp/gt	r0,r10
(2) 1616/FFFFFFFFC00004EC : 8919                		bt	.exit
(2) 1617/FFFFFFFFC00004EE : 3AB3                		cmp/ge	r11,r10				; Reached Y end?
(2) 1618/FFFFFFFFC00004F0 : 8917                		bt	.exit
(2) 1619/FFFFFFFFC00004F2 : C601                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2) 1620/FFFFFFFFC00004F4 : 6103                		mov	r0,r1
(2) 1621/FFFFFFFFC00004F6 : D010                		mov	#RAM_Mars_VdpDrwList_e,r0	; pointer reached end of the list?
(2) 1622/FFFFFFFFC00004F8 : 3103                		cmp/ge	r0,r1
(2) 1623/FFFFFFFFC00004FA : 8B02                		bf	.dontreset
(2) 1624/FFFFFFFFC00004FC : D00F                		mov	#RAM_Mars_VdpDrwList,r0		; Return WRITE pointer to the top of the list
(2) 1625/FFFFFFFFC00004FE : 6103                		mov	r0,r1
(2) 1626/FFFFFFFFC0000500 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2) 1627/FFFFFFFFC0000502 :                     .dontreset:
(2) 1628/FFFFFFFFC0000502 : 4F03                		stc	sr,@-r15			; Stop interrupts (including Watchdog)
(2) 1629/FFFFFFFFC0000504 : 0002                		stc	sr,r0
(2) 1630/FFFFFFFFC0000506 : CBF0                		or	#$F0,r0
(2) 1631/FFFFFFFFC0000508 : B0B1                		bsr	put_piece
(2) 1632/FFFFFFFFC000050A : 400E                		ldc	r0,sr
(2) 1633/FFFFFFFFC000050C : 4F07                		ldc	@r15+,sr			; Restore interrupts
(2) 1634/FFFFFFFFC000050E : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2) 1635/FFFFFFFFC0000510 : 8B03                		bf	.lefth2
(2) 1636/FFFFFFFFC0000512 : B05B                		bsr	set_right
(2) 1637/FFFFFFFFC0000514 : 0009                		nop
(2) 1638/FFFFFFFFC0000516 : AFE7                		bra	.next_pz
(2) 1639/FFFFFFFFC0000518 : 0009                		nop
(2) 1640/FFFFFFFFC000051A :                     .lefth2:
(2) 1641/FFFFFFFFC000051A : B013                		bsr	set_left
(2) 1642/FFFFFFFFC000051C : 0009                		nop
(2) 1643/FFFFFFFFC000051E : AFE3                		bra	.next_pz
(2) 1644/FFFFFFFFC0000520 : 0009                		nop		
(2) 1645/FFFFFFFFC0000522 :                     .exit:
(2) 1646/FFFFFFFFC0000522 : 4F26                		lds	@r15+,pr
(2) 1647/FFFFFFFFC0000524 : 000B                		rts
(2) 1648/FFFFFFFFC0000526 : 0009                		nop
(2) 1649/FFFFFFFFC0000528 :                     		align 4
(2) 1650/FFFFFFFFC0000528 : C000 0038 C000 0048 		ltorg
                    C000 0058 7FFF FFFF 
                    0602 B6FC 0602 5CFC 
                    00A0 00E0           
(2) 1651/FFFFFFFFC0000544 :                     
(2) 1652/FFFFFFFFC0000544 :                     ; --------------------------------
(2) 1653/FFFFFFFFC0000544 :                     
(2) 1654/FFFFFFFFC0000544 :                     set_left:
(2) 1655/FFFFFFFFC0000544 : 6823                		mov	r2,r8			; Get a copy of Xleft pointer
(2) 1656/FFFFFFFFC0000546 : 7820                		add	#$20,r8			; To read Texture SRC points
(2) 1657/FFFFFFFFC0000548 : 6482                		mov	@r8,r4
(2) 1658/FFFFFFFFC000054A : 5581                		mov	@(4,r8),r5
(2) 1659/FFFFFFFFC000054C : D841                		mov	#CachDDA_Src_L,r8
(2) 1660/FFFFFFFFC000054E : 6043                		mov	r4,r0
(2) 1661/FFFFFFFFC0000550 : 4028                		shll16	r0
(2) 1662/FFFFFFFFC0000552 : 2802                		mov	r0,@r8
(2) 1663/FFFFFFFFC0000554 : 6053                		mov	r5,r0
(2) 1664/FFFFFFFFC0000556 : 4028                		shll16	r0
(2) 1665/FFFFFFFFC0000558 : 1802                		mov	r0,@(8,r8)
(2) 1666/FFFFFFFFC000055A : 6122                		mov	@r2,r1
(2) 1667/FFFFFFFFC000055C : 5821                		mov	@(4,r2),r8
(2) 1668/FFFFFFFFC000055E : 7208                		add	#8,r2
(2) 1669/FFFFFFFFC0000560 : 32D7                		cmp/gt	r13,r2
(2) 1670/FFFFFFFFC0000562 : 8B00                		bf	.lft_ok
(2) 1671/FFFFFFFFC0000564 : 62C3                		mov 	r12,r2
(2) 1672/FFFFFFFFC0000566 :                     .lft_ok:
(2) 1673/FFFFFFFFC0000566 : 5021                		mov	@(4,r2),r0
(2) 1674/FFFFFFFFC0000568 : 3088                		sub	r8,r0
(2) 1675/FFFFFFFFC000056A : 8800                		cmp/eq	#0,r0
(2) 1676/FFFFFFFFC000056C : 89EA                		bt	set_left
(2) 1677/FFFFFFFFC000056E : 4011                		cmp/pz	r0
(2) 1678/FFFFFFFFC0000570 : 8B29                		bf	.lft_skip
(2) 1679/FFFFFFFFC0000572 :                     
(2) 1680/FFFFFFFFC0000572 : 400A                		lds	r0,mach
(2) 1681/FFFFFFFFC0000574 : 6823                		mov	r2,r8
(2) 1682/FFFFFFFFC0000576 : 7820                		add	#$20,r8
(2) 1683/FFFFFFFFC0000578 : 6082                		mov 	@r8,r0
(2) 1684/FFFFFFFFC000057A : 3048                		sub 	r4,r0
(2) 1685/FFFFFFFFC000057C : 5481                		mov 	@(4,r8),r4
(2) 1686/FFFFFFFFC000057E : 3458                		sub 	r5,r4
(2) 1687/FFFFFFFFC0000580 : 6503                		mov	r0,r5
(2) 1688/FFFFFFFFC0000582 : 4418                		shll8	r4
(2) 1689/FFFFFFFFC0000584 : 4518                		shll8	r5
(2) 1690/FFFFFFFFC0000586 : 080A                		sts	mach,r8
(2) 1691/FFFFFFFFC0000588 : E001                		mov	#1,r0				; Stopsign for HW Division
(2) 1692/FFFFFFFFC000058A : C10E                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2) 1693/FFFFFFFFC000058C : 906E                		mov	#_JR,r0				; HW DIV
(2) 1694/FFFFFFFFC000058E : 2082                		mov	r8,@r0
(2) 1695/FFFFFFFFC0000590 : 1051                		mov	r5,@(4,r0)
(2) 1696/FFFFFFFFC0000592 : 0009                		nop
(2) 1697/FFFFFFFFC0000594 : 5501                		mov	@(4,r0),r5
(2) 1698/FFFFFFFFC0000596 : 9069                		mov	#_JR,r0
(2) 1699/FFFFFFFFC0000598 : 2082                		mov	r8,@r0
(2) 1700/FFFFFFFFC000059A : 1041                		mov	r4,@(4,r0)
(2) 1701/FFFFFFFFC000059C : 0009                		nop
(2) 1702/FFFFFFFFC000059E : 5401                		mov	@(4,r0),r4
(2) 1703/FFFFFFFFC00005A0 : 4418                		shll8	r4
(2) 1704/FFFFFFFFC00005A2 : 4518                		shll8	r5
(2) 1705/FFFFFFFFC00005A4 : D02C                		mov	#CachDDA_Src_L+$C,r0
(2) 1706/FFFFFFFFC00005A6 : 2042                		mov	r4,@r0
(2) 1707/FFFFFFFFC00005A8 : D02C                		mov	#CachDDA_Src_L+4,r0
(2) 1708/FFFFFFFFC00005AA : 2052                		mov	r5,@r0
(2) 1709/FFFFFFFFC00005AC : 6522                		mov	@r2,r5
(2) 1710/FFFFFFFFC00005AE : 3518                		sub 	r1,r5
(2) 1711/FFFFFFFFC00005B0 : 6413                		mov 	r1,r4
(2) 1712/FFFFFFFFC00005B2 : 4518                		shll8	r5
(2) 1713/FFFFFFFFC00005B4 : 4428                		shll16	r4
(2) 1714/FFFFFFFFC00005B6 : 9059                		mov	#_JR,r0				; HW DIV
(2) 1715/FFFFFFFFC00005B8 : 2082                		mov	r8,@r0
(2) 1716/FFFFFFFFC00005BA : 1051                		mov	r5,@(4,r0)
(2) 1717/FFFFFFFFC00005BC : 0009                		nop
(2) 1718/FFFFFFFFC00005BE : 5501                		mov	@(4,r0),r5
(2) 1719/FFFFFFFFC00005C0 : E000                		mov	#0,r0				; Resume HW Division
(2) 1720/FFFFFFFFC00005C2 : C10E                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2) 1721/FFFFFFFFC00005C4 : 4518                		shll8	r5
(2) 1722/FFFFFFFFC00005C6 :                     .lft_skip:
(2) 1723/FFFFFFFFC00005C6 : 000B                		rts
(2) 1724/FFFFFFFFC00005C8 : 0009                		nop
(2) 1725/FFFFFFFFC00005CA :                     		align 4
(2) 1726/FFFFFFFFC00005CC :                     
(2) 1727/FFFFFFFFC00005CC :                     ; --------------------------------
(2) 1728/FFFFFFFFC00005CC :                     
(2) 1729/FFFFFFFFC00005CC :                     set_right:
(2) 1730/FFFFFFFFC00005CC : 6933                		mov	r3,r9
(2) 1731/FFFFFFFFC00005CE : 7920                		add	#$20,r9
(2) 1732/FFFFFFFFC00005D0 : 6692                		mov	@r9,r6
(2) 1733/FFFFFFFFC00005D2 : 5791                		mov	@(4,r9),r7
(2) 1734/FFFFFFFFC00005D4 : D922                		mov	#CachDDA_Src_R,r9
(2) 1735/FFFFFFFFC00005D6 : 6063                		mov	r6,r0
(2) 1736/FFFFFFFFC00005D8 : 4028                		shll16	r0
(2) 1737/FFFFFFFFC00005DA : 2902                		mov	r0,@r9
(2) 1738/FFFFFFFFC00005DC : 6073                		mov	r7,r0
(2) 1739/FFFFFFFFC00005DE : 4028                		shll16	r0
(2) 1740/FFFFFFFFC00005E0 : 1902                		mov	r0,@(8,r9)
(2) 1741/FFFFFFFFC00005E2 :                     
(2) 1742/FFFFFFFFC00005E2 : 6132                		mov	@r3,r1
(2) 1743/FFFFFFFFC00005E4 : 5931                		mov	@(4,r3),r9
(2) 1744/FFFFFFFFC00005E6 : 73F8                		add	#-8,r3
(2) 1745/FFFFFFFFC00005E8 : 33C3                		cmp/ge	r12,r3
(2) 1746/FFFFFFFFC00005EA : 8900                		bt	.rgt_ok
(2) 1747/FFFFFFFFC00005EC : 63D3                		mov 	r13,r3
(2) 1748/FFFFFFFFC00005EE :                     .rgt_ok:
(2) 1749/FFFFFFFFC00005EE : 5031                		mov	@(4,r3),r0
(2) 1750/FFFFFFFFC00005F0 : 3098                		sub	r9,r0
(2) 1751/FFFFFFFFC00005F2 : 8800                		cmp/eq	#0,r0
(2) 1752/FFFFFFFFC00005F4 : 89EA                		bt	set_right
(2) 1753/FFFFFFFFC00005F6 : 4011                		cmp/pz	r0
(2) 1754/FFFFFFFFC00005F8 : 8B29                		bf	.rgt_skip
(2) 1755/FFFFFFFFC00005FA : 400A                		lds	r0,mach
(2) 1756/FFFFFFFFC00005FC : 6933                		mov	r3,r9
(2) 1757/FFFFFFFFC00005FE : 7920                		add	#$20,r9
(2) 1758/FFFFFFFFC0000600 : 6092                		mov 	@r9,r0
(2) 1759/FFFFFFFFC0000602 : 3068                		sub 	r6,r0
(2) 1760/FFFFFFFFC0000604 : 5691                		mov 	@(4,r9),r6
(2) 1761/FFFFFFFFC0000606 : 3678                		sub 	r7,r6
(2) 1762/FFFFFFFFC0000608 : 6703                		mov	r0,r7
(2) 1763/FFFFFFFFC000060A : 4618                		shll8	r6
(2) 1764/FFFFFFFFC000060C : 4718                		shll8	r7
(2) 1765/FFFFFFFFC000060E : 090A                		sts	mach,r9
(2) 1766/FFFFFFFFC0000610 : E001                		mov	#1,r0				; Resume HW Division
(2) 1767/FFFFFFFFC0000612 : C10E                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2) 1768/FFFFFFFFC0000614 : 902A                		mov	#_JR,r0				; HW DIV
(2) 1769/FFFFFFFFC0000616 : 2092                		mov	r9,@r0
(2) 1770/FFFFFFFFC0000618 : 1071                		mov	r7,@(4,r0)
(2) 1771/FFFFFFFFC000061A : 0009                		nop
(2) 1772/FFFFFFFFC000061C : 5701                		mov	@(4,r0),r7
(2) 1773/FFFFFFFFC000061E : 9025                		mov	#_JR,r0
(2) 1774/FFFFFFFFC0000620 : 2092                		mov	r9,@r0
(2) 1775/FFFFFFFFC0000622 : 1061                		mov	r6,@(4,r0)
(2) 1776/FFFFFFFFC0000624 : 0009                		nop
(2) 1777/FFFFFFFFC0000626 : 5601                		mov	@(4,r0),r6
(2) 1778/FFFFFFFFC0000628 : 4618                		shll8	r6
(2) 1779/FFFFFFFFC000062A : 4718                		shll8	r7
(2) 1780/FFFFFFFFC000062C : D00D                		mov	#CachDDA_Src_R+4,r0
(2) 1781/FFFFFFFFC000062E : 2072                		mov	r7,@r0
(2) 1782/FFFFFFFFC0000630 : D00D                		mov	#CachDDA_Src_R+$C,r0
(2) 1783/FFFFFFFFC0000632 : 2062                		mov	r6,@r0
(2) 1784/FFFFFFFFC0000634 : 6732                		mov	@r3,r7
(2) 1785/FFFFFFFFC0000636 : 3718                		sub 	r1,r7
(2) 1786/FFFFFFFFC0000638 : 6613                		mov 	r1,r6
(2) 1787/FFFFFFFFC000063A : 4628                		shll16	r6
(2) 1788/FFFFFFFFC000063C : 4718                		shll8	r7
(2) 1789/FFFFFFFFC000063E : 9015                		mov	#_JR,r0				; HW DIV
(2) 1790/FFFFFFFFC0000640 : 2092                		mov	r9,@r0
(2) 1791/FFFFFFFFC0000642 : 1071                		mov	r7,@(4,r0)
(2) 1792/FFFFFFFFC0000644 : 0009                		nop
(2) 1793/FFFFFFFFC0000646 : 5701                		mov	@(4,r0),r7
(2) 1794/FFFFFFFFC0000648 : E000                		mov	#0,r0				; Resume HW Division
(2) 1795/FFFFFFFFC000064A : C10E                		mov.w	r0,@(marsGbl_DivReq_M,gbr)
(2) 1796/FFFFFFFFC000064C : 4718                		shll8	r7
(2) 1797/FFFFFFFFC000064E :                     .rgt_skip:
(2) 1798/FFFFFFFFC000064E : 000B                		rts
(2) 1799/FFFFFFFFC0000650 : 0009                		nop
(2) 1800/FFFFFFFFC0000652 :                     		align 4
(2) 1801/FFFFFFFFC0000654 : C000 0078 C000 0084 		ltorg
                    C000 007C C000 0088 
                    C000 008C C000 0094 
                    FF00                
(2) 1802/FFFFFFFFC000066E :                     
(2) 1803/FFFFFFFFC000066E :                     ; --------------------------------
(2) 1804/FFFFFFFFC000066E :                     ; Mark piece
(2) 1805/FFFFFFFFC000066E :                     ; --------------------------------
(2) 1806/FFFFFFFFC000066E :                     
(2) 1807/FFFFFFFFC000066E :                     put_piece:
(2) 1808/FFFFFFFFC000066E : 5821                		mov	@(4,r2),r8
(2) 1809/FFFFFFFFC0000670 : 5931                		mov	@(4,r3),r9
(2) 1810/FFFFFFFFC0000672 : 38A8                		sub	r10,r8
(2) 1811/FFFFFFFFC0000674 : 39A8                		sub	r10,r9
(2) 1812/FFFFFFFFC0000676 : 6083                		mov	r8,r0
(2) 1813/FFFFFFFFC0000678 : 3987                		cmp/gt	r8,r9
(2) 1814/FFFFFFFFC000067A : 8900                		bt	.lefth
(2) 1815/FFFFFFFFC000067C : 6093                		mov	r9,r0
(2) 1816/FFFFFFFFC000067E :                     .lefth:
(2) 1817/FFFFFFFFC000067E : 2F26                		mov	r2,@-r15
(2) 1818/FFFFFFFFC0000680 : 2F36                		mov	r3,@-r15
(2) 1819/FFFFFFFFC0000682 : 2F56                		mov	r5,@-r15
(2) 1820/FFFFFFFFC0000684 : 2F76                		mov	r7,@-r15
(2) 1821/FFFFFFFFC0000686 : 2F86                		mov	r8,@-r15
(2) 1822/FFFFFFFFC0000688 : 2F96                		mov	r9,@-r15
(2) 1823/FFFFFFFFC000068A : 1141                		mov 	r4,@(plypz_xl,r1)
(2) 1824/FFFFFFFFC000068C : 1152                		mov 	r5,@(plypz_xl_dx,r1)
(2) 1825/FFFFFFFFC000068E : 1163                		mov 	r6,@(plypz_xr,r1)
(2) 1826/FFFFFFFFC0000690 : 1174                		mov 	r7,@(plypz_xr_dx,r1)
(2) 1827/FFFFFFFFC0000692 : 350D                		dmuls	r0,r5
(2) 1828/FFFFFFFFC0000694 : 021A                		sts	macl,r2
(2) 1829/FFFFFFFFC0000696 : 370D                		dmuls	r0,r7
(2) 1830/FFFFFFFFC0000698 : 031A                		sts	macl,r3
(2) 1831/FFFFFFFFC000069A : 342C                		add 	r2,r4
(2) 1832/FFFFFFFFC000069C : 363C                		add	r3,r6
(2) 1833/FFFFFFFFC000069E : 62A3                		mov	r10,r2
(2) 1834/FFFFFFFFC00006A0 : 3A0C                		add	r0,r10
(2) 1835/FFFFFFFFC00006A2 : 63A3                		mov	r10,r3
(2) 1836/FFFFFFFFC00006A4 : 4228                		shll16	r2
(2) 1837/FFFFFFFFC00006A6 : 232B                		or	r2,r3
(2) 1838/FFFFFFFFC00006A8 : 1130                		mov	r3,@(plypz_ypos,r1)
(2) 1839/FFFFFFFFC00006AA : 2F36                		mov	r3,@-r15
(2) 1840/FFFFFFFFC00006AC : D220                		mov	#CachDDA_Src_L,r2
(2) 1841/FFFFFFFFC00006AE : 6522                		mov	@r2,r5
(2) 1842/FFFFFFFFC00006B0 : 1155                		mov	r5,@(plypz_src_xl,r1)
(2) 1843/FFFFFFFFC00006B2 : 5721                		mov	@(4,r2),r7
(2) 1844/FFFFFFFFC00006B4 : 1176                		mov	r7,@(plypz_src_xl_dx,r1)
(2) 1845/FFFFFFFFC00006B6 : 5822                		mov	@(8,r2),r8
(2) 1846/FFFFFFFFC00006B8 : 1187                		mov	r8,@(plypz_src_yl,r1)
(2) 1847/FFFFFFFFC00006BA : 5923                		mov	@($C,r2),r9
(2) 1848/FFFFFFFFC00006BC : 1198                		mov	r9,@(plypz_src_yl_dx,r1)
(2) 1849/FFFFFFFFC00006BE : 370D                		dmuls	r0,r7
(2) 1850/FFFFFFFFC00006C0 : 021A                		sts	macl,r2
(2) 1851/FFFFFFFFC00006C2 : 390D                		dmuls	r0,r9
(2) 1852/FFFFFFFFC00006C4 : 031A                		sts	macl,r3
(2) 1853/FFFFFFFFC00006C6 : 352C                		add 	r2,r5
(2) 1854/FFFFFFFFC00006C8 : 383C                		add	r3,r8
(2) 1855/FFFFFFFFC00006CA : D219                		mov	#CachDDA_Src_L,r2
(2) 1856/FFFFFFFFC00006CC : 2252                		mov	r5,@r2
(2) 1857/FFFFFFFFC00006CE : 1282                		mov	r8,@(8,r2)
(2) 1858/FFFFFFFFC00006D0 : D218                		mov	#CachDDA_Src_R,r2
(2) 1859/FFFFFFFFC00006D2 : 6522                		mov	@r2,r5
(2) 1860/FFFFFFFFC00006D4 : 1159                		mov	r5,@(plypz_src_xr,r1)
(2) 1861/FFFFFFFFC00006D6 : 5721                		mov	@(4,r2),r7
(2) 1862/FFFFFFFFC00006D8 : 117A                		mov	r7,@(plypz_src_xr_dx,r1)
(2) 1863/FFFFFFFFC00006DA : 5822                		mov	@(8,r2),r8
(2) 1864/FFFFFFFFC00006DC : 118B                		mov	r8,@(plypz_src_yr,r1)
(2) 1865/FFFFFFFFC00006DE : 5923                		mov	@($C,r2),r9
(2) 1866/FFFFFFFFC00006E0 : 119C                		mov	r9,@(plypz_src_yr_dx,r1)
(2) 1867/FFFFFFFFC00006E2 : 370D                		dmuls	r0,r7
(2) 1868/FFFFFFFFC00006E4 : 021A                		sts	macl,r2
(2) 1869/FFFFFFFFC00006E6 : 390D                		dmuls	r0,r9
(2) 1870/FFFFFFFFC00006E8 : 031A                		sts	macl,r3
(2) 1871/FFFFFFFFC00006EA : 352C                		add 	r2,r5
(2) 1872/FFFFFFFFC00006EC : 383C                		add	r3,r8
(2) 1873/FFFFFFFFC00006EE : D211                		mov	#CachDDA_Src_R,r2
(2) 1874/FFFFFFFFC00006F0 : 2252                		mov	r5,@r2
(2) 1875/FFFFFFFFC00006F2 : 1282                		mov	r8,@(8,r2)
(2) 1876/FFFFFFFFC00006F4 : 63F6                		mov	@r15+,r3
(2) 1877/FFFFFFFFC00006F6 : 4315                		cmp/pl	r3			; TOP check, 2 steps
(2) 1878/FFFFFFFFC00006F8 : 8902                		bt	.top_neg
(2) 1879/FFFFFFFFC00006FA : 4328                		shll16	r3
(2) 1880/FFFFFFFFC00006FC : 4315                		cmp/pl	r3
(2) 1881/FFFFFFFFC00006FE : 8B0E                		bf	.bad_piece
(2) 1882/FFFFFFFFC0000700 :                     .top_neg:
(2) 1883/FFFFFFFFC0000700 : 50E1                		mov	@(polygn_mtrl,r14),r0
(2) 1884/FFFFFFFFC0000702 : 110D                		mov 	r0,@(plypz_mtrl,r1)
(2) 1885/FFFFFFFFC0000704 : 50E0                		mov	@(polygn_type,r14),r0
(2) 1886/FFFFFFFFC0000706 : 110E                		mov 	r0,@(plypz_mtrlopt,r1)
(2) 1887/FFFFFFFFC0000708 : 713C                		add	#sizeof_plypz,r1
(2) 1888/FFFFFFFFC000070A : 6013                		mov	r1,r0
(2) 1889/FFFFFFFFC000070C : D80A                		mov	#RAM_Mars_VdpDrwList_e,r8
(2) 1890/FFFFFFFFC000070E : 3083                		cmp/ge	r8,r0
(2) 1891/FFFFFFFFC0000710 : 8B01                		bf	.dontreset_pz
(2) 1892/FFFFFFFFC0000712 : D00A                		mov	#RAM_Mars_VdpDrwList,r0
(2) 1893/FFFFFFFFC0000714 : 6103                		mov	r0,r1
(2) 1894/FFFFFFFFC0000716 :                     .dontreset_pz:
(2) 1895/FFFFFFFFC0000716 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2) 1896/FFFFFFFFC0000718 : C50A                		mov.w	@(marsGbl_PzListCntr,gbr),r0
(2) 1897/FFFFFFFFC000071A : 7001                		add	#1,r0
(2) 1898/FFFFFFFFC000071C : C10A                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2) 1899/FFFFFFFFC000071E :                     .bad_piece:
(2) 1900/FFFFFFFFC000071E : 69F6                		mov	@r15+,r9
(2) 1901/FFFFFFFFC0000720 : 68F6                		mov	@r15+,r8
(2) 1902/FFFFFFFFC0000722 : 67F6                		mov	@r15+,r7
(2) 1903/FFFFFFFFC0000724 : 65F6                		mov	@r15+,r5
(2) 1904/FFFFFFFFC0000726 : 63F6                		mov	@r15+,r3
(2) 1905/FFFFFFFFC0000728 : 62F6                		mov	@r15+,r2
(2) 1906/FFFFFFFFC000072A : 000B                		rts
(2) 1907/FFFFFFFFC000072C : 0009                		nop
(2) 1908/FFFFFFFFC000072E :                     		align 4
(2) 1909/FFFFFFFFC0000730 : C000 0078 C000 0088 		ltorg
                    0602 B6FC 0602 5CFC 
(2) 1910/FFFFFFFFC0000740 :                     
(2) 1911/FFFFFFFFC0000740 :                     ; ------------------------------------------------
(2) 1912/FFFFFFFFC0000740 :                     ; CACHE END
(2) 1913/FFFFFFFFC0000740 :                     ; ------------------------------------------------
(2) 1914/FFFFFFFFC0000740 :                     
(2) 1915/ 6001124 :                     .end:		phase CACHE_START+.end&$1FFF
(2) 1916/ 6001124 :                     CACHE_END:
(2) 1917/ 6001124 :                     
(1)  407/ 6001124 :                     		include "system/mars/sound.asm"
(2)    1/ 6001124 :                     ; ====================================================================
(2)    2/ 6001124 :                     ; ----------------------------------------------------------------
(2)    3/ 6001124 :                     ; MARS Sound
(2)    4/ 6001124 :                     ; ----------------------------------------------------------------
(2)    5/ 6001124 :                     
(2)    6/ 6001124 :                     ; 32X sound channel
(2)    7/ 6001124 : (MACRO)             		struct 0
(2)    7/ 6001124 : =$6001124           GLBL_LASTPC     set *
(2)    7/    4710 :                                     dephase
(2)    7/    4710 : =$4710              GLBL_LASTORG    set *
(2)    7/       0 :                                     phase 0
(2)    8/       0 :                     mchnsnd_enbl	ds.l 1
(2)    9/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(2)   10/       8 :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   11/       C :                     mchnsnd_start	ds.l 1
(2)   12/      10 :                     mchnsnd_end	ds.l 1
(2)   13/      14 :                     mchnsnd_loop	ds.l 1
(2)   14/      18 :                     mchnsnd_pitch	ds.l 1
(2)   15/      1C :                     mchnsnd_flags	ds.l 1
(2)   16/      20 :                     mchnsnd_vol	ds.l 1
(2)   17/      24 :                     sizeof_sndchn	ds.l 0
(2)   18/      24 : (MACRO)             		finish
(2)   18/       0 :                                     !org GLBL_LASTORG
(2)   18/ 6001124 :                                     phase GLBL_LASTPC
(2)   19/ 6001124 :                     
(2)   20/ 6001124 :                     ; ====================================================================
(2)   21/ 6001124 :                     ; ----------------------------------------------------------------
(2)   22/ 6001124 :                     ; Mars PWM control (Runs on VBlank)
(2)   23/ 6001124 :                     ; ----------------------------------------------------------------
(2)   24/ 6001124 :                     
(2)   25/ 6001124 :                     MarsSound_Run:
(2)   26/ 6001124 : 4F22                		sts	pr,@-r15
(2)   27/ 6001126 :                     
(2)   28/ 6001126 : 4F26                		lds	@r15+,pr
(2)   29/ 6001128 : 000B                		rts
(2)   30/ 600112A : 0009                		nop
(2)   31/ 600112C :                     		align 4
(2)   32/ 600112C :                     
(2)   33/ 600112C :                     ; ====================================================================
(2)   34/ 600112C :                     ; ----------------------------------------------------------------
(2)   35/ 600112C :                     ; Mars PWM playback (Runs on PWM interrupt)
(2)   36/ 600112C :                     ; 
(2)   37/ 600112C :                     ; READ/START/END/LOOP points are floating values (xxxxxx.00)
(2)   38/ 600112C :                     ; 
(2)   39/ 600112C :                     ; r0-r8 only
(2)   40/ 600112C :                     ; ----------------------------------------------------------------
(2)   41/ 600112C :                     
(2)   42/ 600112C :                     MarsSound_PWM:
(2)   43/ 600112C : D71B                		mov	#MarsSnd_Pwm,r7
(2)   44/ 600112E : E301                		mov 	#1,r3			; LEFT
(2)   45/ 6001130 : E401                		mov 	#1,r4			; RIGHT
(2)   46/ 6001132 : E508                		mov 	#8,r5			; numof_chn
(2)   47/ 6001134 :                     		
(2)   48/ 6001134 :                     ; ------------------------------------------------
(2)   49/ 6001134 :                     ; Read wave data
(2)   50/ 6001134 :                     ; ------------------------------------------------
(2)   51/ 6001134 :                     
(2)   52/ 6001134 :                     .nxtchn:
(2)   53/ 6001134 : 5070                		mov 	@(mchnsnd_enbl,r7),r0
(2)   54/ 6001136 : 8800                		cmp/eq	#0,r0
(2)   55/ 6001138 : 8920                		bt	.chnoff
(2)   56/ 600113A : 5171                		mov 	@(mchnsnd_read,r7),r1
(2)   57/ 600113C : 6213                		mov 	r1,r2
(2)   58/ 600113E : 5072                		mov 	@(mchnsnd_bank,r7),r0
(2)   59/ 6001140 : 4219                		shlr8	r2
(2)   60/ 6001142 : 220B                		or	r0,r2
(2)   61/ 6001144 :                     
(2)   62/ 6001144 :                     ; Check end and loop
(2)   63/ 6001144 : 5074                		mov 	@(mchnsnd_end,r7),r0
(2)   64/ 6001146 : 3103                		cmp/ge	r0,r1
(2)   65/ 6001148 : 8B0A                		bf	.read
(2)   66/ 600114A : 5075                		mov 	@(mchnsnd_loop,r7),r0
(2)   67/ 600114C : 88FF                		cmp/eq	#-1,r0
(2)   68/ 600114E : 8B04                		bf	.noend
(2)   69/ 6001150 : E000                		mov 	#0,r0
(2)   70/ 6001152 : 1700                		mov 	r0,@(mchnsnd_enbl,r7)
(2)   71/ 6001154 : 5173                		mov 	@(mchnsnd_start,r7),r1
(2)   72/ 6001156 : A010                		bra	.keep
(2)   73/ 6001158 : 0009                		nop
(2)   74/ 600115A :                     .noend:
(2)   75/ 600115A : 5173                		mov 	@(mchnsnd_start,r7),r1
(2)   76/ 600115C : A00D                		bra	.keep
(2)   77/ 600115E : 0009                		nop
(2)   78/ 6001160 :                     ; Read WAV
(2)   79/ 6001160 :                     .read:
(2)   80/ 6001160 : 6020                		mov.b	@r2,r0
(2)   81/ 6001162 : C9FF                		and 	#$FF,r0
(2)   82/ 6001164 : 4000                		shll	r0				; manual volume
(2)   83/ 6001166 : 6203                		mov 	r0,r2
(2)   84/ 6001168 : 5077                		mov 	@(mchnsnd_flags,r7),r0
(2)   85/ 600116A : C802                		tst	#2,r0
(2)   86/ 600116C : 8900                		bt	.nor
(2)   87/ 600116E : 332C                		add	r2,r3
(2)   88/ 6001170 :                     .nor:
(2)   89/ 6001170 : C801                		tst	#1,r0
(2)   90/ 6001172 : 8900                		bt	.nol
(2)   91/ 6001174 : 342C                		add	r2,r4
(2)   92/ 6001176 :                     .nol:
(2)   93/ 6001176 : 5076                		mov 	@(mchnsnd_pitch,r7),r0
(2)   94/ 6001178 : 310C                		add	r0,r1
(2)   95/ 600117A :                     		
(2)   96/ 600117A :                     ; save read
(2)   97/ 600117A :                     .keep:
(2)   98/ 600117A : 1711                		mov 	r1,@(mchnsnd_read,r7)
(2)   99/ 600117C :                     
(2)  100/ 600117C :                     .chnoff:
(2)  101/ 600117C : 7724                		add	#sizeof_sndchn,r7
(2)  102/ 600117E : 4510                		dt	r5
(2)  103/ 6001180 : 8BD8                		bf	.nxtchn
(2)  104/ 6001182 :                     
(2)  105/ 6001182 :                     ; ------------------------------------------------
(2)  106/ 6001182 :                     ; Play wave
(2)  107/ 6001182 :                     ; ------------------------------------------------
(2)  108/ 6001182 :                     
(2)  109/ 6001182 : D107                		mov	#_sysreg+monowidth,r1
(2)  110/ 6001184 :                     .full:
(2)  111/ 6001184 : 6010                		mov.b	@r1,r0
(2)  112/ 6001186 : C880                 		tst	#$80,r0
(2)  113/ 6001188 : 8BFC                 		bf	.full
(2)  114/ 600118A :                      		
(2)  115/ 600118A : D106                		mov	#_sysreg+lchwidth,r1
(2)  116/ 600118C : D206                		mov	#_sysreg+rchwidth,r2
(2)  117/ 600118E : 6033                 		mov	r3,r0
(2)  118/ 6001190 : 2101                 		mov.w	r0,@r1
(2)  119/ 6001192 : 6043                 		mov	r4,r0
(2)  120/ 6001194 : 2201                 		mov.w	r0,@r2
(2)  121/ 6001196 : 000B                		rts
(2)  122/ 6001198 : 0009                		nop
(2)  123/ 600119A :                     		align 4
(2)  124/ 600119C : 0602 B6FC 2000 4038 		ltorg
                    2000 4034 2000 4036 
(2)  125/ 60011AC :                     
(2)  126/ 60011AC :                     ; ====================================================================
(2)  127/ 60011AC :                     ; ----------------------------------------------------------------
(2)  128/ 60011AC :                     ; Subroutines
(2)  129/ 60011AC :                     ; ----------------------------------------------------------------
(2)  130/ 60011AC :                     
(2)  131/ 60011AC :                     ; --------------------------------------------------------
(2)  132/ 60011AC :                     ; Init Sound PWM
(2)  133/ 60011AC :                     ; 
(2)  134/ 60011AC :                     ; Frequency values:
(2)  135/ 60011AC :                     ; 23011361 NTSC
(2)  136/ 60011AC :                     ; 22801467 PAL
(2)  137/ 60011AC :                     ; 
(2)  138/ 60011AC :                     ; NOTE: This causes a CLICK on boot, it's normal
(2)  139/ 60011AC :                     ; --------------------------------------------------------
(2)  140/ 60011AC :                     
(2)  141/ 60011AC :                     MarsSound_Init:
(2)  142/ 60011AC : 4F22                		sts	pr,@-r15
(2)  143/ 60011AE : 4F13                		stc	gbr,@-r15
(2)  144/ 60011B0 :                     
(2)  145/ 60011B0 : D015                		mov	#_sysreg,r0
(2)  146/ 60011B2 : 401E                		ldc	r0,gbr
(2)  147/ 60011B4 : 902E                		mov	#((((23011361<<1)/22050+1)>>1)+1),r0	; 32000 works but the CPU must be calm
(2)  148/ 60011B6 : C119                		mov.w	r0,@(cycle,gbr)
(2)  149/ 60011B8 : 902D                		mov	#$0105,r0
(2)  150/ 60011BA : C118                		mov.w	r0,@(timerctl,gbr)
(2)  151/ 60011BC : E001                		mov	#1,r0
(2)  152/ 60011BE : C11C                		mov.w	r0,@(monowidth,gbr)
(2)  153/ 60011C0 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)  154/ 60011C2 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)  155/ 60011C4 :                     
(2)  156/ 60011C4 : 4F17                		ldc	@r15+,gbr
(2)  157/ 60011C6 : 4F26                		lds	@r15+,pr
(2)  158/ 60011C8 : 000B                		rts
(2)  159/ 60011CA : 0009                		nop
(2)  160/ 60011CC :                     		align 4
(2)  161/ 60011CC :                     
(2)  162/ 60011CC :                     ; --------------------------------------------------------
(2)  163/ 60011CC :                     ; MarsSound_SetChannel
(2)  164/ 60011CC :                     ; 
(2)  165/ 60011CC :                     ; Set sound data to channel
(2)  166/ 60011CC :                     ; 
(2)  167/ 60011CC :                     ; Input:
(2)  168/ 60011CC :                     ; r1 | Channel
(2)  169/ 60011CC :                     ; r2 | Start address
(2)  170/ 60011CC :                     ; r3 | End address
(2)  171/ 60011CC :                     ; r4 | Loop address (-1, dont loop)
(2)  172/ 60011CC :                     ; r5 | Pitch ($xxxxxx.xx)
(2)  173/ 60011CC :                     ; r6 | Volume
(2)  174/ 60011CC :                     ; r7 | Flags (Currently: %xxxxxxLR)
(2)  175/ 60011CC :                     ; 
(2)  176/ 60011CC :                     ; Uses:
(2)  177/ 60011CC :                     ; r0,r8
(2)  178/ 60011CC :                     ; --------------------------------------------------------
(2)  179/ 60011CC :                     
(2)  180/ 60011CC :                     MarsSound_SetChannel:
(2)  181/ 60011CC : D80F                		mov	#MarsSnd_Pwm,r8
(2)  182/ 60011CE : E024                		mov 	#sizeof_sndchn,r0
(2)  183/ 60011D0 : 201E                		mulu	r1,r0
(2)  184/ 60011D2 : 001A                		sts	macl,r0
(2)  185/ 60011D4 : 380C                		add 	r0,r8
(2)  186/ 60011D6 : 1856                		mov 	r5,@(mchnsnd_pitch,r8)
(2)  187/ 60011D8 : 1868                		mov 	r6,@(mchnsnd_vol,r8)		
(2)  188/ 60011DA : 1877                		mov 	r7,@(mchnsnd_flags,r8)
(2)  189/ 60011DC : 6023                		mov 	r2,r0				; Set MSB
(2)  190/ 60011DE : D70C                		mov 	#$FF000000,r7
(2)  191/ 60011E0 : 2079                		and 	r7,r0
(2)  192/ 60011E2 : 1802                		mov 	r0,@(mchnsnd_bank,r8)
(2)  193/ 60011E4 : 6043                		mov 	r4,r0				; Set POINTS
(2)  194/ 60011E6 : 88FF                		cmp/eq	#-1,r0
(2)  195/ 60011E8 : 8900                		bt	.endmrk
(2)  196/ 60011EA : 4018                		shll8	r0
(2)  197/ 60011EC :                     .endmrk:
(2)  198/ 60011EC : 1805                		mov	r0,@(mchnsnd_loop,r8)
(2)  199/ 60011EE : 6033                		mov 	r3,r0
(2)  200/ 60011F0 : 4018                		shll8	r0
(2)  201/ 60011F2 : 1804                		mov	r0,@(mchnsnd_end,r8)
(2)  202/ 60011F4 : 6023                		mov 	r2,r0
(2)  203/ 60011F6 : 4018                		shll8	r0
(2)  204/ 60011F8 : 1803                		mov 	r0,@(mchnsnd_start,r8)	
(2)  205/ 60011FA : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  206/ 60011FC : E001                		mov 	#1,r0
(2)  207/ 60011FE : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  208/ 6001200 : 000B                		rts
(2)  209/ 6001202 : 0009                		nop
(2)  210/ 6001204 :                     		align 4
(2)  211/ 6001204 :                     
(2)  212/ 6001204 :                     ; --------------------------------------------------------
(2)  213/ 6001204 :                     ; Sound_SetPitch
(2)  214/ 6001204 :                     ; 
(2)  215/ 6001204 :                     ; Set pitch number
(2)  216/ 6001204 :                     ; 
(2)  217/ 6001204 :                     ; Input:
(2)  218/ 6001204 :                     ; d0 | WORD - Pitch data
(2)  219/ 6001204 :                     ; --------------------------------------------------------
(2)  220/ 6001204 :                     
(2)  221/ 6001204 :                     MarsSound_SetPitch:
(2)  222/ 6001204 : 000B                		rts
(2)  223/ 6001206 : 0009                		nop
(2)  224/ 6001208 :                     		align 4
(2)  225/ 6001208 :                     
(2)  226/ 6001208 :                     ; ====================================================================
(2)  227/ 6001208 :                     
(2)  228/ 6001208 : 2000 4000 0602 B6FC 		ltorg			; Save literals
                    FF00 0000 0415 0105 
(2)  229/ 6001218 :                     
(1)  408/ 6001218 :                     		align 4
(1)  409/ 6001218 :                     
(1)  410/ 6001218 :                     ; ====================================================================
(1)  411/ 6001218 :                     ; ----------------------------------------------------------------
(1)  412/ 6001218 :                     ; Master entry
(1)  413/ 6001218 :                     ; ----------------------------------------------------------------
(1)  414/ 6001218 :                     
(1)  415/ 6001218 :                     		align 4
(1)  416/ 6001218 :                     SH2_M_Entry:
(1)  417/ 6001218 : DF42                		mov.l	#CS3|$40000,r15		; Set default Stack for Master
(1)  418/ 600121A : 91A5                		mov.l   #$FFFFFE10,r1
(1)  419/ 600121C : E000                		mov     #0,r0
(1)  420/ 600121E : 8010                		mov.b   r0,@(0,r1)
(1)  421/ 6001220 : E0E2                		mov     #$FFFFFFE2,r0
(1)  422/ 6001222 : 8017                		mov.b   r0,@(7,r1)
(1)  423/ 6001224 : E000                		mov     #0,r0
(1)  424/ 6001226 : 8014                		mov.b   r0,@(4,r1)
(1)  425/ 6001228 : E001                		mov     #1,r0
(1)  426/ 600122A : 8015                		mov.b   r0,@(5,r1)
(1)  427/ 600122C : E000                		mov     #0,r0
(1)  428/ 600122E : 8016                		mov.b   r0,@(6,r1)
(1)  429/ 6001230 : E001                		mov     #1,r0
(1)  430/ 6001232 : 8011                		mov.b   r0,@(1,r1)
(1)  431/ 6001234 : E000                		mov     #0,r0
(1)  432/ 6001236 : 8013                		mov.b   r0,@(3,r1)
(1)  433/ 6001238 : 8012                		mov.b   r0,@(2,r1)
(1)  434/ 600123A : 9096                		mov.l   #$FFFFFEE2,r0		; Pre-init special interrupt
(1)  435/ 600123C : E150                		mov     #$50,r1
(1)  436/ 600123E : 2011                		mov.w   r1,@r0
(1)  437/ 6001240 : 9094                		mov.l   #$FFFFFEE4,r0
(1)  438/ 6001242 : E148                		mov     #$120/4,r1		; VBR + this/4
(1)  439/ 6001244 : 4118                		shll8   r1
(1)  440/ 6001246 : 2011                		mov.w   r1,@r0
(1)  441/ 6001248 :                     
(1)  442/ 6001248 :                     ; ------------------------------------------------
(1)  443/ 6001248 :                     ; Wait for Genesis and Slave CPU
(1)  444/ 6001248 :                     ; ------------------------------------------------
(1)  445/ 6001248 :                     
(1)  446/ 6001248 :                     .wait_md:
(1)  447/ 6001248 : D237                		mov 	#_sysreg+comm0,r2		; Wait for Genesis
(1)  448/ 600124A : 6022                		mov.l	@r2,r0
(1)  449/ 600124C : 8800                		cmp/eq	#0,r0
(1)  450/ 600124E : 8BFB                		bf	.wait_md
(1)  451/ 6001250 : D136                		mov.l	#"SLAV",r1
(1)  452/ 6001252 :                     .wait_slave:
(1)  453/ 6001252 : 5022                		mov.l	@(8,r2),r0			; Wait for Slave CPU to finish booting
(1)  454/ 6001254 : 3010                		cmp/eq	r1,r0
(1)  455/ 6001256 : 8BFC                		bf	.wait_slave
(1)  456/ 6001258 : E000                		mov.l	#0,r0				; clear "SLAV"
(1)  457/ 600125A : 1202                		mov.l	r0,@(8,r2)
(1)  458/ 600125C :                     
(1)  459/ 600125C :                     ; ====================================================================
(1)  460/ 600125C :                     ; ----------------------------------------------------------------
(1)  461/ 600125C :                     ; Master main code
(1)  462/ 600125C :                     ; 
(1)  463/ 600125C :                     ; This CPU is exclusively used for drawing polygons, to interact
(1)  464/ 600125C :                     ; with models use the Slave CPU instead.
(1)  465/ 600125C :                     ; ----------------------------------------------------------------
(1)  466/ 600125C :                     
(1)  467/ 600125C :                     SH2_M_HotStart:
(1)  468/ 600125C : DF31                		mov.l	#CS3|$40000,r15			; Stack again if coming from RESET
(1)  469/ 600125E : DE34                		mov.l	#RAM_Mars_Global,r14		; GBR - Global values/variables
(1)  470/ 6001260 : 4E1E                		ldc	r14,gbr
(1)  471/ 6001262 :                     	
(1)  472/ 6001262 : 9084                		mov.l	#$F0,r0				; Interrupts OFF
(1)  473/ 6001264 : 400E                		ldc	r0,sr
(1)  474/ 6001266 : 9183                		mov.l	#_CCR,r1			; Set this cache mode
(1)  475/ 6001268 : E000                		mov	#0,r0
(1)  476/ 600126A : 2101                		mov.w	r0,@r1
(1)  477/ 600126C : E019                		mov	#$19,r0
(1)  478/ 600126E : 2101                		mov.w	r0,@r1
(1)  479/ 6001270 : D130                		mov	#_sysreg,r1
(1)  480/ 6001272 : E00A                		mov	#VIRQ_ON|CMDIRQ_ON,r0		; Enable these interrupts		
(1)  481/ 6001274 : 8011                    		mov.b	r0,@(intmask,r1)
(1)  482/ 6001276 :                     
(1)  483/ 6001276 : D130                		mov 	#CACHE_START,r1			; Load 3D Routines on CACHE	
(1)  484/ 6001278 : D230                		mov 	#$C0000000,r2			; Those run more faster here supposedly...
(1)  485/ 600127A : 937A                		mov 	#(CACHE_END-CACHE_START)/4,r3
(1)  486/ 600127C :                     .copy:
(1)  487/ 600127C : 6016                		mov 	@r1+,r0
(1)  488/ 600127E : 2202                		mov 	r0,@r2
(1)  489/ 6001280 : 7204                		add 	#4,r2
(1)  490/ 6001282 : 4310                		dt	r3
(1)  491/ 6001284 : 8BFA                		bf	.copy
(1)  492/ 6001286 : B96A                		bsr	MarsVideo_Init			; Init Video
(1)  493/ 6001288 : 0009                		nop
(1)  494/ 600128A : BF8F                		bsr	MarsSound_Init			; Init Sound
(1)  495/ 600128C : 0009                		nop
(1)  496/ 600128E :                     		
(1)  497/ 600128E :                     ; ------------------------------------------------
(1)  498/ 600128E :                     
(1)  499/ 600128E : D12C                		mov	#Palette_Puyo,r1
(1)  500/ 6001290 : 9370                		mov	#256,r3
(1)  501/ 6001292 : B9B5                		bsr	MarsVideo_LoadPal
(1)  502/ 6001294 : E200                		mov	#0,r2
(1)  503/ 6001296 : 906E                		mov	#($1F<<10)|($E<<5),r0
(1)  504/ 6001298 : D12A                		mov	#RAM_Mars_Palette,r1
(1)  505/ 600129A : 2101                		mov.w	r0,@r1
(1)  506/ 600129C :                     		
(1)  507/ 600129C :                     ; 		mov	#0,r1
(1)  508/ 600129C :                     ; 		mov	#WAV_LEFT,r2
(1)  509/ 600129C :                     ; 		mov	#WAV_LEFT_E,r3
(1)  510/ 600129C :                     ; 		mov	r2,r4
(1)  511/ 600129C :                     ; 		mov	#$100,r5
(1)  512/ 600129C :                     ; 		mov	#0,r6
(1)  513/ 600129C :                     ; 		bsr	MarsSound_SetChannel
(1)  514/ 600129C :                     ; 		mov	#%10,r7
(1)  515/ 600129C :                     ; 		mov	#1,r1
(1)  516/ 600129C :                     ; 		mov	#WAV_RIGHT,r2
(1)  517/ 600129C :                     ; 		mov	#WAV_RIGHT_E,r3
(1)  518/ 600129C :                     ; 		mov	r2,r4
(1)  519/ 600129C :                     ; 		mov	#$100,r5
(1)  520/ 600129C :                     ; 		mov	#0,r6
(1)  521/ 600129C :                     ; 		bsr	MarsSound_SetChannel
(1)  522/ 600129C :                     ; 		mov	#%01,r7
(1)  523/ 600129C :                     		
(1)  524/ 600129C :                     ; ------------------------------------------------
(1)  525/ 600129C :                     
(1)  526/ 600129C : 9068                		mov	#$FFFFFE92,r0		; Stop watchdog
(1)  527/ 600129E : E108                		mov     #8,r1
(1)  528/ 60012A0 : 2010                		mov.b   r1,@r0
(1)  529/ 60012A2 : E119                		mov     #$19,r1
(1)  530/ 60012A4 : 2010                		mov.b   r1,@r0
(1)  531/ 60012A6 : E020                		mov.l	#$20,r0			; Interrupts ON
(1)  532/ 60012A8 : 400E                		ldc	r0,sr
(1)  533/ 60012AA :                     
(1)  534/ 60012AA :                     ; --------------------------------------------------------
(1)  535/ 60012AA :                     ; Loop
(1)  536/ 60012AA :                     ; --------------------------------------------------------
(1)  537/ 60012AA :                     
(1)  538/ 60012AA :                     master_loop:
(1)  539/ 60012AA : E000                		mov	#0,r0
(1)  540/ 60012AC : D126                		mov	#_sysreg+comm14,r1
(1)  541/ 60012AE : 2100                		mov.b	r0,@r1
(1)  542/ 60012B0 :                     .mstr_wait:
(1)  543/ 60012B0 : 6010                		mov.b	@r1,r0			; Any request from Slave?
(1)  544/ 60012B2 : 8800                		cmp/eq	#0,r0
(1)  545/ 60012B4 : 8B02                		bf	.mstr_free		; If !=0, start drawing
(1)  546/ 60012B6 :                     ; 		mov	#$16,r0			; Small delay and retry
(1)  547/ 60012B6 :                     ; .mstr_delay:
(1)  548/ 60012B6 :                     ; 		nop
(1)  549/ 60012B6 :                     ; 		dt	r0
(1)  550/ 60012B6 :                     ; 		bf/s	.mstr_delay
(1)  551/ 60012B6 : 0009                		nop
(1)  552/ 60012B8 : AFFA                		bra	.mstr_wait
(1)  553/ 60012BA : 0009                		nop
(1)  554/ 60012BC :                     
(1)  555/ 60012BC :                     ; --------------------------------------------------------
(1)  556/ 60012BC :                     ; Start building and drawing polygons
(1)  557/ 60012BC :                     ; --------------------------------------------------------
(1)  558/ 60012BC :                     
(1)  559/ 60012BC :                     .mstr_free:
(1)  560/ 60012BC : 9058                		mov.l	#$FFFFFE92,r0
(1)  561/ 60012BE : E108                		mov	#8,r1
(1)  562/ 60012C0 : 2010                		mov.b	r1,@r0
(1)  563/ 60012C2 : E119                		mov	#$19,r1
(1)  564/ 60012C4 : 2010                		mov.b	r1,@r0
(1)  565/ 60012C6 : BB61                		bsr	MarsVideo_SetWatchdog
(1)  566/ 60012C8 : 0009                		nop
(1)  567/ 60012CA : C509                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0	; Start drawing polygons from the READ buffer
(1)  568/ 60012CC : C801                		tst     #1,r0				; Check for which buffer to use
(1)  569/ 60012CE : 8903                		bt	.page_2
(1)  570/ 60012D0 : DE1E                		mov 	#RAM_Mars_PlgnList_0,r14
(1)  571/ 60012D2 : DD1F                		mov	#RAM_Mars_PlgnNum_0,r13
(1)  572/ 60012D4 : A002                		bra	.cont_plgn
(1)  573/ 60012D6 : 0009                		nop
(1)  574/ 60012D8 :                     .page_2:
(1)  575/ 60012D8 : DE1E                		mov 	#RAM_Mars_PlgnList_1,r14
(1)  576/ 60012DA : DD1F                		mov	#RAM_Mars_PlgnNum_1,r13
(1)  577/ 60012DC :                     .cont_plgn:
(1)  578/ 60012DC :                     
(1)  579/ 60012DC :                     	; While we are doing this, the watchdog is
(1)  580/ 60012DC :                     	; working on the background drawing the polygons
(1)  581/ 60012DC :                     	; using the "pieces" list (
(1)  582/ 60012DC :                     	; 
(1)  583/ 60012DC :                     	; r14 - Polygon pointers list
(1)  584/ 60012DC :                     	; r13 - Number of polygons to build
(1)  585/ 60012DC : 6DD1                		mov.w	@r13,r13
(1)  586/ 60012DE : 4D15                		cmp/pl	r13
(1)  587/ 60012E0 : 8B0C                		bf	.skip
(1)  588/ 60012E2 :                     .loop:
(1)  589/ 60012E2 : 2FE6                		mov	r14,@-r15
(1)  590/ 60012E4 : 2FD6                		mov	r13,@-r15
(1)  591/ 60012E6 : 6EE2                		mov	@r14,r14			; Get location of the polygon
(1)  592/ 60012E8 : 4E15                		cmp/pl	r14
(1)  593/ 60012EA : 8B02                		bf	.invalid
(1)  594/ 60012EC : D01B                		mov 	#MarsVideo_MakePolygon,r0
(1)  595/ 60012EE : 400B                		jsr	@r0
(1)  596/ 60012F0 : 0009                		nop
(1)  597/ 60012F2 :                     .invalid:
(1)  598/ 60012F2 : 6DF6                		mov	@r15+,r13
(1)  599/ 60012F4 : 6EF6                		mov	@r15+,r14
(1)  600/ 60012F6 : 4D10                		dt	r13
(1)  601/ 60012F8 : 8FF3                		bf/s	.loop
(1)  602/ 60012FA : 7E04                		add	#4,r14
(1)  603/ 60012FC :                     .skip:
(1)  604/ 60012FC :                     
(1)  605/ 60012FC :                     	; --------------------------------------
(1)  606/ 60012FC : C50A                .wait_pz: 	mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces remaining on interrupt?
(1)  607/ 60012FE : 8800                		cmp/eq	#0,r0
(1)  608/ 6001300 : 8BFC                		bf	.wait_pz
(1)  609/ 6001302 : C50B                .wait_task:	mov.w	@(marsGbl_DrwTask,gbr),r0	; Any draw task active?
(1)  610/ 6001304 : 8800                		cmp/eq	#0,r0
(1)  611/ 6001306 : 8BFC                		bf	.wait_task
(1)  612/ 6001308 : 9136                		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1)  613/ 600130A : 9036                		mov.w   #$A518,r0
(1)  614/ 600130C : 2101                		mov.w   r0,@r1
(1)  615/ 600130E : D114                		mov	#_vdpreg,r1			; Framebuffer swap request
(1)  616/ 6001310 : 841B                		mov.b	@(framectl,r1),r0
(1)  617/ 6001312 : CA01                		xor	#1,r0
(1)  618/ 6001314 : 801B                		mov.b	r0,@(framectl,r1)
(1)  619/ 6001316 : C020                		mov.b	r0,@(marsGbl_CurrFb,gbr)
(1)  620/ 6001318 :                     
(1)  621/ 6001318 :                     	; --------------------
(1)  622/ 6001318 :                     	; DEBUG counter
(1)  623/ 6001318 : D112                		mov	#_sysreg+comm4,r1
(1)  624/ 600131A : 6011                		mov.w	@r1,r0
(1)  625/ 600131C : 7001                		add	#1,r0
(1)  626/ 600131E : 2101                		mov.w	r0,@r1
(1)  627/ 6001320 :                     	; --------------------
(1)  628/ 6001320 :                     	
(1)  629/ 6001320 : AFC3                		bra	master_loop
(1)  630/ 6001322 : 0009                		nop
(1)  631/ 6001324 :                     		align 4
(1)  632/ 6001324 : 0604 0000 2000 4020 		ltorg
                    534C 4156 0600 58BC 
                    2000 4000 0600 09E4 
                    C000 0000 0600 3DD0 
                    0600 5900 2000 402E 
                    0600 5B00 0600 9B00 
                    0600 6B00 0600 9B02 
                    C000 03FC 2000 4100 
                    2000 4024 FE10 FEE2 
                    FEE4 00F0 FE92 01D0 
                    0100 7DC0 FE80 A518 
(1)  633/ 600137C :                     
(1)  634/ 600137C :                     ; ====================================================================
(1)  635/ 600137C :                     ; ----------------------------------------------------------------
(1)  636/ 600137C :                     ; Slave entry
(1)  637/ 600137C :                     ; ----------------------------------------------------------------
(1)  638/ 600137C :                     
(1)  639/ 600137C :                     		align 4
(1)  640/ 600137C :                     SH2_S_Entry:
(1)  641/ 600137C : DE4D                		mov.l	#_sysreg,r14
(1)  642/ 600137E : 4E1E                		ldc	r14,gbr
(1)  643/ 6001380 :                     
(1)  644/ 6001380 : 91C0                		mov.l   #$FFFFFE10,r1
(1)  645/ 6001382 : E000                		mov     #0,r0
(1)  646/ 6001384 : 8010                		mov.b   r0,@(0,r1)
(1)  647/ 6001386 : E0E2                		mov     #$FFFFFFE2,r0
(1)  648/ 6001388 : 8017                		mov.b   r0,@(7,r1)
(1)  649/ 600138A : E000                		mov     #0,r0
(1)  650/ 600138C : 8014                		mov.b   r0,@(4,r1)
(1)  651/ 600138E : E001                		mov     #1,r0
(1)  652/ 6001390 : 8015                		mov.b   r0,@(5,r1)
(1)  653/ 6001392 : E000                		mov     #0,r0
(1)  654/ 6001394 : 8016                		mov.b   r0,@(6,r1)
(1)  655/ 6001396 : E001                		mov     #1,r0
(1)  656/ 6001398 : 8011                		mov.b   r0,@(1,r1)
(1)  657/ 600139A : E000                		mov     #0,r0
(1)  658/ 600139C : 8013                		mov.b   r0,@(3,r1)
(1)  659/ 600139E : 8012                		mov.b   r0,@(2,r1)
(1)  660/ 60013A0 : 90B1                		mov.l   #$FFFFFEE2,r0
(1)  661/ 60013A2 : E150                		mov     #$50,r1
(1)  662/ 60013A4 : 2011                		mov.w   r1,@r0
(1)  663/ 60013A6 : 90AF                		mov.l   #$FFFFFEE4,r0
(1)  664/ 60013A8 : E148                		mov     #$120/4,r1		; VBR + this/4
(1)  665/ 60013AA : 4118                		shll8   r1
(1)  666/ 60013AC : 2011                		mov.w   r1,@r0
(1)  667/ 60013AE :                     		
(1)  668/ 60013AE :                     ; ------------------------------------------------
(1)  669/ 60013AE :                     ; Wait for Genesis, report to Master SH2
(1)  670/ 60013AE :                     ; ------------------------------------------------
(1)  671/ 60013AE :                     
(1)  672/ 60013AE :                     .wait_md:
(1)  673/ 60013AE : D242                		mov 	#_sysreg+comm0,r2
(1)  674/ 60013B0 : 6022                		mov.l	@r2,r0
(1)  675/ 60013B2 : 8800                		cmp/eq	#0,r0
(1)  676/ 60013B4 : 8BFB                		bf	.wait_md
(1)  677/ 60013B6 : D041                		mov.l	#"SLAV",r0
(1)  678/ 60013B8 : 1202                		mov.l	r0,@(8,r2)
(1)  679/ 60013BA :                     
(1)  680/ 60013BA :                     ; ====================================================================
(1)  681/ 60013BA :                     ; ----------------------------------------------------------------
(1)  682/ 60013BA :                     ; Slave main code
(1)  683/ 60013BA :                     ; ----------------------------------------------------------------
(1)  684/ 60013BA :                     
(1)  685/ 60013BA :                     SH2_S_HotStart:
(1)  686/ 60013BA : DF41                		mov.l	#CS3|$3F000,r15			; Reset stack
(1)  687/ 60013BC : DE41                		mov.l	#RAM_Mars_Global,r14		; Reset gbr
(1)  688/ 60013BE : 4E1E                		ldc	r14,gbr
(1)  689/ 60013C0 : 90A3                		mov.l	#$F0,r0				; Interrupts OFF
(1)  690/ 60013C2 : 400E                		ldc	r0,sr
(1)  691/ 60013C4 : 91A2                		mov.l	#_CCR,r1			; Set this cache mode
(1)  692/ 60013C6 : E000                		mov	#0,r0
(1)  693/ 60013C8 : 2101                		mov.w	r0,@r1
(1)  694/ 60013CA : E019                		mov	#$19,r0
(1)  695/ 60013CC : 2101                		mov.w	r0,@r1
(1)  696/ 60013CE : D139                		mov	#_sysreg,r1
(1)  697/ 60013D0 : E001                		mov.l	#VIRQ_ON||PWMIRQ_ON|CMDIRQ_ON,r0	; IRQ enable bits
(1)  698/ 60013D2 : 8011                    		mov.b	r0,@(intmask,r1)			; clear IRQ ACK regs
(1)  699/ 60013D4 :                     
(1)  700/ 60013D4 :                     
(1)  701/ 60013D4 :                     ; ------------------------------------------------
(1)  702/ 60013D4 :                     ; REMINDER: In blender, 1 meter = $10000
(1)  703/ 60013D4 :                     ;
(1)  704/ 60013D4 : B932                		bsr	MarsMdl_Init
(1)  705/ 60013D6 : 0009                		nop
(1)  706/ 60013D8 : E020                		mov	#$20,r0			; Interrupts ON
(1)  707/ 60013DA : 400E                		ldc	r0,sr
(1)  708/ 60013DC :                     		
(1)  709/ 60013DC :                     	; TESTING LAYOUT
(1)  710/ 60013DC : D43A                		mov	#RAM_Mars_Objects,r4
(1)  711/ 60013DE :                     
(1)  712/ 60013DE : D03B                		mov	#TEST_MODEL,r0
(1)  713/ 60013E0 : E100                		mov	#0,r1
(1)  714/ 60013E2 : E200                		mov	#0,r2
(1)  715/ 60013E4 : E300                		mov	#0,r3
(1)  716/ 60013E6 : 1400                		mov	r0,@(mdl_data,r4)
(1)  717/ 60013E8 : 1411                		mov	r1,@(mdl_x_pos,r4)
(1)  718/ 60013EA : 1422                		mov	r2,@(mdl_y_pos,r4)
(1)  719/ 60013EC : 1433                		mov	r3,@(mdl_z_pos,r4)
(1)  720/ 60013EE : 741C                		add	#sizeof_mdlobj,r4
(1)  721/ 60013F0 :                     
(1)  722/ 60013F0 :                     ; 		mov	#TEST_MODEL,r0
(1)  723/ 60013F0 :                     ; 		mov	#0,r1
(1)  724/ 60013F0 :                     ; 		mov	#0,r2
(1)  725/ 60013F0 :                     ; 		mov	#-$20000,r3
(1)  726/ 60013F0 :                     ; 		mov	r0,@(mdl_data,r4)
(1)  727/ 60013F0 :                     ; 		mov	r1,@(mdl_x_pos,r4)
(1)  728/ 60013F0 :                     ; 		mov	r2,@(mdl_y_pos,r4)
(1)  729/ 60013F0 :                     ; 		mov	r3,@(mdl_z_pos,r4)
(1)  730/ 60013F0 :                     ; 		add	#sizeof_mdlobj,r4
(1)  731/ 60013F0 :                     ; 
(1)  732/ 60013F0 :                     ; 		mov	#TEST_MODEL,r0
(1)  733/ 60013F0 :                     ; 		mov	#-$20000,r1
(1)  734/ 60013F0 :                     ; 		mov	#0,r2
(1)  735/ 60013F0 :                     ; 		mov	#-$20000,r3
(1)  736/ 60013F0 :                     ; 		mov	r0,@(mdl_data,r4)
(1)  737/ 60013F0 :                     ; 		mov	r1,@(mdl_x_pos,r4)
(1)  738/ 60013F0 :                     ; 		mov	r2,@(mdl_y_pos,r4)
(1)  739/ 60013F0 :                     ; 		mov	r3,@(mdl_z_pos,r4)
(1)  740/ 60013F0 :                     ; 		add	#sizeof_mdlobj,r4
(1)  741/ 60013F0 :                     ; 
(1)  742/ 60013F0 :                     ; 		mov	#TEST_MODEL,r0
(1)  743/ 60013F0 :                     ; 		mov	#$20000,r1
(1)  744/ 60013F0 :                     ; 		mov	#0,r2
(1)  745/ 60013F0 :                     ; 		mov	#-$20000,r3
(1)  746/ 60013F0 :                     ; 		mov	r0,@(mdl_data,r4)
(1)  747/ 60013F0 :                     ; 		mov	r1,@(mdl_x_pos,r4)
(1)  748/ 60013F0 :                     ; 		mov	r2,@(mdl_y_pos,r4)
(1)  749/ 60013F0 :                     ; 		mov	r3,@(mdl_z_pos,r4)
(1)  750/ 60013F0 :                     ; 		add	#sizeof_mdlobj,r4
(1)  751/ 60013F0 :                     		
(1)  752/ 60013F0 :                     ; --------------------------------------------------------
(1)  753/ 60013F0 :                     ; Loop
(1)  754/ 60013F0 :                     ; --------------------------------------------------------
(1)  755/ 60013F0 :                     
(1)  756/ 60013F0 :                     slave_loop:
(1)  757/ 60013F0 : DE37                		mov	#_sysreg+comm15,r14		; Any request from MD?
(1)  758/ 60013F2 : 60E0                		mov.b	@r14,r0
(1)  759/ 60013F4 : 8800                		cmp/eq	#0,r0
(1)  760/ 60013F6 : 8921                		bt	.no_requests
(1)  761/ 60013F8 :                     
(1)  762/ 60013F8 :                     ; --------------------------------------------
(1)  763/ 60013F8 :                     
(1)  764/ 60013F8 : D136                		mov	#_sysreg+comm8,r1
(1)  765/ 60013FA : D237                		mov	#RAM_Mars_ObjCamera,r2
(1)  766/ 60013FC :                     .transfer_loop:
(1)  767/ 60013FC : 0009                		nop
(1)  768/ 60013FE : 0009                		nop
(1)  769/ 6001400 : 0009                		nop
(1)  770/ 6001402 : 0009                		nop
(1)  771/ 6001404 : 6011                		mov.w	@r1,r0
(1)  772/ 6001406 : 8800                		cmp/eq	#0,r0
(1)  773/ 6001408 : 89F8                		bt	.transfer_loop
(1)  774/ 600140A : 8802                		cmp/eq	#2,r0
(1)  775/ 600140C : 8913                		bt	.trnsfr_done
(1)  776/ 600140E : 8511                		mov.w	@(2,r1),r0
(1)  777/ 6001410 : 600D                		extu	r0,r0
(1)  778/ 6001412 : 4028                		shll16	r0
(1)  779/ 6001414 : 6303                		mov	r0,r3
(1)  780/ 6001416 : 8512                		mov.w	@(4,r1),r0
(1)  781/ 6001418 : 600D                		extu	r0,r0
(1)  782/ 600141A : 203B                		or	r3,r0
(1)  783/ 600141C : 2202                		mov.l	r0,@r2
(1)  784/ 600141E : 0009                		nop
(1)  785/ 6001420 : 0009                		nop
(1)  786/ 6001422 : 0009                		nop
(1)  787/ 6001424 : 0009                		nop
(1)  788/ 6001426 : E000                		mov	#0,r0
(1)  789/ 6001428 : 2101                		mov.w	r0,@r1
(1)  790/ 600142A : 0009                		nop
(1)  791/ 600142C : 0009                		nop
(1)  792/ 600142E : 0009                		nop
(1)  793/ 6001430 : 0009                		nop
(1)  794/ 6001432 : AFE3                		bra	.transfer_loop
(1)  795/ 6001434 : 7204                		add	#4,r2
(1)  796/ 6001436 :                     .trnsfr_done:
(1)  797/ 6001436 : E000                		mov	#0,r0
(1)  798/ 6001438 : 2101                		mov.w	r0,@r1
(1)  799/ 600143A : 2E00                		mov.b	r0,@r14
(1)  800/ 600143C :                     ; 		mov.w	@(marsGbl_SlvDrawReq,gbr),r0
(1)  801/ 600143C :                     ; 		cmp/eq	#1,r0
(1)  802/ 600143C :                     ; 		bt	slave_loop
(1)  803/ 600143C :                     ;  		mov	#1,r0
(1)  804/ 600143C :                     ;  		mov.w	r0,@(marsGbl_SlvDrawReq,gbr)
(1)  805/ 600143C :                     .no_requests:
(1)  806/ 600143C :                     ;  		mov.w	@(marsGbl_SlvDrawReq,gbr),r0
(1)  807/ 600143C :                     ;  		cmp/eq	#0,r0
(1)  808/ 600143C :                     ;  		bt	slave_loop
(1)  809/ 600143C : D127                		mov.l	#_sysreg+comm14,r1		; Master CPU still drawing pieces?
(1)  810/ 600143E :                     .wait_master2:
(1)  811/ 600143E : 6010                		mov.b	@r1,r0
(1)  812/ 6001440 : 8801                		cmp/eq	#1,r0
(1)  813/ 6001442 : 89D5                		bt	slave_loop
(1)  814/ 6001444 :                     		
(1)  815/ 6001444 :                     ; --------------------------------------------------------
(1)  816/ 6001444 :                     ; Start building polygons from models
(1)  817/ 6001444 :                     ; --------------------------------------------------------
(1)  818/ 6001444 :                     
(1)  819/ 6001444 :                     ; CAMERA ANIMATION IS DONE ON
(1)  820/ 6001444 :                     ; THE MD SIDE
(1)  821/ 6001444 :                     
(1)  822/ 6001444 :                     ; ----------------------------------------
(1)  823/ 6001444 :                     
(1)  824/ 6001444 : D126                		mov	#_sysreg+comm6,r1		; DEBUG counter
(1)  825/ 6001446 : 6011                		mov.w	@r1,r0
(1)  826/ 6001448 : 7001                		add	#1,r0
(1)  827/ 600144A : 2101                		mov.w	r0,@r1
(1)  828/ 600144C : E000                		mov	#0,r0
(1)  829/ 600144E : C108                		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(1)  830/ 6001450 : D124                		mov 	#RAM_Mars_Polygons_0,r1
(1)  831/ 6001452 : C509                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1)  832/ 6001454 : C801                		tst     #1,r0
(1)  833/ 6001456 : 8900                		bt	.go_mdl
(1)  834/ 6001458 : D123                		mov 	#RAM_Mars_Polygons_1,r1
(1)  835/ 600145A :                     .go_mdl:
(1)  836/ 600145A : 6013                		mov	r1,r0
(1)  837/ 600145C : C203                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(1)  838/ 600145E : D023                		mov	#RAM_Mars_Plgn_ZList,r0
(1)  839/ 6001460 : C202                		mov	r0,@(marsGbl_CurrZList,gbr)
(1)  840/ 6001462 :                     		
(1)  841/ 6001462 :                     ; 		mov.l	#$FFFFFE92,r0			; Prepare watchdog on this CPU
(1)  842/ 6001462 :                     ; 		mov	#8,r1
(1)  843/ 6001462 :                     ; 		mov.b	r1,@r0
(1)  844/ 6001462 :                     ; 		mov	#$19,r1
(1)  845/ 6001462 :                     ; 		mov.b	r1,@r0
(1)  846/ 6001462 :                     ; 		mov	#$FFFFFE80,r1
(1)  847/ 6001462 :                     ; 		mov.w	#$5AFF,r0			; Interrupt priority(?)
(1)  848/ 6001462 :                     ; 		mov.w	r0,@r1
(1)  849/ 6001462 :                     ; 		mov.w	#$A538,r0			; Enable watchdog (Face autosort on the background)
(1)  850/ 6001462 :                     ; 		mov.w	r0,@r1
(1)  851/ 6001462 :                     
(1)  852/ 6001462 : DE23                		mov	#RAM_Mars_Objects,r14
(1)  853/ 6001464 : ED10                		mov	#MAX_MODELS,r13
(1)  854/ 6001466 :                     .loop:
(1)  855/ 6001466 : 50E0                		mov	@(mdl_data,r14),r0
(1)  856/ 6001468 : 8800                		cmp/eq	#0,r0
(1)  857/ 600146A : 8903                		bt	.invlid
(1)  858/ 600146C : 2FD6                		mov	r13,@-r15
(1)  859/ 600146E : B8F3                		bsr	MarsMdl_ReadModel
(1)  860/ 6001470 : 0009                		nop
(1)  861/ 6001472 : 6DF6                		mov	@r15+,r13
(1)  862/ 6001474 :                     .invlid:
(1)  863/ 6001474 : 4D10                		dt	r13
(1)  864/ 6001476 : 8FF6                		bf/s	.loop
(1)  865/ 6001478 : 7E1C                		add	#sizeof_mdlobj,r14
(1)  866/ 600147A :                     .skip:
(1)  867/ 600147A :                     
(1)  868/ 600147A :                     ; ----------------------------------------
(1)  869/ 600147A :                     
(1)  870/ 600147A : C509                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1)  871/ 600147C : C801                		tst     #1,r0
(1)  872/ 600147E : 8B05                		bf	.page_2
(1)  873/ 6001480 : DE1C                		mov 	#RAM_Mars_PlgnList_0,r14
(1)  874/ 6001482 : DD1D                		mov 	#RAM_Mars_PlgnNum_0,r13
(1)  875/ 6001484 : B043                		bsr	slv_sort_z
(1)  876/ 6001486 : 0009                		nop
(1)  877/ 6001488 : A004                		bra	.swap_now
(1)  878/ 600148A : 0009                		nop
(1)  879/ 600148C :                     .page_2:
(1)  880/ 600148C : DE1B                		mov 	#RAM_Mars_PlgnList_1,r14
(1)  881/ 600148E : DD1C                		mov 	#RAM_Mars_PlgnNum_1,r13
(1)  882/ 6001490 : B03D                		bsr	slv_sort_z
(1)  883/ 6001492 : 0009                		nop
(1)  884/ 6001494 :                     .swap_now:
(1)  885/ 6001494 : 60D1                		mov.w	@r13,r0				; DEBUG: report number of faces
(1)  886/ 6001496 : D108                		mov	#_sysreg+comm0,r1
(1)  887/ 6001498 : 2101                		mov.w	r0,@r1
(1)  888/ 600149A :                     		
(1)  889/ 600149A :                     	; Wait states
(1)  890/ 600149A : D110                		mov.l	#_sysreg+comm14,r1		; Master CPU still drawing pieces?
(1)  891/ 600149C :                     .wait_master:
(1)  892/ 600149C : 6010                		mov.b	@r1,r0
(1)  893/ 600149E : 8801                		cmp/eq	#1,r0
(1)  894/ 60014A0 : 8905                		bt	.hold_on
(1)  895/ 60014A2 :                     ; 		mov.l   #$FFFFFE80,r1			; Stop this watchdog
(1)  896/ 60014A2 :                     ; 		mov.w   #$A518,r0
(1)  897/ 60014A2 :                     ; 		mov.w   r0,@r1
(1)  898/ 60014A2 :                     
(1)  899/ 60014A2 : C509                		mov.w	@(marsGbl_PolyBuffNum,gbr),r0
(1)  900/ 60014A4 : CA01                 		xor	#1,r0
(1)  901/ 60014A6 : C109                 		mov.w	r0,@(marsGbl_PolyBuffNum,gbr)
(1)  902/ 60014A8 :                     ;  		mov	#0,r0
(1)  903/ 60014A8 :                     ;  		mov.w	r0,@(marsGbl_SlvDrawReq,gbr)
(1)  904/ 60014A8 : E201                		mov	#1,r2				; Start drawing on Master
(1)  905/ 60014AA : D10C                		mov.l	#_sysreg+comm14,r1
(1)  906/ 60014AC : 2120                		mov.b	r2,@r1
(1)  907/ 60014AE :                     .hold_on:
(1)  908/ 60014AE : AF9F                		bra	slave_loop
(1)  909/ 60014B0 : 0009                		nop
(1)  910/ 60014B2 :                     		align 4
(1)  911/ 60014B4 : 2000 4000 2000 4020 		ltorg
                    534C 4156 0603 F000 
                    0600 58BC 0600 9B3C 
                    0600 3FD0 2000 402F 
                    2000 4028 0600 9B04 
                    2000 402E 2000 4026 
                    0600 9CFC 0601 7CFC 
                    0600 7B00 0600 9B3C 
                    0600 5B00 0600 9B00 
                    0600 6B00 0600 9B02 
                    FE10 FEE2 FEE4 00F0 
                    FE92                
(1)  912/ 600150E :                     
(1)  913/ 600150E :                     ; --------------------------------------------------------
(1)  914/ 600150E :                     ; Sort all faces in the current buffer
(1)  915/ 600150E :                     ; 
(1)  916/ 600150E :                     ; r14 - Polygon list
(1)  917/ 600150E :                     ; r13 - Number of polygons processed
(1)  918/ 600150E :                     ; --------------------------------------------------------
(1)  919/ 600150E :                     
(1)  920/ 600150E :                     ; Bubble sorting
(1)  921/ 600150E :                     
(1)  922/ 600150E :                     slv_sort_z:
(1)  923/ 600150E : 4F22                		sts	pr,@-r15
(1)  924/ 6001510 : E000                		mov	#0,r0					; Reset current PlgnNum
(1)  925/ 6001512 : 2D01                		mov.w	r0,@r13
(1)  926/ 6001514 : DC19                		mov	#RAM_Mars_Plgn_ZList,r12	
(1)  927/ 6001516 : EB02                		mov	#2,r11
(1)  928/ 6001518 : C508                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0		; Check number of faces to sort
(1)  929/ 600151A : 30B7                		cmp/gt	r11,r0
(1)  930/ 600151C : 8B1C                		bf	.z_fewfaces
(1)  931/ 600151E : 6B03                		mov	r0,r11
(1)  932/ 6001520 :                     		
(1)  933/ 6001520 :                     ; if faces > 2
(1)  934/ 6001520 :                     .z_normal:
(1)  935/ 6001520 : 9B2E                		mov	#MAX_FACES,r11
(1)  936/ 6001522 : 30B3                		cmp/ge	r11,r0
(1)  937/ 6001524 : 8B00                		bf	.z_ranout
(1)  938/ 6001526 : 60B3                		mov	r11,r0
(1)  939/ 6001528 :                     .z_ranout:
(1)  940/ 6001528 : 6B03                		mov	r0,r11
(1)  941/ 600152A : 6A03                		mov	r0,r10
(1)  942/ 600152C : 7AFF                		add	#-1,r10
(1)  943/ 600152E : 67A3                		mov	r10,r7
(1)  944/ 6001530 : 77FF                		add	#-1,r7
(1)  945/ 6001532 : 4715                		cmp/pl	r7
(1)  946/ 6001534 : 8B1F                		bf	.z_end
(1)  947/ 6001536 :                     .z_outer:
(1)  948/ 6001536 : 68A3                		mov	r10,r8
(1)  949/ 6001538 : 69C3                		mov	r12,r9
(1)  950/ 600153A :                     .z_inner:
(1)  951/ 600153A : 6092                		mov	@r9,r0
(1)  952/ 600153C : 5192                		mov	@(8,r9),r1
(1)  953/ 600153E : 3017                		cmp/gt	r1,r0
(1)  954/ 6001540 : 8B05                		bf	.z_high
(1)  955/ 6001542 : 2912                		mov	r1,@r9
(1)  956/ 6001544 : 1902                		mov	r0,@(8,r9)
(1)  957/ 6001546 : 5091                		mov	@(4,r9),r0
(1)  958/ 6001548 : 5193                		mov	@($C,r9),r1
(1)  959/ 600154A : 1911                		mov	r1,@(4,r9)
(1)  960/ 600154C : 1903                		mov	r0,@($C,r9)
(1)  961/ 600154E :                     .z_high:
(1)  962/ 600154E : 4810                		dt	r8
(1)  963/ 6001550 : 8FF3                		bf/s	.z_inner
(1)  964/ 6001552 : 7908                		add	#8,r9
(1)  965/ 6001554 : 4710                		dt	r7
(1)  966/ 6001556 : 8BEE                		bf	.z_outer
(1)  967/ 6001558 :                     
(1)  968/ 6001558 :                     ; ----------------------------------------
(1)  969/ 6001558 :                     ; only 1 or 2 faces
(1)  970/ 6001558 :                     
(1)  971/ 6001558 :                     .z_fewfaces:
(1)  972/ 6001558 : 6AC3                		mov	r12,r10
(1)  973/ 600155A : 69B3                		mov	r11,r9
(1)  974/ 600155C : E800                		mov	#0,r8
(1)  975/ 600155E :                     .next_face:
(1)  976/ 600155E : 57A1                		mov	@(4,r10),r7
(1)  977/ 6001560 : 4715                		cmp/pl	r7
(1)  978/ 6001562 : 8B04                		bf	.no_face
(1)  979/ 6001564 : E000                		mov	#0,r0
(1)  980/ 6001566 : 1A01                		mov	r0,@(4,r10)
(1)  981/ 6001568 : 2E72                		mov	r7,@r14
(1)  982/ 600156A : 7E04                		add	#4,r14
(1)  983/ 600156C : 7801                		add	#1,r8
(1)  984/ 600156E :                     .no_face:
(1)  985/ 600156E : 4910                		dt	r9
(1)  986/ 6001570 : 8FF5                		bf/s	.next_face
(1)  987/ 6001572 : 7A08                		add 	#8,r10
(1)  988/ 6001574 : 2D81                		mov.w	r8,@r13
(1)  989/ 6001576 :                     .z_end:
(1)  990/ 6001576 : 4F26                		lds	@r15+,pr
(1)  991/ 6001578 : 000B                		rts
(1)  992/ 600157A : 0009                		nop
(1)  993/ 600157C :                     		align 4
(1)  994/ 600157C : 0600 7B00 0400      		ltorg
(1)  995/ 6001582 :                     
(1)  996/ 6001582 :                     ; ----------------------------------------
(1)  997/ 6001582 :                     
(1)  998/ 6001582 :                     		ltorg
(1)  999/ 6001582 :                     
(1) 1000/ 6001582 :                     ; =================================================================
(1) 1001/ 6001582 :                     ; ------------------------------------------------
(1) 1002/ 6001582 :                     ; Slave | Custom interrupt
(1) 1003/ 6001582 :                     ; 
(1) 1004/ 6001582 :                     ; Autosort faces on the background
(1) 1005/ 6001582 :                     ; ------------------------------------------------
(1) 1006/ 6001582 :                     
(1) 1007/ 6001582 :                     s_irq_custom:
(1) 1008/ 6001582 : 2F26                		mov	r2,@-r15
(1) 1009/ 6001584 : 9120                		mov.l   #_FRT,r1
(1) 1010/ 6001586 : 8417                		mov.b   @(7,r1),r0
(1) 1011/ 6001588 : CA02                		xor     #2,r0
(1) 1012/ 600158A : 8017                		mov.b   r0,@(7,r1)
(1) 1013/ 600158C :                     
(1) 1014/ 600158C :                     	; Sorting task start here
(1) 1015/ 600158C : C508                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0
(1) 1016/ 600158E : 8800                		cmp/eq	#0,r0
(1) 1017/ 6001590 : 890B                		bt	.no_request
(1) 1018/ 6001592 : 2F36                		mov	r3,@-r15
(1) 1019/ 6001594 : 2F46                		mov	r4,@-r15
(1) 1020/ 6001596 : 2F56                		mov	r5,@-r15
(1) 1021/ 6001598 : 2F66                		mov	r6,@-r15
(1) 1022/ 600159A : D10A                		mov	#CS3+$44,r1
(1) 1023/ 600159C : 6012                		mov	@r1,r0
(1) 1024/ 600159E : 7001                		add 	#1,r0
(1) 1025/ 60015A0 : 2102                		mov	r0,@r1
(1) 1026/ 60015A2 : 66F6                		mov	@r15+,r6
(1) 1027/ 60015A4 : 65F6                		mov	@r15+,r5
(1) 1028/ 60015A6 : 64F6                		mov	@r15+,r4
(1) 1029/ 60015A8 : 63F6                		mov	@r15+,r3
(1) 1030/ 60015AA :                     .no_request:
(1) 1031/ 60015AA :                     	; End
(1) 1032/ 60015AA :                     
(1) 1033/ 60015AA : 910E                		mov	#$FFFFFE80,r1
(1) 1034/ 60015AC : 900E                		mov.w   #$A518,r0
(1) 1035/ 60015AE : 2101                		mov.w   r0,@r1
(1) 1036/ 60015B0 : CB20                		or      #$20,r0
(1) 1037/ 60015B2 : 2101                		mov.w   r0,@r1
(1) 1038/ 60015B4 : E201                		mov	#1,r2
(1) 1039/ 60015B6 : 900A                		mov.w   #$5A00,r0
(1) 1040/ 60015B8 : 202B                		or	r2,r0
(1) 1041/ 60015BA : 2101                		mov.w	r0,@r1
(1) 1042/ 60015BC : 62F6                		mov	@r15+,r2
(1) 1043/ 60015BE : 000B                		rts
(1) 1044/ 60015C0 : 0009                		nop
(1) 1045/ 60015C2 :                     		align 4
(1) 1046/ 60015C4 : 0600 0044 FE10 FE80 		ltorg
                    A518 5A00           
(1) 1047/ 60015D0 :                     
(1) 1048/ 60015D0 :                     ; ====================================================================
(1) 1049/ 60015D0 :                     ; ----------------------------------------------------------------
(1) 1050/ 60015D0 :                     ; MARS DATA
(1) 1051/ 60015D0 :                     ; ----------------------------------------------------------------
(1) 1052/ 60015D0 :                     
(1) 1053/ 60015D0 :                     		align 4
(1) 1054/ 60015D0 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1055/ 6003DD0 :                     		align 4
(1) 1056/ 6003DD0 :                     		include "data/mars_sdram.asm"
(2)    1/ 6003DD0 :                     ; ====================================================================
(2)    2/ 6003DD0 :                     ; ----------------------------------------------------------------
(2)    3/ 6003DD0 :                     ; SH2 SDRAM user data
(2)    4/ 6003DD0 :                     ; 
(2)    5/ 6003DD0 :                     ; This data is stored on SDRAM, it's always available to use
(2)    6/ 6003DD0 :                     ; and can be re-writeable, but only place smaller things like
(2)    7/ 6003DD0 :                     ; palettes or model pieces
(2)    8/ 6003DD0 :                     ; ----------------------------------------------------------------
(2)    9/ 6003DD0 :                     
(2)   10/ 6003DD0 :                     		include  "data/mars/objects/incl_sdram.asm"		; Models and palettes will go here
(3)    1/ 6003DD0 :                     ; --------------------------------------------------------
(3)    2/ 6003DD0 :                     ; Palettes
(3)    3/ 6003DD0 :                     ; --------------------------------------------------------
(3)    4/ 6003DD0 :                     
(3)    5/ 6003DD0 :                     Palette_Puyo:	binclude "data/mars/objects/mtrl/marscity_pal.bin"
(3)    6/ 6003FCE :                     		align 4
(3)    7/ 6003FD0 :                     		
(3)    8/ 6003FD0 :                     ; --------------------------------------------------------
(3)    9/ 6003FD0 :                     ; Objects
(3)   10/ 6003FD0 :                     ; 
(3)   11/ 6003FD0 :                     ; Models, animations, and smaller textures
(3)   12/ 6003FD0 :                     ; --------------------------------------------------------
(3)   13/ 6003FD0 :                     
(3)   14/ 6003FD0 :                     TEST_MODEL:	binclude "data/mars/objects/mdl/cube/head.bin"	; dc.w faces,vertices
(3)   15/ 6003FD4 : 0600 3FE4 0600 4074 		dc.l .vert,.face,.vrtx,.mtrl			; dc.l vertices, faces, vertex, material
                    0600 4094 0600 40C4 
(3)   16/ 6003FE4 :                     .vert:		binclude "data/mars/objects/mdl/cube/vert.bin"
(3)   17/ 6004074 :                     .face:		binclude "data/mars/objects/mdl/cube/face.bin"
(3)   18/ 6004094 :                     .vrtx:		binclude "data/mars/objects/mdl/cube/vrtx.bin"
(3)   19/ 60040C4 :                     .mtrl:		include "data/mars/objects/mdl/cube/mtrl.asm"
(4)    1/ 60040C4 :                     
(3)   20/ 60040C4 :                     		align 4
(3)   21/ 60040C4 :                     
(3)   22/ 60040C4 :                     ; TEST_ANIMATION:	binclude "data/mars/objects/anim/cube_anim.bin"
(3)   23/ 60040C4 :                     ; 		align 4
(3)   24/ 60040C4 :                     
(2)   11/ 60040C4 :                     
(1) 1057/ 60040C4 :                     
(1) 1058/ 60040C4 :                     ; TODO: hacer nueva lista
(1) 1059/ 60040C4 :                     persp_table_max:
(1) 1060/ 60040C4 : 0000 0E00            dc.l 3584
(1) 1061/ 60040C8 : 0000 0F66            dc.l 3942
(1) 1062/ 60040CC : 0000 10CC            dc.l 4300
(1) 1063/ 60040D0 : 0000 1233            dc.l 4659
(1) 1064/ 60040D4 : 0000 1399            dc.l 5017
(1) 1065/ 60040D8 : 0000 1500            dc.l 5376
(1) 1066/ 60040DC : 0000 1666            dc.l 5734
(1) 1067/ 60040E0 : 0000 17CC            dc.l 6092
(1) 1068/ 60040E4 : 0000 1933            dc.l 6451
(1) 1069/ 60040E8 : 0000 1A99            dc.l 6809
(1) 1070/ 60040EC : 0000 1C00            dc.l 7168
(1) 1071/ 60040F0 : 0000 1D66            dc.l 7526
(1) 1072/ 60040F4 : 0000 1ECC            dc.l 7884
(1) 1073/ 60040F8 : 0000 2033            dc.l 8243
(1) 1074/ 60040FC : 0000 2199            dc.l 8601
(1) 1075/ 6004100 : 0000 2300            dc.l 8960
(1) 1076/ 6004104 : 0000 2466            dc.l 9318
(1) 1077/ 6004108 : 0000 25CC            dc.l 9676
(1) 1078/ 600410C : 0000 2733            dc.l 10035
(1) 1079/ 6004110 : 0000 2899            dc.l 10393
(1) 1080/ 6004114 : 0000 2A00            dc.l 10752
(1) 1081/ 6004118 : 0000 2B66            dc.l 11110
(1) 1082/ 600411C : 0000 2CCC            dc.l 11468
(1) 1083/ 6004120 : 0000 2E33            dc.l 11827
(1) 1084/ 6004124 : 0000 2F99            dc.l 12185
(1) 1085/ 6004128 : 0000 3100            dc.l 12544
(1) 1086/ 600412C : 0000 3266            dc.l 12902
(1) 1087/ 6004130 : 0000 33CC            dc.l 13260
(1) 1088/ 6004134 : 0000 3533            dc.l 13619
(1) 1089/ 6004138 : 0000 3699            dc.l 13977
(1) 1090/ 600413C : 0000 3800            dc.l 14336
(1) 1091/ 6004140 : 0000 3966            dc.l 14694
(1) 1092/ 6004144 : 0000 3ACC            dc.l 15052
(1) 1093/ 6004148 : 0000 3C33            dc.l 15411
(1) 1094/ 600414C : 0000 3D99            dc.l 15769
(1) 1095/ 6004150 : 0000 3F00            dc.l 16128
(1) 1096/ 6004154 : 0000 4066            dc.l 16486
(1) 1097/ 6004158 : 0000 41CC            dc.l 16844
(1) 1098/ 600415C : 0000 4333            dc.l 17203
(1) 1099/ 6004160 : 0000 4499            dc.l 17561
(1) 1100/ 6004164 : 0000 45FF            dc.l 17919
(1) 1101/ 6004168 : 0000 4766            dc.l 18278
(1) 1102/ 600416C : 0000 48CC            dc.l 18636
(1) 1103/ 6004170 : 0000 4A33            dc.l 18995
(1) 1104/ 6004174 : 0000 4B99            dc.l 19353
(1) 1105/ 6004178 : 0000 4CFF            dc.l 19711
(1) 1106/ 600417C : 0000 4E66            dc.l 20070
(1) 1107/ 6004180 : 0000 4FCC            dc.l 20428
(1) 1108/ 6004184 : 0000 5133            dc.l 20787
(1) 1109/ 6004188 : 0000 5299            dc.l 21145
(1) 1110/ 600418C : 0000 53FF            dc.l 21503
(1) 1111/ 6004190 : 0000 5566            dc.l 21862
(1) 1112/ 6004194 : 0000 56CC            dc.l 22220
(1) 1113/ 6004198 : 0000 5833            dc.l 22579
(1) 1114/ 600419C : 0000 5999            dc.l 22937
(1) 1115/ 60041A0 : 0000 5AFF            dc.l 23295
(1) 1116/ 60041A4 : 0000 5C66            dc.l 23654
(1) 1117/ 60041A8 : 0000 5DCC            dc.l 24012
(1) 1118/ 60041AC : 0000 5F33            dc.l 24371
(1) 1119/ 60041B0 : 0000 6099            dc.l 24729
(1) 1120/ 60041B4 : 0000 61FF            dc.l 25087
(1) 1121/ 60041B8 : 0000 6366            dc.l 25446
(1) 1122/ 60041BC : 0000 64CC            dc.l 25804
(1) 1123/ 60041C0 : 0000 6633            dc.l 26163
(1) 1124/ 60041C4 : 0000 6799            dc.l 26521
(1) 1125/ 60041C8 : 0000 68FF            dc.l 26879
(1) 1126/ 60041CC : 0000 6A66            dc.l 27238
(1) 1127/ 60041D0 : 0000 6BCC            dc.l 27596
(1) 1128/ 60041D4 : 0000 6D33            dc.l 27955
(1) 1129/ 60041D8 : 0000 6E99            dc.l 28313
(1) 1130/ 60041DC : 0000 6FFF            dc.l 28671
(1) 1131/ 60041E0 : 0000 7166            dc.l 29030
(1) 1132/ 60041E4 : 0000 72CC            dc.l 29388
(1) 1133/ 60041E8 : 0000 7433            dc.l 29747
(1) 1134/ 60041EC : 0000 7599            dc.l 30105
(1) 1135/ 60041F0 : 0000 76FF            dc.l 30463
(1) 1136/ 60041F4 : 0000 7866            dc.l 30822
(1) 1137/ 60041F8 : 0000 79CC            dc.l 31180
(1) 1138/ 60041FC : 0000 7B33            dc.l 31539
(1) 1139/ 6004200 : 0000 7C99            dc.l 31897
(1) 1140/ 6004204 : 0000 7DFF            dc.l 32255
(1) 1141/ 6004208 : 0000 7F66            dc.l 32614
(1) 1142/ 600420C : 0000 80CC            dc.l 32972
(1) 1143/ 6004210 : 0000 8233            dc.l 33331
(1) 1144/ 6004214 : 0000 8399            dc.l 33689
(1) 1145/ 6004218 : 0000 84FF            dc.l 34047
(1) 1146/ 600421C : 0000 8666            dc.l 34406
(1) 1147/ 6004220 : 0000 87CC            dc.l 34764
(1) 1148/ 6004224 : 0000 8933            dc.l 35123
(1) 1149/ 6004228 : 0000 8A99            dc.l 35481
(1) 1150/ 600422C : 0000 8BFF            dc.l 35839
(1) 1151/ 6004230 : 0000 8D66            dc.l 36198
(1) 1152/ 6004234 : 0000 8ECC            dc.l 36556
(1) 1153/ 6004238 : 0000 9033            dc.l 36915
(1) 1154/ 600423C : 0000 9199            dc.l 37273
(1) 1155/ 6004240 : 0000 92FF            dc.l 37631
(1) 1156/ 6004244 : 0000 9466            dc.l 37990
(1) 1157/ 6004248 : 0000 95CC            dc.l 38348
(1) 1158/ 600424C : 0000 9733            dc.l 38707
(1) 1159/ 6004250 : 0000 9899            dc.l 39065
(1) 1160/ 6004254 : 0000 99FF            dc.l 39423
(1) 1161/ 6004258 : 0000 9B66            dc.l 39782
(1) 1162/ 600425C : 0000 9CCC            dc.l 40140
(1) 1163/ 6004260 : 0000 9E33            dc.l 40499
(1) 1164/ 6004264 : 0000 9F99            dc.l 40857
(1) 1165/ 6004268 : 0000 A0FF            dc.l 41215
(1) 1166/ 600426C : 0000 A266            dc.l 41574
(1) 1167/ 6004270 : 0000 A3CC            dc.l 41932
(1) 1168/ 6004274 : 0000 A533            dc.l 42291
(1) 1169/ 6004278 : 0000 A699            dc.l 42649
(1) 1170/ 600427C : 0000 A7FF            dc.l 43007
(1) 1171/ 6004280 : 0000 A966            dc.l 43366
(1) 1172/ 6004284 : 0000 AACC            dc.l 43724
(1) 1173/ 6004288 : 0000 AC33            dc.l 44083
(1) 1174/ 600428C : 0000 AD99            dc.l 44441
(1) 1175/ 6004290 : 0000 AEFF            dc.l 44799
(1) 1176/ 6004294 : 0000 B066            dc.l 45158
(1) 1177/ 6004298 : 0000 B1CC            dc.l 45516
(1) 1178/ 600429C : 0000 B333            dc.l 45875
(1) 1179/ 60042A0 : 0000 B499            dc.l 46233
(1) 1180/ 60042A4 : 0000 B5FF            dc.l 46591
(1) 1181/ 60042A8 : 0000 B766            dc.l 46950
(1) 1182/ 60042AC : 0000 B8CC            dc.l 47308
(1) 1183/ 60042B0 : 0000 BA33            dc.l 47667
(1) 1184/ 60042B4 : 0000 BB99            dc.l 48025
(1) 1185/ 60042B8 : 0000 BCFF            dc.l 48383
(1) 1186/ 60042BC : 0000 BE66            dc.l 48742
(1) 1187/ 60042C0 : 0000 BFCC            dc.l 49100
(1) 1188/ 60042C4 : 0000 C133            dc.l 49459
(1) 1189/ 60042C8 : 0000 C299            dc.l 49817
(1) 1190/ 60042CC : 0000 C3FF            dc.l 50175
(1) 1191/ 60042D0 : 0000 C566            dc.l 50534
(1) 1192/ 60042D4 : 0000 C6CC            dc.l 50892
(1) 1193/ 60042D8 : 0000 C833            dc.l 51251
(1) 1194/ 60042DC : 0000 C999            dc.l 51609
(1) 1195/ 60042E0 : 0000 CAFF            dc.l 51967
(1) 1196/ 60042E4 : 0000 CC66            dc.l 52326
(1) 1197/ 60042E8 : 0000 CDCC            dc.l 52684
(1) 1198/ 60042EC : 0000 CF33            dc.l 53043
(1) 1199/ 60042F0 : 0000 D099            dc.l 53401
(1) 1200/ 60042F4 : 0000 D1FF            dc.l 53759
(1) 1201/ 60042F8 : 0000 D366            dc.l 54118
(1) 1202/ 60042FC : 0000 D4CC            dc.l 54476
(1) 1203/ 6004300 : 0000 D633            dc.l 54835
(1) 1204/ 6004304 : 0000 D799            dc.l 55193
(1) 1205/ 6004308 : 0000 D8FF            dc.l 55551
(1) 1206/ 600430C : 0000 DA66            dc.l 55910
(1) 1207/ 6004310 : 0000 DBCC            dc.l 56268
(1) 1208/ 6004314 : 0000 DD33            dc.l 56627
(1) 1209/ 6004318 : 0000 DE99            dc.l 56985
(1) 1210/ 600431C : 0000 DFFF            dc.l 57343
(1) 1211/ 6004320 : 0000 E166            dc.l 57702
(1) 1212/ 6004324 : 0000 E2CC            dc.l 58060
(1) 1213/ 6004328 : 0000 E433            dc.l 58419
(1) 1214/ 600432C : 0000 E599            dc.l 58777
(1) 1215/ 6004330 : 0000 E6FF            dc.l 59135
(1) 1216/ 6004334 : 0000 E866            dc.l 59494
(1) 1217/ 6004338 : 0000 E9CC            dc.l 59852
(1) 1218/ 600433C : 0000 EB33            dc.l 60211
(1) 1219/ 6004340 : 0000 EC99            dc.l 60569
(1) 1220/ 6004344 : 0000 EDFF            dc.l 60927
(1) 1221/ 6004348 : 0000 EF66            dc.l 61286
(1) 1222/ 600434C : 0000 F0CC            dc.l 61644
(1) 1223/ 6004350 : 0000 F233            dc.l 62003
(1) 1224/ 6004354 : 0000 F399            dc.l 62361
(1) 1225/ 6004358 : 0000 F4FF            dc.l 62719
(1) 1226/ 600435C : 0000 F666            dc.l 63078
(1) 1227/ 6004360 : 0000 F7CC            dc.l 63436
(1) 1228/ 6004364 : 0000 F933            dc.l 63795
(1) 1229/ 6004368 : 0000 FA99            dc.l 64153
(1) 1230/ 600436C : 0000 FBFF            dc.l 64511
(1) 1231/ 6004370 : 0000 FD66            dc.l 64870
(1) 1232/ 6004374 : 0000 FECC            dc.l 65228
(1) 1233/ 6004378 : 0001 0033            dc.l 65587
(1) 1234/ 600437C : 0001 0199            dc.l 65945
(1) 1235/ 6004380 : 0001 02FF            dc.l 66303
(1) 1236/ 6004384 : 0001 0466            dc.l 66662
(1) 1237/ 6004388 : 0001 05CC            dc.l 67020
(1) 1238/ 600438C : 0001 0733            dc.l 67379
(1) 1239/ 6004390 : 0001 0899            dc.l 67737
(1) 1240/ 6004394 : 0001 0A00            dc.l 68096
(1) 1241/ 6004398 : 0001 0B66            dc.l 68454
(1) 1242/ 600439C : 0001 0CCC            dc.l 68812
(1) 1243/ 60043A0 : 0001 0E33            dc.l 69171
(1) 1244/ 60043A4 : 0001 0F99            dc.l 69529
(1) 1245/ 60043A8 : 0001 1100            dc.l 69888
(1) 1246/ 60043AC : 0001 1266            dc.l 70246
(1) 1247/ 60043B0 : 0001 13CC            dc.l 70604
(1) 1248/ 60043B4 : 0001 1533            dc.l 70963
(1) 1249/ 60043B8 : 0001 1699            dc.l 71321
(1) 1250/ 60043BC : 0001 1800            dc.l 71680
(1) 1251/ 60043C0 : 0001 1966            dc.l 72038
(1) 1252/ 60043C4 : 0001 1ACC            dc.l 72396
(1) 1253/ 60043C8 : 0001 1C33            dc.l 72755
(1) 1254/ 60043CC : 0001 1D99            dc.l 73113
(1) 1255/ 60043D0 : 0001 1F00            dc.l 73472
(1) 1256/ 60043D4 : 0001 2066            dc.l 73830
(1) 1257/ 60043D8 : 0001 21CC            dc.l 74188
(1) 1258/ 60043DC : 0001 2333            dc.l 74547
(1) 1259/ 60043E0 : 0001 2499            dc.l 74905
(1) 1260/ 60043E4 : 0001 2600            dc.l 75264
(1) 1261/ 60043E8 : 0001 2766            dc.l 75622
(1) 1262/ 60043EC : 0001 28CC            dc.l 75980
(1) 1263/ 60043F0 : 0001 2A33            dc.l 76339
(1) 1264/ 60043F4 : 0001 2B99            dc.l 76697
(1) 1265/ 60043F8 : 0001 2D00            dc.l 77056
(1) 1266/ 60043FC : 0001 2E66            dc.l 77414
(1) 1267/ 6004400 : 0001 2FCC            dc.l 77772
(1) 1268/ 6004404 : 0001 3133            dc.l 78131
(1) 1269/ 6004408 : 0001 3299            dc.l 78489
(1) 1270/ 600440C : 0001 3400            dc.l 78848
(1) 1271/ 6004410 : 0001 3566            dc.l 79206
(1) 1272/ 6004414 : 0001 36CC            dc.l 79564
(1) 1273/ 6004418 : 0001 3833            dc.l 79923
(1) 1274/ 600441C : 0001 3999            dc.l 80281
(1) 1275/ 6004420 : 0001 3B00            dc.l 80640
(1) 1276/ 6004424 : 0001 3C66            dc.l 80998
(1) 1277/ 6004428 : 0001 3DCC            dc.l 81356
(1) 1278/ 600442C : 0001 3F33            dc.l 81715
(1) 1279/ 6004430 : 0001 4099            dc.l 82073
(1) 1280/ 6004434 : 0001 4200            dc.l 82432
(1) 1281/ 6004438 : 0001 4366            dc.l 82790
(1) 1282/ 600443C : 0001 44CC            dc.l 83148
(1) 1283/ 6004440 : 0001 4633            dc.l 83507
(1) 1284/ 6004444 : 0001 4799            dc.l 83865
(1) 1285/ 6004448 : 0001 4900            dc.l 84224
(1) 1286/ 600444C : 0001 4A66            dc.l 84582
(1) 1287/ 6004450 : 0001 4BCC            dc.l 84940
(1) 1288/ 6004454 : 0001 4D33            dc.l 85299
(1) 1289/ 6004458 : 0001 4E99            dc.l 85657
(1) 1290/ 600445C : 0001 5000            dc.l 86016
(1) 1291/ 6004460 : 0001 5166            dc.l 86374
(1) 1292/ 6004464 : 0001 52CC            dc.l 86732
(1) 1293/ 6004468 : 0001 5433            dc.l 87091
(1) 1294/ 600446C : 0001 5599            dc.l 87449
(1) 1295/ 6004470 : 0001 5700            dc.l 87808
(1) 1296/ 6004474 : 0001 5866            dc.l 88166
(1) 1297/ 6004478 : 0001 59CC            dc.l 88524
(1) 1298/ 600447C : 0001 5B33            dc.l 88883
(1) 1299/ 6004480 : 0001 5C99            dc.l 89241
(1) 1300/ 6004484 : 0001 5E00            dc.l 89600
(1) 1301/ 6004488 : 0001 5F66            dc.l 89958
(1) 1302/ 600448C : 0001 60CC            dc.l 90316
(1) 1303/ 6004490 : 0001 6233            dc.l 90675
(1) 1304/ 6004494 : 0001 6399            dc.l 91033
(1) 1305/ 6004498 : 0001 6500            dc.l 91392
(1) 1306/ 600449C : 0001 6666            dc.l 91750
(1) 1307/ 60044A0 : 0001 67CC            dc.l 92108
(1) 1308/ 60044A4 : 0001 6933            dc.l 92467
(1) 1309/ 60044A8 : 0001 6A99            dc.l 92825
(1) 1310/ 60044AC : 0001 6C00            dc.l 93184
(1) 1311/ 60044B0 : 0001 6D66            dc.l 93542
(1) 1312/ 60044B4 : 0001 6ECC            dc.l 93900
(1) 1313/ 60044B8 : 0001 7033            dc.l 94259
(1) 1314/ 60044BC : 0001 7199            dc.l 94617
(1) 1315/ 60044C0 : 0001 7300            dc.l 94976
(1) 1316/ 60044C4 : 0001 7466            dc.l 95334
(1) 1317/ 60044C8 : 0001 75CC            dc.l 95692
(1) 1318/ 60044CC : 0001 7733            dc.l 96051
(1) 1319/ 60044D0 : 0001 7899            dc.l 96409
(1) 1320/ 60044D4 : 0001 7A00            dc.l 96768
(1) 1321/ 60044D8 : 0001 7B66            dc.l 97126
(1) 1322/ 60044DC : 0001 7CCC            dc.l 97484
(1) 1323/ 60044E0 : 0001 7E33            dc.l 97843
(1) 1324/ 60044E4 : 0001 7F99            dc.l 98201
(1) 1325/ 60044E8 : 0001 8100            dc.l 98560
(1) 1326/ 60044EC : 0001 8266            dc.l 98918
(1) 1327/ 60044F0 : 0001 83CC            dc.l 99276
(1) 1328/ 60044F4 : 0001 8533            dc.l 99635
(1) 1329/ 60044F8 : 0001 8699            dc.l 99993
(1) 1330/ 60044FC : 0001 8800            dc.l 100352
(1) 1331/ 6004500 : 0001 8966            dc.l 100710
(1) 1332/ 6004504 : 0001 8ACC            dc.l 101068
(1) 1333/ 6004508 : 0001 8C33            dc.l 101427
(1) 1334/ 600450C : 0001 8D99            dc.l 101785
(1) 1335/ 6004510 : 0001 8F00            dc.l 102144
(1) 1336/ 6004514 : 0001 9066            dc.l 102502
(1) 1337/ 6004518 : 0001 91CC            dc.l 102860
(1) 1338/ 600451C : 0001 9333            dc.l 103219
(1) 1339/ 6004520 : 0001 9499            dc.l 103577
(1) 1340/ 6004524 : 0001 9600            dc.l 103936
(1) 1341/ 6004528 : 0001 9766            dc.l 104294
(1) 1342/ 600452C : 0001 98CC            dc.l 104652
(1) 1343/ 6004530 : 0001 9A33            dc.l 105011
(1) 1344/ 6004534 : 0001 9B99            dc.l 105369
(1) 1345/ 6004538 : 0001 9D00            dc.l 105728
(1) 1346/ 600453C : 0001 9E66            dc.l 106086
(1) 1347/ 6004540 : 0001 9FCC            dc.l 106444
(1) 1348/ 6004544 : 0001 A133            dc.l 106803
(1) 1349/ 6004548 : 0001 A299            dc.l 107161
(1) 1350/ 600454C : 0001 A400            dc.l 107520
(1) 1351/ 6004550 : 0001 A566            dc.l 107878
(1) 1352/ 6004554 : 0001 A6CC            dc.l 108236
(1) 1353/ 6004558 : 0001 A833            dc.l 108595
(1) 1354/ 600455C : 0001 A999            dc.l 108953
(1) 1355/ 6004560 : 0001 AB00            dc.l 109312
(1) 1356/ 6004564 : 0001 AC66            dc.l 109670
(1) 1357/ 6004568 : 0001 ADCC            dc.l 110028
(1) 1358/ 600456C : 0001 AF33            dc.l 110387
(1) 1359/ 6004570 : 0001 B099            dc.l 110745
(1) 1360/ 6004574 : 0001 B200            dc.l 111104
(1) 1361/ 6004578 : 0001 B366            dc.l 111462
(1) 1362/ 600457C : 0001 B4CC            dc.l 111820
(1) 1363/ 6004580 : 0001 B633            dc.l 112179
(1) 1364/ 6004584 : 0001 B799            dc.l 112537
(1) 1365/ 6004588 : 0001 B900            dc.l 112896
(1) 1366/ 600458C : 0001 BA66            dc.l 113254
(1) 1367/ 6004590 : 0001 BBCC            dc.l 113612
(1) 1368/ 6004594 : 0001 BD33            dc.l 113971
(1) 1369/ 6004598 : 0001 BE99            dc.l 114329
(1) 1370/ 600459C : 0001 C000            dc.l 114688
(1) 1371/ 60045A0 : 0001 C166            dc.l 115046
(1) 1372/ 60045A4 : 0001 C2CC            dc.l 115404
(1) 1373/ 60045A8 : 0001 C433            dc.l 115763
(1) 1374/ 60045AC : 0001 C599            dc.l 116121
(1) 1375/ 60045B0 : 0001 C700            dc.l 116480
(1) 1376/ 60045B4 : 0001 C866            dc.l 116838
(1) 1377/ 60045B8 : 0001 C9CC            dc.l 117196
(1) 1378/ 60045BC : 0001 CB33            dc.l 117555
(1) 1379/ 60045C0 : 0001 CC99            dc.l 117913
(1) 1380/ 60045C4 : 0001 CE00            dc.l 118272
(1) 1381/ 60045C8 : 0001 CF66            dc.l 118630
(1) 1382/ 60045CC : 0001 D0CC            dc.l 118988
(1) 1383/ 60045D0 : 0001 D233            dc.l 119347
(1) 1384/ 60045D4 : 0001 D399            dc.l 119705
(1) 1385/ 60045D8 : 0001 D500            dc.l 120064
(1) 1386/ 60045DC : 0001 D666            dc.l 120422
(1) 1387/ 60045E0 : 0001 D7CC            dc.l 120780
(1) 1388/ 60045E4 : 0001 D933            dc.l 121139
(1) 1389/ 60045E8 : 0001 DA99            dc.l 121497
(1) 1390/ 60045EC : 0001 DC00            dc.l 121856
(1) 1391/ 60045F0 : 0001 DD66            dc.l 122214
(1) 1392/ 60045F4 : 0001 DECC            dc.l 122572
(1) 1393/ 60045F8 : 0001 E033            dc.l 122931
(1) 1394/ 60045FC : 0001 E199            dc.l 123289
(1) 1395/ 6004600 : 0001 E300            dc.l 123648
(1) 1396/ 6004604 : 0001 E466            dc.l 124006
(1) 1397/ 6004608 : 0001 E5CC            dc.l 124364
(1) 1398/ 600460C : 0001 E733            dc.l 124723
(1) 1399/ 6004610 : 0001 E899            dc.l 125081
(1) 1400/ 6004614 : 0001 EA00            dc.l 125440
(1) 1401/ 6004618 : 0001 EB66            dc.l 125798
(1) 1402/ 600461C : 0001 ECCC            dc.l 126156
(1) 1403/ 6004620 : 0001 EE33            dc.l 126515
(1) 1404/ 6004624 : 0001 EF99            dc.l 126873
(1) 1405/ 6004628 : 0001 F100            dc.l 127232
(1) 1406/ 600462C : 0001 F266            dc.l 127590
(1) 1407/ 6004630 : 0001 F3CC            dc.l 127948
(1) 1408/ 6004634 : 0001 F533            dc.l 128307
(1) 1409/ 6004638 : 0001 F699            dc.l 128665
(1) 1410/ 600463C : 0001 F800            dc.l 129024
(1) 1411/ 6004640 : 0001 F966            dc.l 129382
(1) 1412/ 6004644 : 0001 FACC            dc.l 129740
(1) 1413/ 6004648 : 0001 FC33            dc.l 130099
(1) 1414/ 600464C : 0001 FD99            dc.l 130457
(1) 1415/ 6004650 : 0001 FF00            dc.l 130816
(1) 1416/ 6004654 : 0002 0066            dc.l 131174
(1) 1417/ 6004658 : 0002 01CC            dc.l 131532
(1) 1418/ 600465C : 0002 0333            dc.l 131891
(1) 1419/ 6004660 : 0002 0499            dc.l 132249
(1) 1420/ 6004664 : 0002 0600            dc.l 132608
(1) 1421/ 6004668 : 0002 0766            dc.l 132966
(1) 1422/ 600466C : 0002 08CC            dc.l 133324
(1) 1423/ 6004670 : 0002 0A33            dc.l 133683
(1) 1424/ 6004674 : 0002 0B99            dc.l 134041
(1) 1425/ 6004678 : 0002 0D00            dc.l 134400
(1) 1426/ 600467C : 0002 0E66            dc.l 134758
(1) 1427/ 6004680 : 0002 0FCC            dc.l 135116
(1) 1428/ 6004684 : 0002 1133            dc.l 135475
(1) 1429/ 6004688 : 0002 1299            dc.l 135833
(1) 1430/ 600468C : 0002 1400            dc.l 136192
(1) 1431/ 6004690 : 0002 1566            dc.l 136550
(1) 1432/ 6004694 : 0002 16CC            dc.l 136908
(1) 1433/ 6004698 : 0002 1833            dc.l 137267
(1) 1434/ 600469C : 0002 1999            dc.l 137625
(1) 1435/ 60046A0 : 0002 1B00            dc.l 137984
(1) 1436/ 60046A4 : 0002 1C66            dc.l 138342
(1) 1437/ 60046A8 : 0002 1DCC            dc.l 138700
(1) 1438/ 60046AC : 0002 1F33            dc.l 139059
(1) 1439/ 60046B0 : 0002 2099            dc.l 139417
(1) 1440/ 60046B4 : 0002 2200            dc.l 139776
(1) 1441/ 60046B8 : 0002 2366            dc.l 140134
(1) 1442/ 60046BC : 0002 24CC            dc.l 140492
(1) 1443/ 60046C0 : 0002 2633            dc.l 140851
(1) 1444/ 60046C4 : 0002 2799            dc.l 141209
(1) 1445/ 60046C8 : 0002 2900            dc.l 141568
(1) 1446/ 60046CC : 0002 2A66            dc.l 141926
(1) 1447/ 60046D0 : 0002 2BCC            dc.l 142284
(1) 1448/ 60046D4 : 0002 2D33            dc.l 142643
(1) 1449/ 60046D8 : 0002 2E99            dc.l 143001
(1) 1450/ 60046DC : 0002 3000            dc.l 143360
(1) 1451/ 60046E0 : 0002 3166            dc.l 143718
(1) 1452/ 60046E4 : 0002 32CC            dc.l 144076
(1) 1453/ 60046E8 : 0002 3433            dc.l 144435
(1) 1454/ 60046EC : 0002 3599            dc.l 144793
(1) 1455/ 60046F0 : 0002 3700            dc.l 145152
(1) 1456/ 60046F4 : 0002 3866            dc.l 145510
(1) 1457/ 60046F8 : 0002 39CC            dc.l 145868
(1) 1458/ 60046FC : 0002 3B33            dc.l 146227
(1) 1459/ 6004700 : 0002 3C99            dc.l 146585
(1) 1460/ 6004704 : 0002 3E00            dc.l 146944
(1) 1461/ 6004708 : 0002 3F66            dc.l 147302
(1) 1462/ 600470C : 0002 40CC            dc.l 147660
(1) 1463/ 6004710 : 0002 4233            dc.l 148019
(1) 1464/ 6004714 : 0002 4399            dc.l 148377
(1) 1465/ 6004718 : 0002 4500            dc.l 148736
(1) 1466/ 600471C : 0002 4666            dc.l 149094
(1) 1467/ 6004720 : 0002 47CC            dc.l 149452
(1) 1468/ 6004724 : 0002 4933            dc.l 149811
(1) 1469/ 6004728 : 0002 4A99            dc.l 150169
(1) 1470/ 600472C : 0002 4C00            dc.l 150528
(1) 1471/ 6004730 : 0002 4D66            dc.l 150886
(1) 1472/ 6004734 : 0002 4ECC            dc.l 151244
(1) 1473/ 6004738 : 0002 5033            dc.l 151603
(1) 1474/ 600473C : 0002 5199            dc.l 151961
(1) 1475/ 6004740 : 0002 5300            dc.l 152320
(1) 1476/ 6004744 : 0002 5466            dc.l 152678
(1) 1477/ 6004748 : 0002 55CC            dc.l 153036
(1) 1478/ 600474C : 0002 5733            dc.l 153395
(1) 1479/ 6004750 : 0002 5899            dc.l 153753
(1) 1480/ 6004754 : 0002 5A00            dc.l 154112
(1) 1481/ 6004758 : 0002 5B66            dc.l 154470
(1) 1482/ 600475C : 0002 5CCC            dc.l 154828
(1) 1483/ 6004760 : 0002 5E33            dc.l 155187
(1) 1484/ 6004764 : 0002 5F99            dc.l 155545
(1) 1485/ 6004768 : 0002 6100            dc.l 155904
(1) 1486/ 600476C : 0002 6266            dc.l 156262
(1) 1487/ 6004770 : 0002 63CC            dc.l 156620
(1) 1488/ 6004774 : 0002 6533            dc.l 156979
(1) 1489/ 6004778 : 0002 6699            dc.l 157337
(1) 1490/ 600477C : 0002 6800            dc.l 157696
(1) 1491/ 6004780 : 0002 6966            dc.l 158054
(1) 1492/ 6004784 : 0002 6ACC            dc.l 158412
(1) 1493/ 6004788 : 0002 6C33            dc.l 158771
(1) 1494/ 600478C : 0002 6D99            dc.l 159129
(1) 1495/ 6004790 : 0002 6F00            dc.l 159488
(1) 1496/ 6004794 : 0002 7066            dc.l 159846
(1) 1497/ 6004798 : 0002 71CC            dc.l 160204
(1) 1498/ 600479C : 0002 7333            dc.l 160563
(1) 1499/ 60047A0 : 0002 7499            dc.l 160921
(1) 1500/ 60047A4 : 0002 7600            dc.l 161280
(1) 1501/ 60047A8 : 0002 7766            dc.l 161638
(1) 1502/ 60047AC : 0002 78CC            dc.l 161996
(1) 1503/ 60047B0 : 0002 7A33            dc.l 162355
(1) 1504/ 60047B4 : 0002 7B99            dc.l 162713
(1) 1505/ 60047B8 : 0002 7D00            dc.l 163072
(1) 1506/ 60047BC : 0002 7E66            dc.l 163430
(1) 1507/ 60047C0 : 0002 7FCC            dc.l 163788
(1) 1508/ 60047C4 : 0002 8133            dc.l 164147
(1) 1509/ 60047C8 : 0002 8299            dc.l 164505
(1) 1510/ 60047CC : 0002 8400            dc.l 164864
(1) 1511/ 60047D0 : 0002 8566            dc.l 165222
(1) 1512/ 60047D4 : 0002 86CC            dc.l 165580
(1) 1513/ 60047D8 : 0002 8833            dc.l 165939
(1) 1514/ 60047DC : 0002 8999            dc.l 166297
(1) 1515/ 60047E0 : 0002 8B00            dc.l 166656
(1) 1516/ 60047E4 : 0002 8C66            dc.l 167014
(1) 1517/ 60047E8 : 0002 8DCC            dc.l 167372
(1) 1518/ 60047EC : 0002 8F33            dc.l 167731
(1) 1519/ 60047F0 : 0002 9099            dc.l 168089
(1) 1520/ 60047F4 : 0002 9200            dc.l 168448
(1) 1521/ 60047F8 : 0002 9366            dc.l 168806
(1) 1522/ 60047FC : 0002 94CC            dc.l 169164
(1) 1523/ 6004800 : 0002 9633            dc.l 169523
(1) 1524/ 6004804 : 0002 9799            dc.l 169881
(1) 1525/ 6004808 : 0002 9900            dc.l 170240
(1) 1526/ 600480C : 0002 9A66            dc.l 170598
(1) 1527/ 6004810 : 0002 9BCC            dc.l 170956
(1) 1528/ 6004814 : 0002 9D33            dc.l 171315
(1) 1529/ 6004818 : 0002 9E99            dc.l 171673
(1) 1530/ 600481C : 0002 A000            dc.l 172032
(1) 1531/ 6004820 : 0002 A166            dc.l 172390
(1) 1532/ 6004824 : 0002 A2CC            dc.l 172748
(1) 1533/ 6004828 : 0002 A433            dc.l 173107
(1) 1534/ 600482C : 0002 A599            dc.l 173465
(1) 1535/ 6004830 : 0002 A700            dc.l 173824
(1) 1536/ 6004834 : 0002 A866            dc.l 174182
(1) 1537/ 6004838 : 0002 A9CC            dc.l 174540
(1) 1538/ 600483C : 0002 AB33            dc.l 174899
(1) 1539/ 6004840 : 0002 AC99            dc.l 175257
(1) 1540/ 6004844 : 0002 AE00            dc.l 175616
(1) 1541/ 6004848 : 0002 AF66            dc.l 175974
(1) 1542/ 600484C : 0002 B0CC            dc.l 176332
(1) 1543/ 6004850 : 0002 B233            dc.l 176691
(1) 1544/ 6004854 : 0002 B399            dc.l 177049
(1) 1545/ 6004858 : 0002 B500            dc.l 177408
(1) 1546/ 600485C : 0002 B666            dc.l 177766
(1) 1547/ 6004860 : 0002 B7CC            dc.l 178124
(1) 1548/ 6004864 : 0002 B933            dc.l 178483
(1) 1549/ 6004868 : 0002 BA99            dc.l 178841
(1) 1550/ 600486C : 0002 BC00            dc.l 179200
(1) 1551/ 6004870 : 0002 BD66            dc.l 179558
(1) 1552/ 6004874 : 0002 BECC            dc.l 179916
(1) 1553/ 6004878 : 0002 C033            dc.l 180275
(1) 1554/ 600487C : 0002 C199            dc.l 180633
(1) 1555/ 6004880 : 0002 C300            dc.l 180992
(1) 1556/ 6004884 : 0002 C466            dc.l 181350
(1) 1557/ 6004888 : 0002 C5CC            dc.l 181708
(1) 1558/ 600488C : 0002 C733            dc.l 182067
(1) 1559/ 6004890 : 0002 C899            dc.l 182425
(1) 1560/ 6004894 : 0002 CA00            dc.l 182784
(1) 1561/ 6004898 : 0002 CB66            dc.l 183142
(1) 1562/ 600489C : 0002 CCCC            dc.l 183500
(1) 1563/ 60048A0 : 0002 CE33            dc.l 183859
(1) 1564/ 60048A4 : 0002 CF99            dc.l 184217
(1) 1565/ 60048A8 : 0002 D100            dc.l 184576
(1) 1566/ 60048AC : 0002 D266            dc.l 184934
(1) 1567/ 60048B0 : 0002 D3CC            dc.l 185292
(1) 1568/ 60048B4 : 0002 D533            dc.l 185651
(1) 1569/ 60048B8 : 0002 D699            dc.l 186009
(1) 1570/ 60048BC :                     
(1) 1571/ 60048BC :                     persp_table_min:
(1) 1572/ 60048BC :                     		binclude "system/mars/data/perpdata_min.bin"
(1) 1573/ 60058BC :                     
(1) 1574/ 60058BC :                     ; ====================================================================
(1) 1575/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1576/ 60058BC :                     ; MARS SH2 RAM
(1) 1577/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1578/ 60058BC :                     
(1) 1579/ 60058BC :                     SH2_RAM:
(1) 1580/ 60058BC : (MACRO)             		struct SH2_RAM
(1) 1580/ 60058BC : =$60058BC           GLBL_LASTPC     set *
(1) 1580/    8EA8 :                                     dephase
(1) 1580/    8EA8 : =$8EA8              GLBL_LASTORG    set *
(1) 1580/ 60058BC :                                     phase SH2_RAM
(1) 1587/ 60058BC :                     MarsRam_System	ds.b (sizeof_marssys-MarsRam_System)
(1) 1588/ 6005900 :                     MarsRam_Video	ds.b (sizeof_marsvid-MarsRam_Video)
(1) 1589/ 602B6FC :                     MarsRam_Sound	ds.b (sizeof_marssnd-MarsRam_Sound)
(1) 1590/ 602B81C :                     sizeof_marsram	ds.l 0
(1) 1592/ 602B81C :                     
(1) 1593/ 602B81C :                     .here:
MARS RAM from 58BC to 2B81C
(1) 1595/ 602B81C :                     		message "MARS RAM from \{((SH2_RAM)&$FFFFFF)} to \{((.here)&$FFFFFF)}"
(1) 1597/ 602B81C : (MACRO)             		finish
(1) 1597/ 60058BC :                                     !org GLBL_LASTORG
(1) 1597/ 60058BC :                                     phase GLBL_LASTPC
(1) 1598/ 60058BC :                     		
(1) 1599/ 60058BC :                     ; ====================================================================
(1) 1600/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1601/ 60058BC :                     ; MARS Sound RAM
(1) 1602/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1603/ 60058BC :                     
(1) 1604/ 60058BC : (MACRO)             			struct MarsRam_Sound
(1) 1604/ 60058BC : =$60058BC           GLBL_LASTPC     set *
(1) 1604/    8EA8 :                                     dephase
(1) 1604/    8EA8 : =$8EA8              GLBL_LASTORG    set *
(1) 1604/ 602B6FC :                                     phase MARSRAM_SOUND
(1) 1605/ 602B6FC :                     MARSSnd_Pwm		ds.b sizeof_sndchn*8
(1) 1606/ 602B81C :                     sizeof_marssnd		ds.l 0
(1) 1607/ 602B81C : (MACRO)             			finish
(1) 1607/ 602B6FC :                                     !org GLBL_LASTORG
(1) 1607/ 60058BC :                                     phase GLBL_LASTPC
(1) 1608/ 60058BC :                     
(1) 1609/ 60058BC :                     ; ====================================================================
(1) 1610/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1611/ 60058BC :                     ; MARS Video RAM
(1) 1612/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1613/ 60058BC :                     
(1) 1614/ 60058BC : (MACRO)             			struct MarsRam_Video
(1) 1614/ 60058BC : =$60058BC           GLBL_LASTPC     set *
(1) 1614/    8EA8 :                                     dephase
(1) 1614/    8EA8 : =$8EA8              GLBL_LASTORG    set *
(1) 1614/ 6005900 :                                     phase MARSRAM_VIDEO
(1) 1615/ 6005900 :                     RAM_Mars_Palette	ds.w 256
(1) 1616/ 6005B00 :                     RAM_Mars_PlgnList_0	ds.l MAX_FACES			; Pointer list(s)
(1) 1617/ 6006B00 :                     RAM_Mars_PlgnList_1	ds.l MAX_FACES
(1) 1618/ 6007B00 :                     RAM_Mars_Plgn_ZList	ds.l MAX_FACES*2		; Z value / foward faces | backward faces
(1) 1619/ 6009B00 :                     RAM_Mars_PlgnNum_0	ds.w 1
(1) 1620/ 6009B02 :                     RAM_Mars_PlgnNum_1	ds.w 1
(1) 1621/ 6009B04 :                     RAM_Mars_ObjCamera	ds.b sizeof_camera
(1) 1622/ 6009B2C :                     RAM_Mars_ObjLayout	ds.b sizeof_layout
(1) 1623/ 6009B3C :                     RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS
(1) 1624/ 6009CFC :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_FACES	; Polygon list 0
(1) 1625/ 6017CFC :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_FACES	; Polygon list 1
(1) 1626/ 6025CFC :                     RAM_Mars_VdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ
(1) 1627/ 602B6FC :                     RAM_Mars_VdpDrwList_e	ds.l 0
(1) 1628/ 602B6FC :                     sizeof_marsvid		ds.l 0
(1) 1629/ 602B6FC : (MACRO)             			finish
(1) 1629/ 6005900 :                                     !org GLBL_LASTORG
(1) 1629/ 60058BC :                                     phase GLBL_LASTPC
(1) 1630/ 60058BC :                     			
(1) 1631/ 60058BC :                     ; ====================================================================
(1) 1632/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1633/ 60058BC :                     ; MARS System RAM
(1) 1634/ 60058BC :                     ; ----------------------------------------------------------------
(1) 1635/ 60058BC :                     
(1) 1636/ 60058BC : (MACRO)             			struct MarsRam_System
(1) 1636/ 60058BC : =$60058BC           GLBL_LASTPC     set *
(1) 1636/    8EA8 :                                     dephase
(1) 1636/    8EA8 : =$8EA8              GLBL_LASTORG    set *
(1) 1636/ 60058BC :                                     phase MARSRAM_SYSTEM
(1) 1637/ 60058BC :                     RAM_Mars_Global		ds.w sizeof_MarsGbl		; keep it as a word
(1) 1638/ 6005900 :                     sizeof_marssys		ds.l 0
(1) 1639/ 6005900 : (MACRO)             			finish
(1) 1639/ 60058BC :                                     !org GLBL_LASTORG
(1) 1639/ 60058BC :                                     phase GLBL_LASTPC
(1) 1640/ 60058BC :                     
      47/ 60058BC :                     		ltorg
      48/ 60058BC :                     		cpu 68000
      49/ 60058BC :                     		padding off
      50/    8EA8 :                     		dephase
      51/    8EA8 :                     MARS_RAMDATA_E:
      52/    8EA8 :                     		align 4
      53/    8EA8 :                     
      54/    8EA8 :                     ; ====================================================================
      55/    8EA8 :                     ; MD DATA BANK
      56/    8EA8 :                     ; 
      57/    8EA8 :                     ; $900000 - $9FFFFF
      58/    8EA8 :                     ; ====================================================================
      59/    8EA8 :                     
      60/    8EA8 :                     		align 4
      61/  908EA8 :                     		phase $900000+*				; Only one currently
      62/  908EA8 :                     		include "data/md_bank0.asm"
(1)    1/  908EA8 :                     ; ====================================================================
(1)    2/  908EA8 :                     ; ----------------------------------------------------------------
(1)    3/  908EA8 :                     ; MD ROM BANK other than DMA graphics, 1MB maximum
(1)    4/  908EA8 :                     ; 
(1)    5/  908EA8 :                     ; ($900000-$9FFFFF)
(1)    6/  908EA8 :                     ; ----------------------------------------------------------------
(1)    7/  908EA8 :                     
(1)    8/  908EA8 :                     		align 4
(1)    9/  908EA8 : 4D44 2052 4F4D 2042 		dc.b "MD ROM BANK 0"
                    414E 4B20 30        
(1)   10/  908EB5 :                     ; CAMERA_ANIM:	binclude "data/mars/models/camera_anim.bin"
(1)   11/  908EB5 :                     ; 		align 4
(1)   12/  908EB5 :                     
      63/    8EB5 :                     		dephase
      64/    8EB5 :                     
      65/    8EB5 :                     ; ====================================================================
      66/    8EB5 :                     ; DATA for DMA transfers (bank-less but with the old limitations)
      67/    8EB5 :                     ; ====================================================================
      68/    8EB5 :                     
      69/    8EB5 :                     		align 4
      70/    8EB8 :                     		include "data/md_dmadata0.asm"
(1)    1/    8EB8 :                     ; ====================================================================
(1)    2/    8EB8 :                     ; ----------------------------------------------------------------
(1)    3/    8EB8 :                     ; Graphics data to be transfered with DMA (RV=1)
(1)    4/    8EB8 :                     ; ----------------------------------------------------------------
(1)    5/    8EB8 :                     
(1)    6/    8EB8 :                     		align $8000
(1)    7/   10000 :                     MdGfx_Bg:
(1)    8/   10000 :                     		binclude "data/md/bg/bg_art.bin"
(1)    9/   12EC0 :                     MdGfx_Bg_e:	align 2
(1)   10/   12EC0 :                     
      71/   12EC0 :                     		
      72/   12EC0 :                     ; ====================================================================
      73/   12EC0 :                     ; MARS ROM data (Acessed by SH2 only)
      74/   12EC0 :                     ; 
      75/   12EC0 :                     ; This will be gone if doing DMA transfers
      76/   12EC0 :                     ; ====================================================================
      77/   12EC0 :                     
      78/ 2012EC0 :                     		phase CS1+*
      79/ 2012EC0 :                     		align 4
      80/ 2012EC0 :                     		include "data/mars_rom.asm"
(1)    1/ 2012EC0 :                     ; ====================================================================
(1)    2/ 2012EC0 :                     ; ----------------------------------------------------------------
(1)    3/ 2012EC0 :                     ; SH2 ROM user data
(1)    4/ 2012EC0 :                     ; 
(1)    5/ 2012EC0 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 2012EC0 :                     ; Note that this section will be gone if the Genesis side is
(1)    7/ 2012EC0 :                     ; perfoming a DMA ROM-to-VDP Transfer (setting RV=1)
(1)    8/ 2012EC0 :                     ; 
(1)    9/ 2012EC0 :                     ; also, reading from here is slow (supposedly)
(1)   10/ 2012EC0 :                     ; ----------------------------------------------------------------
(1)   11/ 2012EC0 :                     
(1)   12/ 2012EC0 :                     		include  "data/mars/objects/incl_rom.asm"	; All textures will go in ROM
(2)    1/ 2012EC0 :                     ; ====================================================================
(2)    2/ 2012EC0 :                     ; ----------------------------------------------------------------
(2)    3/ 2012EC0 :                     ; Put your model textures here
(2)    4/ 2012EC0 :                     ; ----------------------------------------------------------------
(2)    5/ 2012EC0 :                     
(2)    6/ 2012EC0 :                     		align 4
(2)    7/ 2012EC0 :                     Textr_marscity:
(2)    8/ 2012EC0 :                     		binclude "data/mars/objects/mtrl/marscity_art.bin"
(2)    9/ 2091CC0 :                     		align 4
(2)   10/ 2091CC0 :                     
(1)   13/ 2091CC0 :                     
      81/   91CC0 :                     		dephase
      82/   91CC0 :                     
      83/   91CC0 :                     ; ====================================================================
      84/   91CC0 :                     ; ---------------------------------------------
      85/   91CC0 :                     ; End
      86/   91CC0 :                     ; ---------------------------------------------
      87/   91CC0 :                     		
      88/   91CC0 :                     ROM_END:
      89/   91CC0 :                     ; 		rompad (ROM_END&$FF0000)+$40000
      90/   91CC0 :                     		align $8000
      91/   98000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 1/11/2021 21:55:29


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ASCII_FONT :                FF08B8 C |  ASCII_FONT_E :              FF18B8 C |
 ASCII_PAL :                 FF0898 C | *ASCII_PAL_E :               FF08B8 C |
*BIGENDIAN :                      0 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITHINT :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - |  BITJOYA :                        6 - |
 BITJOYB :                        4 - |  BITJOYC :                        5 - |
 BITJOYDOWN :                     1 - |  BITJOYLEFT :                     2 - |
*BITJOYMODE :                     3 - |  BITJOYRIGHT :                    3 - |
*BITJOYSTART :                    7 - |  BITJOYUP :                       0 - |
*BITJOYX :                        2 - | *BITJOYY :                        1 - |
*BITJOYZ :                        0 - |  BITMAPMD :                       1 - |
*BITV30 :                         3 - |  BITVINT :                        3 - |
*BITVINTENBL :                    5 - | *BRANCHEXT :                      0 - |
 CACHDDA_LAST :    FFFFFFFFC0000048 C |  CACHDDA_SRC :     FFFFFFFFC0000058 C |
 CACHDDA_SRC_L :   FFFFFFFFC0000078 C |  CACHDDA_SRC_R :   FFFFFFFFC0000088 C |
 CACHDDA_TOP :     FFFFFFFFC0000038 C |  CACHE_END :                6001124 C |
 CACHE_START :              60009E4 C |  CACH_CLRLINES :   FFFFFFFFC0000098 C |
 CACH_LNDRW_L :    FFFFFFFFC0000000 C |  CACH_LNDRW_S :    FFFFFFFFC0000038 C |
 CAM_ANIMDATA :                   0 C |  CAM_ANIMFRAME :                  4 C |
*CAM_ANIMSPD :                    C C |  CAM_ANIMTIMER :                  8 C |
 CAM_X_POS :                     10 C |  CAM_X_ROT :                     1C C |
 CAM_Y_POS :                     14 C |  CAM_Y_ROT :                     20 C |
 CAM_Z_POS :                     18 C |  CAM_Z_ROT :                     24 C |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CMDINTCLR :                     1A - |  CMDIRQ_ON :                      2 - |
 COMM0 :                         20 - |  COMM10 :                        2A - |
 COMM12 :                        2C - |  COMM14 :                        2E - |
 COMM15 :                        2F - |  COMM2 :                         22 - |
 COMM4 :                         24 - |  COMM6 :                         26 - |
 COMM8 :                         28 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFF9000 - | *CONTROLLER_2 :    FFFFFFFFFFFF9006 - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - |  CS3 :                      6000000 - |
 CYCLE :                         32 - | *DATE :                   1/11/2021 - |
*DISPENBL :                      40 - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - |  DREQCTL :                        6 - |
 DREQDEST :                       C - |  DREQFIFO :                      12 - |
 DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DRWSLD_NEXTPZ :   FFFFFFFFC0000384 C |
*DRWSLD_NEXTPZ.FINISH_IT :                                 FFFFFFFFC0000398 C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC0000396 C |
 DRWSLD_NXTLINE :  FFFFFFFFC00002DE C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC0000320 C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC000030A C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC000031A C |
 DRWSLD_NXTLINE.WAIT :                                     FFFFFFFFC000032A C |
 DRWSLD_UPDLINE :  FFFFFFFFC000037A C |  DRWTASK_EXIT :    FFFFFFFFC00003C2 C |
 DRWTASK_RETURN :  FFFFFFFFC00003A6 C | *DRWTSK1_NEWPZ :   FFFFFFFFC0000188 C |
 DRWTSK1_NEWPZ.INVLD_Y :                                   FFFFFFFFC00001AE C |
 DRWTSK1_NEWPZ.LEN_MAX :                                   FFFFFFFFC00001A8 C |
 DRWTSK1_VLD_Y :   FFFFFFFFC00001C2 C |
 DRWTSK1_VLD_Y.SOLID_COLOR :                               FFFFFFFFC00002D0 C |
 DRWTSK1_VLD_Y.TEXTURE_LINE :                              FFFFFFFFC00001DC C |
 DRWTSK1_VLD_Y.TEXVALID :                                  FFFFFFFFC00001E6 C |
 DRWTSK1_VLD_Y.TEX_GONXTPZ :                               FFFFFFFFC00001D8 C |
 DRWTSK1_VLD_Y.TEX_NEXT_LINE :                             FFFFFFFFC00001EE C |
 DRWTSK1_VLD_Y.TEX_SKIP_LINE :                             FFFFFFFFC00002B2 C |
 DRWTSK1_VLD_Y.TEX_UPD_LINE :                              FFFFFFFFC00002A4 C |
 DRWTSK1_VLD_Y.TEX_XLOOP :                                 FFFFFFFFC0000288 C |
 DRWTSK1_VLD_Y.TL_FIX :                                    FFFFFFFFC0000272 C |
 DRWTSK1_VLD_Y.TR_FIX :                                    FFFFFFFFC000025E C |
 DRWTSK1_VLD_Y.TXREVERS :                                  FFFFFFFFC000022C C |
*DRWTSK_00 :       FFFFFFFFC000039C C |  DRWTSK_01 :       FFFFFFFFC000015C C |
 DRWTSK_01.HAS_PZ :                                        FFFFFFFFC000016C C |
 DRWTSK_02 :       FFFFFFFFC0000118 C |  ENGINE_CODE :                  936 C |
 ENGINE_CODE_END :             35EC C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     5 - | *FILLSTART :                      6 - |
 FM :                            80 - |  FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GLBL_LASTORG :                8EA8 - |  GLBL_LASTPC :              60058BC - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :              FF0266 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
 INTMASK :                        1 - |  INT_M_LIST :               600026C C |
 INT_S_LIST :               60002CC C | *JOYA :                          40 - |
*JOYB :                          10 - | *JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
 JOYX :                         400 - |  JOYY :                         200 - |
*JOYZ :                         100 - |  LCHWIDTH :                      34 - |
*LISTON :                         3 - |  LIST_VDPREGS :              FF0884 C |
 LITERAL_F_00000000_1 :     6000268 C |  LITERAL_F_00000001_1 :     6000410 C |
 LITERAL_F_00000002_1 :     6000424 C |  LITERAL_F_00000003_1 :     6000444 C |
 LITERAL_F_00000004_1 :     6000554 C |  LITERAL_F_00000005_1 :     600062C C |
 LITERAL_F_00000006_1 :     6000654 C |  LITERAL_F_00000007_1 :     600081C C |
 LITERAL_F_00000008_1 :     6000948 C |  LITERAL_F_00000009_1 :     60009C4 C |
 LITERAL_F_0000000A_1 :     60009C8 C |  LITERAL_F_0000000B_1 :     60009CC C |
 LITERAL_F_0000000C_1 :     60009D0 C |
 LITERAL_F_0000000D_1 :                                    FFFFFFFFC00001B4 C |
 LITERAL_F_0000000E_1 :                                    FFFFFFFFC00003E4 C |
 LITERAL_F_0000000F_1 :                                    FFFFFFFFC00003E8 C |
 LITERAL_F_00000010_1 :                                    FFFFFFFFC0000538 C |
 LITERAL_F_00000011_1 :                                    FFFFFFFFC000053C C |
 LITERAL_F_00000012_1 :                                    FFFFFFFFC0000738 C |
 LITERAL_F_00000013_1 :                                    FFFFFFFFC000073C C |
 LITERAL_F_00000013_1.END :                                FFFFFFFFC0000740 C |
 LITERAL_F_00000014_1 :     600119C C |  LITERAL_F_00000015_1 :     600120C C |
 LITERAL_F_00000016_1 :     6001330 C |  LITERAL_F_00000017_1 :     6001340 C |
 LITERAL_F_00000018_1 :     6001344 C |  LITERAL_F_00000019_1 :     600134C C |
 LITERAL_F_0000001A_1 :     6001350 C |  LITERAL_F_0000001B_1 :     6001354 C |
 LITERAL_F_0000001C_1 :     6001358 C |  LITERAL_F_0000001D_1 :     60014C4 C |
 LITERAL_F_0000001E_1 :     60014C8 C |  LITERAL_F_0000001F_1 :     60014CC C |
 LITERAL_F_00000020_1 :     60014D8 C |  LITERAL_F_00000021_1 :     60014E4 C |
 LITERAL_F_00000022_1 :     60014E8 C |  LITERAL_F_00000023_1 :     60014EC C |
 LITERAL_F_00000024_1 :     60014F0 C |  LITERAL_F_00000025_1 :     60014F4 C |
 LITERAL_F_00000026_1 :     60014F8 C |  LITERAL_F_00000027_1 :     60014FC C |
 LITERAL_F_00000028_1 :     6001500 C |  LITERAL_F_00000029_1 :     600157C C |
 LITERAL_L_00008000_1 :     6000630 C |  LITERAL_L_0000E000_1 :     6000814 C |
 LITERAL_L_0000FFFF_1 :                                    FFFFFFFFC00001BC C |
 LITERAL_L_01000000_1 :     600094C C |  LITERAL_L_06000044_1 :     60015C4 C |
 LITERAL_L_060009E4_1 :     6001338 C |  LITERAL_L_0603EFF8_1 :     6000550 C |
 LITERAL_L_0603F000_1 :     60014C0 C |  LITERAL_L_0603FFF8_1 :     6000440 C |
 LITERAL_L_06040000_1 :     6001324 C |  LITERAL_L_20004000_1 :     6000430 C |
 LITERAL_L_20004000_2 :     6000540 C |  LITERAL_L_20004000_3 :     6000620 C |
 LITERAL_L_20004000_4 :     6001208 C |  LITERAL_L_20004000_5 :     6001334 C |
 LITERAL_L_20004000_6 :     60014B4 C |  LITERAL_L_20004016_1 :     600042C C |
 LITERAL_L_20004016_2 :     600053C C |  LITERAL_L_20004018_1 :     600041C C |
 LITERAL_L_20004018_2 :     6000538 C |  LITERAL_L_2000401A_1 :     6000418 C |
 LITERAL_L_2000401A_2 :     6000534 C |  LITERAL_L_2000401C_1 :     6000414 C |
 LITERAL_L_2000401C_2 :     6000530 C |  LITERAL_L_20004020_1 :     6001328 C |
 LITERAL_L_20004020_2 :     60014B8 C |  LITERAL_L_20004024_1 :     6001364 C |
 LITERAL_L_20004026_1 :     60014E0 C |  LITERAL_L_20004028_1 :     60014D4 C |
 LITERAL_L_2000402E_1 :     6001348 C |  LITERAL_L_2000402E_2 :     60014DC C |
 LITERAL_L_2000402F_1 :     60014D0 C |  LITERAL_L_20004034_1 :     60011A4 C |
 LITERAL_L_20004036_1 :     60011A8 C |  LITERAL_L_20004038_1 :     600052C C |
 LITERAL_L_20004038_2 :     60011A0 C |  LITERAL_L_20004100_1 :     6000420 C |
 LITERAL_L_20004100_2 :     6000624 C |  LITERAL_L_20004100_3 :     60009D4 C |
 LITERAL_L_20004100_4 :                                    FFFFFFFFC00000F0 C |
 LITERAL_L_20004100_5 :                                    FFFFFFFFC00003DC C |
 LITERAL_L_20004100_6 :     6001360 C |  LITERAL_L_20004200_1 :     6000428 C |
 LITERAL_L_24000000_1 :     6000628 C |
 LITERAL_L_24020200_1 :                                    FFFFFFFFC00003D8 C |
 LITERAL_L_36385550_1 :     6000434 C |  LITERAL_L_36385550_2 :     6000544 C |
 LITERAL_L_4D5F4F4B_1 :     600043C C |  LITERAL_L_4D5F4F4B_2 :     600054C C |
 LITERAL_L_534C4156_1 :     600132C C |  LITERAL_L_534C4156_2 :     60014BC C |
 LITERAL_L_535F4F4B_1 :     6000438 C |  LITERAL_L_535F4F4B_2 :     6000548 C |
 LITERAL_L_7FFFFFFF_1 :     6000818 C |
 LITERAL_L_7FFFFFFF_2 :                                    FFFFFFFFC0000534 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                            FFFFFFFFC00001B8 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     600133C C |
 LITERAL_L_FFFFFFFFC0000038_1 :                            FFFFFFFFC00003E0 C |
 LITERAL_L_FFFFFFFFC0000038_2 :                            FFFFFFFFC0000528 C |
 LITERAL_L_FFFFFFFFC0000048_1 :                            FFFFFFFFC000052C C |
 LITERAL_L_FFFFFFFFC0000058_1 :                            FFFFFFFFC0000530 C |
 LITERAL_L_FFFFFFFFC0000078_1 :                            FFFFFFFFC0000654 C |
 LITERAL_L_FFFFFFFFC0000078_2 :                            FFFFFFFFC0000730 C |
 LITERAL_L_FFFFFFFFC000007C_1 :                            FFFFFFFFC000065C C |
 LITERAL_L_FFFFFFFFC0000084_1 :                            FFFFFFFFC0000658 C |
 LITERAL_L_FFFFFFFFC0000088_1 :                            FFFFFFFFC0000660 C |
 LITERAL_L_FFFFFFFFC0000088_2 :                            FFFFFFFFC0000734 C |
 LITERAL_L_FFFFFFFFC000008C_1 :                            FFFFFFFFC0000664 C |
 LITERAL_L_FFFFFFFFC0000094_1 :                            FFFFFFFFC0000668 C |
 LITERAL_L_FFFFFFFFC0000098_1 :                            FFFFFFFFC00000F4 C |
 LITERAL_L_FFFFFFFFC00003FC_1 :                                     600135C C |
 LITERAL_L_FFFFFFFFFF000000_1 :                                     6001210 C |
 LITERAL_W_0080_1 :         6000634 C |
 LITERAL_W_00A0_1 :                                        FFFFFFFFC00000FA C |
 LITERAL_W_00A0_2 :                                        FFFFFFFFC0000540 C |
 LITERAL_W_00A1_1 :         60009DC C |  LITERAL_W_00E0_1 :         60009DA C |
 LITERAL_W_00E0_2 :                                        FFFFFFFFC00001C0 C |
 LITERAL_W_00E0_3 :                                        FFFFFFFFC00003EC C |
 LITERAL_W_00E0_4 :                                        FFFFFFFFC0000542 C |
 LITERAL_W_00F0_1 :         600044E C |  LITERAL_W_00F0_2 :         600055A C |
 LITERAL_W_00F0_3 :         6000638 C |  LITERAL_W_00F0_4 :         600136E C |
 LITERAL_W_00F0_5 :         600150A C |  LITERAL_W_00FF_1 :         600063A C |
 LITERAL_W_00FF_2 :                                        FFFFFFFFC00003F2 C |
 LITERAL_W_0100_1 :         600044A C |  LITERAL_W_0100_2 :         6000636 C |
 LITERAL_W_0100_3 :         6001374 C |  LITERAL_W_0105_1 :         6001216 C |
 LITERAL_W_013F_1 :                                        FFFFFFFFC00003F4 C |
 LITERAL_W_0140_1 :                                        FFFFFFFFC00003EE C |
 LITERAL_W_01D0_1 :         6001372 C |  LITERAL_W_0400_1 :         6000820 C |
 LITERAL_W_0400_2 :         6001580 C |  LITERAL_W_0415_1 :         6001214 C |
 LITERAL_W_07FF_1 :         60009D8 C |  LITERAL_W_1FFF_1 :         6000822 C |
 LITERAL_W_44E0_1 :         6000450 C |  LITERAL_W_44E0_2 :         600055C C |
 LITERAL_W_56F1_1 :         600044C C |
 LITERAL_W_5A00_1 :                                        FFFFFFFFC00003FA C |
 LITERAL_W_5A00_2 :         60015CE C |
 LITERAL_W_5A10_1 :                                        FFFFFFFFC0000100 C |
 LITERAL_W_5AFF_1 :         60009E0 C |  LITERAL_W_7DC0_1 :         6001376 C |
 LITERAL_W_A518_1 :                                        FFFFFFFFC00000FE C |
 LITERAL_W_A518_2 :                                        FFFFFFFFC00003F8 C |
 LITERAL_W_A518_3 :         600137A C |  LITERAL_W_A518_4 :         60015CC C |
 LITERAL_W_A538_1 :         60009E2 C |  LITERAL_W_FC00_1 :         6000826 C |
 LITERAL_W_FE10_1 :         6000448 C |  LITERAL_W_FE10_2 :         6000558 C |
 LITERAL_W_FE10_3 :                                        FFFFFFFFC00000F8 C |
 LITERAL_W_FE10_4 :         6001368 C |  LITERAL_W_FE10_5 :         6001504 C |
 LITERAL_W_FE10_6 :         60015C8 C |  LITERAL_W_FE80_1 :         60009DE C |
 LITERAL_W_FE80_2 :                                        FFFFFFFFC00000FC C |
 LITERAL_W_FE80_3 :                                        FFFFFFFFC00003F6 C |
 LITERAL_W_FE80_4 :         6001378 C |  LITERAL_W_FE80_5 :         60015CA C |
 LITERAL_W_FE92_1 :         6001370 C |  LITERAL_W_FE92_2 :         600150C C |
 LITERAL_W_FEE2_1 :         600136A C |  LITERAL_W_FEE2_2 :         6001506 C |
 LITERAL_W_FEE4_1 :         600136C C |  LITERAL_W_FEE4_2 :         6001508 C |
 LITERAL_W_FF00_1 :         6000950 C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC00003F0 C |
 LITERAL_W_FF00_3 :                                        FFFFFFFFC000066C C |
 LITERAL_W_FF60_1 :         6000824 C | *MACEXP :                         7 - |
 MAINDRW_TASKS :   FFFFFFFFC0000102 C |
 MAINDRW_TASKS.LIST :                                      FFFFFFFFC000010C C |
 MARS :                           1 - | *MARSCD :                         0 - |
 MARSGBL_CURRFACEPOS :            C C |  MARSGBL_CURRFB :                20 C |
 MARSGBL_CURRZLIST :              8 C |  MARSGBL_DIVREQ_M :              1C C |
 MARSGBL_DRWTASK :               16 C |  MARSGBL_MDLFACESCNTR :          10 C |
 MARSGBL_PLYPZLIST_R :            0 C |  MARSGBL_PLYPZLIST_W :            4 C |
 MARSGBL_POLYBUFFNUM :           12 C |  MARSGBL_PZLISTCNTR :            14 C |
*MARSGBL_SLVDRAWREQ :            1E C |  MARSGBL_VINTFLAG_M :            18 C |
 MARSGBL_VINTFLAG_S :            1A C |  MARSMDL_INIT :             600063C C |
 MARSMDL_INIT.CLNUP :       6000644 C |  MARSMDL_READMODEL :        6000658 C |
 MARSMDL_READMODEL.ALLFCSDONE :                                     60007A2 C |
 MARSMDL_READMODEL.ALLUVDONE :                                      60006D4 C |
 MARSMDL_READMODEL.CAMLIMIT :                                       60007D0 C |
 MARSMDL_READMODEL.CAN_BUILD :                                      6000676 C |
 MARSMDL_READMODEL.EXIT_MODEL :                                     600080E C |
*MARSMDL_READMODEL.FACE_OK :                                        60007F0 C |
 MARSMDL_READMODEL.FACE_OUT :                                       60007FE C |
 MARSMDL_READMODEL.FINISH_THIS :                                    6000806 C |
 MARSMDL_READMODEL.GO_FACES :                                       6000704 C |
 MARSMDL_READMODEL.NEXT_FACE :                                      600066A C |
 MARSMDL_READMODEL.REVRSCAM :                                       60007C8 C |
 MARSMDL_READMODEL.SET_TRI :                                        6000684 C |
 MARSMDL_READMODEL.SOLID_TYPE :                                     60006F6 C |
 MARSRAM_SOUND :            602B6FC C |  MARSRAM_SYSTEM :           60058BC C |
 MARSRAM_VIDEO :            6005900 C |  MARSSND_PWM :              602B6FC C |
 MARSSOUND_INIT :           60011AC C |  MARSSOUND_PWM :            600112C C |
 MARSSOUND_PWM.CHNOFF :     600117C C |  MARSSOUND_PWM.FULL :       6001184 C |
 MARSSOUND_PWM.KEEP :       600117A C |  MARSSOUND_PWM.NOEND :      600115A C |
 MARSSOUND_PWM.NOL :        6001176 C |  MARSSOUND_PWM.NOR :        6001170 C |
 MARSSOUND_PWM.NXTCHN :     6001134 C |  MARSSOUND_PWM.READ :       6001160 C |
*MARSSOUND_RUN :            6001124 C | *MARSSOUND_SETCHANNEL :     60011CC C |
 MARSSOUND_SETCHANNEL.ENDMRK :                                      60011EC C |
*MARSSOUND_SETPITCH :       6001204 C | *MARSVIDEO_CLEARFRAME :     60005AC C |
 MARSVIDEO_CLEARFRAME.LOOP :                                        60005C0 C |
 MARSVIDEO_CLEARFRAME.WAIT :                                        60005CE C |
 MARSVIDEO_CLEARFRAME.WAIT2 :                                       60005AE C |
*MARSVIDEO_FRAMESWAP :      60005E0 C |
 MARSVIDEO_FRAMESWAP.WAIT_FB :                                      60005E2 C |
 MARSVIDEO_FRAMESWAP.WAIT_RESULT :                                  60005F2 C |
 MARSVIDEO_INIT :           600055E C |  MARSVIDEO_INIT.FB_WAIT1 :  600058E C |
 MARSVIDEO_INIT.LOOP :      6000584 C |  MARSVIDEO_INIT.THIS_FB :   600057C C |
 MARSVIDEO_INIT.WAIT_RESULT :                                       600059E C |
 MARSVIDEO_LOADPAL :        6000600 C |  MARSVIDEO_LOADPAL.LOOP :   600060E C |
 MARSVIDEO_MAKEPOLYGON :                                   FFFFFFFFC00003FC C |
 MARSVIDEO_MAKEPOLYGON.DONTRESET :                         FFFFFFFFC0000502 C |
 MARSVIDEO_MAKEPOLYGON.EXIT :                              FFFFFFFFC0000522 C |
 MARSVIDEO_MAKEPOLYGON.FIND_TOP :                          FFFFFFFFC00004B4 C |
 MARSVIDEO_MAKEPOLYGON.IS_HIGH :                           FFFFFFFFC00004C6 C |
 MARSVIDEO_MAKEPOLYGON.IS_LOW :                            FFFFFFFFC00004BC C |
 MARSVIDEO_MAKEPOLYGON.LEFTH2 :                            FFFFFFFFC000051A C |
 MARSVIDEO_MAKEPOLYGON.NEXT_PZ :                           FFFFFFFFC00004E8 C |
 MARSVIDEO_MAKEPOLYGON.PLGN_PNTS :                         FFFFFFFFC000047C C |
 MARSVIDEO_MAKEPOLYGON.SETPNTS :                           FFFFFFFFC0000482 C |
*MARSVIDEO_MAKEPOLYGON.SPR_PNTS :                          FFFFFFFFC000041A C |
 MARSVIDEO_MAKEPOLYGON.SRC_PNTS :                          FFFFFFFFC0000496 C |
 MARSVIDEO_MAKEPOLYGON.START_MATH :                        FFFFFFFFC00004A4 C |
 MARSVIDEO_MAKEPOLYGON.TRINGL :                            FFFFFFFFC000040E C |
 MARSVIDEO_MAKEPOLYGON.YTRINGL :                           FFFFFFFFC00004AC C |
 MARSVIDEO_SETWATCHDOG :    600098C C |
 MARSVIDEO_SETWATCHDOG.WAIT_FB :                                    60009AA C |
 MARS_ENTRY :                   800 C |  MARS_ENTRY.ADAPTERENABLE :     872 C |
 MARS_ENTRY.COPYME :            8DA C |  MARS_ENTRY.HOTSTART :          8BE C |
 MARS_ENTRY.INIT :              880 C |  MARS_ENTRY.NO_MARS :           8E6 C |
 MARS_ENTRY.RAMCODE :           84A C |  MARS_ENTRY.RESTARTICD :        85A C |
 MARS_ENTRY.WM :                892 C |  MARS_ENTRY.WS :                89C C |
 MARS_RAMDATA :                35EC C |  MARS_RAMDATA_E :              8EA8 C |
 MASTER_IRQ :               6000248 C |  MASTER_LOOP :              60012AA C |
 MASTER_LOOP.CONT_PLGN :    60012DC C |  MASTER_LOOP.INVALID :      60012F2 C |
 MASTER_LOOP.LOOP :         60012E2 C |  MASTER_LOOP.MSTR_FREE :    60012BC C |
 MASTER_LOOP.MSTR_WAIT :    60012B0 C |  MASTER_LOOP.PAGE_2 :       60012D8 C |
 MASTER_LOOP.SKIP :         60012FC C |  MASTER_LOOP.WAIT_PZ :      60012FC C |
 MASTER_LOOP.WAIT_TASK :    6001302 C |  MAX_FACES :                    400 - |
 MAX_MDERAM :                   800 - |  MAX_MODELS :                    10 - |
 MAX_SVDP_PZ :                  180 - |  MAX_ZDIST :       FFFFFFFFFFFFFC00 - |
 MCD :                            0 - |  MCHNSND_BANK :                   8 C |
 MCHNSND_ENBL :                   0 C |  MCHNSND_END :                   10 C |
 MCHNSND_FLAGS :                 1C C |  MCHNSND_LOOP :                  14 C |
 MCHNSND_PITCH :                 18 C |  MCHNSND_READ :                   4 C |
 MCHNSND_START :                  C C |  MCHNSND_VOL :                   20 C |
 MDGFX_BG :                   10000 C |  MDGFX_BG_E :                 12EC0 C |
*MDLLAY_DATA :                    0 C | *MDLLAY_X :                       4 C |
*MDLLAY_Y :                       8 C | *MDLLAY_Z :                       C C |
 MDLRD_ROTATE :             6000952 C |  MDLRD_SETPOINT :           6000828 C |
 MDLRD_SETPOINT.INSIDE :    60008F4 C |  MDLRD_SETPOINT.SAVE_Z :    6000928 C |
 MDLRD_SETPOINT.SAVE_Z2 :   6000922 C |  MDLRD_SETPOINT.X_LW :      600092E C |
 MDLRD_SETPOINT.X_RW :      6000934 C |  MDLRD_SETPOINT.Y_LW :      600093A C |
 MDLRD_SETPOINT.Y_RW :      6000940 C |  MDLRD_SETPOINT.ZMULTI :    600090E C |
 MDL_DATA :                       0 C |  MDL_X_POS :                      4 C |
 MDL_X_ROT :                     10 C |  MDL_Y_POS :                      8 C |
 MDL_Y_ROT :                     14 C |  MDL_Z_POS :                      C C |
 MDL_Z_ROT :                     18 C |  MDMAP_BG :                  FF1EB6 C |
*MDMARS_SENDDATA :           FF0268 C |  MDMARS_SENDDATA.FULL :      FF02B0 C |
 MDMARS_SENDDATA.SENDFIFO :  FF02A8 C |  MDMARS_TRSNFRMDLS :         FF1C7A C |
 MDMARS_TRSNFRMDLS.BUSY_2 :  FF1CB8 C |
 MDMARS_TRSNFRMDLS.NO_START :                                        FF1CCA C |
 MDMARS_TRSNFRMDLS.PASTE :   FF1C9A C |  MDMDL_USERCONTROL :         FF1CCC C |
 MDMDL_USERCONTROL.NO_A :    FF1D76 C |  MDMDL_USERCONTROL.NO_B :    FF1DA0 C |
 MDMDL_USERCONTROL.NO_C :    FF1DCC C |  MDMDL_USERCONTROL.NO_DW :   FF1D14 C |
 MDMDL_USERCONTROL.NO_LF :   FF1D30 C |  MDMDL_USERCONTROL.NO_RG :   FF1D4C C |
 MDMDL_USERCONTROL.NO_UP :   FF1CF8 C |  MDMDL_USERCONTROL.NO_X :    FF1DEA C |
 MDMDL_USERCONTROL.NO_Y :    FF1E08 C |  MDPAL_BG :                  FF1E96 C |
 MDRAM_START :             FFFF8800 - |  MD_BANK_SRAM :              A130F1 - |
 MD_ERRADDR :                   934 C |  MD_ERRBUS :                    934 C |
 MD_ERRCHK :                    934 C |  MD_ERRILL :                    934 C |
 MD_ERROREX :                   934 C |  MD_ERRORTRAP :                 934 C |
 MD_ERRPRIVL :                  934 C |  MD_ERRTRAPV :                  934 C |
 MD_ERRZDIV :                   934 C |  MD_INIT :                      8FE C |
 MD_INIT.CLRRAM :               924 C |  MD_INIT.WAITFRAME :            904 C |
 MD_LINE1010 :                  934 C |  MD_LINE1111 :                  934 C |
 MD_MAIN :                   FF1B56 C |  MD_MAIN.LOOP :              FF1BC4 C |
 MD_MAIN.NO_CAMANIM :        FF1C62 C |  MD_MAIN.ON_FRAMES :         FF1C24 C |
*MD_MARS_ID :                A130EC - |  MD_TRACE :                     934 C |
 MODE_INIT :                 FF0238 C |  MODE_INIT.CLR :             FF0246 C |
*MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
 MONOWIDTH :                     38 - |  M_IRQ_BAD :                6000314 C |
 M_IRQ_CMD :                6000334 C |  M_IRQ_CUSTOM :    FFFFFFFFC000009C C |
 M_IRQ_CUSTOM.ON_CLR :                                     FFFFFFFFC00000E8 C |
*M_IRQ_CUSTOM.TASK_01 :                                    FFFFFFFFC00000AA C |
 M_IRQ_CUSTOM.WAIT_FB :                                    FFFFFFFFC00000B8 C |
 M_IRQ_CUSTOM.WAIT_FRMSWP :                                FFFFFFFFC00000B2 C |
 M_IRQ_H :                  6000350 C |  M_IRQ_PWM :                6000318 C |
 M_IRQ_V :                  600036C C |  M_IRQ_V.MIN_R :            600036E C |
 M_IRQ_V.WAIT :             6000382 C |  M_IRQ_VRES :               60003C4 C |
 M_IRQ_VRES.MARS_RESET :    6000402 C |  M_IRQ_VRES.MD_RESET :      60003D0 C |
 M_IRQ_VRES.SH_WAIT :       60003D8 C |  M_IRQ_VRES.VRESLOOP :      600040A C |
*NESTMAX :                      100 - |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C |  PALETTE_PUYO :             6003DD0 C |
*PEN :                           20 - | *PERSP_TABLE_MAX :          60040C4 C |
*PERSP_TABLE_MIN :          60048BC C |  PLGN_SPRITE :                   20 - |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYPZ_MTRL :                    34 C |  PLYPZ_MTRLOPT :                 38 C |
 PLYPZ_SRC_XL :                  14 C |  PLYPZ_SRC_XL_DX :               18 C |
 PLYPZ_SRC_XR :                  24 C |  PLYPZ_SRC_XR_DX :               28 C |
 PLYPZ_SRC_YL :                  1C C |  PLYPZ_SRC_YL_DX :               20 C |
 PLYPZ_SRC_YR :                  2C C |  PLYPZ_SRC_YR_DX :               30 C |
 PLYPZ_XL :                       4 C |  PLYPZ_XL_DX :                    8 C |
 PLYPZ_XR :                       C C |  PLYPZ_XR_DX :                   10 C |
 PLYPZ_YPOS :                     0 C |  POLYGN_MTRL :                    4 C |
 POLYGN_POINTS :                  8 C |  POLYGN_SRCPNTS :                28 C |
 POLYGN_TYPE :                    0 C | *PSG_CTRL :                  C00011 - |
 PUT_PIECE :       FFFFFFFFC000066E C |
 PUT_PIECE.BAD_PIECE :                                     FFFFFFFFC000071E C |
 PUT_PIECE.DONTRESET_PZ :                                  FFFFFFFFC0000716 C |
 PUT_PIECE.LEFTH : FFFFFFFFC000067E C |
 PUT_PIECE.TOP_NEG :                                       FFFFFFFFC0000700 C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  RAM_BGCAMCURR :   FFFFFFFFFFFF9A1E C |
 RAM_BGCAMERA :    FFFFFFFFFFFF9A1A C |  RAM_EXRAMSUB :    FFFFFFFFFFFF93D6 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF9218 C | *RAM_GAMEMODE :    FFFFFFFFFFFF9228 C |
 RAM_HBLANKGOTO :  FFFFFFFFFFFF9232 - |  RAM_INITFLUG :    FFFFFFFFFFFF9224 C |
 RAM_INPUTDATA :   FFFFFFFFFFFF9000 C |  RAM_MARS_GLOBAL :          60058BC C |
 RAM_MARS_OBJCAMERA :       6009B04 C |  RAM_MARS_OBJECTS :         6009B3C C |
*RAM_MARS_OBJLAYOUT :       6009B2C C |  RAM_MARS_PALETTE :         6005900 C |
 RAM_MARS_PLGNLIST_0 :      6005B00 C |  RAM_MARS_PLGNLIST_1 :      6006B00 C |
 RAM_MARS_PLGNNUM_0 :       6009B00 C |  RAM_MARS_PLGNNUM_1 :       6009B02 C |
 RAM_MARS_PLGN_ZLIST :      6007B00 C |  RAM_MARS_POLYGONS_0 :      6009CFC C |
 RAM_MARS_POLYGONS_1 :      6017CFC C |  RAM_MARS_VDPDRWLIST :      6025CFC C |
 RAM_MARS_VDPDRWLIST_E :    602B6FC C |  RAM_MDCAMERA :    FFFFFFFFFFFF99D6 C |
*RAM_MDGLBEXMPL :  FFFFFFFFFFFF9A24 C |  RAM_MDGLOBAL :    FFFFFFFFFFFF99D6 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFF9232 C |  RAM_MDMARSVINT :  FFFFFFFFFFFF922C C |
 RAM_MDMDLSUPD :   FFFFFFFFFFFF9A22 C | *RAM_MDMODELS :    FFFFFFFFFFFF99FE C |
 RAM_MDSOUND :     FFFFFFFFFFFF9238 C |  RAM_MDSYSTEM :    FFFFFFFFFFFF9000 C |
 RAM_MDVIDEO :     FFFFFFFFFFFF923C C |  RAM_MODEBUFF :    FFFFFFFFFFFF8800 C |
*RAM_SAVEDATA :    FFFFFFFFFFFF9018 C | *RAM_SOUNDNULL :   FFFFFFFFFFFF9238 C |
*RAM_SYSFLAGS :    FFFFFFFFFFFF922A C |  RAM_SYSRANDSEED : FFFFFFFFFFFF9220 C |
 RAM_SYSRANDVAL :  FFFFFFFFFFFF921C C |  RAM_VBLANKGOTO :  FFFFFFFFFFFF922C - |
 RAM_VDPREGS :     FFFFFFFFFFFF93BE C |  RAM_VIDPRNTLIST : FFFFFFFFFFFF923E C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFF923C C |  RCHWIDTH :                      36 - |
*RELAXED :                        0 - |  ROM_END :                    91CC0 C |
 SCREEN_HEIGHT :                 E0 - |  SCREEN_WIDTH :                 140 - |
 SET_LEFT :        FFFFFFFFC0000544 C |  SET_LEFT.LFT_OK : FFFFFFFFC0000566 C |
 SET_LEFT.LFT_SKIP :                                       FFFFFFFFC00005C6 C |
 SET_RIGHT :       FFFFFFFFC00005CC C |
 SET_RIGHT.RGT_OK :                                        FFFFFFFFC00005EE C |
 SET_RIGHT.RGT_SKIP :                                      FFFFFFFFC000064E C |
 SH2_ERROR :                600030C C |  SH2_MASTER :               6000000 C |
 SH2_M_ENTRY :              6001218 C |  SH2_M_ENTRY.WAIT_MD :      6001248 C |
 SH2_M_ENTRY.WAIT_SLAVE :   6001252 C |  SH2_M_HOTSTART :           600125C C |
 SH2_M_HOTSTART.COPY :      600127C C |  SH2_RAM :                  60058BC C |
 SH2_SLAVE :                6000124 C |  SH2_S_ENTRY :              600137C C |
 SH2_S_ENTRY.WAIT_MD :      60013AE C |  SH2_S_HOTSTART :           60013BA C |
*SHIFT :                          3 - |  SIN_TABLE :                60015D0 C |
 SIZEOF_CAMERA :                 28 C |  SIZEOF_INPUT :                   6 C |
 SIZEOF_LAYOUT :                 10 C |  SIZEOF_MARSGBL :                22 C |
*SIZEOF_MARSRAM :           602B81C C |  SIZEOF_MARSRAM.HERE :      602B81C C |
 SIZEOF_MARSSND :           602B81C C |  SIZEOF_MARSSYS :           6005900 C |
 SIZEOF_MARSVID :           602B6FC C |  SIZEOF_MDGLBL :   FFFFFFFFFFFF9A26 C |
 SIZEOF_MDLOBJ :                 1C C |  SIZEOF_MDRAM :    FFFFFFFFFFFF9A26 C |
 SIZEOF_MDSND :    FFFFFFFFFFFF923C C |  SIZEOF_MDSYS :    FFFFFFFFFFFF9238 C |
 SIZEOF_MDVID :    FFFFFFFFFFFF93D6 C |  SIZEOF_PLYPZ :                  3C C |
 SIZEOF_POLYGN :                 38 C |  SIZEOF_SNDCHN :                 24 C |
 SLAVE_IRQ :                60002AC C |  SLAVE_LOOP :               60013F0 C |
 SLAVE_LOOP.GO_MDL :        600145A C |  SLAVE_LOOP.HOLD_ON :       60014AE C |
 SLAVE_LOOP.INVLID :        6001474 C |  SLAVE_LOOP.LOOP :          6001466 C |
 SLAVE_LOOP.NO_REQUESTS :   600143C C |  SLAVE_LOOP.PAGE_2 :        600148C C |
*SLAVE_LOOP.SKIP :          600147A C |  SLAVE_LOOP.SWAP_NOW :      6001494 C |
 SLAVE_LOOP.TRANSFER_LOOP : 60013FC C |  SLAVE_LOOP.TRNSFR_DONE :   6001436 C |
*SLAVE_LOOP.WAIT_MASTER :   600149C C | *SLAVE_LOOP.WAIT_MASTER2 :  600143E C |
 SLV_SORT_Z :               600150E C |  SLV_SORT_Z.NEXT_FACE :     600155E C |
 SLV_SORT_Z.NO_FACE :       600156E C |  SLV_SORT_Z.Z_END :         6001576 C |
 SLV_SORT_Z.Z_FEWFACES :    6001558 C |  SLV_SORT_Z.Z_HIGH :        600154E C |
 SLV_SORT_Z.Z_INNER :       600153A C | *SLV_SORT_Z.Z_NORMAL :      6001520 C |
 SLV_SORT_Z.Z_OUTER :       6001536 C |  SLV_SORT_Z.Z_RANOUT :      6001528 C |
 SNDWAVBANK :                   16C C | *SNDWAVCOPY :                   16D C |
 SNDWAVEND :                    803 C |  SNDWAVENDB :                   805 C |
 SNDWAVFLAGS :                  80B C |  SNDWAVLOOP :                   806 C |
 SNDWAVLOOPB :                  808 C |  SNDWAVPITCH :                  809 C |
 SNDWAVREAD :                   169 C |  SNDWAVREQ :                    80C C |
 SNDWAVSTART :                  800 C |  SNDWAVSTARTB :                 802 C |
 SOUND_INIT :                FF18B8 C |  SOUND_INIT.CLEAR :          FF18EE C |
 SOUND_INIT.CLRRAM :         FF18C2 C |  SOUND_INIT.COPY :           FF1902 C |
 SOUND_INIT.WAIT :           FF18E4 C | *SOUND_PLAYSAMPLE :          FF1928 C |
 SOUND_PLAYSAMPLE.NOLP2 :    FF196C C |  SOUND_PLAYSAMPLE.WAIT :     FF1944 C |
*SOUND_SETPITCH :            FF19B2 C |  SOUND_SETPITCH.WAIT :       FF19C6 C |
*STANDBY :                        2 - |  STR_STATUS :                FF1E20 C |
*STR_TITLE :                 FF1E0A C | *SYSCD_ARGS_M :              A12010 - |
*SYSCD_ARGS_S :              A12020 - | *SYSCD_BUS :                 A12000 - |
*SYSCD_CDCHOST :             A12008 - | *SYSCD_CDCMODE :             A12004 - |
*SYSCD_COMM_M :              A1200E - | *SYSCD_COMM_S :              A1200F - |
*SYSCD_HINT :                A12006 - | *SYSCD_MEMORY :              A12003 - |
*SYSCD_PRGRAM :               20000 - | *SYSCD_STOPWTCH :            A12008 - |
*SYSCD_WORDRAM :             200000 - | *SYSMARS_ID :                A130EC - |
 SYSMARS_REG :               A15100 - |  SYSTEM_INIT :               FF0000 C |
 SYSTEM_INIT.CLRINPUT :      FF003C C |  SYSTEM_INIT.WAIT :          FF000C C |
 SYSTEM_INPUT :              FF00EC C |  SYSTEM_INPUT.EXIT :         FF011A C |
 SYSTEM_INPUT.FIND_ID :      FF01D6 C |  SYSTEM_INPUT.GET_ID :       FF01EC C |
 SYSTEM_INPUT.ID_0D :        FF0140 C |  SYSTEM_INPUT.LIST :         FF0120 C |
 SYSTEM_INPUT.OLDPAD :       FF019E C |  SYSTEM_INPUT.STEP_1 :       FF01F8 C |
 SYSTEM_INPUT.STEP_2 :       FF0204 C |  SYSTEM_INPUT.THIS_ONE :     FF0100 C |
*SYSTEM_RANDOM :             FF0082 C |  SYSTEM_SAVEINIT :           FF0210 C |
 SYSTEM_SAVEINIT.INITSAVE :  FF0224 C |  SYSTEM_SETINTS :            FF00A0 C |
 SYSTEM_SETINTS.NOHINT :     FF00C4 C |  SYSTEM_SETINTS.NOVINT :     FF00B2 C |
 SYSTEM_VSYNC :              FF00C6 C |  SYSTEM_VSYNC.INSIDE :       FF00DE C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - | *SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_EXRAM :                 200000 - | *SYS_IO :                    A10001 - |
*SYS_TMSS :                  A14000 - |  S_IRQ_BAD :                6000452 C |
 S_IRQ_CMD :                6000494 C |  S_IRQ_CUSTOM :             6001582 C |
 S_IRQ_CUSTOM.NO_REQUEST :  60015AA C |  S_IRQ_H :                  60004B0 C |
 S_IRQ_PWM :                6000458 C |  S_IRQ_PWM.EXIT :           6000484 C |
 S_IRQ_V :                  60004CC C |  S_IRQ_VRES :               60004E0 C |
 S_IRQ_VRES.MARS_RESET :    600051E C |  S_IRQ_VRES.MD_RESET :      60004EC C |
 S_IRQ_VRES.SH_WAIT :       60004F8 C |  S_IRQ_VRES.VRESLOOP :      6000526 C |
 TEST_MODEL :               6003FD0 C |  TEST_MODEL.FACE :          6004074 C |
 TEST_MODEL.MTRL :          60040C4 C |  TEST_MODEL.VERT :          6003FE4 C |
 TEST_MODEL.VRTX :          6004094 C | *TEXTR_MARSCITY :           2012EC0 C |
 TH :                      20000000 - | *TIME :                    21:55:29 - |
 TIMERCTL :                      30 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  VARNULLVRAM :                  7FF - |
 VAR_MOVESPD :                  400 - | *VBLK :                          80 - |
 VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
*VIDEO_AUTOMAP_VERT :        FF046A C |  VIDEO_AUTOMAP_VERT.XLOOP :  FF047A C |
 VIDEO_AUTOMAP_VERT.YLOOP :  FF048C C |  VIDEO_CLEAR :               FF030A C |
*VIDEO_COPY :                FF0718 C |  VIDEO_COPY.DMAW :           FF072C C |
 VIDEO_COPY.DMAWE :          FF0786 C |  VIDEO_FILL :                FF06A4 C |
 VIDEO_FILL.DMAW :           FF06B8 C |  VIDEO_FILL.DMAWE :          FF0700 C |
 VIDEO_INIT :                FF02C0 C |  VIDEO_INIT.CLRRAM :         FF02CA C |
 VIDEO_INIT.COPY :           FF0300 C | *VIDEO_INIT.EXIT :           FF02F4 C |
 VIDEO_INIT.LOOP :           FF02E6 C |  VIDEO_LOADART :             FF079E C |
 VIDEO_LOADMAP :             FF03A2 C |  VIDEO_LOADMAP.CONT :        FF03C8 C |
 VIDEO_LOADMAP.NODBLE :      FF03E8 C |  VIDEO_LOADMAP.NONULL :      FF03C6 C |
 VIDEO_LOADMAP.XLOOP :       FF03B8 C |  VIDEO_LOADMAP.YLOOP :       FF03AE C |
*VIDEO_LOADMAP_VERT :        FF03FA C |  VIDEO_LOADMAP_VERT.CONT :   FF042E C |
 VIDEO_LOADMAP_VERT.NODBLE : FF0450 C |  VIDEO_LOADMAP_VERT.NONULL : FF042C C |
*VIDEO_LOADMAP_VERT.OUTDBL : FF045A C |  VIDEO_LOADMAP_VERT.XLOOP :  FF0408 C |
 VIDEO_LOADMAP_VERT.YLOOP :  FF041A C |  VIDEO_LOADPAL :             FF0378 C |
 VIDEO_LOADPAL.LOOP :        FF039A C |  VIDEO_LOADPAL.OUTV :        FF0390 C |
 VIDEO_PRINT :               FF04D0 C |  VIDEO_PRINT.DONIBL :        FF05EA C |
 VIDEO_PRINT.EXIT :          FF055A C |  VIDEO_PRINT.ISBYTE :        FF0524 C |
 VIDEO_PRINT.ISLONG :        FF0548 C |  VIDEO_PRINT.ISWORD :        FF0536 C |
 VIDEO_PRINT.LNGLOOP :       FF05DA C |  VIDEO_PRINT.LOOP :          FF04E4 C |
 VIDEO_PRINT.LOWR :          FF05FA C |  VIDEO_PRINT.NEWJUMP :       FF04DE C |
 VIDEO_PRINT.NEXT :          FF0506 C |  VIDEO_PRINT.NEXTV :         FF0564 C |
 VIDEO_PRINT.NOTHING :       FF0606 C |  VIDEO_PRINT.PUTTEXT :       FF04F8 C |
 VIDEO_PRINT.SPECIAL :       FF050A C |  VIDEO_PRINT.VBYTE :         FF0596 C |
 VIDEO_PRINT.VLONG :         FF05E2 C |  VIDEO_PRINT.VWORD :         FF05B8 C |
 VIDEO_PRINTINIT :           FF04AC C |  VIDEO_RAMCODE :             FF07A4 C |
 VIDEO_RAMCODE.FROM_RAM :    FF0874 C |  VIDEO_RAMCODE.LOAD_ART :    FF07B4 C |
 VIDEO_RAMCODE.WAIT :        FF0826 C |  VIDEO_RAMCODE_E :           FF0884 C |
 VIDEO_UPDATE :              FF0358 C | *VIDEO_UPDATE.EXIT :         FF0376 C |
 VIDEO_UPDATE.LOOP :         FF036A C |  VID_PICKLAYER :             FF0608 C |
 VID_PICKLAYER.GOLYR :       FF0658 C |  VID_PICKLAYER.NOWD :        FF0642 C |
 VID_PICKLAYER.PLAWND :      FF0630 C |  VID_PICKLAYER.THISSZ :      FF0678 C |
 VID_PICKLAYER.THISSZJ :     FF06A0 C |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :              FF024E C |
 VIRQ_ON :                        8 - |  VRESINTCLR :                    14 - |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                  FF19E8 C |
 Z80_CPU :                   A00000 - |  Z80_END :                   FF1B56 C |
 Z80_RESET :                 A11200 - |  ZBANK :                       6000 - |
 ZPSG_CTRL :                   7F11 - |  ZSND_INIT :                    152 C |
*ZVDP_CTRL :                   7F04 - | *ZVDP_DATA :                   7F00 - |
 ZYM_CTRL_1 :                  4000 - | *ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - | *ZYM_DATA_2 :                  4003 - |
 Z_INIT :                        47 C |  Z_INIT.EXIT :                   A0 C |
 Z_INIT.LIST :                   CE C |  Z_INIT.MIDL :                   96 C |
 Z_INIT.MKLOOP :                 D6 C |  Z_INIT.NXTBNK :                 92 C |
 Z_INIT.REQUEST :                B8 C |  Z_INIT.RESTART :                E4 C |
 Z_INIT.TASK1 :                  DE C |  Z_INIT.TASK2 :                 123 C |
 Z_INIT.TASK3 :                 12F C |  Z_INIT.TASK4 :                 132 C |
 Z_INIT.ZLOOP :                  4A C |  Z_VINT :                       13E C |
 Z_VINT.NOPE :                  151 C |  _CCR :                    FFFFFE92 - |
 _DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
 _DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - |  _DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - |  _FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
 _FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
 _JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - |  _OVERWRITE :              24020000 - |
 _PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
 _SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
 _TOCR :                          7 - |  _VDPREG :                 20004100 - |

    931 symbols
    171 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 1/11/2021 21:55:29


  defined macros:
  ---------------

FINISH                                | STRUCT                               

      2 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 1/11/2021 21:55:29


  defined functions:
  ------------------

LOCATE                                | MAPSIZE                              
DOUBLEWORD                            |

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 1/11/2021 21:55:29


  codepages:
  ----------

STANDARD (0 changed characters)


0.10 seconds assembly time

   7077 lines source file
   7262 lines incl. macro expansions
      7 passes
      0 errors
      0 warnings
