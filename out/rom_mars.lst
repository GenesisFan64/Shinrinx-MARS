 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 6/29/2021 2:13:02


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT SHINRINX
       4/       0 :                     ; 
       5/       0 :                     ; Started on 16/01/2020
       6/       0 :                     ; +-----------------------------------------------------------------+
       7/       0 :                     
       8/       0 :                     		include	"system/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; AS Main settings
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     		!org 0				; Start at 0
(1)   11/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later
(1)   12/       0 :                     		padding		off		; Dont pad dc.b
(1)   13/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   14/       0 :                     		supmode 	on 		; Supervisor mode
(1)   15/       0 :                     		dottedstructs	off		; If needed
(1)   16/       0 :                     		page 		0
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ---------------------------------------------
(1)   20/       0 :                     ; Functions
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   24/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; for cells w/h use doubleword
(1)   25/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   26/       0 :                     
(1)   27/       0 :                     ; ====================================================================
(1)   28/       0 :                     ; ---------------------------------------------
(1)   29/       0 :                     ; Macros
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; -------------------------------------
(1)   33/       0 :                     ; Reserve memory section
(1)   34/       0 :                     ;
(1)   35/       0 :                     ; NOTE: This doesn't work on Z80
(1)   36/       0 :                     ; -------------------------------------
(1)   37/       0 :                     
(1)   38/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   39/       0 :                     GLBL_LASTPC	set *
(1)   40/       0 :                     		dephase
(1)   41/       0 :                     GLBL_LASTORG	set *
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     		endm
(1)   44/       0 :                     		
(1)   45/       0 :                     ; -------------------------------------
(1)   46/       0 :                     ; Finish
(1)   47/       0 :                     ; -------------------------------------
(1)   48/       0 :                     
(1)   49/       0 :                     finish		macro				; Then finish custom struct.
(1)   50/       0 :                     		!org GLBL_LASTORG
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; -------------------------------------
(1)   55/       0 :                     ; Custom ORG
(1)   56/       0 :                     ;
(1)   57/       0 :                     ; (from s2disasm)
(1)   58/       0 :                     ; -------------------------------------
(1)   59/       0 :                     
(1)   60/       0 : =$0                 paddingSoFar set 0
(1)   61/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   62/       0 :                     org macro address
(1)   63/       0 :                     	if notZ80(MOMCPU)
(1)   64/       0 :                     		if address < *
(1)   65/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   66/       0 :                     		elseif address > *
(1)   67/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   68/       0 :                     			!org address
(1)   69/       0 :                     		endif
(1)   70/       0 :                     	else
(1)   71/       0 :                     		if address < $
(1)   72/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   73/       0 :                     		else
(1)   74/       0 :                     			while address > $
(1)   75/       0 :                     				db 0
(1)   76/       0 :                     			endm
(1)   77/       0 :                     		endif
(1)   78/       0 :                     	endif
(1)   79/       0 :                         endm
(1)   80/       0 :                     
       9/       0 :                     		include	"system/md/const.asm"	; MD and MARS Variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/MARS shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; MD to MARS Task transfer settings
(1)    7/       0 : =$8                 MAX_MDTSKARG	equ 8			; MAX MD task arguments (FIXED)
(1)    8/       0 : =$10                MAX_MDTASKS	equ 16			; MAX requests from MD to here
(1)    9/       0 :                     
(1)   10/       0 :                     ; ====================================================================
(1)   11/       0 :                     ; ----------------------------------------------------------------
(1)   12/       0 :                     ; MD Sound
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$7                 MAX_PWMCHNL	equ	7
(1)   16/       0 :                     
(1)   17/       0 :                     ; 32X sound channel
(1)   18/       0 : (MACRO)             		struct 0
(1)   18/       0 : =$0                 GLBL_LASTPC     set *
(1)   18/       0 :                                     dephase
(1)   18/       0 : =$0                 GLBL_LASTORG    set *
(1)   18/       0 :                                     phase 0
(1)   19/       0 :                     mchnsnd_enbl	ds.l 1
(1)   20/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(1)   21/       8 :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(1)   22/       C :                     mchnsnd_start	ds.l 1
(1)   23/      10 :                     mchnsnd_end	ds.l 1
(1)   24/      14 :                     mchnsnd_loop	ds.l 1
(1)   25/      18 :                     mchnsnd_pitch	ds.l 1
(1)   26/      1C :                     mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(1)   27/      20 :                     mchnsnd_vol	ds.l 1
(1)   28/      24 :                     sizeof_pwm	ds.l 0
(1)   29/      24 : (MACRO)             		finish
(1)   29/       0 :                                     !org GLBL_LASTORG
(1)   29/       0 :                                     phase GLBL_LASTPC
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     ; ----------------------------------------------------------------
(1)   33/       0 :                     ; MD Video
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 :                     ; ------------------------------------------------
(1)   37/       0 :                     ; vdp_ctrl READ bits
(1)   38/       0 :                     ; ------------------------------------------------
(1)   39/       0 :                     
(1)   40/       0 : =$2                 bitHint		equ 2
(1)   41/       0 : =$3                 bitVint		equ 3
(1)   42/       0 : =$1                 bitDma		equ 1
(1)   43/       0 :                     
(1)   44/       0 :                     ; ------------------------------------------------
(1)   45/       0 :                     ; VDP register variables
(1)   46/       0 :                     ; ------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     ; Register $80
(1)   49/       0 : =$2                 HVStop		equ $02
(1)   50/       0 : =$10                HintEnbl	equ $10
(1)   51/       0 : =$1                 bitHVStop	equ 1
(1)   52/       0 : =$4                 bitHintEnbl	equ 4
(1)   53/       0 :                     
(1)   54/       0 :                     ; Register $81
(1)   55/       0 : =$40                DispEnbl 	equ $40
(1)   56/       0 : =$20                VintEnbl 	equ $20
(1)   57/       0 : =$10                DmaEnbl		equ $10
(1)   58/       0 : =$6                 bitDispEnbl	equ 6
(1)   59/       0 : =$5                 bitVintEnbl	equ 5
(1)   60/       0 : =$4                 bitDmaEnbl	equ 4
(1)   61/       0 : =$3                 bitV30		equ 3
(1)   62/       0 :                     
(1)   63/       0 :                     ; ====================================================================
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Contoller reading (call System_Input first)
(1)   66/       0 :                     ; --------------------------------------------------------
(1)   67/       0 :                     
(1)   68/       0 :                     ; structure is below
(1)   69/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   70/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   71/       0 :                     
(1)   72/       0 :                     ; read as full WORD (on_hold or on_press)
(1)   73/       0 : =$1                 JoyUp		equ $0001
(1)   74/       0 : =$2                 JoyDown		equ $0002
(1)   75/       0 : =$4                 JoyLeft		equ $0004
(1)   76/       0 : =$8                 JoyRight	equ $0008
(1)   77/       0 : =$10                JoyB		equ $0010
(1)   78/       0 : =$20                JoyC		equ $0020
(1)   79/       0 : =$40                JoyA		equ $0040
(1)   80/       0 : =$80                JoyStart	equ $0080
(1)   81/       0 : =$100               JoyZ		equ $0100
(1)   82/       0 : =$200               JoyY		equ $0200
(1)   83/       0 : =$400               JoyX		equ $0400
(1)   84/       0 : =$800               JoyMode		equ $0800
(1)   85/       0 :                     
(1)   86/       0 :                     ; right byte $00xx
(1)   87/       0 : =$0                 bitJoyUp	equ 0
(1)   88/       0 : =$1                 bitJoyDown	equ 1
(1)   89/       0 : =$2                 bitJoyLeft	equ 2
(1)   90/       0 : =$3                 bitJoyRight	equ 3
(1)   91/       0 : =$4                 bitJoyB		equ 4
(1)   92/       0 : =$5                 bitJoyC		equ 5
(1)   93/       0 : =$6                 bitJoyA		equ 6
(1)   94/       0 : =$7                 bitJoyStart	equ 7
(1)   95/       0 :                     
(1)   96/       0 :                     ; left byte $xx00
(1)   97/       0 : =$0                 bitJoyZ		equ 0
(1)   98/       0 : =$1                 bitJoyY		equ 1
(1)   99/       0 : =$2                 bitJoyX		equ 2
(1)  100/       0 : =$3                 bitJoyMode	equ 3
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; --------------------------------------------------------
(1)  104/       0 :                     ; Settings
(1)  105/       0 :                     ; --------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 : =$FFFF8800          MDRAM_START	equ $FFFF8800		; Start of working MD RAM (below it is free for CODE or decompression output)
(1)  108/       0 : =$800               MAX_MDERAM	equ $800		; MAX RAM for current screen mode (title,menu,or gameplay...)
(1)  109/       0 : =$7FF               varNullVram	equ $7FF		; Default Blank tile for some video routines
(1)  110/       0 :                     
(1)  111/       0 :                     ; ====================================================================
(1)  112/       0 :                     ; ----------------------------------------------------------------
(1)  113/       0 :                     ; Structures
(1)  114/       0 :                     ; ----------------------------------------------------------------
(1)  115/       0 :                     
(1)  116/       0 :                     ; Controller buffer data (after calling System_Input)
(1)  117/       0 : (MACRO)             		struct 0
(1)  117/       0 : =$0                 GLBL_LASTPC     set *
(1)  117/       0 :                                     dephase
(1)  117/       0 : =$0                 GLBL_LASTORG    set *
(1)  117/       0 :                                     phase 0
(1)  118/       0 :                     pad_id		ds.b 1			; Controller ID
(1)  119/       1 :                     pad_ver		ds.b 1			; Controller type/revision: (ex. 0-3button 1-6button)
(1)  120/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)  121/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)  122/       6 :                     sizeof_input	ds.l 0
(1)  123/       8 : (MACRO)             		finish
(1)  123/       0 :                                     !org GLBL_LASTORG
(1)  123/       0 :                                     phase GLBL_LASTPC
(1)  124/       0 :                     
(1)  125/       0 :                     ; ====================================================================
(1)  126/       0 :                     ; ----------------------------------------------------------------
(1)  127/       0 :                     ; System RAM
(1)  128/       0 :                     ; ----------------------------------------------------------------
(1)  129/       0 :                     
(1)  130/       0 : (MACRO)             		struct RAM_MdSystem
(1)  130/       0 : =$0                 GLBL_LASTPC     set *
(1)  130/       0 :                                     dephase
(1)  130/       0 : =$0                 GLBL_LASTORG    set *
(1)  130/FFFFFFFFFFFF91DE :                                     phase RAM_MDSYSTEM
(1)  131/FFFFFFFFFFFF91DE :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)  132/FFFFFFFFFFFF91F6 :                     RAM_SaveData	ds.b $200			; Save data cache (for SRAM)
(1)  133/FFFFFFFFFFFF93F6 :                     RAM_MdMarsTskM	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Queue task list for MASTER SH2
(1)  134/FFFFFFFFFFFF95F6 :                     RAM_MdMarsTskS	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Queue task list for SLAVE SH2
(1)  135/FFFFFFFFFFFF97F6 :                     RAM_MdMarsTsSgl	ds.l MAX_MDTSKARG		; Single task request for 32X, shared for both Mst and Slv
(1)  136/FFFFFFFFFFFF9816 :                     RAM_FrameCount	ds.l 1				; Global frame counter
(1)  137/FFFFFFFFFFFF981A :                     RAM_SysRandVal	ds.l 1				; Random value
(1)  138/FFFFFFFFFFFF981E :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)  139/FFFFFFFFFFFF9822 :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)  140/FFFFFFFFFFFF9826 :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  141/FFFFFFFFFFFF982C :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  142/FFFFFFFFFFFF9832 :                     RAM_MdMarsTCntM	ds.w 1				; Counter for MASTER CPU's task list
(1)  143/FFFFFFFFFFFF9834 :                     RAM_MdMarsTCntS	ds.w 1				; Counter for SLAVE CPU's task list
(1)  144/FFFFFFFFFFFF9836 :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)  145/FFFFFFFFFFFF9838 :                     sizeof_mdsys	ds.l 0
(1)  146/FFFFFFFFFFFF983A : (MACRO)             		finish
(1)  146/FFFFFFFFFFFF91DE :                                     !org GLBL_LASTORG
(1)  146/       0 :                                     phase GLBL_LASTPC
(1)  147/       0 :                     
(1)  148/       0 :                     ; ====================================================================
(1)  149/       0 :                     ; ----------------------------------------------------------------
(1)  150/       0 :                     ; Sound 68k RAM
(1)  151/       0 :                     ; ----------------------------------------------------------------
(1)  152/       0 :                     
(1)  153/       0 : (MACRO)             		struct RAM_MdSound
(1)  153/       0 : =$0                 GLBL_LASTPC     set *
(1)  153/       0 :                                     dephase
(1)  153/       0 : =$0                 GLBL_LASTORG    set *
(1)  153/FFFFFFFFFFFF9000 :                                     phase RAM_MDSOUND
(1)  154/FFFFFFFFFFFF9000 :                     RAM_Pwm_List	ds.b sizeof_pwm
(1)  155/FFFFFFFFFFFF9024 :                     RAM_SndSaveReg	ds.l 8
(1)  156/FFFFFFFFFFFF9044 :                     sizeof_mdsnd	ds.l 0
(1)  157/FFFFFFFFFFFF9044 : (MACRO)             		finish
(1)  157/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  157/       0 :                                     phase GLBL_LASTPC
(1)  158/       0 :                     		
(1)  159/       0 :                     ; ====================================================================
(1)  160/       0 :                     ; ----------------------------------------------------------------
(1)  161/       0 :                     ; Video RAM
(1)  162/       0 :                     ; ----------------------------------------------------------------
(1)  163/       0 :                     
(1)  164/       0 : (MACRO)             		struct RAM_MdVideo
(1)  164/       0 : =$0                 GLBL_LASTPC     set *
(1)  164/       0 :                                     dephase
(1)  164/       0 : =$0                 GLBL_LASTORG    set *
(1)  164/FFFFFFFFFFFF9044 :                                     phase RAM_MDVIDEO
(1)  165/FFFFFFFFFFFF9044 :                     RAM_VidPrntVram	ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  166/FFFFFFFFFFFF9046 :                     RAM_VidPrntList	ds.w 3*64		; Video_Print list: Address, Type
(1)  167/FFFFFFFFFFFF91C6 :                     RAM_VdpRegs	ds.b 24			; VDP Register cache
(1)  168/FFFFFFFFFFFF91DE :                     sizeof_mdvid	ds.l 0
(1)  169/FFFFFFFFFFFF91E0 : (MACRO)             		finish
(1)  169/FFFFFFFFFFFF9044 :                                     !org GLBL_LASTORG
(1)  169/       0 :                                     phase GLBL_LASTPC
(1)  170/       0 :                     
(1)  171/       0 :                     ; ====================================================================
(1)  172/       0 :                     ; ----------------------------------------------------------------
(1)  173/       0 :                     ; MD RAM
(1)  174/       0 :                     ;
(1)  175/       0 :                     ; NOTE: If using MCD Uses $FFFD00-$FFFDFF, and
(1)  176/       0 :                     ; stack point is $FFFD00
(1)  177/       0 :                     ; ----------------------------------------------------------------
(1)  178/       0 :                     
(1)  179/       0 : (MACRO)             		struct MDRAM_START
(1)  179/       0 : =$0                 GLBL_LASTPC     set *
(1)  179/       0 :                                     dephase
(1)  179/       0 : =$0                 GLBL_LASTORG    set *
(1)  179/FFFFFFFFFFFF8800 :                                     phase MDRAM_START
(1)  188/FFFFFFFFFFFF8800 :                     RAM_ModeBuff	ds.b MAX_MDERAM			; Second pass: sizes are set
(1)  189/FFFFFFFFFFFF9000 :                     RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  190/FFFFFFFFFFFF9044 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  191/FFFFFFFFFFFF91DE :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  192/FFFFFFFFFFFF9838 :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal
(1)  193/FFFFFFFFFFFF8C2E :                     sizeof_mdram	ds.l 0
(1)  195/FFFFFFFFFFFF8C30 :                     
(1)  199/FFFFFFFFFFFF8C30 : (MACRO)             		finish
(1)  199/FFFFFFFFFFFF8800 :                                     !org GLBL_LASTORG
(1)  199/       0 :                                     phase GLBL_LASTPC
(1)  200/       0 :                     
      10/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK 24bits, %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
(1)   40/       0 :                     ; ----------------------------------------------------------------
(1)   41/       0 :                     ; 32X registers
(1)   42/       0 :                     ; ----------------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID String: "MARS"
(1)   45/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   46/       0 :                     
      11/       0 :                     		include	"system/mars/map.asm"	; MARS map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot rom & system registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data (all 4MB), Locked if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer section
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; Cache-thru OR|value
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers, for MD: sysmars_reg
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer, first 240 are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite, $00-byte writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register
(1)   31/       0 : =$1                 intmask		equ	$01		; interrupts mask
(1)   32/       0 : =$2                 standby		equ	$02		; CMD interrupt request bit by MD side (slave|master)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports
(1)   45/       0 : =$22                comm2		equ	$22		; (If 2 CPUs either SH2 or 68K writes to
(1)   46/       0 : =$24                comm4		equ	$24		; the same location, it will freeze the
(1)   47/       0 : =$26                comm6		equ	$26		; system)
(1)   48/       0 : =$28                comm8		equ	$28		;
(1)   49/       0 : =$2A                comm10		equ	$2A		;
(1)   50/       0 : =$2C                comm12		equ	$2C		;
(1)   51/       0 : =$2E                comm14		equ	$2E		;
(1)   52/       0 : =$2F                comm15		equ	$2F		;
(1)   53/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   54/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   55/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   56/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   57/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   58/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   59/       0 :                     
(1)   60/       0 :                     ; _sysreg
(1)   61/       0 :                     ; adapter
(1)   62/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   63/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   64/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   65/       0 :                     ; framectl
(1)   66/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   67/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   68/       0 :                     ; vdpsts
(1)   69/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   70/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   71/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   72/       0 :                     ; intmask
(1)   73/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   74/       0 : =$4                 HIRQ_ON		equ	$04
(1)   75/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   76/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   77/       0 :                     
(1)   78/       0 :                     ; _vdpreg
(1)   79/       0 : =$0                 tvmode		equ	$00		; TV mode register
(1)   80/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode register
(1)   81/       0 : =$3                 shift		equ	$03		; Shift Control register
(1)   82/       0 : =$5                 filllength	equ	$05		; Auto Fill Length register
(1)   83/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   84/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   85/       0 : =$A                 vdpsts		equ	$0a		; VDP Status register
(1)   86/       0 : =$B                 framectl	equ	$0b		; Frame Buffer Control register
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   90/       0 :                     ; --------------------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     ; DMA Channel 0: General data transfer
(1)   93/       0 :                     ; DMA Channel 1: PWM exclusive
(1)   94/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)   95/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)   96/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)   97/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)   98/       0 : =$2                 _FRC_H		equ	$02		; free running counter High
(1)   99/       0 : =$3                 _FRC_L		equ	$03		; free running counter Low
(1)  100/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  101/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  102/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  103/       0 : =$7                 _TOCR		equ	$07		; timer output compare control register
(1)  104/       0 : =$FFFFFE92          _CCR:		equ	$FFFFFE92
(1)  105/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  106/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or LOW Result if read
(1)  107/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result, HIGH
(1)  108/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result, LOW
(1)  109/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  110/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  111/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  112/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  113/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  114/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  115/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  116/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  117/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  118/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  119/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  120/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  121/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  122/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  123/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  124/       0 :                     
      12/       0 :                     		
      13/       0 :                     ; ====================================================================
      14/       0 :                     ; ----------------------------------------------------------------
      15/       0 :                     ; Header
      16/       0 :                     ; ----------------------------------------------------------------
      17/       0 :                     
      18/       0 :                     		include	"system/head.asm"	; 32X Header and boot sequence
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEADER FOR 32X
(1)    4/       0 :                     ; 
(1)    5/       0 :                     ; These labels work even if the 32X isn't present
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point
(1)    9/       4 : 0000 03F0           		dc.l $3F0			; Entry point (always $3F0)
(1)   10/       8 : 0000 0948           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0948           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0948           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0948           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0948           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0948           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0948           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0948           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0948           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0948           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0948           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0948           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0948           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0948           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0948           		dc.l MD_ErrorEx	
(1)   25/      44 : 0000 0948           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0948           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0948           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0948           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0948           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0948           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0948           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0948           		dc.l MD_ErrorEx		
(1)   33/      64 : 0000 0948           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0948           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0948           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF 982C           		dc.l RAM_MdMarsHInt		; RAM jump for HBlank (JMP xxxx xxxx)
(1)   37/      74 : 0000 0948           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF 9826           		dc.l RAM_MdMarsVInt		; RAM jump for VBlank (JMP xxxx xxxx)
(1)   39/      7C : 0000 0948           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0948           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0948           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0948           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0948           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0948           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0948           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0948           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0948           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0948           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0948           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0948           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0948           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0948           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0948           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0948           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0948           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0948           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0948           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0948           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0948           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0948           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0948           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0948           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0948           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0948           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0948           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0948           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0948           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0948           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0948           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0948           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0948           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2021.SEP"
                    3230 3231 2E53 4550 
(1)   74/     120 : 5072 6F79 6563 746F 		dc.b "Proyecto Shinrinx ",$22,"Ciudad Mars",$22,"                 "
                    2053 6869 6E72 696E 
                    7820 2243 6975 6461 
                    6420 4D61 7273 2220 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5072 6F6A 6563 7420 		dc.b "Project Shinrinx ",$22,"Mars City",$22,"                    "
                    5368 696E 7269 6E78 
                    2022 4D61 7273 2043 
                    6974 7922 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0
(1)   80/     1A4 : 0018 D144           		dc.l ROM_END
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   83/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   84/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   85/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   86/     1BC :                     		align $1F0
(1)   87/     1F0 : 5520 2020 2020 2020 		dc.b "U               "
                    2020 2020 2020 2020 
(1)   88/     200 :                     
(1)   89/     200 :                     ; ====================================================================
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     ; Second header for 32X
(1)   92/     200 :                     ; 
(1)   93/     200 :                     ; These new jumps are for the 68K if the 32X is currently
(1)   94/     200 :                     ; active.
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   98/     206 : 4EF9 0088 0948      		jmp	($880000|MD_ErrBus).l			; Bus error
(1)   99/     20C : 4EF9 0088 0948      		jmp	($880000|MD_ErrAddr).l			; Address error
(1)  100/     212 : 4EF9 0088 0948      		jmp	($880000|MD_ErrIll).l			; ILLEGAL Instruction
(1)  101/     218 : 4EF9 0088 0948      		jmp	($880000|MD_ErrZDiv).l			; Divide by 0
(1)  102/     21E : 4EF9 0088 0948      		jmp	($880000|MD_ErrChk).l			; CHK Instruction
(1)  103/     224 : 4EF9 0088 0948      		jmp	($880000|MD_ErrTrapV).l			; TRAPV Instruction
(1)  104/     22A : 4EF9 0088 0948      		jmp	($880000|MD_ErrPrivl).l			; Privilege violation
(1)  105/     230 : 4EF9 0088 0948      		jmp	($880000|MD_Trace).l			; Trace
(1)  106/     236 : 4EF9 0088 0948      		jmp	($880000|MD_Line1010).l			; Line 1010 Emulator
(1)  107/     23C : 4EF9 0088 0948      		jmp	($880000|MD_Line1111).l			; Line 1111 Emulator
(1)  108/     242 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l			; Error exception
(1)  109/     248 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  110/     24E : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  111/     254 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  112/     25A : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l	
(1)  113/     260 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  114/     266 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  115/     26C : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  116/     272 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  117/     278 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  118/     27E : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  119/     284 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l
(1)  120/     28A : 4EF9 0088 0948      		jmp	($880000|MD_ErrorEx).l		
(1)  121/     290 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  122/     296 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     29C : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2A2 : 4EF9 FFFF 982C      		jmp	(RAM_MdMarsHInt).l			; RAM jump for HBlank (JMP xxxx xxxx)
(1)  125/     2A8 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2AE : 4EF9 FFFF 9826      		jmp	(RAM_MdMarsVInt).l			; RAM jump for VBlank (JMP xxxx xxxx)
(1)  127/     2B4 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2BA : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2C0 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2C6 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2CC : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2D2 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2D8 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2DE : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     2E4 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     2EA : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     2F0 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     2F6 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     2FC : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     302 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     308 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     30E : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     314 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     31A : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     320 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     326 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     32C : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     332 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     338 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     33E : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     344 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     34A : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     350 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     356 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     35C : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  156/     362 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  157/     368 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  158/     36E : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  159/     374 : 4EF9 0088 0948      		jmp	($880000|MD_ErrorTrap).l
(1)  160/     37A :                     
(1)  161/     37A :                     ; ----------------------------------------------------------------
(1)  162/     37A :                     
(1)  163/     37A :                     		align $3C0
(1)  164/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  165/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  166/     3D4 : 0010 BFC0           		dc.l MARS_RAMDATA			; Set to 0 if SH2 code points to ROM
(1)  167/     3D8 : 0000 0000           		dc.l 0					; Zero.
(1)  168/     3DC : 0000 6C10           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; Set to 4 if SH2 code points to ROM
(1)  169/     3E0 : 0600 0F5C           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 map area)
(1)  170/     3E4 : 0600 1108           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 map area)
(1)  171/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default vector table (vbr)
(1)  172/     3EC : 0600 0124           		dc.l SH2_Slave				; Slave SH2 default vector table (vbr)
(1)  173/     3F0 :                     		binclude "system/mars/data/security.bin"
(1)  174/     800 :                     
(1)  175/     800 :                     ; ====================================================================
(1)  176/     800 :                     ; ----------------------------------------------------------------
(1)  177/     800 :                     ; Entry point, this must be located at $3F0
(1)  178/     800 :                     ; 
(1)  179/     800 :                     ; After the 32X's internal initialization finishes,
(1)  180/     800 :                     ; It returns the following stuff:
(1)  181/     800 :                     ; 
(1)  182/     800 :                     ; d0: %h0000000 rsc000ti
(1)  183/     800 :                     ; 	h - Cold start / Hot Start
(1)  184/     800 :                     ; 	r - SDRAM Self Check pass or error
(1)  185/     800 :                     ; 	s - Security check pass or error
(1)  186/     800 :                     ; 	c - Checksum pass or error
(1)  187/     800 :                     ; 	t - TV mode pass or error
(1)  188/     800 :                     ; 	i - MARS ID pass or error
(1)  189/     800 :                     ; 
(1)  190/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  191/     800 :                     ; 	m - MARS TV mode
(1)  192/     800 :                     ; 	j - Country: Japan / Overseas
(1)  193/     800 :                     ; 	d - MD TV mode
(1)  194/     800 :                     ; 	k - DISK connected: Yes / No
(1)  195/     800 :                     ; 	v - Version
(1)  196/     800 :                     ; 
(1)  197/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  198/     800 :                     ; 	cc: Test passed
(1)  199/     800 :                     ; 	cs: Test failed
(1)  200/     800 :                     ; ----------------------------------------------------------------
(1)  201/     800 :                     
(1)  202/     800 :                     MARS_Entry:
(1)  203/     800 : 6500 012E           		bcs	.no_mars			; if Carry set, 32X is not present
(1)  204/     804 : 23FC 0000 0000 FFFF 		move.l	#0,(RAM_initflug).l		; Reset "INIT" flag
                    9822                
(1)  205/     80E : 0800 000F           		btst	#15,d0				; Soft reset?	
(1)  206/     812 : 676C                		beq.s	.init
(1)  207/     814 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5		; a5 - MARS register
(1)  208/     81A : 0815 0000           		btst.b	#0,adapter(a5)			; 32X enabled?
(1)  209/     81E : 6652                		bne	.adapterenable			; If yes, start booting
(1)  210/     820 : 2B7C 0000 0000 0028 		move.l	#0,comm8(a5)			; If not, we can't use 32X or something went wrong
(1)  211/     828 : 41FA 0020           		lea	.ramcode(pc),a0			; Copy the adapter-retry code to RAM
(1)  212/     82C : 43F9 00FF 0000      		lea	($FF0000).l,a1			; and jump there.
(1)  213/     832 : 22D8                		move.l	(a0)+,(a1)+
(1)  214/     834 : 22D8                		move.l	(a0)+,(a1)+
(1)  215/     836 : 22D8                		move.l	(a0)+,(a1)+
(1)  216/     838 : 22D8                		move.l	(a0)+,(a1)+
(1)  217/     83A : 22D8                		move.l	(a0)+,(a1)+
(1)  218/     83C : 22D8                		move.l	(a0)+,(a1)+
(1)  219/     83E : 22D8                		move.l	(a0)+,(a1)+
(1)  220/     840 : 22D8                		move.l	(a0)+,(a1)+
(1)  221/     842 : 41F9 00FF 0000      		lea	($FF0000).l,a0
(1)  222/     848 : 4ED0                		jmp	(a0)
(1)  223/     84A :                     .ramcode:
(1)  224/     84A : 1ABC 0001           		move.b	#1,adapter(a5)			; Enable adapter.
(1)  225/     84E : 41FA 000A           		lea	.restarticd(pc),a0		; JUMP to the following code in
(1)  226/     852 : D1FC 0088 0000      		adda.l	#$880000,a0			; the new 68k location
(1)  227/     858 : 4ED0                		jmp	(a0)
(1)  228/     85A :                     .restarticd:
(1)  229/     85A : 4BF9 00A1 0000      		lea	($A10000).l,a5			; a5 - MD's I/O area base
(1)  230/     860 : 287C FFFF FFC0      		move.l	#-64,a4				; a4 - $FFFFFF9C
(1)  231/     866 : 3E3C 0F3C           		move.w	#3900,d7			; d7 - loop this many times
(1)  232/     86A : 43F9 0088 06E4      		lea	($880000+$6E4),a1		; Jump to ?res_wait (check ICD_MARS.PRG for details)
(1)  233/     870 : 4ED1                		jmp	(a1)
(1)  234/     872 :                     .adapterenable:
(1)  235/     872 : 4BF9 00A1 5100      		lea	(sysmars_reg),a5
(1)  236/     878 : 0815 0001           		btst.b	#1,adapter(a5)			; SH2 Reset request?
(1)  237/     87C : 6640                		bne.s	.hotstart			; If not, we are on hotstart
(1)  238/     87E : 60DA                		bra.s	.restarticd
(1)  239/     880 :                     
(1)  240/     880 :                     ; ------------------------------------------------
(1)  241/     880 :                     ; Init
(1)  242/     880 :                     ; ------------------------------------------------
(1)  243/     880 :                     
(1)  244/     880 :                     .init:
(1)  245/     880 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  246/     884 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  247/     88A : 2B7C 3638 5550 002C 		move.l	#"68UP",comm12(a5)		; comm12: Report to SH2 that we are active.
(1)  248/     892 : 0CAD 4D5F 4F4B 0020 .wm:		cmp.l	#"M_OK",comm0(a5)		; SH2 Master active?
(1)  249/     89A : 66F6                		bne.s	.wm
(1)  250/     89C : 0CAD 535F 4F4B 0024 .ws:		cmp.l	#"S_OK",comm4(a5)		; SH2 Slave active?
(1)  251/     8A4 : 66F6                		bne.s	.ws
(1)  252/     8A6 : 7000                		moveq	#0,d0				; Reset comm values
(1)  253/     8A8 : 2B40 0020           		move.l	d0,comm0(a5)
(1)  254/     8AC : 2B40 0024           		move.l	d0,comm4(a5)
(1)  255/     8B0 : 2B40 002C           		move.l	d0,comm12(a5)
(1)  256/     8B4 : 23FC 494E 4954 FFFF 		move.l	#"INIT",(RAM_initflug).l	; Set "INIT" as our boot flag
                    9822                
(1)  257/     8BE :                     .hotstart:
(1)  258/     8BE : 0CB9 494E 4954 FFFF 		cmp.l	#"INIT",(RAM_initflug).l	; Did it write?
                    9822                
(1)  259/     8C8 : 66B6                		bne.s	.init				; If not, restart everything and try again.
(1)  260/     8CA :                     		
(1)  261/     8CA :                     	; Initialize Genesis
(1)  262/     8CA : 7000                		moveq	#0,d0				; Clear USP
(1)  263/     8CC : 2C40                		movea.l	d0,a6
(1)  264/     8CE : 4E66                		move.l	a6,usp
(1)  265/     8D0 : 3039 00C0 0004      .waitframe:	move.w	(vdp_ctrl).l,d0			; Wait a frame
(1)  266/     8D6 : 0800 0003           		btst	#bitVint,d0
(1)  267/     8DA : 67F4                		beq.s	.waitframe
(1)  268/     8DC : 23FC 8004 8144 00C0 		move.l	#$80048144,(vdp_ctrl).l		; Keep display
                    0004                
(1)  269/     8E6 : 41F9 00FF 0000      		lea	($FF0000),a0			; Clear RAM until $FFF000
(1)  270/     8EC : 303C 3BFF           		move.w	#($F000/4)-1,d0
(1)  271/     8F0 :                     .clrram:
(1)  272/     8F0 : 4298                		clr.l	(a0)+
(1)  273/     8F2 : 51C8 FFFC           		dbf	d0,.clrram
(1)  274/     8F6 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6			; Clear registers (using zeros from RAM)
(1)  275/     8FE :                     
(1)  276/     8FE :                     	; Transfer RAM-Common code
(1)  277/     8FE : 41FA 004A           		lea	MdRamCode(pc),a0		; Now copy ALL our 68k code to RAM, to prevent
(1)  278/     902 : 43F9 00FF 0000      		lea	($FF0000),a1			; BUS-fighthing the ROM area (speed-up purposes)
(1)  279/     908 : 303C 1B53           		move.w	#((MdRamCode_end-MdRamCode))-1,d0
(1)  280/     90C :                     .copyme:
(1)  281/     90C : 12D8                		move.b	(a0)+,(a1)+
(1)  282/     90E : 51C8 FFFC           		dbf	d0,.copyme
(1)  283/     912 : 4EB9 00FF 0000      		jsr	(Sound_init).l
(1)  284/     918 : 4EB9 00FF 01AE      		jsr	(Video_init).l
(1)  285/     91E : 4EB9 00FF 1786      		jsr	(System_Init).l
(1)  286/     924 : 203C 0000 4240      		move.l	#Default_Boot,d0
(1)  287/     92A : 4EF9 00FF 19B6      		jmp	(System_JumpRamCode).l
(1)  288/     930 :                     
(1)  289/     930 :                     ; ====================================================================
(1)  290/     930 :                     ; ----------------------------------------------------------------
(1)  291/     930 :                     ; If 32X is not detected... 
(1)  292/     930 :                     ; 
(1)  293/     930 :                     ; This only works in emulators, though.
(1)  294/     930 :                     ; ----------------------------------------------------------------
(1)  295/     930 :                     
(1)  296/     930 :                     .no_mars:
(1)  297/     930 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  298/     934 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  299/     93E : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l		; Write blue
(1)  300/     946 : 60FE                		bra.s	*				; Infinite loop.
(1)  301/     948 :                     
(1)  302/     948 :                     ; ====================================================================
(1)  303/     948 :                     ; ----------------------------------------------------------------
(1)  304/     948 :                     ; Error traps
(1)  305/     948 :                     ; ----------------------------------------------------------------
(1)  306/     948 :                     
(1)  307/     948 :                     MD_ErrBus:		; Bus error
(1)  308/     948 :                     MD_ErrAddr:		; Address error
(1)  309/     948 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  310/     948 :                     MD_ErrZDiv:		; Divide by 0
(1)  311/     948 :                     MD_ErrChk:		; CHK Instruction
(1)  312/     948 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  313/     948 :                     MD_ErrPrivl:		; Privilege violation
(1)  314/     948 :                     MD_Trace:		; Trace
(1)  315/     948 :                     MD_Line1010:		; Line 1010 Emulator
(1)  316/     948 :                     MD_Line1111:		; Line 1111 Emulator
(1)  317/     948 :                     MD_ErrorEx:		; Error exception
(1)  318/     948 :                     MD_ErrorTrap:
(1)  319/     948 : 4E73                		rte
(1)  320/     94A :                     
      19/     94A :                     
      20/     94A :                     ; ====================================================================
      21/     94A :                     ; --------------------------------------------------------
      22/     94A :                     ; All purpose 68k stored on RAM
      23/     94A :                     ; --------------------------------------------------------
      24/     94A :                     
      25/     94A :                     MdRamCode:
      26/  FF0000 :                     		phase $FF0000
      27/  FF0000 :                     minfo_ram_s:
      28/  FF0000 :                     		include	"system/md/sound.asm"
(1)    1/  FF0000 :                     ; ====================================================================
(1)    2/  FF0000 :                     ; ----------------------------------------------------------------
(1)    3/  FF0000 :                     ; MD Sound
(1)    4/  FF0000 :                     ; ----------------------------------------------------------------
(1)    5/  FF0000 :                     
(1)    6/  FF0000 :                     ; --------------------------------------------------------
(1)    7/  FF0000 :                     ; Init Sound
(1)    8/  FF0000 :                     ; 
(1)    9/  FF0000 :                     ; Uses:
(1)   10/  FF0000 :                     ; a0-a1,d0-d1
(1)   11/  FF0000 :                     ; --------------------------------------------------------
(1)   12/  FF0000 :                     
(1)   13/  FF0000 :                     ; 		align $100				; (GENS emulator only)
(1)   14/  FF0000 :                     Sound_Init:
(1)   15/  FF0000 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   16/  FF0008 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   17/  FF0010 :                     .wait:
(1)   18/  FF0010 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   19/  FF0018 : 66F6                		bne.s	.wait
(1)   20/  FF001A : 41F9 00A0 0000      		lea	(z80_cpu).l,a0
(1)   21/  FF0020 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   22/  FF0024 : 7200                		moveq	#0,d1
(1)   23/  FF0026 :                     .cleanup:
(1)   24/  FF0026 : 10C1                		move.b	d1,(a0)+
(1)   25/  FF0028 : 51C8 FFFC           		dbf	d0,.cleanup
(1)   26/  FF002C : 41F9 0088 2500      		lea	(Z80_CODE|$880000).l,a0		; a0 - Z80 code (on $880000 area)
(1)   27/  FF0032 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 area
(1)   28/  FF0038 : 303C 1D3F           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   29/  FF003C :                     .copy:
(1)   30/  FF003C : 12D8                		move.b	(a0)+,(a1)+
(1)   31/  FF003E : 51C8 FFFC           		dbf	d0,.copy
(1)   32/  FF0042 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   33/  FF004A : 4E71                		nop 
(1)   34/  FF004C : 4E71                		nop 
(1)   35/  FF004E : 4E71                		nop 
(1)   36/  FF0050 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   37/  FF0058 : 4E75                		rts
(1)   38/  FF005A :                     
(1)   39/  FF005A :                     ; ; --------------------------------------------------------
(1)   40/  FF005A :                     ; ; Routine to check if Z80 wants something from here
(1)   41/  FF005A :                     ; ;
(1)   42/  FF005A :                     ; ; Call this on VBlank only.
(1)   43/  FF005A :                     ; ; --------------------------------------------------------
(1)   44/  FF005A :                     ;
(1)   45/  FF005A :                     ; Sound_Update:
(1)   46/  FF005A :                     ; 		rts
(1)   47/  FF005A :                     
(1)   48/  FF005A :                     ; ====================================================================
(1)   49/  FF005A :                     ; ----------------------------------------------------------------
(1)   50/  FF005A :                     ; Subroutines
(1)   51/  FF005A :                     ; ----------------------------------------------------------------
(1)   52/  FF005A :                     
(1)   53/  FF005A :                     ; --------------------------------------------------------
(1)   54/  FF005A :                     ; Sound_DMA_Pause
(1)   55/  FF005A :                     ; 
(1)   56/  FF005A :                     ; Call this before doing any DMA task
(1)   57/  FF005A :                     ; --------------------------------------------------------
(1)   58/  FF005A :                     
(1)   59/  FF005A :                     Sound_DMA_Pause:
(1)   60/  FF005A : 40E7                		move.w	sr,-(sp)
(1)   61/  FF005C : 007C 0700           		or.w	#$700,sr
(1)   62/  FF0060 :                     .retry:
(1)   63/  FF0060 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   64/  FF0068 :                     .wait:
(1)   65/  FF0068 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)   66/  FF0070 : 66F6                		bne.s	.wait
(1)   67/  FF0072 : 1E39 00A0 002E      		move.b	(z80_cpu+commZRomRd),d7		; Get mid-read bit
(1)   68/  FF0078 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Resume Z80
(1)   69/  FF0080 : 4A07                		tst.b	d7
(1)   70/  FF0082 : 6708                		beq.s	.safe
(1)   71/  FF0084 : 7E44                		moveq	#68,d7
(1)   72/  FF0086 : 51CF FFFE           		dbf	d7,*
(1)   73/  FF008A : 60D4                		bra.s	.retry
(1)   74/  FF008C :                     .safe:
(1)   75/  FF008C : 13FC 0001 00A0 002D 		move.b	#1,(z80_cpu+commZRomBlk)	; Block flag for Z80
(1)   76/  FF0094 : 46DF                		move.w	(sp)+,sr
(1)   77/  FF0096 : 4E75                		rts
(1)   78/  FF0098 :                     
(1)   79/  FF0098 :                     ; --------------------------------------------------------
(1)   80/  FF0098 :                     ; Sound_DMA_Resume
(1)   81/  FF0098 :                     ; 
(1)   82/  FF0098 :                     ; Call this after finishing DMA
(1)   83/  FF0098 :                     ; --------------------------------------------------------
(1)   84/  FF0098 :                     
(1)   85/  FF0098 :                     Sound_DMA_Resume:
(1)   86/  FF0098 : 40E7                		move.w	sr,-(sp)
(1)   87/  FF009A : 007C 0700           		or.w	#$700,sr
(1)   88/  FF009E : 617A                		bsr	sndLockZ80
(1)   89/  FF00A0 : 13FC 0000 00A0 002D 		move.b	#0,(z80_cpu+commZRomBlk)
(1)   90/  FF00A8 : 6100 0084           		bsr	sndUnlockZ80
(1)   91/  FF00AC : 46DF                		move.w	(sp)+,sr
(1)   92/  FF00AE : 4E75                		rts
(1)   93/  FF00B0 :                     
(1)   94/  FF00B0 :                     ; --------------------------------------------------------
(1)   95/  FF00B0 :                     ; Sound_Request_Word
(1)   96/  FF00B0 :                     ; 
(1)   97/  FF00B0 :                     ; d0    - request id
(1)   98/  FF00B0 :                     ; d1    - argument
(1)   99/  FF00B0 :                     ; --------------------------------------------------------
(1)  100/  FF00B0 :                     
(1)  101/  FF00B0 :                     Sound_Request:
(1)  102/  FF00B0 : 6100 0088           		bsr	sndReq_Enter
(1)  103/  FF00B4 : 3E00                		move.w	d0,d7
(1)  104/  FF00B6 : 6100 00CE           		bsr	sndReq_scmd
(1)  105/  FF00BA : 2E01                		move.l	d1,d7
(1)  106/  FF00BC : 6100 00DE           		bsr	sndReq_sword
(1)  107/  FF00C0 : 6000 00AE           		bra 	sndReq_Exit
(1)  108/  FF00C4 :                     
(1)  109/  FF00C4 :                     ; --------------------------------------------------------
(1)  110/  FF00C4 :                     ; SoundReq_SetTrack
(1)  111/  FF00C4 :                     ; 
(1)  112/  FF00C4 :                     ; d0 - Pattern data pointer
(1)  113/  FF00C4 :                     ; d1 - Block data pointer
(1)  114/  FF00C4 :                     ; d2 - Instrument data pointer
(1)  115/  FF00C4 :                     ; d3 - Ticks (Tempo is set separately)
(1)  116/  FF00C4 :                     ; d4 - Slot (0-2)
(1)  117/  FF00C4 :                     ; --------------------------------------------------------
(1)  118/  FF00C4 :                     
(1)  119/  FF00C4 :                     SoundReq_SetTrack:
(1)  120/  FF00C4 : 6174                		bsr	sndReq_Enter
(1)  121/  FF00C6 : 3E3C 0000           		move.w	#$00,d7			; Command $00
(1)  122/  FF00CA : 6100 00BA           		bsr	sndReq_scmd
(1)  123/  FF00CE : 1E04                		move.b	d4,d7			; d4 - Slot
(1)  124/  FF00D0 : 6100 00CE           		bsr	sndReq_sbyte
(1)  125/  FF00D4 : 1E03                		move.b	d3,d7			; d3 - Ticks
(1)  126/  FF00D6 : 6100 00C8           		bsr	sndReq_sbyte
(1)  127/  FF00DA : 2E00                		move.l	d0,d7			; d0 - Patt data point
(1)  128/  FF00DC : 6100 00BA           		bsr	sndReq_saddr
(1)  129/  FF00E0 : 2E01                		move.l	d1,d7			; d1 - Block data point
(1)  130/  FF00E2 : 6100 00B4           		bsr	sndReq_saddr
(1)  131/  FF00E6 : 2E02                		move.l	d2,d7			; d2 - Intrument data
(1)  132/  FF00E8 : 6100 00AE           		bsr	sndReq_saddr
(1)  133/  FF00EC : 6000 0082           		bra 	sndReq_Exit
(1)  134/  FF00F0 :                     		
(1)  135/  FF00F0 :                     ; --------------------------------------------------------
(1)  136/  FF00F0 :                     ; SoundReq_SetSample
(1)  137/  FF00F0 :                     ; 
(1)  138/  FF00F0 :                     ; d0 - Sample pointer
(1)  139/  FF00F0 :                     ; d1 - length
(1)  140/  FF00F0 :                     ; d2 - loop point
(1)  141/  FF00F0 :                     ; d3 - Pitch ($01.00)
(1)  142/  FF00F0 :                     ; d4 - Flags (%00l l-loop enable)
(1)  143/  FF00F0 :                     ; --------------------------------------------------------
(1)  144/  FF00F0 :                     
(1)  145/  FF00F0 :                     SoundReq_SetSample:
(1)  146/  FF00F0 : 6148                		bsr	sndReq_Enter
(1)  147/  FF00F2 : 3E3C 0021           		move.w	#$21,d7			; Command $21
(1)  148/  FF00F6 : 6100 008E           		bsr	sndReq_scmd
(1)  149/  FF00FA : 2E00                		move.l	d0,d7
(1)  150/  FF00FC : 6100 009A           		bsr	sndReq_saddr
(1)  151/  FF0100 : 2E01                		move.l	d1,d7
(1)  152/  FF0102 : 6100 0094           		bsr	sndReq_saddr
(1)  153/  FF0106 : 2E02                		move.l	d2,d7
(1)  154/  FF0108 : 6100 008E           		bsr	sndReq_saddr
(1)  155/  FF010C : 2E03                		move.l	d3,d7
(1)  156/  FF010E : 6100 008C           		bsr	sndReq_sword
(1)  157/  FF0112 : 2E04                		move.l	d4,d7
(1)  158/  FF0114 : 6100 008A           		bsr	sndReq_sbyte
(1)  159/  FF0118 : 6056                		bra 	sndReq_Exit
(1)  160/  FF011A :                     
(1)  161/  FF011A :                     ; ------------------------------------------------
(1)  162/  FF011A :                     ; Lock Z80, get bus
(1)  163/  FF011A :                     ; ------------------------------------------------
(1)  164/  FF011A :                     
(1)  165/  FF011A :                     sndLockZ80:
(1)  166/  FF011A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)  167/  FF0122 :                     .wait:
(1)  168/  FF0122 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)  169/  FF012A : 66F6                		bne.s	.wait
(1)  170/  FF012C : 4E75                		rts
(1)  171/  FF012E :                     		
(1)  172/  FF012E :                     ; ------------------------------------------------
(1)  173/  FF012E :                     ; Unlock Z80, return bus
(1)  174/  FF012E :                     ; ------------------------------------------------
(1)  175/  FF012E :                     
(1)  176/  FF012E :                     sndUnlockZ80:
(1)  177/  FF012E : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  178/  FF0136 : 4E75                		rts
(1)  179/  FF0138 :                     sndSendCmd:
(1)  180/  FF0138 : 4E75                		rts
(1)  181/  FF013A :                     
(1)  182/  FF013A :                     ; ------------------------------------------------
(1)  183/  FF013A :                     ; 68k-to-z80 Sound request
(1)  184/  FF013A :                     ; enter/exit routines
(1)  185/  FF013A :                     ; ------------------------------------------------
(1)  186/  FF013A :                     
(1)  187/  FF013A :                     sndReq_Enter:
(1)  188/  FF013A : 48F9 60C0 FFFF 9024 		movem.l	d6-d7/a5-a6,(RAM_SndSaveReg).l
(1)  189/  FF0142 : 7C00                		moveq	#0,d6
(1)  190/  FF0144 : 40C6                		move.w	sr,d6
(1)  191/  FF0146 : 4846                		swap	d6
(1)  192/  FF0148 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)  193/  FF0150 : 007C 0700           		or.w	#$0700,sr			; disable ints
(1)  194/  FF0154 : 4BF9 00A0 002C      		lea	(z80_cpu+commZWrite),a5		; a5 - commZWrite
(1)  195/  FF015A : 4DF9 00A0 1D00      		lea	(z80_cpu+commZfifo),a6		; a6 - fifo command list
(1)  196/  FF0160 :                     .wait:
(1)  197/  FF0160 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  198/  FF0168 : 66F6                		bne.s	.wait
(1)  199/  FF016A : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  200/  FF016C : 4886                		ext.w	d6				; extend to 16 bits
(1)  201/  FF016E : 4E75                		rts
(1)  202/  FF0170 :                     ; JUMP ONLY
(1)  203/  FF0170 :                     sndReq_Exit:
(1)  204/  FF0170 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  205/  FF0178 : 4846                		swap	d6
(1)  206/  FF017A : 46C6                		move.w	d6,sr
(1)  207/  FF017C : 4CF9 60C0 FFFF 9024 		movem.l	(RAM_SndSaveReg).l,d6-d7/a5-a6
(1)  208/  FF0184 : 4E75                		rts
(1)  209/  FF0186 :                     		
(1)  210/  FF0186 :                     ; ------------------------------------------------
(1)  211/  FF0186 :                     ; Send request id and arguments
(1)  212/  FF0186 :                     ;
(1)  213/  FF0186 :                     ; Input:
(1)  214/  FF0186 :                     ; d7 - byte to write
(1)  215/  FF0186 :                     ; d6 - index pointer
(1)  216/  FF0186 :                     ; a5 - commZWrite, update index
(1)  217/  FF0186 :                     ; a6 - commZfifo command list
(1)  218/  FF0186 :                     ; 
(1)  219/  FF0186 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  220/  FF0186 :                     ; ------------------------------------------------
(1)  221/  FF0186 :                     
(1)  222/  FF0186 :                     sndReq_scmd:
(1)  223/  FF0186 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  224/  FF018C : 5206                		addq.b	#1,d6				; next fifo pos
(1)  225/  FF018E : 0206 003F           		andi.b	#$3F,d6
(1)  226/  FF0192 : 600C                		bra.s	sndReq_sbyte
(1)  227/  FF0194 :                     sndReq_slong:
(1)  228/  FF0194 : 610A                		bsr	sndReq_sbyte
(1)  229/  FF0196 : E09F                		ror.l	#8,d7
(1)  230/  FF0198 :                     sndReq_saddr:
(1)  231/  FF0198 : 6106                		bsr	sndReq_sbyte
(1)  232/  FF019A : E09F                		ror.l	#8,d7
(1)  233/  FF019C :                     sndReq_sword:
(1)  234/  FF019C : 6102                		bsr	sndReq_sbyte
(1)  235/  FF019E : E09F                		ror.l	#8,d7
(1)  236/  FF01A0 :                     sndReq_sbyte:
(1)  237/  FF01A0 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  238/  FF01A4 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  239/  FF01A6 : 0206 003F           		andi.b	#$3F,d6
(1)  240/  FF01AA : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  241/  FF01AC : 4E75                		rts
(1)  242/  FF01AE :                     
      29/  FF01AE :                     		include	"system/md/video.asm"
(1)    1/  FF01AE :                     ; ====================================================================
(1)    2/  FF01AE :                     ; ----------------------------------------------------------------
(1)    3/  FF01AE :                     ; MD Video
(1)    4/  FF01AE :                     ; ----------------------------------------------------------------
(1)    5/  FF01AE :                     
(1)    6/  FF01AE :                     ; --------------------------------------------------------
(1)    7/  FF01AE :                     ; Init Video
(1)    8/  FF01AE :                     ; 
(1)    9/  FF01AE :                     ; Uses:
(1)   10/  FF01AE :                     ; a0-a2,d0-d1
(1)   11/  FF01AE :                     ; --------------------------------------------------------
(1)   12/  FF01AE :                     
(1)   13/  FF01AE :                     Video_Init:		
(1)   14/  FF01AE : 41F8 9044           		lea	(RAM_MdVideo),a0	; Clear RAM
(1)   15/  FF01B2 : 7000                		moveq	#0,d0
(1)   16/  FF01B4 : 323C 0199           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d1
(1)   17/  FF01B8 :                     .clrram:
(1)   18/  FF01B8 : 10C0                		move.b	d0,(a0)+
(1)   19/  FF01BA : 51C9 FFFC           		dbf	d1,.clrram
(1)   20/  FF01BE :                     
(1)   21/  FF01BE : 41FA 0592           		lea	list_vdpregs(pc),a0	; Init registers
(1)   22/  FF01C2 : 43F8 91C6           		lea	(RAM_VdpRegs).w,a1
(1)   23/  FF01C6 : 45F9 00C0 0004      		lea	(vdp_ctrl),a2
(1)   24/  FF01CC : 303C 8000           		move.w	#$8000,d0
(1)   25/  FF01D0 : 323C 0012           		move.w	#19-1,d1
(1)   26/  FF01D4 :                     .loop:
(1)   27/  FF01D4 : 1018                		move.b	(a0)+,d0
(1)   28/  FF01D6 : 12C0                		move.b	d0,(a1)+
(1)   29/  FF01D8 : 3480                		move.w	d0,(a2)
(1)   30/  FF01DA : D07C 0100           		add.w	#$100,d0
(1)   31/  FF01DE : 51C9 FFF4           		dbf	d1,.loop
(1)   32/  FF01E2 :                     .exit:
(1)   33/  FF01E2 : 4E75                		rts
(1)   34/  FF01E4 :                     
(1)   35/  FF01E4 :                     ; ====================================================================
(1)   36/  FF01E4 :                     ; ----------------------------------------------------------------
(1)   37/  FF01E4 :                     ; Video subroutines
(1)   38/  FF01E4 :                     ; ----------------------------------------------------------------
(1)   39/  FF01E4 :                     
(1)   40/  FF01E4 :                     ; --------------------------------------------------------
(1)   41/  FF01E4 :                     ; Video_Clear
(1)   42/  FF01E4 :                     ; 
(1)   43/  FF01E4 :                     ; Clear all video data
(1)   44/  FF01E4 :                     ; --------------------------------------------------------
(1)   45/  FF01E4 :                     
(1)   46/  FF01E4 :                     Video_Clear:
(1)   47/  FF01E4 : 303C 0000           		move.w	#0,d0			; Clear until $57F
(1)   48/  FF01E8 : 323C AFE0           		move.w	#$57F*$20,d1
(1)   49/  FF01EC : 343C 0000           		move.w	#0,d2
(1)   50/  FF01F0 : 6100 038C           		bsr	Video_Fill
(1)   51/  FF01F4 : 323C 0FFF           		move.w	#$FFF,d1		; FG/BG size
(1)   52/  FF01F8 : 1439 FFFF 91C8      		move.b	(RAM_VdpRegs+2).l,d2	; FG
(1)   53/  FF01FE : 0242 0038           		andi.w	#%111000,d2
(1)   54/  FF0202 : E14A                		lsl.w	#8,d2
(1)   55/  FF0204 : E54A                		lsl.w	#2,d2
(1)   56/  FF0206 : 6100 0376           		bsr	Video_Fill
(1)   57/  FF020A : 1439 FFFF 91C9      		move.b	(RAM_VdpRegs+3).l,d2	; BG
(1)   58/  FF0210 : 0242 0007           		andi.w	#%000111,d2
(1)   59/  FF0214 : E14A                		lsl.w	#8,d2
(1)   60/  FF0216 : EB4A                		lsl.w	#5,d2
(1)   61/  FF0218 : 6100 0364           		bsr	Video_Fill	
(1)   62/  FF021C : 323C 0FFF           		move.w	#$FFF,d1		; WD Size
(1)   63/  FF0220 : 1439 FFFF 91CA      		move.b	(RAM_VdpRegs+4).l,d2	; Window
(1)   64/  FF0226 : 0242 003E           		andi.w	#%111110,d2
(1)   65/  FF022A : E14A                		lsl.w	#8,d2
(1)   66/  FF022C : E54A                		lsl.w	#2,d2
(1)   67/  FF022E : 6000 034E           		bra	Video_Fill
(1)   68/  FF0232 :                     		
(1)   69/  FF0232 :                     ; ---------------------------------
(1)   70/  FF0232 :                     ; Video_Update
(1)   71/  FF0232 :                     ; 
(1)   72/  FF0232 :                     ; Copy our RAM reg settings to
(1)   73/  FF0232 :                     ; VDP from $80 to $90
(1)   74/  FF0232 :                     ; 
(1)   75/  FF0232 :                     ; Uses:
(1)   76/  FF0232 :                     ; d4-d5,a4-a5
(1)   77/  FF0232 :                     ; ---------------------------------
(1)   78/  FF0232 :                     
(1)   79/  FF0232 :                     Video_Update:
(1)   80/  FF0232 : 49F8 91C6           		lea	(RAM_VdpRegs).w,a4
(1)   81/  FF0236 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)   82/  FF023C : 383C 8000           		move.w	#$8000,d4
(1)   83/  FF0240 : 3A3C 0010           		move.w	#17-1,d5
(1)   84/  FF0244 :                     .loop:
(1)   85/  FF0244 : 181C                		move.b	(a4)+,d4
(1)   86/  FF0246 : 3A84                		move.w	d4,(a5)
(1)   87/  FF0248 : D87C 0100           		add.w	#$100,d4
(1)   88/  FF024C : 51CD FFF6           		dbf	d5,.loop
(1)   89/  FF0250 :                     .exit:
(1)   90/  FF0250 : 4E75                		rts
(1)   91/  FF0252 :                     		
(1)   92/  FF0252 :                     ; --------------------------------------------------------
(1)   93/  FF0252 :                     ; Video_LoadPal
(1)   94/  FF0252 :                     ; Load palette to VDP directly, waits VBLANK
(1)   95/  FF0252 :                     ; 
(1)   96/  FF0252 :                     ; Input:
(1)   97/  FF0252 :                     ; a0 - Palette data
(1)   98/  FF0252 :                     ; d0 - Start at
(1)   99/  FF0252 :                     ; d1 - Num of colors - 1
(1)  100/  FF0252 :                     ; 
(1)  101/  FF0252 :                     ; Uses:
(1)  102/  FF0252 :                     ; a4,d4
(1)  103/  FF0252 :                     ; 
(1)  104/  FF0252 :                     ; Note:
(1)  105/  FF0252 :                     ; It will show dots on screen
(1)  106/  FF0252 :                     ; --------------------------------------------------------
(1)  107/  FF0252 :                     
(1)  108/  FF0252 :                     Video_LoadPal:
(1)  109/  FF0252 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  110/  FF0258 : 7800                		moveq	#0,d4
(1)  111/  FF025A : 3800                		move.w	d0,d4
(1)  112/  FF025C : D844                		add.w	d4,d4
(1)  113/  FF025E : 0044 C000           		ori.w	#$C000,d4
(1)  114/  FF0262 : 4844                		swap	d4
(1)  115/  FF0264 : 2944 0004           		move.l	d4,4(a4)
(1)  116/  FF0268 : 3801                		move.w	d1,d4
(1)  117/  FF026A : 3A2C 0004           .outv: 		move.w	4(a4),d5
(1)  118/  FF026E : 0805 0003           		btst	#bitVint,d5
(1)  119/  FF0272 : 67F6                		beq.s	.outv
(1)  120/  FF0274 :                     .loop:
(1)  121/  FF0274 : 3898                		move.w	(a0)+,(a4)
(1)  122/  FF0276 : 51CC FFFC           		dbf	d4,.loop
(1)  123/  FF027A : 4E75                		rts
(1)  124/  FF027C :                     		
(1)  125/  FF027C :                     ; --------------------------------------------------------
(1)  126/  FF027C :                     ; Video_LoadMap
(1)  127/  FF027C :                     ; 
(1)  128/  FF027C :                     ; Load map data, Horizontal order
(1)  129/  FF027C :                     ; 
(1)  130/  FF027C :                     ; a0 - Map data
(1)  131/  FF027C :                     ; d0 | LONG - 00|Layer|X|Y, locate(lyr,x,y)  
(1)  132/  FF027C :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  133/  FF027C :                     ; d2 | WORD - VRAM
(1)  134/  FF027C :                     
(1)  135/  FF027C :                     ; Uses:
(1)  136/  FF027C :                     ; a4-a5,d4-d7
(1)  137/  FF027C :                     ; --------------------------------------------------------
(1)  138/  FF027C :                     
(1)  139/  FF027C :                     Video_LoadMap:
(1)  140/  FF027C : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  141/  FF0282 : 6100 025E           		bsr	vid_PickLayer
(1)  142/  FF0286 : 3A01                		move.w	d1,d5		; Start here
(1)  143/  FF0288 :                     .yloop:
(1)  144/  FF0288 : 4845                		swap	d5
(1)  145/  FF028A : 2944 0004           		move.l	d4,4(a4)
(1)  146/  FF028E : 2E01                		move.l	d1,d7
(1)  147/  FF0290 : 4847                		swap	d7
(1)  148/  FF0292 :                     .xloop:
(1)  149/  FF0292 : 3A18                		move.w	(a0)+,d5
(1)  150/  FF0294 : BA7C FFFF           		cmp.w	#-1,d5
(1)  151/  FF0298 : 6606                		bne.s	.nonull
(1)  152/  FF029A : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  153/  FF029E : 6002                		bra.s	.cont
(1)  154/  FF02A0 :                     .nonull:
(1)  155/  FF02A0 : DA42                		add.w	d2,d5
(1)  156/  FF02A2 :                     .cont:
(1)  157/  FF02A2 : 4847                		swap	d7
(1)  158/  FF02A4 : 1E39 FFFF 91D2      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  159/  FF02AA : CE7C 0006           		and.w	#%110,d7
(1)  160/  FF02AE : BE7C 0006           		cmp.w	#%110,d7
(1)  161/  FF02B2 : 660E                		bne.s	.nodble
(1)  162/  FF02B4 : 3E05                		move.w	d5,d7
(1)  163/  FF02B6 : E24F                		lsr.w	#1,d7
(1)  164/  FF02B8 : CE7C 07FF           		and.w	#$7FF,d7
(1)  165/  FF02BC : CA7C F800           		and.w	#$F800,d5
(1)  166/  FF02C0 : 8A47                		or.w	d7,d5
(1)  167/  FF02C2 :                     .nodble:
(1)  168/  FF02C2 : 4847                		swap	d7
(1)  169/  FF02C4 : 3885                		move.w	d5,(a4)
(1)  170/  FF02C6 : 51CF FFCA           		dbf	d7,.xloop
(1)  171/  FF02CA : D886                		add.l	d6,d4
(1)  172/  FF02CC : 4845                		swap	d5
(1)  173/  FF02CE : 51CD FFB8           		dbf	d5,.yloop
(1)  174/  FF02D2 : 4E75                		rts
(1)  175/  FF02D4 :                     
(1)  176/  FF02D4 :                     ; --------------------------------------------------------
(1)  177/  FF02D4 :                     ; Video_LoadMap_Vert
(1)  178/  FF02D4 :                     ; 
(1)  179/  FF02D4 :                     ; Load map data, Vertical order
(1)  180/  FF02D4 :                     ; 
(1)  181/  FF02D4 :                     ; a0 - Map data
(1)  182/  FF02D4 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  183/  FF02D4 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  184/  FF02D4 :                     ; d2 | WORD - VRAM
(1)  185/  FF02D4 :                     
(1)  186/  FF02D4 :                     ; Uses:
(1)  187/  FF02D4 :                     ; a4-a5,d4-d7
(1)  188/  FF02D4 :                     ; --------------------------------------------------------
(1)  189/  FF02D4 :                     
(1)  190/  FF02D4 :                     Video_LoadMap_Vert:
(1)  191/  FF02D4 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  192/  FF02DA : 6100 0206           		bsr	vid_PickLayer
(1)  193/  FF02DE : 2A01                		move.l	d1,d5		; Start here
(1)  194/  FF02E0 : 4845                		swap	d5
(1)  195/  FF02E2 :                     .xloop:
(1)  196/  FF02E2 : 4845                		swap	d5
(1)  197/  FF02E4 : 2F04                		move.l	d4,-(sp)
(1)  198/  FF02E6 : 3E01                		move.w	d1,d7
(1)  199/  FF02E8 : 0839 0002 FFFF 91D2 		btst	#2,(RAM_VdpRegs+$C).l
(1)  200/  FF02F0 : 6702                		beq.s	.yloop
(1)  201/  FF02F2 : E24F                		lsr.w	#1,d7
(1)  202/  FF02F4 :                     .yloop:
(1)  203/  FF02F4 : 2944 0004           		move.l	d4,4(a4)
(1)  204/  FF02F8 : 3A10                		move.w	(a0),d5
(1)  205/  FF02FA : BA7C FFFF           		cmp.w	#-1,d5
(1)  206/  FF02FE : 6606                		bne.s	.nonull
(1)  207/  FF0300 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  208/  FF0304 : 6002                		bra.s	.cont
(1)  209/  FF0306 :                     .nonull:
(1)  210/  FF0306 : DA42                		add.w	d2,d5
(1)  211/  FF0308 :                     .cont:
(1)  212/  FF0308 : 4847                		swap	d7
(1)  213/  FF030A : D0FC 0002           		adda	#2,a0
(1)  214/  FF030E : 0839 0002 FFFF 91D2 		btst	#2,(RAM_VdpRegs+$C).l
(1)  215/  FF0316 : 6712                		beq.s	.nodble
(1)  216/  FF0318 : D0FC 0002           		adda	#2,a0
(1)  217/  FF031C : 3E05                		move.w	d5,d7
(1)  218/  FF031E : E24F                		lsr.w	#1,d7
(1)  219/  FF0320 : CE7C 07FF           		and.w	#$7FF,d7
(1)  220/  FF0324 : CA7C F800           		and.w	#$F800,d5
(1)  221/  FF0328 : 8A47                		or.w	d7,d5
(1)  222/  FF032A :                     .nodble:
(1)  223/  FF032A : 4847                		swap	d7
(1)  224/  FF032C : 3885                		move.w	d5,(a4)
(1)  225/  FF032E : D886                		add.l	d6,d4
(1)  226/  FF0330 : 51CF FFC2           		dbf	d7,.yloop
(1)  227/  FF0334 :                     .outdbl:
(1)  228/  FF0334 : 281F                		move.l	(sp)+,d4
(1)  229/  FF0336 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  230/  FF033C : 4845                		swap	d5
(1)  231/  FF033E : 51CD FFA2           		dbf	d5,.xloop
(1)  232/  FF0342 : 4E75                		rts
(1)  233/  FF0344 :                     		
(1)  234/  FF0344 :                     ; --------------------------------------------------------
(1)  235/  FF0344 :                     ; Video_AutoMap_Vert
(1)  236/  FF0344 :                     ; 
(1)  237/  FF0344 :                     ; Make automatic map, Vertical order
(1)  238/  FF0344 :                     ; 
(1)  239/  FF0344 :                     ; MCD: Use this to make a virtual screen
(1)  240/  FF0344 :                     ; for Stamps
(1)  241/  FF0344 :                     ; 
(1)  242/  FF0344 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  243/  FF0344 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  244/  FF0344 :                     ; d2 | WORD - VRAM
(1)  245/  FF0344 :                     
(1)  246/  FF0344 :                     ; Uses:
(1)  247/  FF0344 :                     ; a4-a5,d4-d7
(1)  248/  FF0344 :                     ; --------------------------------------------------------
(1)  249/  FF0344 :                     
(1)  250/  FF0344 :                     ; TODO: double interlace
(1)  251/  FF0344 :                     Video_AutoMap_Vert:
(1)  252/  FF0344 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  253/  FF034A : 6100 0196           		bsr	vid_PickLayer
(1)  254/  FF034E : 3E02                		move.w	d2,d7		; Start here
(1)  255/  FF0350 : 2A01                		move.l	d1,d5
(1)  256/  FF0352 : 4845                		swap	d5
(1)  257/  FF0354 :                     .xloop:
(1)  258/  FF0354 : 4845                		swap	d5
(1)  259/  FF0356 : 2F04                		move.l	d4,-(sp)
(1)  260/  FF0358 : 3A01                		move.w	d1,d5
(1)  261/  FF035A : 0839 0002 FFFF 91D2 		btst	#2,(RAM_VdpRegs+$C).l
(1)  262/  FF0362 : 6702                		beq.s	.yloop
(1)  263/  FF0364 : E24D                		lsr.w	#1,d5
(1)  264/  FF0366 :                     .yloop:
(1)  265/  FF0366 : 2944 0004           		move.l	d4,4(a4)
(1)  266/  FF036A : 3887                		move.w	d7,(a4)
(1)  267/  FF036C : DE7C 0001           		add.w	#1,d7
(1)  268/  FF0370 : D886                		add.l	d6,d4
(1)  269/  FF0372 : 51CD FFF2           		dbf	d5,.yloop
(1)  270/  FF0376 :                     
(1)  271/  FF0376 : 281F                		move.l	(sp)+,d4
(1)  272/  FF0378 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  273/  FF037E : 4845                		swap	d5
(1)  274/  FF0380 : 51CD FFD2           		dbf	d5,.xloop
(1)  275/  FF0384 : 4E75                		rts
(1)  276/  FF0386 :                     
(1)  277/  FF0386 :                     ; --------------------------------------------------------
(1)  278/  FF0386 :                     ; Video_PrintInit
(1)  279/  FF0386 :                     ; 
(1)  280/  FF0386 :                     ; Load palette and font for printing text
(1)  281/  FF0386 :                     ; --------------------------------------------------------
(1)  282/  FF0386 :                     
(1)  283/  FF0386 :                     Video_PrintInit:
(1)  284/  FF0386 : 41FA 03DE           		lea	ASCII_PAL(pc),a0
(1)  285/  FF038A : 7030                		moveq	#$30,d0
(1)  286/  FF038C : 323C 000F           		move.w	#$F,d1
(1)  287/  FF0390 : 6100 FEC0           		bsr	Video_LoadPal
(1)  288/  FF0394 : 203C 00FF 0786      		move.l	#ASCII_FONT,d0
(1)  289/  FF039A : 323C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d1
(1)  290/  FF039E : 343C 6580           		move.w	#$580|$6000,d2
(1)  291/  FF03A2 : 31C2 9044           		move.w	d2,(RAM_VidPrntVram).w
(1)  292/  FF03A6 : 6000 02D0           		bra	Video_LoadArt
(1)  293/  FF03AA :                     
(1)  294/  FF03AA :                     ; --------------------------------------------------------
(1)  295/  FF03AA :                     ; Video_Print
(1)  296/  FF03AA :                     ; 
(1)  297/  FF03AA :                     ; Prints string to layer
(1)  298/  FF03AA :                     ; requires ASCII font
(1)  299/  FF03AA :                     ; 
(1)  300/  FF03AA :                     ; a0 - string data
(1)  301/  FF03AA :                     ; d0 | LONG - 00|Lyr|X|Y, locate(lyr,x,y)
(1)  302/  FF03AA :                     ; 
(1)  303/  FF03AA :                     ; Notes:
(1)  304/  FF03AA :                     ; "//b" - Show BYTE value
(1)  305/  FF03AA :                     ; "//w" - Show WORD value
(1)  306/  FF03AA :                     ; "//l" - Show LONG value
(1)  307/  FF03AA :                     ;   $0A - Next line
(1)  308/  FF03AA :                     ;   $00 - End of line
(1)  309/  FF03AA :                     ; 
(1)  310/  FF03AA :                     ; Uses:
(1)  311/  FF03AA :                     ; a4-a6,d4-d7
(1)  312/  FF03AA :                     ; --------------------------------------------------------
(1)  313/  FF03AA :                     
(1)  314/  FF03AA :                     Video_Print:
(1)  315/  FF03AA :                     ; 		movem.l	d3-d7,-(sp)
(1)  316/  FF03AA :                     ; 		movem.l	a4-a6,-(sp)
(1)  317/  FF03AA :                     		
(1)  318/  FF03AA : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  319/  FF03B0 : 6100 0130           		bsr	vid_PickLayer
(1)  320/  FF03B4 : 4BF8 9046           		lea	(RAM_VidPrntList),a5
(1)  321/  FF03B8 :                     .newjump:
(1)  322/  FF03B8 : 2D44 0004           		move.l	d4,4(a6)
(1)  323/  FF03BC : 2A04                		move.l	d4,d5
(1)  324/  FF03BE :                     .loop:
(1)  325/  FF03BE : 1E18                		move.b	(a0)+,d7
(1)  326/  FF03C0 : 6772                		beq	.exit
(1)  327/  FF03C2 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  328/  FF03C6 : 6718                		beq.s	.next
(1)  329/  FF03C8 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  330/  FF03CC : 6716                		beq.s	.special
(1)  331/  FF03CE : 0247 00FF           		andi.w	#$FF,d7
(1)  332/  FF03D2 :                     .puttext:
(1)  333/  FF03D2 : DE78 9044           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  334/  FF03D6 : 3C87                		move.w	d7,(a6)
(1)  335/  FF03D8 : DABC 0002 0000      		add.l	#$20000,d5
(1)  336/  FF03DE : 60DE                		bra.s	.loop
(1)  337/  FF03E0 :                     ; Next line
(1)  338/  FF03E0 :                     .next:
(1)  339/  FF03E0 : D886                		add.l	d6,d4
(1)  340/  FF03E2 : 60D4                		bra.s	.newjump
(1)  341/  FF03E4 :                     
(1)  342/  FF03E4 :                     ; Specials
(1)  343/  FF03E4 :                     .special:
(1)  344/  FF03E4 : 1E18                		move.b	(a0)+,d7
(1)  345/  FF03E6 : 0C07 0062           		cmpi.b	#"b",d7
(1)  346/  FF03EA : 6712                		beq.s	.isbyte
(1)  347/  FF03EC : 0C07 0077           		cmpi.b	#"w",d7
(1)  348/  FF03F0 : 671E                		beq.s	.isword
(1)  349/  FF03F2 : 0C07 006C           		cmpi.b	#"l",d7
(1)  350/  FF03F6 : 672A                		beq.s	.islong
(1)  351/  FF03F8 : 3E3C 005C           		move.w	#"\\",d7			; nothing to do
(1)  352/  FF03FC : 60D4                		bra.s	.puttext
(1)  353/  FF03FE :                     		
(1)  354/  FF03FE :                     	; TEMPORAL VALUES
(1)  355/  FF03FE :                     .isbyte:
(1)  356/  FF03FE : 2AC5                		move.l	d5,(a5)+
(1)  357/  FF0400 : 3AFC 0001           		move.w	#1,(a5)+
(1)  358/  FF0404 : DABC 0004 0000      		add.l	#$40000,d5
(1)  359/  FF040A : 2D45 0004           		move.l	d5,4(a6)
(1)  360/  FF040E : 60AE                		bra	.loop
(1)  361/  FF0410 :                     .isword:
(1)  362/  FF0410 : 2AC5                		move.l	d5,(a5)+
(1)  363/  FF0412 : 3AFC 0002           		move.w	#2,(a5)+
(1)  364/  FF0416 : DABC 0008 0000      		add.l	#$80000,d5
(1)  365/  FF041C : 2D45 0004           		move.l	d5,4(a6)
(1)  366/  FF0420 : 609C                		bra	.loop
(1)  367/  FF0422 :                     .islong:
(1)  368/  FF0422 : 2AC5                		move.l	d5,(a5)+
(1)  369/  FF0424 : 3AFC 0003           		move.w	#3,(a5)+
(1)  370/  FF0428 : DABC 0010 0000      		add.l	#$100000,d5
(1)  371/  FF042E : 2D45 0004           		move.l	d5,4(a6)
(1)  372/  FF0432 : 608A                		bra	.loop
(1)  373/  FF0434 :                     .exit:
(1)  374/  FF0434 :                     
(1)  375/  FF0434 :                     ; --------------------------------------------------------
(1)  376/  FF0434 :                     ; Print values
(1)  377/  FF0434 :                     ; 
(1)  378/  FF0434 :                     ; vvvv vvvv tttt
(1)  379/  FF0434 :                     ; v - vdp pos
(1)  380/  FF0434 :                     ; t - value type
(1)  381/  FF0434 :                     ; --------------------------------------------------------
(1)  382/  FF0434 :                     
(1)  383/  FF0434 : 7800                		moveq	#0,d4
(1)  384/  FF0436 : 7A00                		moveq	#0,d5
(1)  385/  FF0438 : 7C00                		moveq	#0,d6
(1)  386/  FF043A : 4BF8 9046           		lea	(RAM_VidPrntList),a5
(1)  387/  FF043E :                     .nextv:
(1)  388/  FF043E : 4A95                		tst.l	(a5)
(1)  389/  FF0440 : 6700 009E           		beq	.nothing
(1)  390/  FF0444 :                     
(1)  391/  FF0444 :                     	; grab value
(1)  392/  FF0444 : 7800                		moveq	#0,d4
(1)  393/  FF0446 : 1818                		move.b	(a0)+,d4
(1)  394/  FF0448 : E19C                		rol.l	#8,d4
(1)  395/  FF044A : 1818                		move.b	(a0)+,d4
(1)  396/  FF044C : E19C                		rol.l	#8,d4
(1)  397/  FF044E : 1818                		move.b	(a0)+,d4
(1)  398/  FF0450 : E19C                		rol.l	#8,d4
(1)  399/  FF0452 : 1818                		move.b	(a0)+,d4
(1)  400/  FF0454 : 2844                		movea.l	d4,a4
(1)  401/  FF0456 : 7800                		moveq	#0,d4
(1)  402/  FF0458 :                     
(1)  403/  FF0458 :                     	; get value
(1)  404/  FF0458 : 3C2D 0004           		move.w	4(a5),d6
(1)  405/  FF045C :                     		
(1)  406/  FF045C : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  407/  FF0460 : 660E                		bne.s	.vbyte
(1)  408/  FF0462 : 1814                		move.b	(a4),d4
(1)  409/  FF0464 : 2D55 0004           		move.l	(a5),4(a6)
(1)  410/  FF0468 : E91C                		rol.b	#4,d4
(1)  411/  FF046A : 6158                		bsr.s	.donibl
(1)  412/  FF046C : E91C                		rol.b	#4,d4
(1)  413/  FF046E : 6154                		bsr.s	.donibl
(1)  414/  FF0470 :                     .vbyte:
(1)  415/  FF0470 : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  416/  FF0474 : 661C                		bne.s	.vword
(1)  417/  FF0476 : 1814                		move.b	(a4),d4
(1)  418/  FF0478 : E15C                		rol.w	#8,d4
(1)  419/  FF047A : 182C 0001           		move.b	1(a4),d4
(1)  420/  FF047E : 2D55 0004           		move.l	(a5),4(a6)
(1)  421/  FF0482 : E95C                		rol.w	#4,d4
(1)  422/  FF0484 : 613E                		bsr.s	.donibl
(1)  423/  FF0486 : E95C                		rol.w	#4,d4
(1)  424/  FF0488 : 613A                		bsr.s	.donibl
(1)  425/  FF048A : E95C                		rol.w	#4,d4
(1)  426/  FF048C : 6136                		bsr.s	.donibl
(1)  427/  FF048E : E95C                		rol.w	#4,d4
(1)  428/  FF0490 : 6132                		bsr.s	.donibl
(1)  429/  FF0492 :                     .vword:
(1)  430/  FF0492 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  431/  FF0496 : 6624                		bne.s	.vlong
(1)  432/  FF0498 : 1814                		move.b	(a4),d4
(1)  433/  FF049A : E19C                		rol.l	#8,d4
(1)  434/  FF049C : 182C 0001           		move.b	1(a4),d4
(1)  435/  FF04A0 : E19C                		rol.l	#8,d4
(1)  436/  FF04A2 : 182C 0002           		move.b	2(a4),d4
(1)  437/  FF04A6 : E19C                		rol.l	#8,d4
(1)  438/  FF04A8 : 182C 0003           		move.b	3(a4),d4
(1)  439/  FF04AC : 2D55 0004           		move.l	(a5),4(a6)
(1)  440/  FF04B0 : 3C3C 0007           		move.w	#7,d6
(1)  441/  FF04B4 : E99C                .lngloop:	rol.l	#4,d4
(1)  442/  FF04B6 : 610C                		bsr.s	.donibl
(1)  443/  FF04B8 : 51CE FFFA           		dbf	d6,.lngloop
(1)  444/  FF04BC :                     .vlong:
(1)  445/  FF04BC : 429D                		clr.l	(a5)+
(1)  446/  FF04BE : 425D                		clr.w	(a5)+
(1)  447/  FF04C0 : 6000 FF7C           		bra	.nextv
(1)  448/  FF04C4 :                     
(1)  449/  FF04C4 :                     ; make nibble byte
(1)  450/  FF04C4 :                     .donibl:
(1)  451/  FF04C4 : 3A04                		move.w	d4,d5
(1)  452/  FF04C6 : 0245 000F           		andi.w	#%1111,d5
(1)  453/  FF04CA : BA3C 000A           		cmp.b	#$A,d5
(1)  454/  FF04CE : 6D04                		blt.s	.lowr
(1)  455/  FF04D0 : DA3C 0007           		add.b	#7,d5
(1)  456/  FF04D4 :                     .lowr:
(1)  457/  FF04D4 : DA7C 0030           		add.w	#"0",d5
(1)  458/  FF04D8 : DA78 9044           		add.w	(RAM_VidPrntVram),d5
(1)  459/  FF04DC : 3C85                		move.w	d5,(a6)
(1)  460/  FF04DE : 4E75                		rts
(1)  461/  FF04E0 :                     ; exit
(1)  462/  FF04E0 :                     .nothing:
(1)  463/  FF04E0 :                     ; 		movem.l	(sp)+,a4-a6
(1)  464/  FF04E0 :                     ; 		movem.l	(sp)+,d3-d7
(1)  465/  FF04E0 : 4E75                		rts
(1)  466/  FF04E2 :                     
(1)  467/  FF04E2 :                     ; --------------------------------------------------------
(1)  468/  FF04E2 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  469/  FF04E2 :                     ; --------------------------------------------------------
(1)  470/  FF04E2 :                     
(1)  471/  FF04E2 :                     vid_PickLayer:
(1)  472/  FF04E2 : 2C00                		move.l	d0,d6			; Pick layer
(1)  473/  FF04E4 : 4846                		swap	d6
(1)  474/  FF04E6 : 0806 0000           		btst	#0,d6
(1)  475/  FF04EA : 671E                		beq.s	.plawnd
(1)  476/  FF04EC : 1839 FFFF 91CA      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  477/  FF04F2 : 3A04                		move.w	d4,d5
(1)  478/  FF04F4 : E24D                		lsr.w	#1,d5
(1)  479/  FF04F6 : 0245 0003           		andi.w	#%11,d5
(1)  480/  FF04FA : 4844                		swap	d4
(1)  481/  FF04FC : 3805                		move.w	d5,d4
(1)  482/  FF04FE : 4844                		swap	d4
(1)  483/  FF0500 : 0244 0001           		andi.w	#1,d4
(1)  484/  FF0504 : E14C                		lsl.w	#8,d4
(1)  485/  FF0506 : EB4C                		lsl.w	#5,d4
(1)  486/  FF0508 : 6028                		bra.s	.golyr
(1)  487/  FF050A :                     .plawnd:
(1)  488/  FF050A : 1839 FFFF 91C8      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  489/  FF0510 : 0806 0001           		btst	#1,d6
(1)  490/  FF0514 : 6706                		beq.s	.nowd
(1)  491/  FF0516 : 1839 FFFF 91C9      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  492/  FF051C :                     .nowd:		
(1)  493/  FF051C : 3A04                		move.w	d4,d5
(1)  494/  FF051E : E84D                		lsr.w	#4,d5
(1)  495/  FF0520 : 0245 0003           		andi.w	#%11,d5
(1)  496/  FF0524 : 4844                		swap	d4
(1)  497/  FF0526 : 3805                		move.w	d5,d4
(1)  498/  FF0528 : 4844                		swap	d4
(1)  499/  FF052A : 0244 000E           		andi.w	#%00001110,d4
(1)  500/  FF052E : E14C                		lsl.w	#8,d4
(1)  501/  FF0530 : E54C                		lsl.w	#2,d4
(1)  502/  FF0532 :                     .golyr:
(1)  503/  FF0532 : 0044 4000           		ori.w	#$4000,d4
(1)  504/  FF0536 : 3A00                		move.w	d0,d5			; Y start pos
(1)  505/  FF0538 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  506/  FF053C : ED4D                		lsl.w	#6,d5			
(1)  507/  FF053E : 1C38 91D6           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  508/  FF0542 : 0246 0003           		andi.w	#%11,d6
(1)  509/  FF0546 : 670A                		beq.s	.thissz
(1)  510/  FF0548 : DA45                		add.w	d5,d5			; H64
(1)  511/  FF054A : 0246 0002           		andi.w	#%10,d6
(1)  512/  FF054E : 6702                		beq.s	.thissz
(1)  513/  FF0550 : DA45                		add.w	d5,d5			; H128		
(1)  514/  FF0552 :                     .thissz:
(1)  515/  FF0552 : D845                		add.w	d5,d4
(1)  516/  FF0554 : 3A00                		move.w	d0,d5
(1)  517/  FF0556 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  518/  FF055A : EE4D                		lsr.w	#7,d5
(1)  519/  FF055C : D845                		add.w	d5,d4			; X add
(1)  520/  FF055E : 4844                		swap	d4
(1)  521/  FF0560 : 7C00                		moveq	#0,d6
(1)  522/  FF0562 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  523/  FF0566 : 1A38 91D6           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  524/  FF056A : 0245 0003           		andi.w	#%11,d5
(1)  525/  FF056E : 670A                		beq.s	.thisszj
(1)  526/  FF0570 : DC46                		add.w	d6,d6			; H64
(1)  527/  FF0572 : 0245 0002           		andi.w	#%10,d5
(1)  528/  FF0576 : 6702                		beq.s	.thisszj
(1)  529/  FF0578 : DC46                		add.w	d6,d6			; H128		
(1)  530/  FF057A :                     .thisszj:
(1)  531/  FF057A : 4846                		swap	d6
(1)  532/  FF057C : 4E75                		rts
(1)  533/  FF057E :                     		
(1)  534/  FF057E :                     ; --------------------------------------------------------
(1)  535/  FF057E :                     ; Video_Fill
(1)  536/  FF057E :                     ; 
(1)  537/  FF057E :                     ; Fill data to VRAM
(1)  538/  FF057E :                     ;
(1)  539/  FF057E :                     ; d0 | WORD - Fill data
(1)  540/  FF057E :                     ; d1 | WORD - Size
(1)  541/  FF057E :                     ; d2 | WORD - VRAM
(1)  542/  FF057E :                     ; --------------------------------------------------------
(1)  543/  FF057E :                     
(1)  544/  FF057E :                     Video_Fill:
(1)  545/  FF057E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  546/  FF0584 :                     		
(1)  547/  FF0584 : 383C 8100           		move.w	#$8100,d4
(1)  548/  FF0588 : 1838 91C7           		move.b	(RAM_VdpRegs+1),d4
(1)  549/  FF058C : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  550/  FF0590 : 3884                		move.w	d4,(a4)
(1)  551/  FF0592 : 3814                .dmaw:		move.w	(a4),d4
(1)  552/  FF0594 : 0804 0001           		btst	#bitDma,d4
(1)  553/  FF0598 : 66F8                		bne.s	.dmaw
(1)  554/  FF059A : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  555/  FF059E :                     
(1)  556/  FF059E :                     	; SIZE
(1)  557/  FF059E : 3801                		move.w	d1,d4
(1)  558/  FF05A0 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  559/  FF05A6 : E24C                		lsr.w	#1,d4
(1)  560/  FF05A8 : 1A04                		move.b	d4,d5
(1)  561/  FF05AA : 4845                		swap	d5
(1)  562/  FF05AC : E04C                		lsr.w	#8,d4
(1)  563/  FF05AE : 1A04                		move.b	d4,d5
(1)  564/  FF05B0 : 4845                		swap	d5
(1)  565/  FF05B2 : 2885                		move.l	d5,(a4)
(1)  566/  FF05B4 : 38BC 9780           		move.w	#$9780,(a4)		; DMA Fill bit
(1)  567/  FF05B8 :                     
(1)  568/  FF05B8 :                     	; DESTINATION
(1)  569/  FF05B8 : 2802                		move.l	d2,d4
(1)  570/  FF05BA :                     ; 		lsl.w	#5,d4
(1)  571/  FF05BA : 3A04                		move.w	d4,d5
(1)  572/  FF05BC : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  573/  FF05C0 : 0045 4000           		ori.w	#$4000,d5
(1)  574/  FF05C4 : 4845                		swap	d5
(1)  575/  FF05C6 : 3A04                		move.w	d4,d5
(1)  576/  FF05C8 : E04D                		lsr.w	#8,d5
(1)  577/  FF05CA : EC4D                		lsr.w	#6,d5
(1)  578/  FF05CC : 0245 0003           		andi.w	#%11,d5
(1)  579/  FF05D0 : 0045 0080           		ori.w	#$80,d5
(1)  580/  FF05D4 : 2885                		move.l	d5,(a4)
(1)  581/  FF05D6 : 3940 FFFC           		move.w	d0,-4(a4)
(1)  582/  FF05DA : 3814                .dmawe:		move.w	(a4),d4
(1)  583/  FF05DC : 0804 0001           		btst	#bitDma,d4
(1)  584/  FF05E0 : 66F8                		bne.s	.dmawe
(1)  585/  FF05E2 :                     
(1)  586/  FF05E2 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  587/  FF05E6 : 383C 8100           		move.w	#$8100,d4
(1)  588/  FF05EA : 1838 91C7           		move.b	(RAM_VdpRegs+1),d4
(1)  589/  FF05EE : 3884                		move.w	d4,(a4)
(1)  590/  FF05F0 : 4E75                		rts
(1)  591/  FF05F2 :                     
(1)  592/  FF05F2 :                     ; --------------------------------------------------------
(1)  593/  FF05F2 :                     ; Video_Copy
(1)  594/  FF05F2 :                     ; 
(1)  595/  FF05F2 :                     ; Copy VRAM data to another location
(1)  596/  FF05F2 :                     ;
(1)  597/  FF05F2 :                     ; d0 | WORD - VRAM Source
(1)  598/  FF05F2 :                     ; d1 | WORD - Size
(1)  599/  FF05F2 :                     ; d2 | WORD - VRAM Destination
(1)  600/  FF05F2 :                     ; --------------------------------------------------------
(1)  601/  FF05F2 :                     
(1)  602/  FF05F2 :                     Video_Copy:
(1)  603/  FF05F2 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  604/  FF05F8 :                     		
(1)  605/  FF05F8 : 383C 8100           		move.w	#$8100,d4
(1)  606/  FF05FC : 1838 91C7           		move.b	(RAM_VdpRegs+1),d4
(1)  607/  FF0600 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  608/  FF0604 : 3884                		move.w	d4,(a4)
(1)  609/  FF0606 : 3814                .dmaw:		move.w	(a4),d4
(1)  610/  FF0608 : 0804 0001           		btst	#bitDma,d4
(1)  611/  FF060C : 66F8                		bne.s	.dmaw
(1)  612/  FF060E : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  613/  FF0612 : 3801                		move.w	d1,d4			; SIZE
(1)  614/  FF0614 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  615/  FF061A : E24C                		lsr.w	#1,d4
(1)  616/  FF061C : 1A04                		move.b	d4,d5
(1)  617/  FF061E : 4845                		swap	d5
(1)  618/  FF0620 : E04C                		lsr.w	#8,d4
(1)  619/  FF0622 : 1A04                		move.b	d4,d5
(1)  620/  FF0624 : 4845                		swap	d5
(1)  621/  FF0626 : 2885                		move.l	d5,(a4)
(1)  622/  FF0628 : 2A3C 9600 9500      		move.l	#$96009500,d5		; SOURCE
(1)  623/  FF062E : 3800                		move.w	d0,d4
(1)  624/  FF0630 : 1A04                		move.b	d4,d5
(1)  625/  FF0632 : 4845                		swap	d5
(1)  626/  FF0634 : E04C                		lsr.w	#8,d4
(1)  627/  FF0636 : 1A04                		move.b	d4,d5
(1)  628/  FF0638 : 2885                		move.l	d5,(a4)
(1)  629/  FF063A : 38BC 97C0           		move.w	#$97C0,(a4)		; DMA Fill bit
(1)  630/  FF063E : 2802                		move.l	d2,d4			; DESTINATION
(1)  631/  FF0640 :                     ; 		lsl.w	#5,d4
(1)  632/  FF0640 : 3A04                		move.w	d4,d5
(1)  633/  FF0642 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  634/  FF0646 : 0045 4000           		ori.w	#$4000,d5
(1)  635/  FF064A : 4845                		swap	d5
(1)  636/  FF064C : 3A04                		move.w	d4,d5
(1)  637/  FF064E : E04D                		lsr.w	#8,d5
(1)  638/  FF0650 : EC4D                		lsr.w	#6,d5
(1)  639/  FF0652 : 0245 0003           		andi.w	#%11,d5
(1)  640/  FF0656 : 0045 00C0           		ori.w	#$C0,d5
(1)  641/  FF065A : 2885                		move.l	d5,(a4)
(1)  642/  FF065C : 3940 FFFC           		move.w	d0,-4(a4)
(1)  643/  FF0660 : 3814                .dmawe:		move.w	(a4),d4
(1)  644/  FF0662 : 0804 0001           		btst	#bitDma,d4
(1)  645/  FF0666 : 66F8                		bne.s	.dmawe
(1)  646/  FF0668 :                     
(1)  647/  FF0668 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  648/  FF066C : 383C 8100           		move.w	#$8100,d4
(1)  649/  FF0670 : 1838 91C7           		move.b	(RAM_VdpRegs+1),d4
(1)  650/  FF0674 : 3884                		move.w	d4,(a4)
(1)  651/  FF0676 : 4E75                		rts
(1)  652/  FF0678 :                     
(1)  653/  FF0678 :                     
(1)  654/  FF0678 :                     ; ====================================================================
(1)  655/  FF0678 :                     ; --------------------------------------------------------
(1)  656/  FF0678 :                     ; DMA ROM to VDP Transfer, sets RV=1
(1)  657/  FF0678 :                     ; --------------------------------------------------------
(1)  658/  FF0678 :                     
(1)  659/  FF0678 :                     ; --------------------------------------------------------
(1)  660/  FF0678 :                     ; Load graphics using DMA
(1)  661/  FF0678 :                     ;
(1)  662/  FF0678 :                     ; d0 | LONG - Art data
(1)  663/  FF0678 :                     ; d1 | WORD - Size
(1)  664/  FF0678 :                     ; d2 | WORD - VRAM (cell)
(1)  665/  FF0678 :                     ; 
(1)  666/  FF0678 :                     ; Uses:
(1)  667/  FF0678 :                     ; d4-d5,a4
(1)  668/  FF0678 :                     ; --------------------------------------------------------
(1)  669/  FF0678 :                     
(1)  670/  FF0678 :                     Video_LoadArt:
(1)  671/  FF0678 : 3C0F                		move.w	sp,d6
(1)  672/  FF067A : 46FC 2700           		move.w	#$2700,sr
(1)  673/  FF067E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  674/  FF0684 : 383C 8100           		move.w	#$8100,d4
(1)  675/  FF0688 : 1838 91C7           		move.b	(RAM_VdpRegs+1),d4
(1)  676/  FF068C : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  677/  FF0690 : 3884                		move.w	d4,(a4)
(1)  678/  FF0692 :                     
(1)  679/  FF0692 :                     	; SIZE
(1)  680/  FF0692 : 3801                		move.w	d1,d4
(1)  681/  FF0694 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  682/  FF069A : E24C                		lsr.w	#1,d4
(1)  683/  FF069C : 1A04                		move.b	d4,d5
(1)  684/  FF069E : 4845                		swap	d5
(1)  685/  FF06A0 : E04C                		lsr.w	#8,d4
(1)  686/  FF06A2 : 1A04                		move.b	d4,d5
(1)  687/  FF06A4 : 4845                		swap	d5
(1)  688/  FF06A6 : 2885                		move.l	d5,(a4)
(1)  689/  FF06A8 :                     
(1)  690/  FF06A8 :                     	; SOURCE
(1)  691/  FF06A8 : 2800                		move.l	d0,d4
(1)  692/  FF06AA : E28C                  		lsr.l	#1,d4
(1)  693/  FF06AC : 2A3C 9600 9500       		move.l	#$96009500,d5
(1)  694/  FF06B2 : 1A04                 		move.b	d4,d5
(1)  695/  FF06B4 : E08C                 		lsr.l	#8,d4
(1)  696/  FF06B6 : 4845                 		swap	d5
(1)  697/  FF06B8 : 1A04                 		move.b	d4,d5
(1)  698/  FF06BA : 2885                 		move.l	d5,(a4)
(1)  699/  FF06BC : 3A3C 9700            		move.w	#$9700,d5
(1)  700/  FF06C0 : E08C                 		lsr.l	#8,d4
(1)  701/  FF06C2 : 1A04                 		move.b	d4,d5
(1)  702/  FF06C4 : 3885                 		move.w	d5,(a4)
(1)  703/  FF06C6 :                      		
(1)  704/  FF06C6 :                     	; DESTINATION
(1)  705/  FF06C6 : 3802                		move.w	d2,d4
(1)  706/  FF06C8 : C87C 07FF           		and.w	#$7FF,d4
(1)  707/  FF06CC : EB4C                		lsl.w	#5,d4
(1)  708/  FF06CE : 3A04                		move.w	d4,d5
(1)  709/  FF06D0 : C8BC 0000 3FE0      		and.l	#$3FE0,d4
(1)  710/  FF06D6 : 0044 4000           		ori.w	#$4000,d4
(1)  711/  FF06DA : 3884                		move.w	d4,(a4)				; First write
(1)  712/  FF06DC : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)  713/  FF06E4 : E04D                		lsr.w	#8,d5
(1)  714/  FF06E6 : EC4D                		lsr.w	#6,d5
(1)  715/  FF06E8 : 0245 0003           		andi.w	#%11,d5
(1)  716/  FF06EC : 0045 0080           		ori.w	#$80,d5
(1)  717/  FF06F0 :                     .wait:
(1)  718/  FF06F0 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for cpu
(1)  719/  FF06F8 : 66F6                		bne.s	.wait
(1)  720/  FF06FA : 2800                		move.l	d0,d4
(1)  721/  FF06FC : 4844                		swap	d4
(1)  722/  FF06FE : E04C                		lsr.w	#8,d4
(1)  723/  FF0700 : B83C 00FF           		cmp.b	#$FF,d4
(1)  724/  FF0704 : 673A                		beq.s	.from_ram
(1)  725/  FF0706 :                     
(1)  726/  FF0706 :                     ; 		bsr	Sound_DMA_Pause
(1)  727/  FF0706 :                     	; TODO: interrupt both CPUS with a wait flag
(1)  728/  FF0706 : 3839 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d4	; Set RV=1
(1)  729/  FF070C : 887C 0001           		or.w	#1,d4				; 68k ROM map moves to $000000, $880000/$900000=trash
(1)  730/  FF0710 : 33C4 00A1 5106      		move.w	d4,(sysmars_reg+dreqctl).l
(1)  731/  FF0716 : 3F05                 		move.w	d5,-(sp)
(1)  732/  FF0718 : 389F                		move.w	(sp)+,(a4)			; Second write, CPU freezes until it DMA ends
(1)  733/  FF071A : 3839 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d4	; Set RV=0
(1)  734/  FF0720 : C87C 00FE           		and.w	#%11111110,d4			; 68k ROM map returns to $880000/$900000
(1)  735/  FF0724 : 33C4 00A1 5106      		move.w	d4,(sysmars_reg+dreqctl).l
(1)  736/  FF072A : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  737/  FF0732 : 383C 8100           		move.w	#$8100,d4
(1)  738/  FF0736 : 1838 91C7           		move.b	(RAM_VdpRegs+1),d4
(1)  739/  FF073A : 3884                		move.w	d4,(a4)
(1)  740/  FF073C : 46C6                		move.w	d6,sr
(1)  741/  FF073E :                     ; 		bsr	Sound_DMA_Resume
(1)  742/  FF073E : 4E75                		rts
(1)  743/  FF0740 :                     .from_ram:
(1)  744/  FF0740 : 3F05                 		move.w	d5,-(sp)
(1)  745/  FF0742 : 389F                		move.w	(sp)+,(a4)			; Second write
(1)  746/  FF0744 : 383C 8100           		move.w	#$8100,d4
(1)  747/  FF0748 : 1838 91C7           		move.b	(RAM_VdpRegs+1),d4
(1)  748/  FF074C : 3884                		move.w	d4,(a4)
(1)  749/  FF074E : 46C6                		move.w	d6,sr
(1)  750/  FF0750 : 4E75                		rts
(1)  751/  FF0752 :                     
(1)  752/  FF0752 :                     ; ====================================================================
(1)  753/  FF0752 :                     ; --------------------------------------------------------
(1)  754/  FF0752 :                     ; Video data
(1)  755/  FF0752 :                     ; --------------------------------------------------------
(1)  756/  FF0752 :                     
(1)  757/  FF0752 :                     list_vdpregs:
(1)  758/  FF0752 : 04                  		dc.b $04			; HBlank int off, HV Counter on
(1)  759/  FF0753 : 44                  		dc.b $44			; Display ON, VBlank int off
(1)  760/  FF0754 : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(1)  761/  FF0755 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  762/  FF0756 : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(1)  763/  FF0757 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  764/  FF0758 : 00                  		dc.b $00			; Nothing
(1)  765/  FF0759 : 00                  		dc.b $00			; Background color: 0
(1)  766/  FF075A : 00                  		dc.b $00			; Nothing
(1)  767/  FF075B : 00                  		dc.b $00			; Nothing
(1)  768/  FF075C : 00                  		dc.b $00			; HInt value
(1)  769/  FF075D : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  770/  FF075E : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  771/  FF075F : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  772/  FF0760 : 00                  		dc.b $00			; Nothing
(1)  773/  FF0761 : 02                  		dc.b $02			; VDP Auto increment by $02
(1)  774/  FF0762 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  775/  FF0763 : 00                  		dc.b $00
(1)  776/  FF0764 : 00                  		dc.b $00
(1)  777/  FF0765 :                     		align 2
(1)  778/  FF0766 :                     ASCII_PAL:	;binclude "engine/shared/ascii_pal.bin"
(1)  779/  FF0766 : 0000 0EEE 0CCC 0AAA 		dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  780/  FF0776 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  781/  FF0786 :                     ASCII_PAL_e:
(1)  782/  FF0786 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)  783/  FF1786 :                     ASCII_FONT_e:
(1)  784/  FF1786 :                     		align 2
(1)  785/  FF1786 :                     
      30/  FF1786 :                     		include	"system/md/system.asm"
(1)    1/  FF1786 :                     ; ====================================================================
(1)    2/  FF1786 :                     ; ----------------------------------------------------------------
(1)    3/  FF1786 :                     ; System
(1)    4/  FF1786 :                     ; ----------------------------------------------------------------
(1)    5/  FF1786 :                     
(1)    6/  FF1786 :                     ; --------------------------------------------------------
(1)    7/  FF1786 :                     ; Init System
(1)    8/  FF1786 :                     ; 
(1)    9/  FF1786 :                     ; Uses:
(1)   10/  FF1786 :                     ; a0-a2,d0-d1
(1)   11/  FF1786 :                     ; --------------------------------------------------------
(1)   12/  FF1786 :                     
(1)   13/  FF1786 :                     System_Init:
(1)   14/  FF1786 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   15/  FF178A : 40E7                		move.w	sr,-(sp)
(1)   16/  FF178C : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   17/  FF1794 :                     .wait:
(1)   18/  FF1794 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   19/  FF179C : 66F6                		bne.s	.wait
(1)   20/  FF179E : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   21/  FF17A0 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   22/  FF17A6 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   23/  FF17AC : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   24/  FF17B2 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   25/  FF17BA : 41F8 91DE           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   26/  FF17BE : 323C 0006           		move.w	#sizeof_input-1/2,d1
(1)   27/  FF17C2 : 7000                		moveq	#0,d0
(1)   28/  FF17C4 :                     .clrinput:
(1)   29/  FF17C4 : 30FC 0000           		move.w	#0,(a0)+
(1)   30/  FF17C8 : 51C9 FFFA           		dbf	d1,.clrinput
(1)   31/  FF17CC : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   32/  FF17D0 : 33C0 FFFF 9826       		move.w	d0,(RAM_MdMarsVInt).l
(1)   33/  FF17D6 : 33C0 FFFF 982C      		move.w	d0,(RAM_MdMarsHInt).l
(1)   34/  FF17DC : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)   35/  FF17E2 : 223C 9511 6102      		move.l	#$95116102,d1
(1)   36/  FF17E8 : 23C0 FFFF 981A      		move.l	d0,(RAM_SysRandVal).l
(1)   37/  FF17EE : 23C1 FFFF 981E      		move.l	d1,(RAM_SysRandSeed).l
(1)   38/  FF17F4 : 203C 00FF 1B3A      		move.l	#VInt_Default,d0	; Set default ints
(1)   39/  FF17FA : 223C 00FF 1B52      		move.l	#Hint_Default,d1
(1)   40/  FF1800 : 6100 013E           		bsr	System_SetInts
(1)   41/  FF1804 : 46DF                		move.w	(sp)+,sr
(1)   42/  FF1806 : 4E75                		rts
(1)   43/  FF1808 :                     
(1)   44/  FF1808 :                     ; ====================================================================
(1)   45/  FF1808 :                     ; --------------------------------------------------------
(1)   46/  FF1808 :                     ; System_Input (VBLANK ONLY)
(1)   47/  FF1808 :                     ; 
(1)   48/  FF1808 :                     ; Uses:
(1)   49/  FF1808 :                     ; d4-d6,a4-a5
(1)   50/  FF1808 :                     ; --------------------------------------------------------
(1)   51/  FF1808 :                     
(1)   52/  FF1808 :                     ; TODO: check if it still requires to turn OFF the Z80
(1)   53/  FF1808 :                     ; while reading the controller
(1)   54/  FF1808 :                     
(1)   55/  FF1808 :                     System_Input:
(1)   56/  FF1808 :                     ; 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   57/  FF1808 :                     .wait:
(1)   58/  FF1808 :                     ; 		btst	#0,(z80_bus).l		; Wait for it
(1)   59/  FF1808 :                     ; 		bne.s	.wait
(1)   60/  FF1808 : 49F9 00A1 0003      		lea	($A10003),a4
(1)   61/  FF180E : 4BF8 91DE           		lea	(RAM_InputData),a5
(1)   62/  FF1812 : 6108                		bsr.s	.this_one
(1)   63/  FF1814 : D8FC 0002           		adda	#2,a4
(1)   64/  FF1818 : DAFC 0006           		adda	#sizeof_input,a5
(1)   65/  FF181C :                     ; 		bsr.s	.this_one
(1)   66/  FF181C :                     ; 		move.w	#0,(z80_bus).l
(1)   67/  FF181C :                     ; 		rts
(1)   68/  FF181C :                     
(1)   69/  FF181C :                     ; --------------------------------------------------------	
(1)   70/  FF181C :                     ; Read port
(1)   71/  FF181C :                     ; 
(1)   72/  FF181C :                     ; a4 - Current port
(1)   73/  FF181C :                     ; a5 - Output data
(1)   74/  FF181C :                     ; --------------------------------------------------------
(1)   75/  FF181C :                     
(1)   76/  FF181C :                     .this_one:
(1)   77/  FF181C : 6100 00D4           		bsr	.pick_id
(1)   78/  FF1820 : 1A84                		move.b	d4,pad_id(a5)
(1)   79/  FF1822 : B87C 000F           		cmp.w	#$F,d4
(1)   80/  FF1826 : 670E                		beq.s	.exit
(1)   81/  FF1828 : C87C 000F           		and.w	#$F,d4
(1)   82/  FF182C : D844                		add.w	d4,d4
(1)   83/  FF182E : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)   84/  FF1832 : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)   85/  FF1836 :                     .exit:
(1)   86/  FF1836 : 422D 0001           		clr.b	pad_ver(a5)
(1)   87/  FF183A : 4E75                		rts
(1)   88/  FF183C :                     
(1)   89/  FF183C :                     ; --------------------------------------------------------
(1)   90/  FF183C :                     ; Grab ID
(1)   91/  FF183C :                     ; --------------------------------------------------------
(1)   92/  FF183C :                     
(1)   93/  FF183C : FFFA                .list:		dc.w .exit-.list	; $0
(1)   94/  FF183E : FFFA                		dc.w .exit-.list
(1)   95/  FF1840 : FFFA                		dc.w .exit-.list
(1)   96/  FF1842 : FFFA                		dc.w .exit-.list
(1)   97/  FF1844 : FFFA                		dc.w .exit-.list	; $4
(1)   98/  FF1846 : FFFA                		dc.w .exit-.list
(1)   99/  FF1848 : FFFA                		dc.w .exit-.list
(1)  100/  FF184A : FFFA                		dc.w .exit-.list
(1)  101/  FF184C : FFFA                		dc.w .exit-.list	; $8
(1)  102/  FF184E : FFFA                		dc.w .exit-.list
(1)  103/  FF1850 : FFFA                		dc.w .exit-.list
(1)  104/  FF1852 : FFFA                		dc.w .exit-.list
(1)  105/  FF1854 : FFFA                		dc.w .exit-.list	; $C
(1)  106/  FF1856 : 0020                		dc.w .id_0D-.list
(1)  107/  FF1858 : FFFA                		dc.w .exit-.list
(1)  108/  FF185A : FFFA                		dc.w .exit-.list
(1)  109/  FF185C :                     
(1)  110/  FF185C :                     ; --------------------------------------------------------
(1)  111/  FF185C :                     ; ID $0D
(1)  112/  FF185C :                     ; 
(1)  113/  FF185C :                     ; Normal controller, Old or New
(1)  114/  FF185C :                     ; --------------------------------------------------------
(1)  115/  FF185C :                     
(1)  116/  FF185C :                     .id_0D:
(1)  117/  FF185C : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  118/  FF1860 : 4E71                		nop
(1)  119/  FF1862 : 4E71                		nop
(1)  120/  FF1864 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  121/  FF1868 : 4E71                		nop
(1)  122/  FF186A : 4E71                		nop
(1)  123/  FF186C : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  124/  FF1870 : 4E71                		nop
(1)  125/  FF1872 : 4E71                		nop
(1)  126/  FF1874 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  127/  FF1878 : 4E71                		nop
(1)  128/  FF187A : 4E71                		nop
(1)  129/  FF187C : 18BC 0040           		move.b	#$40,(a4)	; 6 button responds
(1)  130/  FF1880 : 4E71                		nop
(1)  131/  FF1882 : 4E71                		nop
(1)  132/  FF1884 : 1814                		move.b	(a4),d4		; Grab ??|MXYZ
(1)  133/  FF1886 : 18BC 0000            		move.b	#$00,(a4)
(1)  134/  FF188A : 4E71                  		nop
(1)  135/  FF188C : 4E71                  		nop
(1)  136/  FF188E : 1C14                 		move.b	(a4),d6		; Type: $03 old, $0F new
(1)  137/  FF1890 : 18BC 0040            		move.b	#$40,(a4)
(1)  138/  FF1894 : 4E71                 		nop
(1)  139/  FF1896 : 4E71                 		nop
(1)  140/  FF1898 : CC7C 000F           		and.w	#$F,d6
(1)  141/  FF189C : E44E                		lsr.w	#2,d6
(1)  142/  FF189E : CC7C 0001           		and.w	#1,d6
(1)  143/  FF18A2 : 6716                		beq.s	.oldpad
(1)  144/  FF18A4 : 4604                		not.b	d4
(1)  145/  FF18A6 : C87C 000F            		and.w	#%1111,d4
(1)  146/  FF18AA : 1A2D 0002           		move.b	on_hold(a5),d5
(1)  147/  FF18AE : B905                		eor.b	d4,d5
(1)  148/  FF18B0 : 1B44 0002           		move.b	d4,on_hold(a5)
(1)  149/  FF18B4 : CA04                		and.b	d4,d5
(1)  150/  FF18B6 : 1B45 0004           		move.b	d5,on_press(a5)
(1)  151/  FF18BA :                     .oldpad:
(1)  152/  FF18BA : 1B46 0001           		move.b	d6,pad_ver(a5)
(1)  153/  FF18BE :                     		
(1)  154/  FF18BE : 18BC 0000           		move.b	#$00,(a4)	; Show SA??|RLDU
(1)  155/  FF18C2 : 4E71                		nop
(1)  156/  FF18C4 : 4E71                		nop
(1)  157/  FF18C6 : 1814                		move.b	(a4),d4
(1)  158/  FF18C8 : E50C                		lsl.b	#2,d4
(1)  159/  FF18CA : C83C 00C0           		and.b	#%11000000,d4
(1)  160/  FF18CE : 18BC 0040           		move.b	#$40,(a4)	; Show ??CB|RLDU
(1)  161/  FF18D2 : 4E71                		nop
(1)  162/  FF18D4 : 4E71                		nop
(1)  163/  FF18D6 : 1A14                		move.b	(a4),d5
(1)  164/  FF18D8 : CA3C 003F           		and.b	#%00111111,d5
(1)  165/  FF18DC : 8805                		or.b	d5,d4
(1)  166/  FF18DE : 4604                		not.b	d4
(1)  167/  FF18E0 : 1A2D 0003           		move.b	on_hold+1(a5),d5
(1)  168/  FF18E4 : B905                		eor.b	d4,d5
(1)  169/  FF18E6 : 1B44 0003           		move.b	d4,on_hold+1(a5)
(1)  170/  FF18EA : CA04                		and.b	d4,d5
(1)  171/  FF18EC : 1B45 0005           		move.b	d5,on_press+1(a5)
(1)  172/  FF18F0 : 4E75                		rts
(1)  173/  FF18F2 :                     		
(1)  174/  FF18F2 :                     ; --------------------------------------------------------
(1)  175/  FF18F2 :                     ; Grab ID
(1)  176/  FF18F2 :                     ; --------------------------------------------------------
(1)  177/  FF18F2 :                     
(1)  178/  FF18F2 :                     .pick_id:
(1)  179/  FF18F2 : 7800                		moveq	#0,d4
(1)  180/  FF18F4 : 18BC 0070           		move.b	#%01110000,(a4)		; TH=1,TR=1,TL=1
(1)  181/  FF18F8 : 4E71                		nop
(1)  182/  FF18FA : 4E71                		nop
(1)  183/  FF18FC : 610A                		bsr.s	.read
(1)  184/  FF18FE : 18BC 0030           		move.b	#%00110000,(a4)		; TH=0,TR=1,TL=1
(1)  185/  FF1902 : 4E71                		nop
(1)  186/  FF1904 : 4E71                		nop
(1)  187/  FF1906 : D844                		add.w	d4,d4
(1)  188/  FF1908 :                     
(1)  189/  FF1908 :                     
(1)  190/  FF1908 :                     .read:
(1)  191/  FF1908 : 1A14                		move.b	(a4),d5
(1)  192/  FF190A : 1C05                		move.b	d5,d6
(1)  193/  FF190C : CC3C 000C           		and.b	#$C,d6
(1)  194/  FF1910 : 6702                		beq.s	.step_1
(1)  195/  FF1912 : 5244                		addq.w	#1,d4
(1)  196/  FF1914 :                     .step_1:
(1)  197/  FF1914 : D844                		add.w	d4,d4
(1)  198/  FF1916 : 1C05                		move.b	d5,d6
(1)  199/  FF1918 : CC7C 0003           		and.w	#3,d6
(1)  200/  FF191C : 6702                		beq.s	.step_2
(1)  201/  FF191E : 5244                		addq.w	#1,d4
(1)  202/  FF1920 :                     .step_2:
(1)  203/  FF1920 : 4E75                		rts
(1)  204/  FF1922 :                     
(1)  205/  FF1922 :                     ; --------------------------------------------------------
(1)  206/  FF1922 :                     ; System_Random
(1)  207/  FF1922 :                     ; 
(1)  208/  FF1922 :                     ; Set random value
(1)  209/  FF1922 :                     ; 
(1)  210/  FF1922 :                     ; Output:
(1)  211/  FF1922 :                     ; d0 | LONG
(1)  212/  FF1922 :                     ; --------------------------------------------------------
(1)  213/  FF1922 :                     
(1)  214/  FF1922 :                     ; TODO: rewrite this
(1)  215/  FF1922 :                     System_Random:
(1)  216/  FF1922 : 2A38 981E           		move.l	(RAM_SysRandSeed),d5
(1)  217/  FF1926 : 2838 981A           		move.l	(RAM_SysRandVal),d4
(1)  218/  FF192A : E39D                		rol.l	#1,d5
(1)  219/  FF192C : E284                		asr.l	#1,d4
(1)  220/  FF192E : D885                		add.l	d5,d4
(1)  221/  FF1930 : 23C5 FFFF 981E      		move.l	d5,(RAM_SysRandSeed).l
(1)  222/  FF1936 : 23C4 FFFF 981A      		move.l	d4,(RAM_SysRandVal).l
(1)  223/  FF193C : 2004                		move.l	d4,d0
(1)  224/  FF193E : 4E75                		rts
(1)  225/  FF1940 :                     		
(1)  226/  FF1940 :                     ; --------------------------------------------------------
(1)  227/  FF1940 :                     ; System_SetInts
(1)  228/  FF1940 :                     ;
(1)  229/  FF1940 :                     ; Set new interrputs
(1)  230/  FF1940 :                     ;
(1)  231/  FF1940 :                     ; d0 | LONG - VBlank
(1)  232/  FF1940 :                     ; d1 | LONG - HBlank
(1)  233/  FF1940 :                     ;
(1)  234/  FF1940 :                     ; Uses:
(1)  235/  FF1940 :                     ; d4
(1)  236/  FF1940 :                     ;
(1)  237/  FF1940 :                     ; Notes:
(1)  238/  FF1940 :                     ; writing $00 or a negative number will skip change
(1)  239/  FF1940 :                     ; to the interrupt pointer
(1)  240/  FF1940 :                     ; --------------------------------------------------------
(1)  241/  FF1940 :                     
(1)  242/  FF1940 :                     System_SetInts:
(1)  243/  FF1940 : 2800                		move.l	d0,d4
(1)  244/  FF1942 : 670E                		beq.s	.novint
(1)  245/  FF1944 : 6B0C                		bmi.s	.novint
(1)  246/  FF1946 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  247/  FF194C : 23C4 FFFF 9828       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  248/  FF1952 :                     .novint:
(1)  249/  FF1952 : 2801                		move.l	d1,d4
(1)  250/  FF1954 : 670E                		beq.s	.nohint
(1)  251/  FF1956 : 6B0C                		bmi.s	.nohint
(1)  252/  FF1958 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  253/  FF195E : 23C4 FFFF 982E      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  254/  FF1964 :                     .nohint:
(1)  255/  FF1964 : 4E75                		rts
(1)  256/  FF1966 :                     
(1)  257/  FF1966 :                     ; --------------------------------------------------------
(1)  258/  FF1966 :                     ; System_SramInit
(1)  259/  FF1966 :                     ; 
(1)  260/  FF1966 :                     ; Init save data
(1)  261/  FF1966 :                     ; 
(1)  262/  FF1966 :                     ; Uses:
(1)  263/  FF1966 :                     ; a4,d4-d5
(1)  264/  FF1966 :                     ; --------------------------------------------------------
(1)  265/  FF1966 :                     
(1)  266/  FF1966 :                     ; TODO: Check if RV bit is needed here...
(1)  267/  FF1966 :                     System_SramInit:
(1)  268/  FF1966 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  269/  FF196E : 49F9 0020 0001      		lea	($200001).l,a4
(1)  270/  FF1974 : 7800                		moveq	#0,d4
(1)  271/  FF1976 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  272/  FF197A :                     .initsave:
(1)  273/  FF197A : 1884                		move.b	d4,(a4)
(1)  274/  FF197C : D8FC 0002           		adda	#2,a4
(1)  275/  FF1980 : 51CD FFF8           		dbf	d5,.initsave
(1)  276/  FF1984 : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  277/  FF198C : 4E75                		rts
(1)  278/  FF198E :                     
(1)  279/  FF198E :                     ; --------------------------------------------------------
(1)  280/  FF198E :                     ; System_VSync
(1)  281/  FF198E :                     ; 
(1)  282/  FF198E :                     ; Waits for VBlank manually
(1)  283/  FF198E :                     ; 
(1)  284/  FF198E :                     ; Uses:
(1)  285/  FF198E :                     ; d4
(1)  286/  FF198E :                     ; --------------------------------------------------------
(1)  287/  FF198E :                     
(1)  288/  FF198E :                     System_VSync:
(1)  289/  FF198E : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)  290/  FF1994 : 0804 0003           		btst	#bitVint,d4
(1)  291/  FF1998 : 67F4                		beq.s	System_VSync
(1)  292/  FF199A : 6100 FE6C           		bsr	System_Input
(1)  293/  FF199E :                     ; 		bsr	Sound_Update
(1)  294/  FF199E : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9816                
(1)  295/  FF19A8 : 3839 00C0 0004      .inside:	move.w	(vdp_ctrl),d4
(1)  296/  FF19AE : 0804 0003           		btst	#bitVint,d4
(1)  297/  FF19B2 : 66F4                		bne.s	.inside
(1)  298/  FF19B4 : 4E75                		rts
(1)  299/  FF19B6 :                     
(1)  300/  FF19B6 :                     ; --------------------------------------------------------
(1)  301/  FF19B6 :                     ; System_JumpRamCode
(1)  302/  FF19B6 :                     ;
(1)  303/  FF19B6 :                     ; Transfer user code to RAM and jump to it.
(1)  304/  FF19B6 :                     ;
(1)  305/  FF19B6 :                     ; Input:
(1)  306/  FF19B6 :                     ; d0 - Location of the RAM code
(1)  307/  FF19B6 :                     ; --------------------------------------------------------
(1)  308/  FF19B6 :                     
(1)  309/  FF19B6 :                     System_JumpRamCode:
(1)  310/  FF19B6 : 80BC 0088 0000      		or.l	#$880000,d0
(1)  311/  FF19BC : 2040                		move.l	d0,a0
(1)  312/  FF19BE : 43F9 00FF 1B54      		lea	(RAMCODE_USER),a1
(1)  313/  FF19C4 : 3E3C 3FFF           		move.w	#$4000-1,d7
(1)  314/  FF19C8 :                     .copyme2:
(1)  315/  FF19C8 : 12D8                		move.b	(a0)+,(a1)+
(1)  316/  FF19CA : 51CF FFFC           		dbf	d7,.copyme2
(1)  317/  FF19CE : 4EF9 00FF 1B54      		jmp	(RAMCODE_USER).l
(1)  318/  FF19D4 :                     
(1)  319/  FF19D4 :                     ; ====================================================================
(1)  320/  FF19D4 :                     ; --------------------------------------------------------
(1)  321/  FF19D4 :                     ; 32X Communication, using CMD interrupt on both SH2s
(1)  322/  FF19D4 :                     ;
(1)  323/  FF19D4 :                     ; ARGUMENTS (d0-d7) MUST BE LONGWORDS (move.l) OR MOVEQ's
(1)  324/  FF19D4 :                     ; d0 IS ALWAYS A JUMP POINTER IN SH2's AREA
(1)  325/  FF19D4 :                     ;
(1)  326/  FF19D4 :                     ; Uses comm8,comm10,comm12, shared for both SH2s
(1)  327/  FF19D4 :                     ; --------------------------------------------------------
(1)  328/  FF19D4 :                     
(1)  329/  FF19D4 :                     ; ------------------------------------------------
(1)  330/  FF19D4 :                     ; Add new task to the list
(1)  331/  FF19D4 :                     ; ------------------------------------------------
(1)  332/  FF19D4 :                     
(1)  333/  FF19D4 :                     System_MdMars_MstAddTask:
(1)  334/  FF19D4 : 41F8 93F6           		lea	(RAM_MdMarsTskM).w,a0
(1)  335/  FF19D8 : 43F8 9832           		lea	(RAM_MdMarsTCntM).w,a1
(1)  336/  FF19DC : 6000 00C4           		bra	sysMdMars_instask
(1)  337/  FF19E0 :                     
(1)  338/  FF19E0 :                     System_MdMars_SlvAddTask:
(1)  339/  FF19E0 : 41F8 95F6           		lea	(RAM_MdMarsTskS).w,a0
(1)  340/  FF19E4 : 43F8 9834           		lea	(RAM_MdMarsTCntS).w,a1
(1)  341/  FF19E8 : 6000 00B8           		bra	sysMdMars_instask
(1)  342/  FF19EC :                     
(1)  343/  FF19EC :                     ; ------------------------------------------------
(1)  344/  FF19EC :                     ; Single task
(1)  345/  FF19EC :                     ; ------------------------------------------------
(1)  346/  FF19EC :                     
(1)  347/  FF19EC :                     System_MdMars_MstTask:
(1)  348/  FF19EC : 41F8 97F6           		lea	(RAM_MdMarsTsSgl),a0
(1)  349/  FF19F0 : 43F9 00A1 512E      		lea	(sysmars_reg+comm14),a1
(1)  350/  FF19F6 : 48D0 00FF           		movem.l	d0-d7,(a0)
(1)  351/  FF19FA : 303C 0020           		move.w	#(MAX_MDTSKARG*4),d0
(1)  352/  FF19FE : 7201                		moveq	#1,d1
(1)  353/  FF1A00 : 7400                		moveq	#0,d2
(1)  354/  FF1A02 : 6000 00B0           		bra	sysMdMars_Transfer
(1)  355/  FF1A06 :                     
(1)  356/  FF1A06 :                     System_MdMars_SlvTask:
(1)  357/  FF1A06 : 41F8 97F6           		lea	(RAM_MdMarsTsSgl),a0
(1)  358/  FF1A0A : 43F9 00A1 512F      		lea	(sysmars_reg+comm15),a1
(1)  359/  FF1A10 : 48D0 00FF           		movem.l	d0-d7,(a0)
(1)  360/  FF1A14 : 303C 0020           		move.w	#(MAX_MDTSKARG*4),d0
(1)  361/  FF1A18 : 7201                		moveq	#1,d1
(1)  362/  FF1A1A : 7401                		moveq	#1,d2
(1)  363/  FF1A1C : 6000 0096           		bra	sysMdMars_Transfer
(1)  364/  FF1A20 :                     
(1)  365/  FF1A20 :                     ; ------------------------------------------------
(1)  366/  FF1A20 :                     ; Queued tasks
(1)  367/  FF1A20 :                     ; ------------------------------------------------
(1)  368/  FF1A20 :                     
(1)  369/  FF1A20 :                     System_MdMars_MstSendAll:
(1)  370/  FF1A20 : 41F8 93F6           		lea	(RAM_MdMarsTskM),a0
(1)  371/  FF1A24 : 43F9 00A1 512E      		lea	(sysmars_reg+comm14),a1
(1)  372/  FF1A2A : 3038 9832           		move.w	(RAM_MdMarsTCntM).w,d0
(1)  373/  FF1A2E : 4278 9832           		clr.w	(RAM_MdMarsTCntM).w
(1)  374/  FF1A32 : 7201                		moveq	#1,d1
(1)  375/  FF1A34 : 7400                		moveq	#0,d2
(1)  376/  FF1A36 : 607C                		bra	sysMdMars_Transfer
(1)  377/  FF1A38 :                     
(1)  378/  FF1A38 :                     System_MdMars_SlvSendAll:
(1)  379/  FF1A38 : 41F8 95F6           		lea	(RAM_MdMarsTskS),a0
(1)  380/  FF1A3C : 43F9 00A1 512F      		lea	(sysmars_reg+comm15),a1
(1)  381/  FF1A42 : 3038 9834           		move.w	(RAM_MdMarsTCntS).w,d0
(1)  382/  FF1A46 : 4278 9834           		clr.w	(RAM_MdMarsTCntS).w
(1)  383/  FF1A4A : 7201                		moveq	#1,d1
(1)  384/  FF1A4C : 7401                		moveq	#1,d2
(1)  385/  FF1A4E : 6064                		bra.s	sysMdMars_Transfer
(1)  386/  FF1A50 :                     
(1)  387/  FF1A50 :                     System_MdMars_MstSendDrop:
(1)  388/  FF1A50 : 41F8 93F6           		lea	(RAM_MdMarsTskM),a0
(1)  389/  FF1A54 : 43F9 00A1 512E      		lea	(sysmars_reg+comm14),a1
(1)  390/  FF1A5A : 3038 9832           		move.w	(RAM_MdMarsTCntM).w,d0
(1)  391/  FF1A5E : 7201                		moveq	#1,d1
(1)  392/  FF1A60 : 7400                		moveq	#0,d2
(1)  393/  FF1A62 : 4E71                		nop
(1)  394/  FF1A64 : 4E71                		nop
(1)  395/  FF1A66 : 1E11                		move.b	(a1),d7
(1)  396/  FF1A68 : CE7C 0080           		and.w	#$80,d7
(1)  397/  FF1A6C : 6702                		beq.s	.go_m
(1)  398/  FF1A6E : 4E75                		rts
(1)  399/  FF1A70 : 4278 9832           .go_m:		clr.w	(RAM_MdMarsTCntM).w
(1)  400/  FF1A74 : 603E                		bra	sysMdMars_Transfer
(1)  401/  FF1A76 :                     
(1)  402/  FF1A76 :                     System_MdMars_SlvSendDrop:
(1)  403/  FF1A76 : 41F8 95F6           		lea	(RAM_MdMarsTskS),a0
(1)  404/  FF1A7A : 43F9 00A1 512F      		lea	(sysmars_reg+comm15),a1
(1)  405/  FF1A80 : 3038 9834           		move.w	(RAM_MdMarsTCntS).w,d0
(1)  406/  FF1A84 : 7201                		moveq	#1,d1
(1)  407/  FF1A86 : 7401                		moveq	#1,d2
(1)  408/  FF1A88 : 4E71                		nop
(1)  409/  FF1A8A : 4E71                		nop
(1)  410/  FF1A8C : 1E11                		move.b	(a1),d7
(1)  411/  FF1A8E : CE7C 0080           		and.w	#$80,d7
(1)  412/  FF1A92 : 6704                		beq.s	.go_s
(1)  413/  FF1A94 : 7EFF                		moveq	#-1,d7
(1)  414/  FF1A96 : 4E75                		rts
(1)  415/  FF1A98 : 4278 9834           .go_s:		clr.w	(RAM_MdMarsTCntS).w
(1)  416/  FF1A9C : 6116                		bsr	sysMdMars_Transfer
(1)  417/  FF1A9E : 7E00                		moveq	#0,d7
(1)  418/  FF1AA0 : 4E75                		rts
(1)  419/  FF1AA2 :                     		
(1)  420/  FF1AA2 :                     ; a0 - task pointer and args
(1)  421/  FF1AA2 :                     ; a1 - task list counter
(1)  422/  FF1AA2 :                     sysMdMars_instask:
(1)  423/  FF1AA2 : 0C51 0200           		cmp.w	#(MAX_MDTSKARG*MAX_MDTASKS)*4,(a1)
(1)  424/  FF1AA6 : 6C0A                		bge.s	.ran_out
(1)  425/  FF1AA8 : D0D1                		adda.w	(a1),a0
(1)  426/  FF1AAA : 48D0 00FF           		movem.l	d0-d7,(a0)		; Set variables to RAM (d0 is the label to jump)
(1)  427/  FF1AAE : 0651 0020           		add.w	#MAX_MDTSKARG*4,(a1)
(1)  428/  FF1AB2 :                     .ran_out:
(1)  429/  FF1AB2 : 4E75                		rts
(1)  430/  FF1AB4 :                     
(1)  431/  FF1AB4 :                     ; ------------------------------------------------
(1)  432/  FF1AB4 :                     ; sysMdMars_Transfer
(1)  433/  FF1AB4 :                     ; 
(1)  434/  FF1AB4 :                     ; a0 - Data to transfer
(1)  435/  FF1AB4 :                     ; a1 - Status byte from the target CPU
(1)  436/  FF1AB4 :                     ; d0 - Num of LONGS(4bytes) to transfer
(1)  437/  FF1AB4 :                     ; d1 - Transfer type ID
(1)  438/  FF1AB4 :                     ; d2 - CMD Interrupt bitset value
(1)  439/  FF1AB4 :                     ; 	($00-Master/$01-Slave)
(1)  440/  FF1AB4 :                     ; ------------------------------------------------
(1)  441/  FF1AB4 :                     
(1)  442/  FF1AB4 :                     sysMdMars_Transfer:
(1)  443/  FF1AB4 : 4E71                		nop
(1)  444/  FF1AB6 : 4E71                		nop
(1)  445/  FF1AB8 : 1811                		move.b	(a1),d4
(1)  446/  FF1ABA : C87C 0080           		and.w	#$80,d4
(1)  447/  FF1ABE : 66F4                		bne.s	sysMdMars_Transfer
(1)  448/  FF1AC0 : 49F9 00A1 5100      		lea	(sysmars_reg),a4
(1)  449/  FF1AC6 : 40C5                		move.w	sr,d5
(1)  450/  FF1AC8 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  451/  FF1ACC : 47EC 0028           		lea	comm8(a4),a3		; comm transfer method	
(1)  452/  FF1AD0 : 1681                		move.b	d1,(a3)			; Set MD task ID
(1)  453/  FF1AD2 : 177C 0001 0001      		move.b	#$01,1(a3)		; Set SH as busy first
(1)  454/  FF1AD8 : 382C 0002           		move.w	standby(a4),d4		; Request CMD interrupt
(1)  455/  FF1ADC : 05C4                		bset	d2,d4
(1)  456/  FF1ADE : 3944 0002           		move.w	d4,standby(a4)
(1)  457/  FF1AE2 : 382C 0002           .wait_cmd:	move.w	standby(a4),d4		; CMD cleared?
(1)  458/  FF1AE6 : 0504                		btst    d2,d4
(1)  459/  FF1AE8 : 66F8                		bne.s   .wait_cmd
(1)  460/  FF1AEA :                     .loop:
(1)  461/  FF1AEA : 0C2B 0002 0001      		cmpi.b	#2,1(a3)		; SH ready?
(1)  462/  FF1AF0 : 66F8                		bne.s	.loop
(1)  463/  FF1AF2 : 3801                		move.w	d1,d4
(1)  464/  FF1AF4 : 887C 0080           		or.w	#$80,d4
(1)  465/  FF1AF8 : 1684                		move.b	d4,(a3)			; MD is busy
(1)  466/  FF1AFA : 4A40                		tst.w	d0
(1)  467/  FF1AFC : 671E                		beq.s	.exit
(1)  468/  FF1AFE : 6B1C                		bmi.s	.exit
(1)  469/  FF1B00 : 2810                		move.l	(a0),d4
(1)  470/  FF1B02 : 4298                		clr.l	(a0)+
(1)  471/  FF1B04 : 3744 0004           		move.w	d4,4(a3)
(1)  472/  FF1B08 : 4844                		swap	d4
(1)  473/  FF1B0A : 3744 0002           		move.w	d4,2(a3)
(1)  474/  FF1B0E : 3801                		move.w	d1,d4
(1)  475/  FF1B10 : 887C 0040           		or.w	#$40,d4
(1)  476/  FF1B14 : 1684                		move.b	d4,(a3)			; MD is ready
(1)  477/  FF1B16 : 907C 0004           		sub.w	#4,d0
(1)  478/  FF1B1A : 60CE                		bra.s	.loop
(1)  479/  FF1B1C :                     .exit:	
(1)  480/  FF1B1C : 16BC 0000           		move.b	#0,(a3)			; MD finished
(1)  481/  FF1B20 : 46C5                		move.w	d5,sr
(1)  482/  FF1B22 :                     .mid_write:
(1)  483/  FF1B22 : 4E75                		rts
(1)  484/  FF1B24 :                     
(1)  485/  FF1B24 :                     ; --------------------------------------------------------
(1)  486/  FF1B24 :                     ; Initialize current screen mode
(1)  487/  FF1B24 :                     ; --------------------------------------------------------
(1)  488/  FF1B24 :                     
(1)  489/  FF1B24 :                     Mode_Init:
(1)  490/  FF1B24 : 6100 E6BE           		bsr	Video_Clear
(1)  491/  FF1B28 : 49F8 8800           		lea	(RAM_ModeBuff),a4
(1)  492/  FF1B2C : 3A3C 03FF           		move.w	#(MAX_MDERAM/2)-1,d5
(1)  493/  FF1B30 : 7800                		moveq	#0,d4
(1)  494/  FF1B32 :                     .clr:
(1)  495/  FF1B32 : 38C4                		move.w	d4,(a4)+
(1)  496/  FF1B34 : 51CD FFFC           		dbf	d5,.clr
(1)  497/  FF1B38 : 4E75                		rts
(1)  498/  FF1B3A :                     		
(1)  499/  FF1B3A :                     ; ====================================================================
(1)  500/  FF1B3A :                     ; ----------------------------------------------------------------
(1)  501/  FF1B3A :                     ; Default interrupts
(1)  502/  FF1B3A :                     ; ----------------------------------------------------------------
(1)  503/  FF1B3A :                     
(1)  504/  FF1B3A :                     ; --------------------------------------------------------
(1)  505/  FF1B3A :                     ; VBlank
(1)  506/  FF1B3A :                     ; --------------------------------------------------------
(1)  507/  FF1B3A :                     
(1)  508/  FF1B3A :                     VInt_Default:
(1)  509/  FF1B3A : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  510/  FF1B3E : 6100 FCC8           		bsr	System_Input
(1)  511/  FF1B42 :                     ; 		bsr	Sound_Update
(1)  512/  FF1B42 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9816                
(1)  513/  FF1B4C : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  514/  FF1B50 : 4E73                		rte
(1)  515/  FF1B52 :                     
(1)  516/  FF1B52 :                     ; --------------------------------------------------------
(1)  517/  FF1B52 :                     ; HBlank
(1)  518/  FF1B52 :                     ; --------------------------------------------------------
(1)  519/  FF1B52 :                     
(1)  520/  FF1B52 :                     HInt_Default:
(1)  521/  FF1B52 : 4E73                		rte
(1)  522/  FF1B54 :                     		
(1)  523/  FF1B54 :                     ; ====================================================================
(1)  524/  FF1B54 :                     ; ----------------------------------------------------------------
(1)  525/  FF1B54 :                     ; System data
(1)  526/  FF1B54 :                     ; ----------------------------------------------------------------
(1)  527/  FF1B54 :                     
(1)  528/  FF1B54 :                     ; Stuff like Sinewave data for MD will go here.
(1)  529/  FF1B54 :                     
      35/  FF1B54 :                     RAMCODE_USER:
      36/    249E :                     		dephase
      37/    249E :                     
      38/    249E :                     MdRamCode_end:
      39/    249E :                     		align 2
      40/    249E :                     
      41/    249E :                     ; ====================================================================
      42/    249E :                     ; ----------------------------------------------------------------
      43/    249E :                     ; Z80 code (read once)
      44/    249E :                     ; ----------------------------------------------------------------
      45/    249E :                     
      46/    249E :                     		align $80
      47/    2500 :                     Z80_CODE:
      48/    2500 :                     		include "system/md/z80.asm"
(1)    1/    2500 :                     ; --------------------------------------------------------
(1)    2/    2500 :                     ; GEMA sound driver, inspired by GEMS
(1)    3/    2500 :                     ;
(1)    4/    2500 :                     ; WARNING: The sample playback has to be sync'd manually
(1)    5/    2500 :                     ; on any code change, DAC sample rate is 16000hz base
(1)    6/    2500 :                     ; --------------------------------------------------------
(1)    7/    2500 :                     
(1)    8/    2500 :                     		cpu Z80			; Set Z80 here
(1)    9/       0 :                     		phase 0			; And set PC to 0
(1)   10/       0 :                     
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     ; Structs
(1)   13/       0 :                     ;
(1)   14/       0 :                     ; NOTE: struct doesn't work properly here. use
(1)   15/       0 :                     ; equs instead
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 :                     ; trkBuff struct
(1)   19/       0 :                     ; LIMIT: 10h bytes
(1)   20/       0 : =0H                 trk_romBlk	equ 0			; 24-bit base block data
(1)   21/       0 : =3H                 trk_romPatt	equ 3			; 24-bit base patt data
(1)   22/       0 : =6H                 trk_romIns	equ 6			; 24-bit ROM instrument pointers
(1)   23/       0 : =9H                 trk_romPattRd	equ 9			; same but for reading
(1)   24/       0 : =CH                 trk_Read	equ 12			; Current track position (in cache)
(1)   25/       0 : =EH                 trk_Rows	equ 14			; Current track length
(1)   26/       0 : =10H                trk_Halfway	equ 16			; Only 00h or 80h
(1)   27/       0 : =11H                trk_currBlk	equ 17			; Current block
(1)   28/       0 : =12H                trk_setBlk	equ 18			; Start on this block
(1)   29/       0 : =13H                trk_status	equ 19			; %ERSx xxxx | E-enabled / R-Init or Restart track
(1)   30/       0 :                     					;	       S-sfx mode
(1)   31/       0 : =14H                trk_tickTmr	equ 20			; Ticks timer
(1)   32/       0 : =15H                trk_tickSet	equ 21			; Ticks set for this track
(1)   33/       0 :                     
(1)   34/       0 :                     ; chnBuff
(1)   35/       0 :                     ; 8 bytes
(1)   36/       0 : =0H                 chnl_Chip	equ 0			; Channel chip: etti iiii | e-enable t-type i-chip channel
(1)   37/       0 : =1H                 chnl_Type	equ 1			; Current type
(1)   38/       0 : =2H                 chnl_Note	equ 2
(1)   39/       0 : =3H                 chnl_Ins	equ 3
(1)   40/       0 : =4H                 chnl_Vol	equ 4
(1)   41/       0 : =5H                 chnl_EffId	equ 5
(1)   42/       0 : =6H                 chnl_EffArg	equ 6
(1)   43/       0 : =7H                 chnl_Status	equ 7			; 000e uuuu | p-priority overwrite, u-update bits from Tracker
(1)   44/       0 :                     
(1)   45/       0 :                     ; --------------------------------------------------------
(1)   46/       0 :                     ; Variables
(1)   47/       0 :                     ; --------------------------------------------------------
(1)   48/       0 :                     
(1)   49/       0 : =2H                 MAX_TRKS	equ	2		; Max tracks to read
(1)   50/       0 : =12H                MAX_TRKCHN	equ	18		; Max internal tracker channels
(1)   51/       0 :                     
(1)   52/       0 :                     ; To brute force DAC playback
(1)   53/       0 :                     ; on or off
(1)   54/       0 : =8H                 zopcEx		equ	08h
(1)   55/       0 : =0H                 zopcNop		equ	00h
(1)   56/       0 : =C9H                zopcRet		equ 	0C9h
(1)   57/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)   58/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)   59/       0 :                     
(1)   60/       0 :                     ; PSG external control
(1)   61/       0 : =0H                 COM		equ	0
(1)   62/       0 : =4H                 LEV		equ	4
(1)   63/       0 : =8H                 ATK		equ	8
(1)   64/       0 : =CH                 DKY		equ	12
(1)   65/       0 : =10H                SLV		equ	16
(1)   66/       0 : =14H                RRT		equ	20
(1)   67/       0 : =18H                MODE		equ	24
(1)   68/       0 : =1CH                DTL		equ	28
(1)   69/       0 : =20H                DTH		equ	32
(1)   70/       0 : =24H                ALV		equ	36
(1)   71/       0 : =28H                FLG		equ	40
(1)   72/       0 : =2CH                TMR		equ	44
(1)   73/       0 :                     
(1)   74/       0 :                     ; ====================================================================
(1)   75/       0 :                     ; --------------------------------------------------------
(1)   76/       0 :                     ; Code starts here
(1)   77/       0 :                     ; --------------------------------------------------------
(1)   78/       0 :                     
(1)   79/       0 : F3                  		di			; Disable interrputs
(1)   80/       1 : ED 56               		im	1		; Interrupt mode 1
(1)   81/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)   82/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)   83/       8 :                     
(1)   84/       8 :                     ; --------------------------------------------------------
(1)   85/       8 :                     
(1)   86/       8 : 00 00               wave_Start	dw 0;TEST_WAV&0FFFFh	; START: 68k direct pointer ($00xxxxxx)
(1)   87/       A : 00                  		db 0;TEST_WAV>>16&0FFh
(1)   88/       B : 00 00               wave_Len	dw 0;(TEST_WAV_E-TEST_WAV)&0FFFFh
(1)   89/       D : 00                  		db 0;(TEST_WAV_E-TEST_WAV)>>16
(1)   90/       E : 00 00               wave_Loop	dw 0
(1)   91/      10 : 00                  		db 0
(1)   92/      11 : 00 01               wave_Pitch	dw 100h			; 01.00h
(1)   93/      13 : 04                  wave_Flags	db 100b			; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1)   94/      14 : 00 00               currTrkBlkHd	dw 0
(1)   95/      16 : 00 00               currTrkData	dw 0
(1)   96/      18 : 00 00               currInsData	dw 0
(1)   97/      1A : 00 00               tickFlag	dw 0			; Tick flag from VBlank, Read as (tickFlag+1) for reading/reseting
(1)   98/      1C : 00                  tickCnt		db 0			; Tick counter (PUT THIS TAG AFTER tickFlag)
(1)   99/      1D : CC 00               sbeatPtck	dw 204			; Sub beats per tick (8frac), default is 120bpm
(1)  100/      1F : 00 00               sbeatAcc	dw 0			; Accumulates ^^ each tick to track sub beats
(1)  101/      21 : 00                  currTickBits	db 0			; Current Tick/Tempo bitflags (000000BTb B-beat, T-tick)
(1)  102/      22 : 00 00 00            dDacPntr	db 0,0,0		; WAVE play current ROM position
(1)  103/      25 : 00 00 00            dDacCntr	db 0,0,0		; WAVE play length counter
(1)  104/      28 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1)  105/      29 : 00                  x68ksrclsb	db 0			; transferRom temporal LSB
(1)  106/      2A : 00                  x68ksrcmid	db 0			; transferRom temporal MID
(1)  107/      2B : 00                  commZRead	db 0			; read pointer (here)
(1)  108/      2C : 00                  commZWrite	db 0			; cmd fifo wptr (from 68k)
(1)  109/      2D : 00                  commZRomBlk	db 0			; 68k ROM block flag
(1)  110/      2E : 00                  commZRomRd	db 0			; Z80 is reading ROM bit
(1)  111/      2F : 00 00 00            psgHatMode	db 0,0,0		; noise mode bits + linked channel
(1)  112/      32 : 00 00               currTblSrch	dw 0
(1)  113/      34 : 00                  reqSampl	db 0			; DAC play request
(1)  114/      35 :                     
(1)  115/      35 :                     ; --------------------------------------------------------
(1)  116/      35 :                     ; Z80 Interrupt at 0038h
(1)  117/      35 :                     ;
(1)  118/      35 :                     ; Sets the TICK flag
(1)  119/      35 :                     ; --------------------------------------------------------
(1)  120/      35 :                     
(1)  121/      35 : (MACRO)             		org 0038h		; Align to 0038h
(1)  121/      35 : 00                                                  db 0
(1)  121/      36 : 00                                                  db 0
(1)  121/      37 : 00                                                  db 0
(1)  121/      38 :                     
(1)  122/      38 : ED 73 1A 00         		ld	(tickFlag),sp	; Use sp to set TICK flag (xx1F, check for tickFlag+1)
(1)  123/      3C : F3                  		di			; Disable interrupt until next request
(1)  124/      3D : C9                  		ret
(1)  125/      3E :                     
(1)  126/      3E :                     ; --------------------------------------------------------
(1)  127/      3E :                     ; Initilize
(1)  128/      3E :                     ; --------------------------------------------------------
(1)  129/      3E :                     
(1)  130/      3E :                     z80_init:
(1)  131/      3E : CD 31 0B            		call	gema_init	; Initilize VBLANK sound driver
(1)  132/      41 : FB                  		ei
(1)  133/      42 :                     
(1)  134/      42 :                     ; --------------------------------------------------------
(1)  135/      42 :                     ; MAIN LOOP
(1)  136/      42 :                     ; --------------------------------------------------------
(1)  137/      42 :                     
(1)  138/      42 :                     drv_loop:
(1)  139/      42 : CD 88 0E            		call	dac_me
(1)  140/      45 : CD AF 0B            		call	check_tick	; Check for tick on VBlank
(1)  141/      48 : CD 9C 0E            		call	dac_fill
(1)  142/      4B : CD 88 0E            		call	dac_me
(1)  143/      4E :                     
(1)  144/      4E :                     	; Check for tick and tempo
(1)  145/      4E : 06 00               		ld	b,0		; b - Reset current flags (beat|tick)
(1)  146/      50 : 3A 1C 00            		ld	a,(tickCnt)
(1)  147/      53 : D6 01               		sub	1
(1)  148/      55 : 38 0B               		jr	c,.noticks
(1)  149/      57 : 32 1C 00            		ld	(tickCnt),a
(1)  150/      5A : CD F0 0C            		call	psg_env		; Process PSG volume and freqs manually
(1)  151/      5D : CD AF 0B            		call	check_tick	; Check for another tick
(1)  152/      60 : 06 01               		ld 	b,01b		; Set TICK (01b) flag, and clear BEAT
(1)  153/      62 :                     .noticks:
(1)  154/      62 : CD 88 0E            		call	dac_me
(1)  155/      65 : 3A 20 00            		ld	a,(sbeatAcc+1)	; check beat counter (scaled by tempo)
(1)  156/      68 : D6 01               		sub	1
(1)  157/      6A : 38 08               		jr	c,.nobeats
(1)  158/      6C : 32 20 00            		ld	(sbeatAcc+1),a	; 1/24 beat passed.
(1)  159/      6F : CB C8               		set	1,b		; Set BEAT (10b) flag
(1)  160/      71 : CD 88 0E            		call	dac_me
(1)  161/      74 :                     .nobeats:
(1)  162/      74 : 78                  		ld	a,b
(1)  163/      75 : B7                  		or	a
(1)  164/      76 : 28 12               		jr	z,.neither
(1)  165/      78 :                     ; 		call	dac_me
(1)  166/      78 : 32 21 00            		ld	(currTickBits),a; Save BEAT/TICK bits
(1)  167/      7B :                     ; 		call	doenvelope	; TODO: probably not doing this...
(1)  168/      7B : CD AF 0B            		call	check_tick
(1)  169/      7E : CD E0 01            		call	playonchip	; Set channels to their respective sound chips
(1)  170/      81 : CD AF 0B            		call	check_tick
(1)  171/      84 : CD 64 07            		call	updtrack	; Update track data
(1)  172/      87 : CD AF 0B            		call	check_tick
(1)  173/      8A :                     .neither:
(1)  174/      8A :                     ; 		call	mars_scomm
(1)  175/      8A :                     ; 		call	dac_me
(1)  176/      8A :                     
(1)  177/      8A :                     .next_cmd:
(1)  178/      8A : CD 9C 0E            		call	dac_fill
(1)  179/      8D : CD 88 0E            		call	dac_me
(1)  180/      90 : 3A 2C 00            		ld	a,(commZWrite)
(1)  181/      93 : 47                  		ld	b,a
(1)  182/      94 : 3A 2B 00            		ld	a,(commZRead)
(1)  183/      97 : B8                  		cp	b
(1)  184/      98 : CA 42 00            		jp	z,drv_loop
(1)  185/      9B : CD 86 0B            		call	get_cmdbyte
(1)  186/      9E : FE FF               		cp	-1			; Read -1 (Start of command)
(1)  187/      A0 : C2 42 00            		jp	nz,drv_loop
(1)  188/      A3 : CD 86 0B            		call	get_cmdbyte		; Read cmd number
(1)  189/      A6 : 87                  		add	a,a
(1)  190/      A7 : 21 B9 00            		ld	hl,.list
(1)  191/      AA : 16 00               		ld	d,0
(1)  192/      AC : 5F                  		ld	e,a
(1)  193/      AD : 19                  		add	hl,de
(1)  194/      AE : CD 9C 0E            		call	dac_fill
(1)  195/      B1 : CD 88 0E            		call	dac_me
(1)  196/      B4 : 7E                  		ld	a,(hl)
(1)  197/      B5 : 23                  		inc	hl
(1)  198/      B6 : 66                  		ld	h,(hl)
(1)  199/      B7 : 6F                  		ld	l,a
(1)  200/      B8 : E9                  		jp	(hl)
(1)  201/      B9 :                     .list:
(1)  202/      B9 : 04 01               		dw .cmnd_trkplay	; $00
(1)  203/      BB : FF 00               		dw .cmnd_0
(1)  204/      BD : FF 00               		dw .cmnd_0
(1)  205/      BF : FF 00               		dw .cmnd_0
(1)  206/      C1 : FF 00               		dw .cmnd_0		; $04
(1)  207/      C3 : FF 00               		dw .cmnd_0
(1)  208/      C5 : FF 00               		dw .cmnd_0
(1)  209/      C7 : FF 00               		dw .cmnd_0
(1)  210/      C9 : FF 00               		dw .cmnd_0		; $08
(1)  211/      CB : FF 00               		dw .cmnd_0
(1)  212/      CD : FF 00               		dw .cmnd_0
(1)  213/      CF : FF 00               		dw .cmnd_0
(1)  214/      D1 : FF 00               		dw .cmnd_0		; $0C
(1)  215/      D3 : FF 00               		dw .cmnd_0
(1)  216/      D5 : FF 00               		dw .cmnd_0
(1)  217/      D7 : FF 00               		dw .cmnd_0
(1)  218/      D9 : FF 00               		dw .cmnd_0		; $10
(1)  219/      DB : FF 00               		dw .cmnd_0
(1)  220/      DD : FF 00               		dw .cmnd_0
(1)  221/      DF : FF 00               		dw .cmnd_0
(1)  222/      E1 : FF 00               		dw .cmnd_0		; $14
(1)  223/      E3 : FF 00               		dw .cmnd_0
(1)  224/      E5 : FF 00               		dw .cmnd_0
(1)  225/      E7 : FF 00               		dw .cmnd_0
(1)  226/      E9 : FF 00               		dw .cmnd_0		; $18
(1)  227/      EB : FF 00               		dw .cmnd_0
(1)  228/      ED : FF 00               		dw .cmnd_0
(1)  229/      EF : FF 00               		dw .cmnd_0
(1)  230/      F1 : FF 00               		dw .cmnd_0		; $1C
(1)  231/      F3 : FF 00               		dw .cmnd_0
(1)  232/      F5 : FF 00               		dw .cmnd_0
(1)  233/      F7 : FF 00               		dw .cmnd_0
(1)  234/      F9 : FF 00               		dw .cmnd_0		; $20
(1)  235/      FB : 5D 01               		dw .cmnd_wav_set	; $21
(1)  236/      FD : C7 01               		dw .cmnd_wav_pitch	; $22
(1)  237/      FF :                     
(1)  238/      FF :                     ; --------------------------------------------------------
(1)  239/      FF :                     ; Command list
(1)  240/      FF :                     ; --------------------------------------------------------
(1)  241/      FF :                     
(1)  242/      FF :                     .cmnd_0:
(1)  243/      FF : 18 FE               		jr	$
(1)  244/     101 : C3 8A 00            		jp	.next_cmd
(1)  245/     104 :                     
(1)  246/     104 :                     ; --------------------------------------------------------
(1)  247/     104 :                     ; $01 - change current wave pitch
(1)  248/     104 :                     ; --------------------------------------------------------
(1)  249/     104 :                     
(1)  250/     104 :                     ; Slot
(1)  251/     104 :                     ; Ticks
(1)  252/     104 :                     ; 24-bit patt data
(1)  253/     104 :                     ; 24-bit block data
(1)  254/     104 :                     
(1)  255/     104 :                     .cmnd_trkplay:
(1)  256/     104 : CD 86 0B            		call	get_cmdbyte		; Get slot position
(1)  257/     107 : FD 21 00 18         		ld	iy,trkBuff
(1)  258/     10B : 11 00 00            		ld	de,0			; Get $0x00
(1)  259/     10E : 57                  		ld	d,a
(1)  260/     10F : FD 19               		add	iy,de
(1)  261/     111 : CD 86 0B            		call	get_cmdbyte		; Get ticks
(1)  262/     114 : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  263/     117 : CD 86 0B            		call	get_cmdbyte		; Pattern data
(1)  264/     11A : FD 77 03            		ld	(iy+trk_romPatt),a
(1)  265/     11D : CD 86 0B            		call	get_cmdbyte
(1)  266/     120 : FD 77 04            		ld	(iy+(trk_romPatt+1)),a
(1)  267/     123 : CD 86 0B            		call	get_cmdbyte
(1)  268/     126 : FD 77 05            		ld	(iy+(trk_romPatt+2)),a
(1)  269/     129 : CD 86 0B            		call	get_cmdbyte		; Block data
(1)  270/     12C : FD 77 00            		ld	(iy+trk_romBlk),a
(1)  271/     12F : CD 86 0B            		call	get_cmdbyte
(1)  272/     132 : FD 77 01            		ld	(iy+(trk_romBlk+1)),a
(1)  273/     135 : CD 86 0B            		call	get_cmdbyte
(1)  274/     138 : FD 77 02            		ld	(iy+(trk_romBlk+2)),a
(1)  275/     13B : CD 86 0B            		call	get_cmdbyte		; Instrument data
(1)  276/     13E : FD 77 06            		ld	(iy+trk_romIns),a
(1)  277/     141 : CD 86 0B            		call	get_cmdbyte
(1)  278/     144 : FD 77 07            		ld	(iy+(trk_romIns+1)),a
(1)  279/     147 : CD 86 0B            		call	get_cmdbyte
(1)  280/     14A : FD 77 08            		ld	(iy+(trk_romIns+2)),a
(1)  281/     14D : 3E 01               		ld	a,1
(1)  282/     14F : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  283/     152 : FD 7E 13            		ld	a,(iy+trk_status)
(1)  284/     155 : F6 C0               		or	0C0h			; Set Enable + REFILL flags
(1)  285/     157 : FD 77 13            		ld	(iy+trk_status),a
(1)  286/     15A : C3 8A 00            		jp	.next_cmd
(1)  287/     15D :                     
(1)  288/     15D :                     ; --------------------------------------------------------
(1)  289/     15D :                     ; $21 - change current wave pitch
(1)  290/     15D :                     ; --------------------------------------------------------
(1)  291/     15D :                     
(1)  292/     15D :                     .cmnd_wav_set:
(1)  293/     15D : FD 21 08 00         		ld	iy,wave_Start
(1)  294/     161 : CD 86 0B            		call	get_cmdbyte		; Start address
(1)  295/     164 : FD 77 00            		ld	(iy),a
(1)  296/     167 : FD 23               		inc	iy
(1)  297/     169 : CD 86 0B            		call	get_cmdbyte
(1)  298/     16C : FD 77 00            		ld	(iy),a
(1)  299/     16F : FD 23               		inc	iy
(1)  300/     171 : CD 86 0B            		call	get_cmdbyte
(1)  301/     174 : FD 77 00            		ld	(iy),a
(1)  302/     177 : FD 23               		inc	iy
(1)  303/     179 : CD 86 0B            		call	get_cmdbyte		; Length
(1)  304/     17C : FD 77 00            		ld	(iy),a
(1)  305/     17F : FD 23               		inc	iy
(1)  306/     181 : CD 86 0B            		call	get_cmdbyte
(1)  307/     184 : FD 77 00            		ld	(iy),a
(1)  308/     187 : FD 23               		inc	iy
(1)  309/     189 : CD 86 0B            		call	get_cmdbyte
(1)  310/     18C : FD 77 00            		ld	(iy),a
(1)  311/     18F : FD 23               		inc	iy
(1)  312/     191 : CD 86 0B            		call	get_cmdbyte		; Loop point
(1)  313/     194 : FD 77 00            		ld	(iy),a
(1)  314/     197 : FD 23               		inc	iy
(1)  315/     199 : CD 86 0B            		call	get_cmdbyte
(1)  316/     19C : FD 77 00            		ld	(iy),a
(1)  317/     19F : FD 23               		inc	iy
(1)  318/     1A1 : CD 86 0B            		call	get_cmdbyte
(1)  319/     1A4 : FD 77 00            		ld	(iy),a
(1)  320/     1A7 : FD 23               		inc	iy
(1)  321/     1A9 : CD 86 0B            		call	get_cmdbyte		; Pitch
(1)  322/     1AC : FD 77 00            		ld	(iy),a
(1)  323/     1AF : FD 23               		inc	iy
(1)  324/     1B1 : CD 86 0B            		call	get_cmdbyte
(1)  325/     1B4 : FD 77 00            		ld	(iy),a
(1)  326/     1B7 : FD 23               		inc	iy
(1)  327/     1B9 : CD 86 0B            		call	get_cmdbyte		; Flags
(1)  328/     1BC : FD 77 00            		ld	(iy),a
(1)  329/     1BF : FD 23               		inc	iy
(1)  330/     1C1 : CD 54 0E            		call	dac_play
(1)  331/     1C4 : C3 8A 00            		jp	.next_cmd
(1)  332/     1C7 :                     
(1)  333/     1C7 :                     ; --------------------------------------------------------
(1)  334/     1C7 :                     ; $22 - change current wave pitch
(1)  335/     1C7 :                     ; --------------------------------------------------------
(1)  336/     1C7 :                     
(1)  337/     1C7 :                     .cmnd_wav_pitch:
(1)  338/     1C7 : D9                  		exx
(1)  339/     1C8 : D5                  		push	de
(1)  340/     1C9 : D9                  		exx
(1)  341/     1CA : E1                  		pop	hl
(1)  342/     1CB : CD 88 0E            		call	dac_me
(1)  343/     1CE : CD 86 0B            		call	get_cmdbyte	; $00xx
(1)  344/     1D1 : 5F                  		ld	e,a
(1)  345/     1D2 : CD 86 0B            		call	get_cmdbyte	; $xx00
(1)  346/     1D5 : 57                  		ld	d,a
(1)  347/     1D6 : D5                  		push	de
(1)  348/     1D7 : CD 88 0E            		call	dac_me
(1)  349/     1DA : D9                  		exx
(1)  350/     1DB : D1                  		pop	de
(1)  351/     1DC : D9                  		exx
(1)  352/     1DD : C3 42 00            		jp	drv_loop
(1)  353/     1E0 :                     
(1)  354/     1E0 :                     ; ====================================================================
(1)  355/     1E0 :                     ; ----------------------------------------------------------------
(1)  356/     1E0 :                     ; Sound playback code
(1)  357/     1E0 :                     ; ----------------------------------------------------------------
(1)  358/     1E0 :                     
(1)  359/     1E0 :                     ; --------------------------------------------------------
(1)  360/     1E0 :                     ; Set and play instruments in their respective channels
(1)  361/     1E0 :                     ; --------------------------------------------------------
(1)  362/     1E0 :                     
(1)  363/     1E0 :                     playonchip
(1)  364/     1E0 : CD 9C 0E            		call	dac_fill
(1)  365/     1E3 : CD 88 0E            		call	dac_me
(1)  366/     1E6 :                     
(1)  367/     1E6 :                     	; Play new notes
(1)  368/     1E6 : 0E 02               		ld	c,MAX_TRKS
(1)  369/     1E8 : 21 00 1C            		ld	hl,insDataC
(1)  370/     1EB : 22 18 00            		ld	(currInsData),hl
(1)  371/     1EE : FD 21 20 18         		ld	iy,trkBuff+20h		; Point to channels
(1)  372/     1F2 :                     .nxt_track:
(1)  373/     1F2 : 06 12               		ld	b,MAX_TRKCHN
(1)  374/     1F4 : FD E5               		push	iy
(1)  375/     1F6 :                     .nxt_chnl:
(1)  376/     1F6 : C5                  		push	bc
(1)  377/     1F7 : FD 7E 07            		ld	a,(iy+chnl_Status)
(1)  378/     1FA : B7                  		or	a
(1)  379/     1FB : C4 2D 02            		call	nz,.do_chnl
(1)  380/     1FE : 00                  		nop
(1)  381/     1FF : 00                  		nop
(1)  382/     200 : CD 88 0E            		call	dac_me
(1)  383/     203 : C1                  		pop	bc
(1)  384/     204 : 11 08 00            		ld	de,8
(1)  385/     207 : FD 19               		add	iy,de
(1)  386/     209 : 10 EB               		djnz	.nxt_chnl
(1)  387/     20B : FD E1               		pop	iy
(1)  388/     20D : 11 00 01            		ld	de,100h
(1)  389/     210 : FD 19               		add	iy,de
(1)  390/     212 :                     
(1)  391/     212 : 11 80 00            		ld	de,80h
(1)  392/     215 : 2A 18 00            		ld	hl,(currInsData)
(1)  393/     218 : 19                  		add	hl,de
(1)  394/     219 : 22 18 00            		ld	(currInsData),hl
(1)  395/     21C : 0D                  		dec	c
(1)  396/     21D : C2 F2 01            		jp	nz,.nxt_track
(1)  397/     220 :                     
(1)  398/     220 : 3A 34 00            		ld	a,(reqSampl)
(1)  399/     223 : B7                  		or	a
(1)  400/     224 : C8                  		ret	z
(1)  401/     225 : AF                  		xor	a
(1)  402/     226 : 32 34 00            		ld	(reqSampl),a
(1)  403/     229 : CD 54 0E            		call	dac_play
(1)  404/     22C : C9                  		ret
(1)  405/     22D :                     
(1)  406/     22D :                     ; ----------------------------------------
(1)  407/     22D :                     ; Channel wants to update
(1)  408/     22D :                     ; ----------------------------------------
(1)  409/     22D :                     
(1)  410/     22D :                     .do_chnl:
(1)  411/     22D : CD 9C 0E            		call	dac_fill
(1)  412/     230 : CD 88 0E            		call	dac_me
(1)  413/     233 : FD CB 07 4E         		bit	1,(iy+chnl_Status)		; Update instrument first
(1)  414/     237 : C4 A8 02            		call	nz,.req_ins
(1)  415/     23A : FD CB 07 56         		bit	2,(iy+chnl_Status)
(1)  416/     23E : C4 B6 03            		call	nz,.req_vol
(1)  417/     241 : CD 88 0E            		call	dac_me
(1)  418/     244 : FD CB 07 5E         		bit	3,(iy+chnl_Status)
(1)  419/     248 : C4 5E 02            		call	nz,.req_eff
(1)  420/     24B : FD CB 07 46         		bit	0,(iy+chnl_Status)
(1)  421/     24F : C4 AE 04            		call	nz,.req_note
(1)  422/     252 : CD 88 0E            		call	dac_me
(1)  423/     255 : FD 7E 07            		ld	a,(iy+chnl_Status)		; clear update flags
(1)  424/     258 : E6 F0               		and	11110000b
(1)  425/     25A : FD 77 07            		ld	(iy+chnl_Status),a
(1)  426/     25D : C9                  		ret
(1)  427/     25E :                     
(1)  428/     25E :                     ; ----------------------------------------
(1)  429/     25E :                     ; Set new instrument
(1)  430/     25E :                     ; ----------------------------------------
(1)  431/     25E :                     
(1)  432/     25E :                     .req_eff:
(1)  433/     25E : CD C6 06            		call	.get_instype
(1)  434/     261 : FE FF               		cp	-1
(1)  435/     263 : C8                  		ret	z
(1)  436/     264 : FE 00               		cp	0
(1)  437/     266 : C8                  		ret	z
(1)  438/     267 : FE 01               		cp	1
(1)  439/     269 : C8                  		ret	z
(1)  440/     26A : FE 02               		cp	2
(1)  441/     26C : CA 78 02            		jp	z,.fm_eff
(1)  442/     26F : FE 03               		cp	3
(1)  443/     271 : CA 78 02            		jp	z,.fm_eff
(1)  444/     274 : FE 04               		cp	4
(1)  445/     276 : C8                  		ret	z
(1)  446/     277 :                     ; 		cp	5
(1)  447/     277 :                     ; 		jp	z,.pwm_eff
(1)  448/     277 : C9                  		ret
(1)  449/     278 :                     .fm_eff:
(1)  450/     278 : FD 7E 05            		ld	a,(iy+chnl_EffId)	; Eff X?
(1)  451/     27B : FE 18               		cp	24
(1)  452/     27D : CA 81 02            		jp	z,.eff_X_fm
(1)  453/     280 : C9                  		ret
(1)  454/     281 :                     .eff_X_fm:
(1)  455/     281 : CD EA 06            		call	.srch_fm
(1)  456/     284 : FE FF               		cp	-1
(1)  457/     286 : C8                  		ret	z
(1)  458/     287 : E5                  		push	hl
(1)  459/     288 : DD E1               		pop	ix
(1)  460/     28A : FD 7E 06            		ld	a,(iy+chnl_EffArg)
(1)  461/     28D : 07                  		rlca
(1)  462/     28E : 07                  		rlca
(1)  463/     28F : E6 03               		and	00000011b
(1)  464/     291 : 21 A4 02            		ld	hl,.fmpan_list
(1)  465/     294 : 11 00 00            		ld	de,0
(1)  466/     297 : 5F                  		ld	e,a
(1)  467/     298 : 19                  		add	hl,de
(1)  468/     299 : DD 7E 07            		ld	a,(ix+7)
(1)  469/     29C : E6 3F               		and	00111111b
(1)  470/     29E : 46                  		ld	b,(hl)
(1)  471/     29F : B0                  		or	b
(1)  472/     2A0 : DD 77 07            		ld	(ix+7),a
(1)  473/     2A3 : C9                  		ret
(1)  474/     2A4 :                     .fmpan_list:
(1)  475/     2A4 : 40                  		db 01000000b	; 000h
(1)  476/     2A5 : 40                  		db 01000000b	; 040h
(1)  477/     2A6 : 00                  		db 00000000b	; 080h
(1)  478/     2A7 : 80                  		db 10000000b	; 0C0h
(1)  479/     2A8 :                     
(1)  480/     2A8 :                     ; .pwm_eff:
(1)  481/     2A8 :                     ; 		ld	a,(iy+chnl_EffId)	; Eff X?
(1)  482/     2A8 :                     ; 		cp	24
(1)  483/     2A8 :                     ; 		jp	z,.eff_X_pwm
(1)  484/     2A8 :                     ; 		ret
(1)  485/     2A8 :                     ; .eff_X_pwm:
(1)  486/     2A8 :                     ; 		call	.srch_pwm
(1)  487/     2A8 :                     ; 		cp	-1
(1)  488/     2A8 :                     ; 		ret	z
(1)  489/     2A8 :                     ; 		push	hl
(1)  490/     2A8 :                     ; 		pop	ix
(1)  491/     2A8 :                     ; 		ld	a,(iy+chnl_EffArg)
(1)  492/     2A8 :                     ; 		rlca
(1)  493/     2A8 :                     ; 		rlca
(1)  494/     2A8 :                     ; 		and	00000011b
(1)  495/     2A8 :                     ; 		ld	hl,.pwmpan_list
(1)  496/     2A8 :                     ; 		ld	de,0
(1)  497/     2A8 :                     ; 		ld	e,a
(1)  498/     2A8 :                     ; 		add	hl,de
(1)  499/     2A8 :                     ; 		ld	a,(hl)
(1)  500/     2A8 :                     ; 		ld	(ix+7),a
(1)  501/     2A8 :                     ; 		ret
(1)  502/     2A8 :                     ;
(1)  503/     2A8 :                     ; .pwmpan_list:
(1)  504/     2A8 :                     ; 		db 001h		; 000h
(1)  505/     2A8 :                     ; 		db 001h		; 040h
(1)  506/     2A8 :                     ; 		db 003h		; 080h
(1)  507/     2A8 :                     ; 		db 002h		; 0C0h
(1)  508/     2A8 :                     
(1)  509/     2A8 :                     ; ----------------------------------------
(1)  510/     2A8 :                     ; Set new instrument
(1)  511/     2A8 :                     ; ----------------------------------------
(1)  512/     2A8 :                     
(1)  513/     2A8 :                     .req_ins:
(1)  514/     2A8 : CD C6 06            		call	.get_instype
(1)  515/     2AB : FE FF               		cp	-1		; Null
(1)  516/     2AD : C8                  		ret	z
(1)  517/     2AE : FE 00               		cp	0		; PSG normal
(1)  518/     2B0 : 28 11               		jr	z,.ins_psg
(1)  519/     2B2 : FE 01               		cp	1		; PSG noise
(1)  520/     2B4 : 28 21               		jr	z,.ins_ns
(1)  521/     2B6 : FE 02               		cp	2		; FM normal
(1)  522/     2B8 : 28 66               		jr	z,.fm_ins
(1)  523/     2BA : FE 03               		cp	3		; FM special
(1)  524/     2BC : C8                  		ret	z
(1)  525/     2BD : FE 04               		cp	4		; DAC
(1)  526/     2BF : CA 94 03            		jp	z,.dac_ins
(1)  527/     2C2 :                     ; 		cp	5		; PWM
(1)  528/     2C2 :                     ; 		jp	z,.pwm_ins
(1)  529/     2C2 : C9                  		ret
(1)  530/     2C3 :                     
(1)  531/     2C3 :                     ; PSG instrument
(1)  532/     2C3 :                     .ins_psg:
(1)  533/     2C3 : E5                  		push	hl
(1)  534/     2C4 : CD 88 0E            		call	dac_me
(1)  535/     2C7 : CD E2 06            		call	.srch_psg	; Type 0: PSG
(1)  536/     2CA : D1                  		pop	de
(1)  537/     2CB : FE FF               		cp	-1
(1)  538/     2CD : C8                  		ret	z
(1)  539/     2CE : 1A                  		ld	a,(de)
(1)  540/     2CF : 4F                  		ld	c,a
(1)  541/     2D0 : 13                  		inc	de
(1)  542/     2D1 : 13                  		inc	de
(1)  543/     2D2 : CD 88 0E            		call	dac_me
(1)  544/     2D5 : 18 0F               		jr	.cont_psg
(1)  545/     2D7 :                     .ins_ns:
(1)  546/     2D7 : E5                  		push	hl
(1)  547/     2D8 : CD DA 06            		call	.srch_psgn	; Type 1: PSG Noise
(1)  548/     2DB : D1                  		pop	de
(1)  549/     2DC : FE FF               		cp	-1
(1)  550/     2DE : C8                  		ret	z
(1)  551/     2DF : 7E                  		ld	a,(hl)
(1)  552/     2E0 : 4F                  		ld	c,a
(1)  553/     2E1 : 13                  		inc	de
(1)  554/     2E2 : 13                  		inc	de
(1)  555/     2E3 : CD 88 0E            		call	dac_me
(1)  556/     2E6 :                     .cont_psg:
(1)  557/     2E6 : 23                  		inc	hl
(1)  558/     2E7 : 23                  		inc 	hl
(1)  559/     2E8 : 23                  		inc	hl
(1)  560/     2E9 : CD 88 0E            		call	dac_me
(1)  561/     2EC : 1A                  		ld	a,(de)
(1)  562/     2ED : 47                  		ld	b,a
(1)  563/     2EE : 13                  		inc	de
(1)  564/     2EF : 1A                  		ld	a,(de)
(1)  565/     2F0 : 13                  		inc	de
(1)  566/     2F1 : D5                  		push	de
(1)  567/     2F2 : 57                  		ld	d,a
(1)  568/     2F3 : 58                  		ld	e,b
(1)  569/     2F4 :                     	rept 5				; copypaste to psduochnl
(1)  570/     2F4 :                     		ld	a,(de)
(1)  571/     2F4 :                      		ld	(hl),a
(1)  572/     2F4 :                      		inc	de
(1)  573/     2F4 :                     		inc	hl
(1)  574/     2F4 :                     		call	dac_me
(1)  575/     2F4 :                     		nop
(1)  576/     2F4 :                     	endm
(1)  570/     2F4 : 1A                  		ld	a,(de)
(1)  571/     2F5 : 77                   		ld	(hl),a
(1)  572/     2F6 : 13                   		inc	de
(1)  573/     2F7 : 23                  		inc	hl
(1)  574/     2F8 : CD 88 0E            		call	dac_me
(1)  575/     2FB : 00                  		nop
(1)  570/     2FC : 1A                  		ld	a,(de)
(1)  571/     2FD : 77                   		ld	(hl),a
(1)  572/     2FE : 13                   		inc	de
(1)  573/     2FF : 23                  		inc	hl
(1)  574/     300 : CD 88 0E            		call	dac_me
(1)  575/     303 : 00                  		nop
(1)  570/     304 : 1A                  		ld	a,(de)
(1)  571/     305 : 77                   		ld	(hl),a
(1)  572/     306 : 13                   		inc	de
(1)  573/     307 : 23                  		inc	hl
(1)  574/     308 : CD 88 0E            		call	dac_me
(1)  575/     30B : 00                  		nop
(1)  570/     30C : 1A                  		ld	a,(de)
(1)  571/     30D : 77                   		ld	(hl),a
(1)  572/     30E : 13                   		inc	de
(1)  573/     30F : 23                  		inc	hl
(1)  574/     310 : CD 88 0E            		call	dac_me
(1)  575/     313 : 00                  		nop
(1)  570/     314 : 1A                  		ld	a,(de)
(1)  571/     315 : 77                   		ld	(hl),a
(1)  572/     316 : 13                   		inc	de
(1)  573/     317 : 23                  		inc	hl
(1)  574/     318 : CD 88 0E            		call	dac_me
(1)  575/     31B : 00                  		nop
(1)  577/     31C : D1                  		pop	de
(1)  578/     31D : 1A                  		ld	a,(de)
(1)  579/     31E : 77                  		ld	(hl),a
(1)  580/     31F : C9                  		ret
(1)  581/     320 :                     ; Type 2
(1)  582/     320 :                     .fm_ins:
(1)  583/     320 : E5                  		push	hl
(1)  584/     321 : CD EA 06            		call	.srch_fm
(1)  585/     324 : FE FF               		cp	-1
(1)  586/     326 : C8                  		ret	z
(1)  587/     327 : E5                  		push	hl
(1)  588/     328 : DD E1               		pop	ix
(1)  589/     32A : E1                  		pop	hl
(1)  590/     32B : CD 88 0E            		call	dac_me
(1)  591/     32E : 23                  		inc	hl
(1)  592/     32F : 7E                  		ld	a,(hl)
(1)  593/     330 : DD 77 05            		ld	(ix+5),a
(1)  594/     333 : 23                  		inc	hl
(1)  595/     334 : 7E                  		ld	a,(hl)
(1)  596/     335 : 23                  		inc	hl
(1)  597/     336 : 66                  		ld	h,(hl)
(1)  598/     337 : 6F                  		ld	l,a
(1)  599/     338 : DD 75 03            		ld	(ix+3),l
(1)  600/     33B : DD 74 04            		ld	(ix+4),h
(1)  601/     33E : CD 88 0E            		call	dac_me
(1)  602/     341 :                     
(1)  603/     341 : DD 7E 00            		ld	a,(ix)		; Keys off
(1)  604/     344 : E6 07               		and	0111b
(1)  605/     346 : 5F                  		ld	e,a
(1)  606/     347 : 16 28               		ld	d,28h
(1)  607/     349 : CD 3E 0E            		call	fm_send_1
(1)  608/     34C :                     
(1)  609/     34C : DD 7E 00            		ld	a,(ix)		; Prepare first FM reg
(1)  610/     34F : E6 03               		and	11b
(1)  611/     351 : F6 30               		or	30h
(1)  612/     353 : 57                  		ld	d,a
(1)  613/     354 : 06 1C               		ld	b,4*7
(1)  614/     356 :                     .setlv:
(1)  615/     356 : CD 88 0E            		call	dac_me
(1)  616/     359 : 5E                  		ld	e,(hl)
(1)  617/     35A : CD 37 0E            		call	fm_autoset
(1)  618/     35D : 14                  		inc 	d
(1)  619/     35E : 14                  		inc 	d
(1)  620/     35F : 14                  		inc 	d
(1)  621/     360 : 14                  		inc 	d
(1)  622/     361 : 23                  		inc	hl
(1)  623/     362 : 10 F2               		djnz	.setlv
(1)  624/     364 :                     
(1)  625/     364 : 7A                  		ld	a,d
(1)  626/     365 : E6 03               		and	11b
(1)  627/     367 : F6 B0               		or	0B0h
(1)  628/     369 : 57                  		ld	d,a
(1)  629/     36A : 5E                  		ld	e,(hl)			; 0B0h
(1)  630/     36B : DD 73 06            		ld	(ix+6),e
(1)  631/     36E : CD 37 0E            		call	fm_autoset
(1)  632/     371 : CD 88 0E            		call	dac_me
(1)  633/     374 : 23                  		inc 	hl
(1)  634/     375 : 14                  		inc	d
(1)  635/     376 : 14                  		inc	d
(1)  636/     377 : 14                  		inc	d
(1)  637/     378 : 14                  		inc	d
(1)  638/     379 :                     
(1)  639/     379 : 7E                  		ld	a,(hl)			; 0B4h
(1)  640/     37A : E6 3F               		and	00111111b
(1)  641/     37C : 47                  		ld	b,a
(1)  642/     37D : DD 7E 07            		ld	a,(ix+7)
(1)  643/     380 : E6 C0               		and	11000000b
(1)  644/     382 : B0                  		or	b
(1)  645/     383 : DD 77 07            		ld	(ix+7),a
(1)  646/     386 : 5F                  		ld	e,a
(1)  647/     387 : CD 88 0E            		call	dac_me
(1)  648/     38A : CD 37 0E            		call	fm_autoset
(1)  649/     38D : 23                  		inc	hl			; TODO: FM3 enable bit
(1)  650/     38E : 23                  		inc	hl
(1)  651/     38F : 7E                  		ld	a,(hl)			; Keys (xxxx0000b)
(1)  652/     390 : DD 77 08            		ld	(ix+8),a
(1)  653/     393 : C9                  		ret
(1)  654/     394 :                     
(1)  655/     394 :                     ; Type 4
(1)  656/     394 :                     .dac_ins:
(1)  657/     394 :                     	; TODO: FM6/DAC LOCK
(1)  658/     394 : 23                  		inc	hl
(1)  659/     395 : 23                  		inc	hl
(1)  660/     396 : 4E                  		ld	c,(hl)
(1)  661/     397 : 23                  		inc	hl
(1)  662/     398 : CD 88 0E            		call	dac_me
(1)  663/     39B : 46                  		ld	b,(hl)
(1)  664/     39C : 23                  		inc	hl
(1)  665/     39D : 7E                  		ld	a,(hl)
(1)  666/     39E : F6 04               		or	100b
(1)  667/     3A0 : 32 13 00            		ld	(wave_Flags),a
(1)  668/     3A3 :                     
(1)  669/     3A3 : 60                  		ld	h,b
(1)  670/     3A4 : 69                  		ld	l,c
(1)  671/     3A5 : 11 08 00            		ld	de,wave_Start
(1)  672/     3A8 : 06 09               		ld	b,9
(1)  673/     3AA :                     .copybytes:
(1)  674/     3AA : 7E                  		ld	a,(hl)
(1)  675/     3AB : 12                  		ld	(de),a
(1)  676/     3AC : 23                  		inc	hl
(1)  677/     3AD : 13                  		inc	de
(1)  678/     3AE : CD 88 0E            		call	dac_me
(1)  679/     3B1 : 00                  		nop
(1)  680/     3B2 : 00                  		nop
(1)  681/     3B3 : 10 F5               		djnz	.copybytes
(1)  682/     3B5 : C9                  		ret
(1)  683/     3B6 :                     
(1)  684/     3B6 :                     ; 		jr	$
(1)  685/     3B6 :                     
(1)  686/     3B6 :                     ; Type 5
(1)  687/     3B6 :                     ; .pwm_ins:
(1)  688/     3B6 :                     ; 		push	hl
(1)  689/     3B6 :                     ; 		call	.srch_pwm
(1)  690/     3B6 :                     ; 		cp	-1
(1)  691/     3B6 :                     ; 		ret	z
(1)  692/     3B6 :                     ; 		push	hl
(1)  693/     3B6 :                     ; 		pop	ix
(1)  694/     3B6 :                     ; 		pop	hl
(1)  695/     3B6 :                     ;  		ld	de,
(1)  696/     3B6 :                     ;  		ld	a,(iy+chnl_Ins)
(1)  697/     3B6 :                     ;  		dec	a
(1)  698/     3B6 :                     ;  		ld	(ix+5),a		; put ins number
(1)  699/     3B6 :                     ; 		ret
(1)  700/     3B6 :                     
(1)  701/     3B6 :                     ; ----------------------------------------
(1)  702/     3B6 :                     ; Volume request
(1)  703/     3B6 :                     ; ----------------------------------------
(1)  704/     3B6 :                     
(1)  705/     3B6 :                     .req_vol:
(1)  706/     3B6 : CD C6 06            		call	.get_instype
(1)  707/     3B9 : FE FF               		cp	-1
(1)  708/     3BB : C8                  		ret	z
(1)  709/     3BC : FE 02               		cp	2
(1)  710/     3BE : CA EE 03            		jp	z,.vol_fm
(1)  711/     3C1 : FE 03               		cp	3
(1)  712/     3C3 : C8                  		ret	z
(1)  713/     3C4 : FE 04               		cp	4
(1)  714/     3C6 : C8                  		ret	z
(1)  715/     3C7 : FE 05               		cp	5
(1)  716/     3C9 : CA 95 04            		jp	z,.vol_pwm
(1)  717/     3CC :                     
(1)  718/     3CC :                     	; PSG volume
(1)  719/     3CC : FE 01               		cp	1
(1)  720/     3CE : 20 05               		jr	nz,.notnsev
(1)  721/     3D0 : CD DA 06            		call	.srch_psgn
(1)  722/     3D3 : 18 03               		jr	.pvcont
(1)  723/     3D5 :                     .notnsev:
(1)  724/     3D5 : CD E2 06            		call	.srch_psg	; Type 0: PSG
(1)  725/     3D8 :                     .pvcont:
(1)  726/     3D8 : FE FF               		cp	-1
(1)  727/     3DA : C8                  		ret	z
(1)  728/     3DB : 23                  		inc	hl
(1)  729/     3DC : 23                  		inc 	hl
(1)  730/     3DD : 23                  		inc 	hl		; Point to Attack level
(1)  731/     3DE : FD 7E 04            		ld	a,(iy+chnl_Vol)
(1)  732/     3E1 : D6 40               		sub	a,40h
(1)  733/     3E3 : 87                  		add	a,a
(1)  734/     3E4 : CD 88 0E            		call	dac_me
(1)  735/     3E7 : 47                  		ld	b,a
(1)  736/     3E8 : 7E                  		ld	a,(hl)
(1)  737/     3E9 : 90                  		sub	b
(1)  738/     3EA : 77                  		ld	(hl),a
(1)  739/     3EB : 23                  		inc	hl
(1)  740/     3EC : 23                  		inc	hl
(1)  741/     3ED : C9                  		ret
(1)  742/     3EE :                     
(1)  743/     3EE :                     .vol_fm:
(1)  744/     3EE : CD EA 06            		call	.srch_fm
(1)  745/     3F1 : FE FF               		cp	-1
(1)  746/     3F3 : C8                  		ret	z
(1)  747/     3F4 : E5                  		push	hl
(1)  748/     3F5 : DD E1               		pop	ix
(1)  749/     3F7 : 23                  		inc	hl
(1)  750/     3F8 : 23                  		inc	hl
(1)  751/     3F9 : 23                  		inc	hl
(1)  752/     3FA : CD 88 0E            		call	dac_me
(1)  753/     3FD : 7E                  		ld	a,(hl)
(1)  754/     3FE : 23                  		inc	hl
(1)  755/     3FF : 66                  		ld	h,(hl)
(1)  756/     400 : 6F                  		ld	l,a
(1)  757/     401 : 11 04 00            		ld	de,4
(1)  758/     404 : 19                  		add	hl,de		; Point to 40h's
(1)  759/     405 :                     
(1)  760/     405 :                     	; copy-pasted from PulseMini
(1)  761/     405 :                     	; b - 0B0h
(1)  762/     405 :                     	; c - Volume
(1)  763/     405 : CD 9C 0E            		call	dac_fill
(1)  764/     408 : CD 88 0E            		call	dac_me
(1)  765/     40B : FD 7E 04            		ld	a,(iy+chnl_Vol)
(1)  766/     40E : D6 40               		sub	a,40h
(1)  767/     410 : ED 44               		neg	a
(1)  768/     412 : 4F                  		ld	c,a
(1)  769/     413 : DD 7E 06            		ld	a,(ix+6)
(1)  770/     416 : E6 07               		and	111b
(1)  771/     418 : 47                  		ld	b,a
(1)  772/     419 : 16 40               		ld	d,40h
(1)  773/     41B : DD 7E 00            		ld	a,(ix)
(1)  774/     41E : E6 03               		and	11b
(1)  775/     420 : B2                  		or	d
(1)  776/     421 : 57                  		ld	d,a
(1)  777/     422 : CD 88 0E            		call	dac_me
(1)  778/     425 : 5E                  		ld	e,(hl)
(1)  779/     426 : 23                  		inc 	hl
(1)  780/     427 : 78                  		ld	a,b
(1)  781/     428 : FE 07               		cp	7
(1)  782/     42A : C2 36 04            		jp	nz,.tlv_lv1
(1)  783/     42D : 7B                  		ld	a,e
(1)  784/     42E : 81                  		add 	a,c
(1)  785/     42F : 5F                  		ld	e,a
(1)  786/     430 : B7                  		or	a
(1)  787/     431 : F2 36 04            		jp	p,.tlv_lv1
(1)  788/     434 : 1E 7F               		ld	e,7Fh
(1)  789/     436 :                     .tlv_lv1:
(1)  790/     436 : CD 37 0E            		call	fm_autoset
(1)  791/     439 : 14                  		inc 	d
(1)  792/     43A : 14                  		inc 	d
(1)  793/     43B : 14                  		inc 	d
(1)  794/     43C : 14                  		inc 	d
(1)  795/     43D : CD 88 0E            		call	dac_me
(1)  796/     440 : 5E                  		ld	e,(hl)
(1)  797/     441 : 78                  		ld	a,b
(1)  798/     442 : FE 07               		cp	7
(1)  799/     444 : CA 54 04            		jp	z,.tlv_lv2_ok
(1)  800/     447 : FE 06               		cp	6
(1)  801/     449 : CA 54 04            		jp	z,.tlv_lv2_ok
(1)  802/     44C : FE 05               		cp	5
(1)  803/     44E : C2 5D 04            		jp	nz,.tlv_lv2
(1)  804/     451 : CD 88 0E            		call	dac_me
(1)  805/     454 :                     .tlv_lv2_ok:
(1)  806/     454 : 7B                  		ld	a,e
(1)  807/     455 : 81                  		add 	a,c
(1)  808/     456 : 5F                  		ld	e,a
(1)  809/     457 : B7                  		or	a
(1)  810/     458 : F2 5D 04            		jp	p,.tlv_lv2
(1)  811/     45B : 1E 7F               		ld	e,7Fh
(1)  812/     45D :                     .tlv_lv2:
(1)  813/     45D : CD 37 0E            		call	fm_autoset
(1)  814/     460 : 23                  		inc 	hl
(1)  815/     461 : 14                  		inc 	d
(1)  816/     462 : 14                  		inc 	d
(1)  817/     463 : 14                  		inc 	d
(1)  818/     464 : 14                  		inc 	d
(1)  819/     465 : CD 88 0E            		call	dac_me
(1)  820/     468 : 5E                  		ld	e,(hl)
(1)  821/     469 : 78                  		ld	a,b
(1)  822/     46A : E6 04               		and	100b
(1)  823/     46C : B7                  		or	a
(1)  824/     46D : CA 7C 04            		jp	z,.tlv_lv3
(1)  825/     470 : 7B                  		ld	a,e
(1)  826/     471 : 81                  		add 	a,c
(1)  827/     472 : 5F                  		ld	e,a
(1)  828/     473 : B7                  		or	a
(1)  829/     474 : F2 7C 04            		jp	p,.tlv_lv3
(1)  830/     477 : CD 88 0E            		call	dac_me
(1)  831/     47A : 3E 7F               		ld	a,7Fh
(1)  832/     47C :                     .tlv_lv3:
(1)  833/     47C : CD 37 0E            		call	fm_autoset
(1)  834/     47F : 23                  		inc 	hl
(1)  835/     480 : 14                  		inc 	d
(1)  836/     481 : 14                  		inc 	d
(1)  837/     482 : 14                  		inc 	d
(1)  838/     483 : 14                  		inc 	d
(1)  839/     484 : CD 88 0E            		call	dac_me
(1)  840/     487 : 7E                  		ld	a,(hl)
(1)  841/     488 : 81                  		add 	a,c
(1)  842/     489 : B7                  		or	a
(1)  843/     48A : F2 8F 04            		jp	p,.tlv_lv4
(1)  844/     48D : 3E 7F               		ld	a,7Fh
(1)  845/     48F :                     .tlv_lv4:
(1)  846/     48F : 5F                  		ld	e,a
(1)  847/     490 : 23                  		inc 	hl
(1)  848/     491 : CD 37 0E            		call	fm_autoset
(1)  849/     494 : C9                  		ret
(1)  850/     495 :                     
(1)  851/     495 :                     ; Type 5
(1)  852/     495 :                     .vol_pwm:
(1)  853/     495 : E5                  		push	hl
(1)  854/     496 : CD 02 07            		call	.srch_pwm
(1)  855/     499 : FE FF               		cp	-1
(1)  856/     49B : C8                  		ret	z
(1)  857/     49C : E5                  		push	hl
(1)  858/     49D : DD E1               		pop	ix
(1)  859/     49F : E1                  		pop	hl
(1)  860/     4A0 : 11 00 00             		ld	de,
(1)  861/     4A3 : FD 7E 04             		ld	a,(iy+chnl_Vol)
(1)  862/     4A6 : D6 40               		sub	a,40h
(1)  863/     4A8 : ED 44               		neg	a
(1)  864/     4AA :                     ; 		add	a,a
(1)  865/     4AA : DD 77 06             		ld	(ix+6),a		; put vol number
(1)  866/     4AD : C9                  		ret
(1)  867/     4AE :                     
(1)  868/     4AE :                     ; ----------------------------------------
(1)  869/     4AE :                     ; Note request
(1)  870/     4AE :                     ; ----------------------------------------
(1)  871/     4AE :                     
(1)  872/     4AE :                     .req_note:
(1)  873/     4AE : CD C6 06            		call	.get_instype
(1)  874/     4B1 : FE FF               		cp	-1
(1)  875/     4B3 : C8                  		ret	z
(1)  876/     4B4 : FE 02               		cp	2
(1)  877/     4B6 : CA CB 05            		jp	z,.note_fm
(1)  878/     4B9 : FE 03               		cp	3
(1)  879/     4BB : CA AD 06            		jp	z,.note_fm3
(1)  880/     4BE : FE 04               		cp	4
(1)  881/     4C0 : CA B9 06            		jp	z,.note_dac
(1)  882/     4C3 : FE 05               		cp	5
(1)  883/     4C5 : CA C5 06            		jp	z,.note_pwm
(1)  884/     4C8 : CD 88 0E            		call	dac_me
(1)  885/     4CB : 23                  		inc	hl
(1)  886/     4CC : 4E                  		ld	c,(hl)
(1)  887/     4CD : C5                  		push	bc
(1)  888/     4CE :                     
(1)  889/     4CE :                     	; PSG mode 0 and 1
(1)  890/     4CE : FE 01               		cp	1
(1)  891/     4D0 : 20 05               		jr	nz,.notnse
(1)  892/     4D2 : CD DA 06            		call	.srch_psgn
(1)  893/     4D5 : 18 03               		jr	.pncont
(1)  894/     4D7 :                     .notnse:
(1)  895/     4D7 : CD E2 06            		call	.srch_psg	; Type 0: PSG
(1)  896/     4DA :                     .pncont:
(1)  897/     4DA : FE FF               		cp	-1
(1)  898/     4DC : C8                  		ret	z
(1)  899/     4DD : 7E                  		ld	a,(hl)		; Get pseudo channel slot
(1)  900/     4DE : FE FF               		cp	-1
(1)  901/     4E0 : C8                  		ret	z
(1)  902/     4E1 : C1                  		pop	bc
(1)  903/     4E2 : E5                  		push	hl		; save this hl
(1)  904/     4E3 : E6 03               		and	11b
(1)  905/     4E5 : CD 88 0E            		call	dac_me
(1)  906/     4E8 : DD 21 38 12         		ld	ix,psgcom
(1)  907/     4EC : 11 00 00            		ld	de,0
(1)  908/     4EF : 5F                  		ld	e,a
(1)  909/     4F0 : DD 19               		add	ix,de
(1)  910/     4F2 : 11 00 00            		ld	de,0		; Read freq
(1)  911/     4F5 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1)  912/     4F8 : FE FE               		cp	-2
(1)  913/     4FA : CA 9B 05            		jp	z,.pstop
(1)  914/     4FD : FE FF               		cp	-1
(1)  915/     4FF : CA B3 05            		jp	z,.poff
(1)  916/     502 : 81                  		add	a,c
(1)  917/     503 : 21 80 10            		ld	hl,psgFreq_List
(1)  918/     506 : 87                  		add	a,a
(1)  919/     507 : 5F                  		ld	e,a
(1)  920/     508 : 19                  		add	hl,de
(1)  921/     509 : CD 88 0E            		call	dac_me
(1)  922/     50C : 7E                  		ld	a,(hl)
(1)  923/     50D : E6 0F               		and	0Fh
(1)  924/     50F : DD 77 1C            		ld	(ix+DTL),a
(1)  925/     512 : 7E                  		ld	a,(hl)
(1)  926/     513 : CB 2F               		sra	a
(1)  927/     515 : CB 2F               		sra	a
(1)  928/     517 : CB 2F               		sra	a
(1)  929/     519 : CB 2F               		sra	a
(1)  930/     51B : E6 0F               		and	0Fh
(1)  931/     51D : CD 88 0E            		call	dac_me
(1)  932/     520 : 47                  		ld	b,a
(1)  933/     521 : 23                  		inc	hl
(1)  934/     522 : 7E                  		ld	a,(hl)
(1)  935/     523 : CB 27               		sla	a
(1)  936/     525 : CB 27               		sla	a
(1)  937/     527 : CB 27               		sla	a
(1)  938/     529 : CB 27               		sla	a
(1)  939/     52B : E6 F0               		and	0F0h
(1)  940/     52D : B0                  		or	b
(1)  941/     52E : CD 88 0E            		call	dac_me
(1)  942/     531 : DD 77 20            		ld	(ix+DTH),a
(1)  943/     534 : E1                  		pop	hl		; get hl back
(1)  944/     535 : 46                  		ld	b,(hl)
(1)  945/     536 : 23                  		inc	hl
(1)  946/     537 : 23                  		inc	hl
(1)  947/     538 : 23                  		inc 	hl		; Point to our PSG ins data
(1)  948/     539 : 7E                  		ld	a,(hl)
(1)  949/     53A : 23                  		inc	hl
(1)  950/     53B : DD 77 24            		ld	(ix+ALV),a	; attack level
(1)  951/     53E : 7E                  		ld	a,(hl)
(1)  952/     53F : 23                  		inc	hl
(1)  953/     540 : CD 88 0E            		call	dac_me
(1)  954/     543 : DD 77 08            		ld	(ix+ATK),a	; attack rate
(1)  955/     546 : 7E                  		ld	a,(hl)
(1)  956/     547 : 23                  		inc	hl
(1)  957/     548 : DD 77 10            		ld	(ix+SLV),a	; sustain
(1)  958/     54B : 7E                  		ld	a,(hl)
(1)  959/     54C : 23                  		inc	hl
(1)  960/     54D : DD 77 0C            		ld	(ix+DKY),a	; decay rate
(1)  961/     550 : 7E                  		ld	a,(hl)
(1)  962/     551 : 23                  		inc	hl
(1)  963/     552 : DD 77 14            		ld	(ix+RRT),a	; release rate
(1)  964/     555 : 78                  		ld	a,b
(1)  965/     556 : E6 83               		and	10000011b
(1)  966/     558 : FD 77 00            		ld	(iy+chnl_Chip),a
(1)  967/     55B : CD 88 0E            		call	dac_me
(1)  968/     55E : E6 03               		and	11b
(1)  969/     560 : FE 02               		cp	2
(1)  970/     562 : CA 8B 05            		jp	z,.psgchnl3
(1)  971/     565 : FE 03               		cp	3
(1)  972/     567 : C2 96 05            		jp	nz,.normlpsg
(1)  973/     56A : 11 2F 00            		ld	de,psgHatMode	; if chnl uses NOISE
(1)  974/     56D : 7E                  		ld	a,(hl)
(1)  975/     56E : FD E5               		push	iy
(1)  976/     570 : E1                  		pop	hl
(1)  977/     571 : 4F                  		ld	c,a
(1)  978/     572 : 12                  		ld	(de),a		; NOISE mode
(1)  979/     573 : 13                  		inc	de
(1)  980/     574 : 7D                  		ld	a,l
(1)  981/     575 : 12                  		ld	(de),a
(1)  982/     576 : CD 88 0E            		call	dac_me
(1)  983/     579 : 13                  		inc 	de
(1)  984/     57A : 7C                  		ld	a,h
(1)  985/     57B : 12                  		ld	(de),a
(1)  986/     57C : 79                  		ld	a,c		; Auto-silence PSG3
(1)  987/     57D : E6 03               		and	11b		; is Tone3 is active
(1)  988/     57F : FE 03               		cp	3
(1)  989/     581 : C2 96 05            		jp	nz,.normlpsg
(1)  990/     584 : 3E 04               		ld	a,100b		; Send stop com directly
(1)  991/     586 : 32 3A 12            		ld	(psgcom+2),a	; To PSG3
(1)  992/     589 : 18 0B               		jr	.normlpsg
(1)  993/     58B :                     	; if chnl uses PSG3
(1)  994/     58B :                     .psgchnl3:
(1)  995/     58B : 3A 2F 00            		ld	a,(psgHatMode)
(1)  996/     58E : E6 03               		and	11b
(1)  997/     590 : FE 03               		cp	11b
(1)  998/     592 : C8                  		ret	z
(1)  999/     593 : CD 88 0E            		call	dac_me
(1) 1000/     596 :                     .normlpsg:
(1) 1001/     596 : DD 36 00 01         		ld	(ix+COM),001b	; Key on.
(1) 1002/     59A : C9                  		ret
(1) 1003/     59B :                     ; full stop
(1) 1004/     59B :                     .pstop:
(1) 1005/     59B : E1                  		pop	hl
(1) 1006/     59C : 7E                  		ld	a,(hl)		; Unlock this channel
(1) 1007/     59D : E6 7F               		and	07Fh
(1) 1008/     59F : 77                  		ld	(hl),a
(1) 1009/     5A0 : 23                  		inc 	hl
(1) 1010/     5A1 : 36 00               		ld	(hl),0
(1) 1011/     5A3 : CD 88 0E            		call	dac_me
(1) 1012/     5A6 : 23                  		inc 	hl
(1) 1013/     5A7 : 36 00               		ld	(hl),0
(1) 1014/     5A9 : 23                  		inc 	hl
(1) 1015/     5AA : DD 36 00 04         		ld	(ix+COM),100b	; Full stop
(1) 1016/     5AE : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 1017/     5B2 : C9                  		ret
(1) 1018/     5B3 :                     ; key off
(1) 1019/     5B3 :                     .poff:
(1) 1020/     5B3 : E1                  		pop	hl
(1) 1021/     5B4 : 7E                  		ld	a,(hl)		; unlock this channel
(1) 1022/     5B5 : E6 7F               		and	07Fh
(1) 1023/     5B7 : 77                  		ld	(hl),a
(1) 1024/     5B8 : 23                  		inc 	hl
(1) 1025/     5B9 : 36 00               		ld	(hl),0
(1) 1026/     5BB : CD 88 0E            		call	dac_me
(1) 1027/     5BE : 23                  		inc 	hl
(1) 1028/     5BF : 36 00               		ld	(hl),0
(1) 1029/     5C1 : 23                  		inc 	hl
(1) 1030/     5C2 : DD 36 00 02         		ld	(ix+COM),010b	; Key off ===
(1) 1031/     5C6 : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 1032/     5CA : C9                  		ret
(1) 1033/     5CB :                     
(1) 1034/     5CB :                     ; ----------------------------------------
(1) 1035/     5CB :                     ; FM
(1) 1036/     5CB :                     ; ----------------------------------------
(1) 1037/     5CB :                     
(1) 1038/     5CB :                     .note_fm:
(1) 1039/     5CB : CD EA 06            		call	.srch_fm
(1) 1040/     5CE : FE FF               		cp	-1
(1) 1041/     5D0 : C8                  		ret	z
(1) 1042/     5D1 : E5                  		push	hl
(1) 1043/     5D2 : DD E1               		pop	ix
(1) 1044/     5D4 : 23                  		inc	hl
(1) 1045/     5D5 : 23                  		inc	hl
(1) 1046/     5D6 : 23                  		inc	hl
(1) 1047/     5D7 : 23                  		inc	hl
(1) 1048/     5D8 : 23                  		inc	hl
(1) 1049/     5D9 : CD 9C 0E            		call	dac_fill
(1) 1050/     5DC : CD 88 0E            		call	dac_me
(1) 1051/     5DF :                     
(1) 1052/     5DF : DD 7E 00            		ld	a,(ix)		; Keys off
(1) 1053/     5E2 : E6 87               		and	10000111b
(1) 1054/     5E4 : F6 20               		or	00100000b	; Mark as FM
(1) 1055/     5E6 : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 1056/     5E9 :                     
(1) 1057/     5E9 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 1058/     5EC : FE FF               		cp	-1		; Key off.
(1) 1059/     5EE : CA AE 06            		jp	z,.keyoff
(1) 1060/     5F1 : FE FE               		cp	-2		; TODO: Total level force off
(1) 1061/     5F3 : CA AE 06            		jp	z,.keyoff
(1) 1062/     5F6 : DD 46 05            		ld	b,(ix+5)
(1) 1063/     5F9 : 80                  		add	a,b
(1) 1064/     5FA : 06 00               		ld	b,0
(1) 1065/     5FC :                     	rept 7				; Separate notedata as octave(b) and note(c)
(1) 1066/     5FC :                     		call	dac_me
(1) 1067/     5FC :                     		ld	c,a
(1) 1068/     5FC :                     		sub	12
(1) 1069/     5FC :                     		or	a
(1) 1070/     5FC :                     		jp	m,.getoct
(1) 1071/     5FC :                     		inc	b
(1) 1072/     5FC :                     	endm
(1) 1066/     5FC : CD 88 0E            		call	dac_me
(1) 1067/     5FF : 4F                  		ld	c,a
(1) 1068/     600 : D6 0C               		sub	12
(1) 1069/     602 : B7                  		or	a
(1) 1070/     603 : FA 49 06            		jp	m,.getoct
(1) 1071/     606 : 04                  		inc	b
(1) 1066/     607 : CD 88 0E            		call	dac_me
(1) 1067/     60A : 4F                  		ld	c,a
(1) 1068/     60B : D6 0C               		sub	12
(1) 1069/     60D : B7                  		or	a
(1) 1070/     60E : FA 49 06            		jp	m,.getoct
(1) 1071/     611 : 04                  		inc	b
(1) 1066/     612 : CD 88 0E            		call	dac_me
(1) 1067/     615 : 4F                  		ld	c,a
(1) 1068/     616 : D6 0C               		sub	12
(1) 1069/     618 : B7                  		or	a
(1) 1070/     619 : FA 49 06            		jp	m,.getoct
(1) 1071/     61C : 04                  		inc	b
(1) 1066/     61D : CD 88 0E            		call	dac_me
(1) 1067/     620 : 4F                  		ld	c,a
(1) 1068/     621 : D6 0C               		sub	12
(1) 1069/     623 : B7                  		or	a
(1) 1070/     624 : FA 49 06            		jp	m,.getoct
(1) 1071/     627 : 04                  		inc	b
(1) 1066/     628 : CD 88 0E            		call	dac_me
(1) 1067/     62B : 4F                  		ld	c,a
(1) 1068/     62C : D6 0C               		sub	12
(1) 1069/     62E : B7                  		or	a
(1) 1070/     62F : FA 49 06            		jp	m,.getoct
(1) 1071/     632 : 04                  		inc	b
(1) 1066/     633 : CD 88 0E            		call	dac_me
(1) 1067/     636 : 4F                  		ld	c,a
(1) 1068/     637 : D6 0C               		sub	12
(1) 1069/     639 : B7                  		or	a
(1) 1070/     63A : FA 49 06            		jp	m,.getoct
(1) 1071/     63D : 04                  		inc	b
(1) 1066/     63E : CD 88 0E            		call	dac_me
(1) 1067/     641 : 4F                  		ld	c,a
(1) 1068/     642 : D6 0C               		sub	12
(1) 1069/     644 : B7                  		or	a
(1) 1070/     645 : FA 49 06            		jp	m,.getoct
(1) 1071/     648 : 04                  		inc	b
(1) 1073/     649 :                     .getoct:
(1) 1074/     649 : CD 88 0E            		call	dac_me
(1) 1075/     64C : 11 00 00            		ld	de,0
(1) 1076/     64F : DD 7E 00            		ld	a,(ix)
(1) 1077/     652 : E6 03               		and	11b
(1) 1078/     654 : F6 A4               		or	0A4h
(1) 1079/     656 : 57                  		ld	d,a
(1) 1080/     657 : 79                  		ld	a,c		; c - Note
(1) 1081/     658 : 87                  		add	a,a
(1) 1082/     659 : 4F                  		ld	c,a
(1) 1083/     65A : 78                  		ld	a,b
(1) 1084/     65B : 87                  		add	a,a
(1) 1085/     65C : 87                  		add	a,a
(1) 1086/     65D : 87                  		add	a,a		; a - Octave
(1) 1087/     65E : 06 00               		ld	b,0
(1) 1088/     660 : CD 88 0E            		call	dac_me
(1) 1089/     663 : 21 68 10            		ld	hl,fmFreq_List
(1) 1090/     666 : 09                  		add	hl,bc
(1) 1091/     667 : 23                  		inc	hl
(1) 1092/     668 : 5F                  		ld	e,a
(1) 1093/     669 : 7E                  		ld	a,(hl)
(1) 1094/     66A : B3                  		or	e
(1) 1095/     66B : 5F                  		ld	e,a
(1) 1096/     66C : DD 77 09            		ld	(ix+9),a
(1) 1097/     66F : CD 37 0E            		call	fm_autoset
(1) 1098/     672 : CD 88 0E            		call	dac_me
(1) 1099/     675 : 15                  		dec	d
(1) 1100/     676 : 15                  		dec	d
(1) 1101/     677 : 15                  		dec	d
(1) 1102/     678 : 15                  		dec	d
(1) 1103/     679 : 2B                  		dec	hl
(1) 1104/     67A : 5E                  		ld	e,(hl)
(1) 1105/     67B : DD 73 0A            		ld	(ix+10),e
(1) 1106/     67E : CD 37 0E            		call	fm_autoset
(1) 1107/     681 : DD 7E 00            		ld	a,(ix)		; 0B4h
(1) 1108/     684 : E6 07               		and	111b
(1) 1109/     686 : 16 B4               		ld	d,0B4h
(1) 1110/     688 : B2                  		or	d
(1) 1111/     689 : 57                  		ld	d,a
(1) 1112/     68A :                     
(1) 1113/     68A : DD 7E 07            		ld	a,(ix+7)
(1) 1114/     68D : 4F                  		ld	c,a
(1) 1115/     68E : E6 3F               		and	00111111b
(1) 1116/     690 : 5F                  		ld	e,a
(1) 1117/     691 : 79                  		ld	a,c
(1) 1118/     692 : 2F                  		cpl
(1) 1119/     693 : E6 C0               		and	11000000b
(1) 1120/     695 : B3                  		or	e
(1) 1121/     696 : 5F                  		ld	e,a
(1) 1122/     697 :                     
(1) 1123/     697 : CD 37 0E            		call	fm_autoset
(1) 1124/     69A : CD 88 0E            		call	dac_me
(1) 1125/     69D : DD 7E 00            		ld	a,(ix)		; Keys
(1) 1126/     6A0 : E6 07               		and	111b
(1) 1127/     6A2 : DD 5E 08            		ld	e,(ix+8)
(1) 1128/     6A5 : B3                  		or	e
(1) 1129/     6A6 : 5F                  		ld	e,a
(1) 1130/     6A7 : 16 28               		ld	d,28h
(1) 1131/     6A9 : CD 3E 0E            		call	fm_send_1
(1) 1132/     6AC : C9                  		ret
(1) 1133/     6AD :                     .note_fm3:
(1) 1134/     6AD : C9                  		ret
(1) 1135/     6AE :                     
(1) 1136/     6AE :                     .keyoff:
(1) 1137/     6AE : DD 7E 00            		ld	a,(ix)		; Keys off
(1) 1138/     6B1 : E6 07               		and	111b
(1) 1139/     6B3 : 5F                  		ld	e,a
(1) 1140/     6B4 : 16 28               		ld	d,28h
(1) 1141/     6B6 : C3 3E 0E            		jp	fm_send_1
(1) 1142/     6B9 :                     
(1) 1143/     6B9 :                     .note_dac:
(1) 1144/     6B9 :                     	; TODO: FM6/DAC LOCK
(1) 1145/     6B9 : 21 00 01            		ld	hl,100h		; temporal.
(1) 1146/     6BC : 22 11 00            		ld	(wave_Pitch),hl
(1) 1147/     6BF : 3E 01               		ld	a,1
(1) 1148/     6C1 : 32 34 00            		ld	(reqSampl),a
(1) 1149/     6C4 : C9                  		ret
(1) 1150/     6C5 :                     
(1) 1151/     6C5 :                     ; ----------------------------------------
(1) 1152/     6C5 :                     ; PWM
(1) 1153/     6C5 :                     ; ----------------------------------------
(1) 1154/     6C5 :                     
(1) 1155/     6C5 :                     .note_pwm:
(1) 1156/     6C5 :                     ; 		push	hl
(1) 1157/     6C5 :                     ; 		call	.srch_pwm
(1) 1158/     6C5 :                     ; 		push	hl
(1) 1159/     6C5 :                     ; 		pop	ix
(1) 1160/     6C5 :                     ; 		pop	hl
(1) 1161/     6C5 :                     ; 		inc	hl
(1) 1162/     6C5 :                     ;
(1) 1163/     6C5 :                     ; 		call	dac_me
(1) 1164/     6C5 :                     ; 		ld	a,(iy+chnl_Note)
(1) 1165/     6C5 :                     ; 		cp	-1
(1) 1166/     6C5 :                     ; 		jr	z,.pwm_stop
(1) 1167/     6C5 :                     ; 		cp	-2
(1) 1168/     6C5 :                     ; 		jr	z,.pwm_stop
(1) 1169/     6C5 :                     ; 		ld	l,(hl)
(1) 1170/     6C5 :                     ; 		call	dac_me
(1) 1171/     6C5 :                     ; 		add	a,l
(1) 1172/     6C5 :                     ; 		add	a,a
(1) 1173/     6C5 :                     ; 		ld	de,0
(1) 1174/     6C5 :                     ; 		ld	e,a
(1) 1175/     6C5 :                     ; 		ld	hl,wavFreq_Pwm
(1) 1176/     6C5 :                     ; 		add	hl,de
(1) 1177/     6C5 :                     ; 		ld	a,(hl)
(1) 1178/     6C5 :                     ; 		ld	(ix+3),a	; NOTE: big endian
(1) 1179/     6C5 :                     ; 		inc	hl
(1) 1180/     6C5 :                     ; 		ld	a,(hl)
(1) 1181/     6C5 :                     ; 		ld	(ix+4),a
(1) 1182/     6C5 :                     ;
(1) 1183/     6C5 :                     ; 		ld	a,(ix)		; Tell SH2 we want to play channel
(1) 1184/     6C5 :                     ; 		or	01000000b
(1) 1185/     6C5 :                     ; 		ld	(ix),a
(1) 1186/     6C5 :                     ; 		ret
(1) 1187/     6C5 :                     ; .pwm_stop:
(1) 1188/     6C5 :                     ; 		ld	a,(ix)		; Tell SH2 to stop this channel
(1) 1189/     6C5 :                     ; 		or	00100000b
(1) 1190/     6C5 :                     ; 		ld	(ix),a
(1) 1191/     6C5 : C9                  		ret
(1) 1192/     6C6 :                     
(1) 1193/     6C6 :                     ; ----------------------------------------
(1) 1194/     6C6 :                     ; Check the current instrument type
(1) 1195/     6C6 :                     ;
(1) 1196/     6C6 :                     ; Returns:
(1) 1197/     6C6 :                     ;  a - Type
(1) 1198/     6C6 :                     ; hl - Instrument data
(1) 1199/     6C6 :                     ;
(1) 1200/     6C6 :                     ; Types:
(1) 1201/     6C6 :                     ; -1 - Null
(1) 1202/     6C6 :                     ;  0 - PSG
(1) 1203/     6C6 :                     ;  1 - PSG Noise
(1) 1204/     6C6 :                     ;  2 - FM
(1) 1205/     6C6 :                     ;  3 - FM Special
(1) 1206/     6C6 :                     ;  4 - FM Sample
(1) 1207/     6C6 :                     ;  5 - PWM
(1) 1208/     6C6 :                     ; ----------------------------------------
(1) 1209/     6C6 :                     
(1) 1210/     6C6 :                     .get_instype:
(1) 1211/     6C6 : FD 7E 03            		ld	a,(iy+chnl_Ins)
(1) 1212/     6C9 : 3D                  		dec	a
(1) 1213/     6CA : 87                  		add	a,a
(1) 1214/     6CB : 87                  		add	a,a
(1) 1215/     6CC : 87                  		add	a,a
(1) 1216/     6CD : CD 88 0E            		call	dac_me
(1) 1217/     6D0 : 2A 18 00            		ld	hl,(currInsData)
(1) 1218/     6D3 : 11 00 00            		ld	de,0
(1) 1219/     6D6 : 5F                  		ld	e,a
(1) 1220/     6D7 : 19                  		add	hl,de
(1) 1221/     6D8 : 7E                  		ld	a,(hl)		; check type
(1) 1222/     6D9 : C9                  		ret
(1) 1223/     6DA :                     
(1) 1224/     6DA :                     ; ----------------------------------------
(1) 1225/     6DA :                     
(1) 1226/     6DA :                     .srch_psgn:
(1) 1227/     6DA : 11 09 00            		ld	de,9
(1) 1228/     6DD : 21 8E 11            		ld	hl,PSGNVTBL
(1) 1229/     6E0 : 18 39               		jr	.srch_chnltbl
(1) 1230/     6E2 :                     .srch_psg:
(1) 1231/     6E2 : 11 09 00            		ld	de,9
(1) 1232/     6E5 : 21 72 11            		ld	hl,PSGVTBL
(1) 1233/     6E8 : 18 31               		jr	.srch_chnltbl
(1) 1234/     6EA :                     .srch_fm:
(1) 1235/     6EA : 11 11 00            		ld	de,17
(1) 1236/     6ED : 21 98 11            		ld	hl,FMVTBL
(1) 1237/     6F0 : 18 29               		jr	.srch_chnltbl
(1) 1238/     6F2 :                     .srch_fm3:
(1) 1239/     6F2 : 11 11 00            		ld	de,17		; TODO: don't autosearch this
(1) 1240/     6F5 : 21 DC 11            		ld	hl,FM3VTBL
(1) 1241/     6F8 : 18 21               		jr	.srch_chnltbl
(1) 1242/     6FA :                     .srch_fm6:
(1) 1243/     6FA : 11 11 00            		ld	de,17		; TODO: same thing
(1) 1244/     6FD : 21 ED 11            		ld	hl,FM6VTBL
(1) 1245/     700 : 18 19               		jr	.srch_chnltbl
(1) 1246/     702 :                     .srch_pwm:
(1) 1247/     702 : 11 08 00            		ld	de,8
(1) 1248/     705 : 21 FF 11            		ld	hl,PWMVTBL
(1) 1249/     708 : 18 11               		jr	.srch_chnltbl
(1) 1250/     70A :                     
(1) 1251/     70A :                     ; ----------------------------------------
(1) 1252/     70A :                     
(1) 1253/     70A :                     .psgvoltbl:
(1) 1254/     70A : F0                  		db 0F0h
(1) 1255/     70B : F0                  		db 0F0h
(1) 1256/     70C : E0                  		db 0E0h
(1) 1257/     70D : D0                  		db 0D0h
(1) 1258/     70E : C0                  		db 0C0h
(1) 1259/     70F : B0                  		db 0B0h
(1) 1260/     710 : A0                  		db 0A0h
(1) 1261/     711 : 90                  		db 090h
(1) 1262/     712 : 80                  		db 080h
(1) 1263/     713 : 70                  		db 070h
(1) 1264/     714 : 60                  		db 060h
(1) 1265/     715 : 50                  		db 050h
(1) 1266/     716 : 40                  		db 040h
(1) 1267/     717 : 30                  		db 030h
(1) 1268/     718 : 20                  		db 020h
(1) 1269/     719 : 10                  		db 010h
(1) 1270/     71A : 00                  		db 000h
(1) 1271/     71B :                     
(1) 1272/     71B :                     ; ----------------------------------------
(1) 1273/     71B :                     ; iy - track channel data
(1) 1274/     71B :                     ; de - Slot incrm
(1) 1275/     71B :                     ; hl - table
(1) 1276/     71B :                     ;
(1) 1277/     71B :                     ; Returns
(1) 1278/     71B :                     ; a  - Status: -1: error
(1) 1279/     71B :                     ;               0: ok
(1) 1280/     71B :                     ; hl - slot
(1) 1281/     71B :                     ; ----------------------------------------
(1) 1282/     71B :                     
(1) 1283/     71B :                     .srch_chnltbl:
(1) 1284/     71B : CD 9C 0E            		call	dac_fill
(1) 1285/     71E : 22 32 00            		ld	(currTblSrch),hl	; save base hl
(1) 1286/     721 : FD E5               		push	iy
(1) 1287/     723 : C1                  		pop	bc
(1) 1288/     724 :                     ; first search:
(1) 1289/     724 :                     ; check for linked track channel
(1) 1290/     724 :                     .l_lp:
(1) 1291/     724 : CD 88 0E            		call	dac_me
(1) 1292/     727 : 7E                  		ld	a,(hl)
(1) 1293/     728 : FE FF               		cp	-1
(1) 1294/     72A : CA 43 07            		jp	z,.nolnk
(1) 1295/     72D : 23                  		inc	hl
(1) 1296/     72E : 23                  		inc	hl
(1) 1297/     72F : 7E                  		ld	a,(hl)
(1) 1298/     730 : 2B                  		dec	hl
(1) 1299/     731 : 2B                  		dec	hl
(1) 1300/     732 : B8                  		cp	b
(1) 1301/     733 : 20 0B               		jr	nz,.ngood
(1) 1302/     735 : CD 88 0E            		call	dac_me
(1) 1303/     738 : 00                  		nop
(1) 1304/     739 : 23                  		inc	hl
(1) 1305/     73A : 7E                  		ld	a,(hl)
(1) 1306/     73B : 2B                  		dec	hl
(1) 1307/     73C : B9                  		cp	c
(1) 1308/     73D : CA 62 07            		jp	z,.setgood
(1) 1309/     740 :                     .ngood:					; if it's ours, use it
(1) 1310/     740 : 19                  		add	hl,de
(1) 1311/     741 : 18 E1               		jr	.l_lp
(1) 1312/     743 :                     
(1) 1313/     743 :                     .nolnk:
(1) 1314/     743 : 2A 32 00            		ld	hl,(currTblSrch)
(1) 1315/     746 :                     
(1) 1316/     746 :                     ; second search:
(1) 1317/     746 :                     ; assign current track channel to a
(1) 1318/     746 :                     ; new sound channel
(1) 1319/     746 :                     .f_lp:
(1) 1320/     746 : 7E                  		ld	a,(hl)
(1) 1321/     747 : FE FF               		cp	-1
(1) 1322/     749 : C8                  		ret	z
(1) 1323/     74A : CD 88 0E            		call	dac_me
(1) 1324/     74D : 7E                  		ld	a,(hl)
(1) 1325/     74E : B7                  		or	a
(1) 1326/     74F : F2 55 07            		jp	p,.newp
(1) 1327/     752 : 19                  		add	hl,de
(1) 1328/     753 : 18 F1               		jr	.f_lp
(1) 1329/     755 :                     .newp:
(1) 1330/     755 : 7E                  		ld	a,(hl)		; lock this channel
(1) 1331/     756 : F6 80               		or	80h
(1) 1332/     758 : 77                  		ld	(hl),a
(1) 1333/     759 : 23                  		inc	hl
(1) 1334/     75A : 71                  		ld	(hl),c		; set owner LSB
(1) 1335/     75B : 23                  		inc	hl
(1) 1336/     75C : 70                  		ld	(hl),b		; and MSB
(1) 1337/     75D : 2B                  		dec	hl
(1) 1338/     75E : 2B                  		dec	hl
(1) 1339/     75F : CD 88 0E            		call	dac_me
(1) 1340/     762 :                     .setgood:
(1) 1341/     762 : AF                  		xor	a
(1) 1342/     763 : C9                  		ret
(1) 1343/     764 :                     
(1) 1344/     764 :                     ; --------------------------------------------------------
(1) 1345/     764 :                     ; Read track data
(1) 1346/     764 :                     ; --------------------------------------------------------
(1) 1347/     764 :                     
(1) 1348/     764 :                     updtrack:
(1) 1349/     764 : CD 88 0E            		call	dac_me
(1) 1350/     767 : FD 21 00 18         		ld	iy,trkBuff
(1) 1351/     76B : 21 00 1A            		ld	hl,blkHeadC
(1) 1352/     76E : 11 00 16            		ld	de,trkDataC
(1) 1353/     771 : 01 00 1C            		ld	bc,insDataC
(1) 1354/     774 : 22 14 00            		ld	(currTrkBlkHd),hl
(1) 1355/     777 : ED 53 16 00         		ld	(currTrkData),de
(1) 1356/     77B : ED 43 18 00         		ld	(currInsData),bc
(1) 1357/     77F : 06 02               		ld	b,MAX_TRKS
(1) 1358/     781 :                     .next:
(1) 1359/     781 : C5                  		push	bc
(1) 1360/     782 : CD AF 07            		call	.read_track
(1) 1361/     785 : C1                  		pop	bc
(1) 1362/     786 : CD 88 0E            		call	dac_me
(1) 1363/     789 :                     
(1) 1364/     789 :                     	; Next blocks
(1) 1365/     789 : 11 00 01            		ld	de,100h
(1) 1366/     78C : FD 19               		add	iy,de
(1) 1367/     78E : 2A 16 00            		ld	hl,(currTrkData)
(1) 1368/     791 : 19                  		add	hl,de
(1) 1369/     792 : 22 16 00            		ld	(currTrkData),hl
(1) 1370/     795 : 11 00 01            		ld	de,100h
(1) 1371/     798 : 2A 14 00            		ld	hl,(currTrkBlkHd)
(1) 1372/     79B : 19                  		add	hl,de
(1) 1373/     79C : CD 88 0E            		call	dac_me
(1) 1374/     79F : 22 14 00            		ld	(currTrkBlkHd),hl
(1) 1375/     7A2 : 11 80 00            		ld	de,80h
(1) 1376/     7A5 : 2A 18 00            		ld	hl,(currInsData)
(1) 1377/     7A8 : 19                  		add	hl,de
(1) 1378/     7A9 : 22 18 00            		ld	(currInsData),hl
(1) 1379/     7AC : 10 D3               		djnz	.next
(1) 1380/     7AE : C9                  		ret
(1) 1381/     7AF :                     
(1) 1382/     7AF :                     ; ----------------------------------------
(1) 1383/     7AF :                     ; Read current track
(1) 1384/     7AF :                     ; ----------------------------------------
(1) 1385/     7AF :                     
(1) 1386/     7AF :                     .read_track:
(1) 1387/     7AF : CD 88 0E            		call	dac_me
(1) 1388/     7B2 : FD 46 13            		ld	b,(iy+trk_status)	; b - Track status
(1) 1389/     7B5 : CB 78               		bit	7,b			; Active?
(1) 1390/     7B7 : C8                  		ret	z
(1) 1391/     7B8 : 3A 21 00            		ld	a,(currTickBits)
(1) 1392/     7BB : CB 68               		bit	5,b			; Status: sfx mode?
(1) 1393/     7BD : C2 C3 07            		jp	nz,.sfxmd
(1) 1394/     7C0 : 00                  		nop
(1) 1395/     7C1 : 00                  		nop
(1) 1396/     7C2 : 00                  		nop
(1) 1397/     7C3 :                     ; 		bit	1,a			; BEAT passed?
(1) 1398/     7C3 :                     ; 		ret	z
(1) 1399/     7C3 :                     .sfxmd:
(1) 1400/     7C3 : CB 47               		bit	0,a			; TICK passed?
(1) 1401/     7C5 : C8                  		ret	z
(1) 1402/     7C6 : CB 70               		bit	6,b			; Restart/First time?
(1) 1403/     7C8 : C4 BA 09            		call	nz,.first_fill
(1) 1404/     7CB : FD 7E 14            		ld	a,(iy+trk_tickTmr)	; Tick timer for this track
(1) 1405/     7CE : 3D                  		dec	a
(1) 1406/     7CF : FD 77 14            		ld	(iy+trk_tickTmr),a	; If 0, we can progress
(1) 1407/     7D2 : B7                  		or	a
(1) 1408/     7D3 : C0                  		ret	nz
(1) 1409/     7D4 : FD 7E 15            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1) 1410/     7D7 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1) 1411/     7DA : CD 88 0E            		call	dac_me
(1) 1412/     7DD : FD 6E 0C            		ld	l,(iy+trk_Read)		; hl - Pattern data to read in cache
(1) 1413/     7E0 : FD 66 0D            		ld	h,(iy+((trk_Read+1)))
(1) 1414/     7E3 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; Check if this pattern finished
(1) 1415/     7E6 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(1) 1416/     7E9 : 79                  		ld	a,c
(1) 1417/     7EA : B0                  		or	b
(1) 1418/     7EB : CC 21 09            		call	z,.next_track
(1) 1419/     7EE : CD 88 0E            		call	dac_me
(1) 1420/     7F1 :                     
(1) 1421/     7F1 :                     ; --------------------------------
(1) 1422/     7F1 :                     ; Main reading loop
(1) 1423/     7F1 :                     ; --------------------------------
(1) 1424/     7F1 :                     
(1) 1425/     7F1 :                     .next_note:
(1) 1426/     7F1 : 7E                  		ld	a,(hl)			; Check if timer or note
(1) 1427/     7F2 : B7                  		or	a
(1) 1428/     7F3 : CA A0 08            		jp	z,.exit			; If == 00h: exit
(1) 1429/     7F6 : FA 02 08            		jp	m,.is_note		; If 80h-0FFh: note data, 01h-7Fh: timer
(1) 1430/     7F9 : 7E                  		ld	a,(hl)			; Countdown
(1) 1431/     7FA : 3D                  		dec	a
(1) 1432/     7FB : 77                  		ld	(hl),a
(1) 1433/     7FC : CD 88 0E            		call	dac_me
(1) 1434/     7FF : C3 A9 08            		jp	.decrow
(1) 1435/     802 :                     .is_note:
(1) 1436/     802 : C5                  		push	bc
(1) 1437/     803 : 4F                  		ld	c,a			; c - Copy of control+channel
(1) 1438/     804 : CD B4 08            		call	.inc_cpatt
(1) 1439/     807 : 79                  		ld	a,c
(1) 1440/     808 : FD E5               		push	iy
(1) 1441/     80A : DD E1               		pop	ix
(1) 1442/     80C : 11 20 00            		ld	de,20h
(1) 1443/     80F : DD 19               		add	ix,de
(1) 1444/     811 : CD 88 0E            		call	dac_me
(1) 1445/     814 : 16 00               		ld 	d,0
(1) 1446/     816 : E6 3F               		and	00111111b
(1) 1447/     818 : 87                  		add	a,a			; * 8
(1) 1448/     819 : 87                  		add	a,a
(1) 1449/     81A : 87                  		add	a,a
(1) 1450/     81B : 5F                  		ld	e,a
(1) 1451/     81C : DD 19               		add	ix,de
(1) 1452/     81E :                     ; 		ld	a,c
(1) 1453/     81E :                     ; 		and	00111111b
(1) 1454/     81E :                     ; 		inc	a
(1) 1455/     81E :                     ; 		ld	(ix+chnl_Chip),a
(1) 1456/     81E : CD 88 0E            		call	dac_me
(1) 1457/     821 : DD 46 01            		ld	b,(ix+chnl_Type)	; b - our current Note type
(1) 1458/     824 : CB 71               		bit	6,c			; Next byte is new type?
(1) 1459/     826 : CA 2F 08            		jp	z,.old_type
(1) 1460/     829 : 7E                  		ld	a,(hl)			;
(1) 1461/     82A : DD 77 01            		ld	(ix+chnl_Type),a
(1) 1462/     82D : 47                  		ld	b,a
(1) 1463/     82E : 2C                  		inc 	l
(1) 1464/     82F :                     .old_type:
(1) 1465/     82F :                     
(1) 1466/     82F :                     	; b - evinEVIN
(1) 1467/     82F :                     	;     E-effect/V-volume/I-instrument/N-note
(1) 1468/     82F :                     	;     evin: recycle value stored on the buffer
(1) 1469/     82F :                     	;     EVIN: next byte(for eff:2 bytes) contains new value
(1) 1470/     82F : CD 88 0E            		call	dac_me
(1) 1471/     832 : CB 40               		bit	0,b
(1) 1472/     834 : CA 3E 08            		jp	z,.no_note
(1) 1473/     837 : 7E                  		ld	a,(hl)
(1) 1474/     838 : DD 77 02            		ld	(ix+chnl_Note),a
(1) 1475/     83B : CD B4 08            		call	.inc_cpatt
(1) 1476/     83E :                     .no_note:
(1) 1477/     83E :                     ; 		call	dac_me
(1) 1478/     83E : CB 48               		bit	1,b
(1) 1479/     840 : CA 4A 08            		jp	z,.no_ins
(1) 1480/     843 : 7E                  		ld	a,(hl)
(1) 1481/     844 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1482/     847 : CD B4 08            		call	.inc_cpatt
(1) 1483/     84A :                     .no_ins:
(1) 1484/     84A :                     ; 		call	dac_me
(1) 1485/     84A : CB 50               		bit	2,b
(1) 1486/     84C : CA 56 08            		jp	z,.no_vol
(1) 1487/     84F : 7E                  		ld	a,(hl)
(1) 1488/     850 : DD 77 04            		ld	(ix+chnl_Vol),a
(1) 1489/     853 : CD B4 08            		call	.inc_cpatt
(1) 1490/     856 :                     .no_vol:
(1) 1491/     856 :                     ; 		call	dac_me
(1) 1492/     856 : CB 58               		bit	3,b
(1) 1493/     858 : CA 69 08            		jp	z,.no_eff
(1) 1494/     85B : 7E                  		ld	a,(hl)
(1) 1495/     85C : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1496/     85F : CD B4 08            		call	.inc_cpatt
(1) 1497/     862 : 7E                  		ld	a,(hl)
(1) 1498/     863 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1499/     866 : CD B4 08            		call	.inc_cpatt
(1) 1500/     869 :                     .no_eff:
(1) 1501/     869 : CD 88 0E            		call	dac_me
(1) 1502/     86C : 78                  		ld	a,b			; Merge recycle bits to main bits
(1) 1503/     86D : CB 3F               		srl	a
(1) 1504/     86F : CB 3F               		srl	a
(1) 1505/     871 : CB 3F               		srl	a
(1) 1506/     873 : CB 3F               		srl	a
(1) 1507/     875 : E6 0F               		and	1111b
(1) 1508/     877 : CD 88 0E            		call	dac_me
(1) 1509/     87A : 4F                  		ld	c,a
(1) 1510/     87B : 78                  		ld	a,b
(1) 1511/     87C : E6 0F               		and	1111b
(1) 1512/     87E : B1                  		or	c
(1) 1513/     87F : 4F                  		ld	c,a
(1) 1514/     880 : CD 88 0E            		call	dac_me
(1) 1515/     883 : DD 7E 07            		ld	a,(ix+chnl_Status)
(1) 1516/     886 : B1                  		or	c
(1) 1517/     887 : DD 77 07            		ld	(ix+chnl_Status),a
(1) 1518/     88A : C1                  		pop	bc
(1) 1519/     88B :                     
(1) 1520/     88B :                     	; Special checks
(1) 1521/     88B : B7                  		or	a
(1) 1522/     88C : CA 97 08            		jp	z,.no_updst
(1) 1523/     88F :                     ; 		cp	-2
(1) 1524/     88F :                     ; 		jp	z,.id_off
(1) 1525/     88F :                     ; 		cp	-1
(1) 1526/     88F :                     ; 		jp	nz,.id_stlon
(1) 1527/     88F :                     ; .id_off:
(1) 1528/     88F :                     ; 		ld	(ix+chnl_Chip),0
(1) 1529/     88F :                     ; .id_stlon:
(1) 1530/     88F : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1) 1531/     892 : FE 02               		cp	2			; Effect B: position jump?
(1) 1532/     894 : CC F2 08            		call	z,.eff_B
(1) 1533/     897 :                     .no_updst:
(1) 1534/     897 : CD 9C 0E            		call	dac_fill
(1) 1535/     89A : CD 88 0E            		call	dac_me
(1) 1536/     89D : C3 F1 07            		jp	.next_note
(1) 1537/     8A0 :                     
(1) 1538/     8A0 :                     ; --------------------------------
(1) 1539/     8A0 :                     ; Exit
(1) 1540/     8A0 :                     ; --------------------------------
(1) 1541/     8A0 :                     
(1) 1542/     8A0 :                     .exit:
(1) 1543/     8A0 : CD B4 08            		call	.inc_cpatt
(1) 1544/     8A3 : FD 75 0C            		ld	(iy+trk_Read),l		; Update read location
(1) 1545/     8A6 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1) 1546/     8A9 :                     .decrow:
(1) 1547/     8A9 : CD 88 0E            		call	dac_me
(1) 1548/     8AC : 0B                  		dec	bc			; Decrement this row
(1) 1549/     8AD : FD 71 0E            		ld	(iy+trk_Rows),c		; And update it
(1) 1550/     8B0 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1) 1551/     8B3 : C9                  		ret
(1) 1552/     8B4 :                     
(1) 1553/     8B4 :                     ; ----------------------------------------
(1) 1554/     8B4 :                     ; Call this to increment the
(1) 1555/     8B4 :                     ; cache pattern read pointer (iy+trk_Read)
(1) 1556/     8B4 :                     ; it also refills the next section to
(1) 1557/     8B4 :                     ; read if needed.
(1) 1558/     8B4 :                     ;
(1) 1559/     8B4 :                     ; NOTE: breaks A
(1) 1560/     8B4 :                     ; ----------------------------------------
(1) 1561/     8B4 :                     
(1) 1562/     8B4 :                     .inc_cpatt:
(1) 1563/     8B4 : 2C                  		inc	l
(1) 1564/     8B5 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(1) 1565/     8B8 : AD                  		xor	l
(1) 1566/     8B9 : E6 80               		and	080h
(1) 1567/     8BB : C8                  		ret	z
(1) 1568/     8BC :                     
(1) 1569/     8BC : CD 9C 0E            		call	dac_fill
(1) 1570/     8BF : CD 88 0E            		call	dac_me
(1) 1571/     8C2 : E5                  		push	hl
(1) 1572/     8C3 : C5                  		push	bc
(1) 1573/     8C4 : 54                  		ld	d,h
(1) 1574/     8C5 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(1) 1575/     8C8 : 5F                  		ld	e,a
(1) 1576/     8C9 : C6 80               		add 	a,080h
(1) 1577/     8CB : FD 77 10            		ld	(iy+trk_Halfway),a
(1) 1578/     8CE : 01 80 00            		ld	bc,80h
(1) 1579/     8D1 : FD 6E 09            		ld	l,(iy+trk_romPattRd)
(1) 1580/     8D4 : CD 88 0E            		call	dac_me
(1) 1581/     8D7 : FD 66 0A            		ld	h,(iy+(trk_romPattRd+1))
(1) 1582/     8DA : FD 7E 0B            		ld	a,(iy+(trk_romPattRd+2))
(1) 1583/     8DD : 09                  		add	hl,bc
(1) 1584/     8DE : CE 00               		adc	a,0
(1) 1585/     8E0 : FD 75 09            		ld	(iy+trk_romPattRd),l
(1) 1586/     8E3 : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1) 1587/     8E6 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1) 1588/     8E9 : CD FB 0B            		call	transferRom
(1) 1589/     8EC : CD 88 0E            		call	dac_me
(1) 1590/     8EF : C1                  		pop	bc
(1) 1591/     8F0 : E1                  		pop	hl
(1) 1592/     8F1 : C9                  		ret
(1) 1593/     8F2 :                     
(1) 1594/     8F2 :                     ; ----------------------------------------
(1) 1595/     8F2 :                     ; If effect B: jump to the block
(1) 1596/     8F2 :                     ; requested by the effect
(1) 1597/     8F2 :                     ; ----------------------------------------
(1) 1598/     8F2 :                     
(1) 1599/     8F2 :                     .eff_B:
(1) 1600/     8F2 : DD 7E 06            		ld	a,(ix+chnl_EffArg)
(1) 1601/     8F5 : FD 77 11            		ld 	(iy+trk_currBlk),a
(1) 1602/     8F8 : FD E5               		push	iy			; Clear all channels first
(1) 1603/     8FA : DD E1               		pop	ix
(1) 1604/     8FC : 11 20 00            		ld	de,20h
(1) 1605/     8FF : DD 19               		add	ix,de
(1) 1606/     901 : 11 08 00            		ld	de,8
(1) 1607/     904 : AF                  		xor	a
(1) 1608/     905 : 06 48               		ld	b,MAX_TRKCHN*8/2
(1) 1609/     907 :                     .clrf2:
(1) 1610/     907 : DD 77 00            		ld	(ix),a
(1) 1611/     90A : DD 23               		inc	ix
(1) 1612/     90C : CD 88 0E            		call	dac_me
(1) 1613/     90F : 00                  		nop
(1) 1614/     910 : DD 77 00            		ld	(ix),a
(1) 1615/     913 : DD 23               		inc	ix
(1) 1616/     915 : 10 F0               		djnz	.clrf2
(1) 1617/     917 : 00                  		nop
(1) 1618/     918 : 00                  		nop
(1) 1619/     919 : CD 88 0E            		call	dac_me
(1) 1620/     91C : FD 7E 11            		ld	a,(iy+trk_currBlk)
(1) 1621/     91F : 18 07               		jr	.set_track
(1) 1622/     921 :                     
(1) 1623/     921 :                     ; ----------------------------------------
(1) 1624/     921 :                     ; If pattern finished, load the next one
(1) 1625/     921 :                     ; ----------------------------------------
(1) 1626/     921 :                     
(1) 1627/     921 :                     .next_track:
(1) 1628/     921 : FD 7E 11            		ld	a,(iy+trk_currBlk)
(1) 1629/     924 : 3C                  		inc	a
(1) 1630/     925 : FD 77 11            		ld 	(iy+trk_currBlk),a
(1) 1631/     928 :                     
(1) 1632/     928 :                     .set_track:
(1) 1633/     928 : CD 88 0E            		call	dac_me
(1) 1634/     92B : 2E 80               		ld	l,80h			; Set LSB as 40h
(1) 1635/     92D : FD 75 0C            		ld	(iy+trk_Read),l
(1) 1636/     930 : E5                  		push	hl
(1) 1637/     931 : CD 88 0E            		call	dac_me
(1) 1638/     934 : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Block section
(1) 1639/     937 : 11 00 00            		ld	de,0
(1) 1640/     93A : 5F                  		ld	e,a
(1) 1641/     93B : AF                  		xor	a			; Reset halfway, next pass
(1) 1642/     93C : FD 77 10            		ld	(iy+trk_Halfway),a	; will load the first section
(1) 1643/     93F : 19                  		add	hl,de
(1) 1644/     940 : 7E                  		ld	a,(hl)			; a - block
(1) 1645/     941 : E1                  		pop	hl
(1) 1646/     942 : FE FF               		cp	-1
(1) 1647/     944 : CA 9C 09            		jp	z,.track_end
(1) 1648/     947 : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Header section
(1) 1649/     94A : CD 88 0E            		call	dac_me
(1) 1650/     94D : 11 80 00            		ld	de,80h
(1) 1651/     950 : 19                  		add	hl,de
(1) 1652/     951 : 87                  		add	a,a
(1) 1653/     952 : 87                  		add	a,a
(1) 1654/     953 : 5F                  		ld	e,a			; block * 4
(1) 1655/     954 : 19                  		add	hl,de
(1) 1656/     955 : 4E                  		ld	c,(hl)
(1) 1657/     956 : 23                  		inc	hl
(1) 1658/     957 : 46                  		ld	b,(hl)			; bc - numof Rows
(1) 1659/     958 : 23                  		inc	hl
(1) 1660/     959 : CD 88 0E            		call	dac_me
(1) 1661/     95C : 5E                  		ld	e,(hl)
(1) 1662/     95D : 23                  		inc	hl
(1) 1663/     95E : 56                  		ld	d,(hl)			; de - pointer (base+increment by this)
(1) 1664/     95F : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows
(1) 1665/     962 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1) 1666/     965 : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - Low and Mid pointer of ROM patt data
(1) 1667/     968 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1) 1668/     96B : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1) 1669/     96E : 19                  		add	hl,de			; increment to get new pointer
(1) 1670/     96F : CE 00               		adc	a,0			; and highest byte too.
(1) 1671/     971 : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer
(1) 1672/     974 : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1) 1673/     977 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1) 1674/     97A : FD 56 0D            		ld	d,(iy+(trk_Read+1))
(1) 1675/     97D : FD 5E 0C            		ld	e,(iy+trk_Read)
(1) 1676/     980 : 01 80 00            		ld	bc,080h			; bc - 080h
(1) 1677/     983 : CD 9C 0E            		call	dac_fill
(1) 1678/     986 : CD FB 0B            		call	transferRom
(1) 1679/     989 : CD 88 0E            		call	dac_me
(1) 1680/     98C : FD 66 0D            		ld	h,(iy+(trk_Read+1))
(1) 1681/     98F : FD 6E 0C            		ld	l,(iy+trk_Read)
(1) 1682/     992 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; Check if this pattern finished
(1) 1683/     995 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(1) 1684/     998 : CD 88 0E            		call	dac_me
(1) 1685/     99B : C9                  		ret
(1) 1686/     99C :                     
(1) 1687/     99C :                     ; If -1, track ends
(1) 1688/     99C :                     .track_end:
(1) 1689/     99C : FD E5               		push	iy
(1) 1690/     99E : DD E1               		pop	ix
(1) 1691/     9A0 : 11 20 00            		ld	de,20h
(1) 1692/     9A3 : DD 19               		add	ix,de
(1) 1693/     9A5 : 11 08 00            		ld	de,8
(1) 1694/     9A8 : AF                  		xor	a
(1) 1695/     9A9 : 06 12               		ld	b,MAX_TRKCHN
(1) 1696/     9AB :                     .clrfe:
(1) 1697/     9AB : DD 77 00            		ld	(ix),a
(1) 1698/     9AE : DD 19               		add	ix,de
(1) 1699/     9B0 : 10 F9               		djnz	.clrfe
(1) 1700/     9B2 : CD 88 0E            		call	dac_me
(1) 1701/     9B5 : FD 36 13 00         		ld	(iy+trk_status),0
(1) 1702/     9B9 : C9                  		ret
(1) 1703/     9BA :                     
(1) 1704/     9BA :                     ; ----------------------------------------
(1) 1705/     9BA :                     ; Playing first time
(1) 1706/     9BA :                     ; Load Blocks/Pointers for 3 of 4 sections
(1) 1707/     9BA :                     ; of pattern data, the remaining one is
(1) 1708/     9BA :                     ; loaded after returning.
(1) 1709/     9BA :                     ; ----------------------------------------
(1) 1710/     9BA :                     
(1) 1711/     9BA :                     .first_fill:
(1) 1712/     9BA : CD 9C 0E            		call	dac_fill
(1) 1713/     9BD : CD 88 0E            		call	dac_me
(1) 1714/     9C0 : CB B0               		res	6,b			; Reset FILL flag
(1) 1715/     9C2 : FD 70 13            		ld	(iy+trk_status),b
(1) 1716/     9C5 :                     
(1) 1717/     9C5 :                     	; Stop last used sound chips
(1) 1718/     9C5 : FD E5               		push	iy
(1) 1719/     9C7 : DD E1               		pop	ix
(1) 1720/     9C9 : 11 20 00            		ld	de,20h
(1) 1721/     9CC : DD 19               		add	ix,de
(1) 1722/     9CE : 11 08 00            		ld	de,8
(1) 1723/     9D1 : 06 12               		ld	b,MAX_TRKCHN
(1) 1724/     9D3 :                     .clrf:
(1) 1725/     9D3 : D5                  		push	de
(1) 1726/     9D4 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(1) 1727/     9D7 : B7                  		or	a
(1) 1728/     9D8 : C4 9F 0A            		call	nz,.silnc_chip
(1) 1729/     9DB : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1730/     9DF : DD 36 07 03         		ld	(ix+chnl_Status),11b
(1) 1731/     9E3 : D1                  		pop	de
(1) 1732/     9E4 : DD 19               		add	ix,de
(1) 1733/     9E6 : 10 EB               		djnz	.clrf
(1) 1734/     9E8 :                     
(1) 1735/     9E8 :                     	; TODO: psgHat lock check
(1) 1736/     9E8 : AF                  		xor	a
(1) 1737/     9E9 :                     ; 		ld	hl,psgHatMode+1
(1) 1738/     9E9 :                     ; 		ld	e,(hl)
(1) 1739/     9E9 :                     ; 		inc	hl
(1) 1740/     9E9 :                     ; 		ld	d,(hl)
(1) 1741/     9E9 :                     ; 		dec	hl
(1) 1742/     9E9 :                     ; 		dec	hl
(1) 1743/     9E9 :                     ; 		ld	a,(de)
(1) 1744/     9E9 :                     ; 		or	a
(1) 1745/     9E9 :                     ; 		jp	nz,.inuse
(1) 1746/     9E9 : 32 2F 00            		ld	(psgHatMode),a		; already in use
(1) 1747/     9EC :                     ; .inuse:
(1) 1748/     9EC :                     
(1) 1749/     9EC : FD 7E 12            		ld	a,(iy+trk_setBlk)
(1) 1750/     9EF : FD 77 11            		ld 	(iy+trk_currBlk),a
(1) 1751/     9F2 : FD 77 10            		ld	(iy+trk_Halfway),a	; Reset halfway
(1) 1752/     9F5 : CD 9C 0E            		call	dac_fill
(1) 1753/     9F8 : CD 88 0E            		call	dac_me
(1) 1754/     9FB : FD 6E 06            		ld	l,(iy+trk_romIns)	; Recieve 80h of instrument pointers
(1) 1755/     9FE : FD 66 07            		ld	h,(iy+(trk_romIns+1))
(1) 1756/     A01 : FD 7E 08            		ld	a,(iy+(trk_romIns+2))
(1) 1757/     A04 : ED 5B 18 00         		ld	de,(currInsData)
(1) 1758/     A08 :                     ; 		ld	(reqMarsTrnf),de	; Tell 68k to copy instruments
(1) 1759/     A08 : 01 80 00            		ld	bc,080h
(1) 1760/     A0B : CD FB 0B            		call	transferRom
(1) 1761/     A0E :                     
(1) 1762/     A0E : FD 6E 00            		ld	l,(iy+trk_romBlk)	; Recieve 80h of block data
(1) 1763/     A11 : FD 66 01            		ld	h,(iy+(trk_romBlk+1))
(1) 1764/     A14 : FD 7E 02            		ld	a,(iy+(trk_romBlk+2))
(1) 1765/     A17 : ED 5B 14 00         		ld	de,(currTrkBlkHd)
(1) 1766/     A1B : 01 80 00            		ld	bc,80h
(1) 1767/     A1E : D5                  		push	de
(1) 1768/     A1F : CD FB 0B            		call	transferRom
(1) 1769/     A22 : D1                  		pop	de
(1) 1770/     A23 : CD 9C 0E            		call	dac_fill
(1) 1771/     A26 : CD 88 0E            		call	dac_me
(1) 1772/     A29 : 7B                  		ld	a,e
(1) 1773/     A2A : C6 80               		add	a,80h
(1) 1774/     A2C : 5F                  		ld	e,a
(1) 1775/     A2D : FD 6E 03            		ld	l,(iy+trk_romPatt)	; Recieve 80h of header data
(1) 1776/     A30 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1) 1777/     A33 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1) 1778/     A36 : 01 80 00            		ld	bc,80h
(1) 1779/     A39 : CD FB 0B            		call	transferRom
(1) 1780/     A3C : 3E 00               		ld	a,0
(1) 1781/     A3E : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Block section
(1) 1782/     A41 : 11 00 00            		ld	de,0
(1) 1783/     A44 : 5F                  		ld	e,a
(1) 1784/     A45 : 19                  		add	hl,de
(1) 1785/     A46 : 7E                  		ld	a,(hl)			; a - block
(1) 1786/     A47 : FE FF               		cp	-1
(1) 1787/     A49 : CA 9C 09            		jp	z,.track_end
(1) 1788/     A4C : CD 9C 0E            		call	dac_fill
(1) 1789/     A4F : CD 88 0E            		call	dac_me
(1) 1790/     A52 : 2A 14 00            		ld	hl,(currTrkBlkHd)	; Header section
(1) 1791/     A55 : 11 80 00            		ld	de,80h
(1) 1792/     A58 : 19                  		add	hl,de
(1) 1793/     A59 : 87                  		add	a,a
(1) 1794/     A5A : 87                  		add	a,a
(1) 1795/     A5B : 5F                  		ld	e,a			; block * 4
(1) 1796/     A5C : 19                  		add	hl,de
(1) 1797/     A5D : 4E                  		ld	c,(hl)
(1) 1798/     A5E : 23                  		inc	hl
(1) 1799/     A5F : 46                  		ld	b,(hl)			; bc - numof Rows
(1) 1800/     A60 : 23                  		inc	hl
(1) 1801/     A61 : 5E                  		ld	e,(hl)
(1) 1802/     A62 : 23                  		inc	hl
(1) 1803/     A63 : 56                  		ld	d,(hl)			; de - pointer (base+increment by this)
(1) 1804/     A64 : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows
(1) 1805/     A67 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1) 1806/     A6A : CD 88 0E            		call	dac_me
(1) 1807/     A6D : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - Low and Mid pointer of ROM patt data
(1) 1808/     A70 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1) 1809/     A73 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1) 1810/     A76 : 19                  		add	hl,de			; increment to get new pointer
(1) 1811/     A77 : CE 00               		adc	a,0			; and highest byte too.
(1) 1812/     A79 : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer
(1) 1813/     A7C : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1) 1814/     A7F : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1) 1815/     A82 : ED 5B 16 00         		ld	de,(currTrkData)	; Set new Read point to this track
(1) 1816/     A86 : 47                  		ld	b,a
(1) 1817/     A87 : 7B                  		ld	a,e
(1) 1818/     A88 : C6 80               		add	a,80h
(1) 1819/     A8A : 5F                  		ld	e,a
(1) 1820/     A8B : 78                  		ld	a,b
(1) 1821/     A8C : FD 73 0C            		ld	(iy+trk_Read),e
(1) 1822/     A8F : FD 72 0D            		ld	(iy+((trk_Read+1))),d
(1) 1823/     A92 : 01 80 00            		ld	bc,080h			; fill sections 2,3,4
(1) 1824/     A95 : CD 9C 0E            		call	dac_fill
(1) 1825/     A98 : CD 88 0E            		call	dac_me
(1) 1826/     A9B : CD FB 0B            		call	transferRom
(1) 1827/     A9E : C9                  		ret
(1) 1828/     A9F :                     
(1) 1829/     A9F :                     ; c - Chip
(1) 1830/     A9F :                     ; PSG: 80h
(1) 1831/     A9F :                     ; FM:  A0h + fm key
(1) 1832/     A9F :                     ; PWM: C0h
(1) 1833/     A9F :                     
(1) 1834/     A9F :                     .silnc_chip:
(1) 1835/     A9F : 4F                  		ld	c,a
(1) 1836/     AA0 : E6 60               		and	01100000b	; Get curr used chip
(1) 1837/     AA2 : FE 20               		cp	00100000b	; FM?
(1) 1838/     AA4 : 28 40               		jr	z,.sil_fm
(1) 1839/     AA6 : FE 40               		cp	01000000b	; PWM?
(1) 1840/     AA8 : C8                  		ret	z
(1) 1841/     AA9 :                     
(1) 1842/     AA9 :                     	; chip ID: 00b
(1) 1843/     AA9 : 21 8E 11            		ld	hl,PSGNVTBL	; Check for NOISE
(1) 1844/     AAC : 11 09 00            		ld	de,9
(1) 1845/     AAF : CD 28 0B            		call	.chlst_unlk
(1) 1846/     AB2 : E6 83               		and	83h
(1) 1847/     AB4 : FE 83               		cp	83h
(1) 1848/     AB6 : CA C8 0A            		jp	z,.unlknow
(1) 1849/     AB9 : 21 72 11            		ld	hl,PSGVTBL
(1) 1850/     ABC : 11 09 00            		ld	de,9
(1) 1851/     ABF : CD 28 0B            		call	.chlst_unlk
(1) 1852/     AC2 : FE FF               		cp	-1
(1) 1853/     AC4 : C2 C8 0A            		jp	nz,.unlknow
(1) 1854/     AC7 : C9                  		ret
(1) 1855/     AC8 :                     .unlknow:
(1) 1856/     AC8 : 7E                  		ld	a,(hl)
(1) 1857/     AC9 : E6 7F               		and	7Fh
(1) 1858/     ACB : 77                  		ld	(hl),a
(1) 1859/     ACC : 23                  		inc	hl		; delete link
(1) 1860/     ACD : 36 00               		ld	(hl),0
(1) 1861/     ACF : 23                  		inc	hl
(1) 1862/     AD0 : 36 00               		ld	(hl),0
(1) 1863/     AD2 : 23                  		inc	hl		; ALV to 0
(1) 1864/     AD3 : 36 00               		ld	(hl),0
(1) 1865/     AD5 : 23                  		inc	hl		; ATK to 0
(1) 1866/     AD6 : 36 00               		ld	(hl),0
(1) 1867/     AD8 : 79                  		ld	a,c
(1) 1868/     AD9 : E6 03               		and	11b
(1) 1869/     ADB :                     
(1) 1870/     ADB : 21 38 12            		ld	hl,psgcom
(1) 1871/     ADE : 11 00 00            		ld	de,0
(1) 1872/     AE1 : 5F                  		ld	e,a
(1) 1873/     AE2 : 19                  		add	hl,de
(1) 1874/     AE3 : 36 04               		ld	(hl),100b
(1) 1875/     AE5 : C9                  		ret
(1) 1876/     AE6 :                     
(1) 1877/     AE6 :                     ; FM silence
(1) 1878/     AE6 :                     .sil_fm:
(1) 1879/     AE6 : 79                  		ld	a,c
(1) 1880/     AE7 : E6 87               		and	10000111b
(1) 1881/     AE9 : 4F                  		ld	c,a
(1) 1882/     AEA : 11 11 00            		ld	de,17
(1) 1883/     AED : 21 98 11            		ld	hl,FMVTBL
(1) 1884/     AF0 : CD 28 0B            		call	.chlst_unlk
(1) 1885/     AF3 : 79                  		ld	a,c
(1) 1886/     AF4 : E6 03               		and	11b
(1) 1887/     AF6 : 16 40               		ld	d,40h
(1) 1888/     AF8 : B2                  		or	d
(1) 1889/     AF9 : 57                  		ld	d,a
(1) 1890/     AFA : 1E 7F               		ld	e,7Fh
(1) 1891/     AFC : CD 37 0E            		call	fm_autoset		; ix is already our channel
(1) 1892/     AFF : 14                  		inc	d
(1) 1893/     B00 : 14                  		inc	d
(1) 1894/     B01 : 14                  		inc	d
(1) 1895/     B02 : 14                  		inc	d
(1) 1896/     B03 : CD 37 0E            		call	fm_autoset
(1) 1897/     B06 : 14                  		inc	d
(1) 1898/     B07 : 14                  		inc	d
(1) 1899/     B08 : 14                  		inc	d
(1) 1900/     B09 : 14                  		inc	d
(1) 1901/     B0A : CD 37 0E            		call	fm_autoset
(1) 1902/     B0D : 14                  		inc	d
(1) 1903/     B0E : 14                  		inc	d
(1) 1904/     B0F : 14                  		inc	d
(1) 1905/     B10 : 14                  		inc	d
(1) 1906/     B11 : CD 37 0E            		call	fm_autoset
(1) 1907/     B14 : 79                  		ld	a,c
(1) 1908/     B15 : E6 07               		and	111b
(1) 1909/     B17 : 5F                  		ld	e,a
(1) 1910/     B18 : 16 28               		ld	d,28h
(1) 1911/     B1A : CD 3E 0E            		call	fm_send_1
(1) 1912/     B1D : 11 00 28            		ld	de,2800h
(1) 1913/     B20 : 79                  		ld	a,c
(1) 1914/     B21 : E6 07               		and	111b
(1) 1915/     B23 : B3                  		or	e
(1) 1916/     B24 : 5F                  		ld	e,a
(1) 1917/     B25 : C3 3E 0E            		jp	fm_send_1
(1) 1918/     B28 :                     .chlst_unlk:
(1) 1919/     B28 : 7E                  		ld	a,(hl)
(1) 1920/     B29 : FE FF               		cp	-1
(1) 1921/     B2B : C8                  		ret	z
(1) 1922/     B2C : B9                  		cp	c
(1) 1923/     B2D : C8                  		ret	z
(1) 1924/     B2E : 19                  		add	hl,de
(1) 1925/     B2F : 18 F7               		jr	.chlst_unlk
(1) 1926/     B31 :                     
(1) 1927/     B31 :                     ; ; --------------------------------------------------------
(1) 1928/     B31 :                     ; ; For 32X only:
(1) 1929/     B31 :                     ; ; Communicate to Master SH2 using CMD interrupt
(1) 1930/     B31 :                     ; ; --------------------------------------------------------
(1) 1931/     B31 :                     ;
(1) 1932/     B31 :                     ; mars_scomm:
(1) 1933/     B31 :                     ; 		ret
(1) 1934/     B31 :                     ; 		ld	de,(reqMarsTrnf)	; New PWM ins data?
(1) 1935/     B31 :                     ; 		ld	a,e
(1) 1936/     B31 :                     ; 		or	d
(1) 1937/     B31 :                     ; 		jp	z,.playbck
(1) 1938/     B31 :                     ; 		call	dac_fill
(1) 1939/     B31 :                     ; 		ld	hl,(reqMarsTrnf)
(1) 1940/     B31 :                     ; 		ld	c,21h			; 21h: Send copy of Instrlist
(1) 1941/     B31 :                     ; 		ld	b,80h/2			; num of words to transfer
(1) 1942/     B31 :                     ; 		call	mars_zcomm
(1) 1943/     B31 :                     ; 		ld	de,0			; Reset wordflag
(1) 1944/     B31 :                     ; 		ld	(reqMarsTrnf),de
(1) 1945/     B31 :                     ; 		ret
(1) 1946/     B31 :                     ; .playbck:
(1) 1947/     B31 :                     ; 		ld	iy,PWMVTBL
(1) 1948/     B31 :                     ; 		ld	b,7			; 7 channels
(1) 1949/     B31 :                     ; .next:
(1) 1950/     B31 :                     ; 		push	bc
(1) 1951/     B31 :                     ; 		push	iy
(1) 1952/     B31 :                     ; 		ld	a,(iy)
(1) 1953/     B31 :                     ; 		or	a
(1) 1954/     B31 :                     ; 		jp	p,.disbld
(1) 1955/     B31 :                     ; 		and	01100000b
(1) 1956/     B31 :                     ; 		or	a
(1) 1957/     B31 :                     ; 		call	nz,.play
(1) 1958/     B31 :                     ; 		res	6,(iy)
(1) 1959/     B31 :                     ; 		res	5,(iy)
(1) 1960/     B31 :                     ; .disbld:
(1) 1961/     B31 :                     ; 		pop	iy
(1) 1962/     B31 :                     ; 		pop	bc
(1) 1963/     B31 :                     ; 		ld	de,8
(1) 1964/     B31 :                     ; 		call	dac_me
(1) 1965/     B31 :                     ; 		add	iy,de
(1) 1966/     B31 :                     ; 		djnz	.next
(1) 1967/     B31 :                     ;
(1) 1968/     B31 :                     ; ; 	; All this code just to tell SH2
(1) 1969/     B31 :                     ; ; 	; to update PWM list...
(1) 1970/     B31 :                     ; ; 		call	dac_me
(1) 1971/     B31 :                     ; ; 		ld	hl,6000h		; Set bank
(1) 1972/     B31 :                     ; ; 		ld	(hl),0
(1) 1973/     B31 :                     ; ; 		ld	(hl),1
(1) 1974/     B31 :                     ; ; 		ld	(hl),0
(1) 1975/     B31 :                     ; ; 		ld	(hl),0
(1) 1976/     B31 :                     ; ; 		ld	(hl),0
(1) 1977/     B31 :                     ; ; 		ld	(hl),0
(1) 1978/     B31 :                     ; ; 		ld	(hl),1
(1) 1979/     B31 :                     ; ; 		call	dac_me
(1) 1980/     B31 :                     ; ; 		ld	(hl),0
(1) 1981/     B31 :                     ; ; 		ld	(hl),1
(1) 1982/     B31 :                     ; ; 		ld	ix,5100h|8000h		; ix - mars sysreg
(1) 1983/     B31 :                     ; ; .wait_md:	ld	a,(ix+comm8)		; 68k got it first?
(1) 1984/     B31 :                     ; ; 		or	a
(1) 1985/     B31 :                     ; ; 		jp	nz,.wait_md
(1) 1986/     B31 :                     ; ; 		call	dac_me
(1) 1987/     B31 :                     ; ; 		ld	(ix+comm4),20h		; Z80 ready
(1) 1988/     B31 :                     ; ; 		ld	(ix+3),01b		; Master CMD interrupt
(1) 1989/     B31 :                     ; ; .wait_cmd:	bit	0,(ix+3)		; CMD clear?
(1) 1990/     B31 :                     ; ; 		jp	nz,.wait_cmd
(1) 1991/     B31 :                     ; ; 		call	dac_me
(1) 1992/     B31 :                     ; 		ret
(1) 1993/     B31 :                     ;
(1) 1994/     B31 :                     ; ; bit 6
(1) 1995/     B31 :                     ; .play:
(1) 1996/     B31 :                     ; 		ld	a,(iy)
(1) 1997/     B31 :                     ; 		and	00001111b
(1) 1998/     B31 :                     ; 		inc	a
(1) 1999/     B31 :                     ; 		ld	c,a
(1) 2000/     B31 :                     ; 		call	dac_me
(1) 2001/     B31 :                     ; 		push	iy
(1) 2002/     B31 :                     ; 		pop	hl
(1) 2003/     B31 :                     ; 		ld	b,8/2
(1) 2004/     B31 :                     ; 		call	mars_zcomm
(1) 2005/     B31 :                     ; 		ld	a,(iy)
(1) 2006/     B31 :                     ; 		and	10011111b
(1) 2007/     B31 :                     ; 		ld	(iy),a
(1) 2008/     B31 :                     ; 		ret
(1) 2009/     B31 :                     
(1) 2010/     B31 :                     ; ====================================================================
(1) 2011/     B31 :                     ; ----------------------------------------------------------------
(1) 2012/     B31 :                     ; Subroutines
(1) 2013/     B31 :                     ; ----------------------------------------------------------------
(1) 2014/     B31 :                     
(1) 2015/     B31 :                     ; --------------------------------------------------------
(1) 2016/     B31 :                     ; Init sound engine
(1) 2017/     B31 :                     ; --------------------------------------------------------
(1) 2018/     B31 :                     
(1) 2019/     B31 :                     gema_init:
(1) 2020/     B31 : CD DB 0C            		call	dac_off
(1) 2021/     B34 : 3E 9F               		ld	a,09Fh
(1) 2022/     B36 : 32 11 7F            		ld	(Zpsg_ctrl),a
(1) 2023/     B39 : 3E BF               		ld	a,0BFh
(1) 2024/     B3B : 32 11 7F            		ld	(Zpsg_ctrl),a
(1) 2025/     B3E : 3E DF               		ld	a,0DFh
(1) 2026/     B40 : 32 11 7F            		ld	(Zpsg_ctrl),a
(1) 2027/     B43 : 3E FF               		ld	a,0FFh
(1) 2028/     B45 : 32 11 7F            		ld	(Zpsg_ctrl),a
(1) 2029/     B48 : 11 00 27            		ld	de,2700h
(1) 2030/     B4B : CD 3E 0E            		call	fm_send_1
(1) 2031/     B4E : 11 00 28            		ld	de,2800h
(1) 2032/     B51 : CD 3E 0E            		call	fm_send_1
(1) 2033/     B54 : 11 01 28            		ld	de,2801h
(1) 2034/     B57 : CD 3E 0E            		call	fm_send_1
(1) 2035/     B5A : 11 02 28            		ld	de,2802h
(1) 2036/     B5D : CD 3E 0E            		call	fm_send_1
(1) 2037/     B60 : 11 04 28            		ld	de,2804h
(1) 2038/     B63 : CD 3E 0E            		call	fm_send_1
(1) 2039/     B66 : 11 05 28            		ld	de,2805h
(1) 2040/     B69 : CD 3E 0E            		call	fm_send_1
(1) 2041/     B6C : 11 06 28            		ld	de,2806h
(1) 2042/     B6F : CD 3E 0E            		call	fm_send_1
(1) 2043/     B72 : 11 00 2B            		ld	de,2B00h
(1) 2044/     B75 : CD 3E 0E            		call	fm_send_1
(1) 2045/     B78 : 21 00 15            		ld	hl,dWaveBuff			; Initilize WAVE FIFO
(1) 2046/     B7B : 11 01 15            		ld	de,dWaveBuff+1
(1) 2047/     B7E : 01 FF 00            		ld	bc,100h-1
(1) 2048/     B81 : 36 80               		ld	(hl),80h
(1) 2049/     B83 : ED B0               		ldir
(1) 2050/     B85 : C9                  		ret
(1) 2051/     B86 :                     
(1) 2052/     B86 :                     ; --------------------------------------------------------
(1) 2053/     B86 :                     ; Read cmd byte, auto re-aligns to 7Fh
(1) 2054/     B86 :                     ; --------------------------------------------------------
(1) 2055/     B86 :                     
(1) 2056/     B86 :                     get_cmdbyte:
(1) 2057/     B86 : C5                  		push	bc
(1) 2058/     B87 : D5                  		push	de
(1) 2059/     B88 : E5                  		push	hl
(1) 2060/     B89 :                     .getcbytel:
(1) 2061/     B89 : CD 88 0E            		call	dac_me
(1) 2062/     B8C : CD 9C 0E            		call	dac_fill
(1) 2063/     B8F : 3A 2C 00            		ld	a,(commZWrite)
(1) 2064/     B92 : 47                  		ld	b,a
(1) 2065/     B93 : 3A 2B 00            		ld	a,(commZRead)
(1) 2066/     B96 : B8                  		cp	b
(1) 2067/     B97 : CA 89 0B            		jp	z,.getcbytel		; wait for a command from 68k
(1) 2068/     B9A : 06 00               		ld	b,0
(1) 2069/     B9C : 4F                  		ld	c,a
(1) 2070/     B9D : 21 00 1D            		ld	hl,commZfifo
(1) 2071/     BA0 : CD 88 0E            		call	dac_me
(1) 2072/     BA3 : 09                  		add	hl,bc
(1) 2073/     BA4 : 3C                  		inc	a
(1) 2074/     BA5 : E6 3F               		and	3Fh			; limit to 128
(1) 2075/     BA7 : 32 2B 00            		ld	(commZRead),a
(1) 2076/     BAA : 7E                  		ld	a,(hl)
(1) 2077/     BAB : E1                  		pop	hl
(1) 2078/     BAC : D1                  		pop	de
(1) 2079/     BAD : C1                  		pop	bc
(1) 2080/     BAE : C9                  		ret
(1) 2081/     BAF :                     
(1) 2082/     BAF :                     ; --------------------------------------------------------
(1) 2083/     BAF :                     ; check_tick
(1) 2084/     BAF :                     ;
(1) 2085/     BAF :                     ; Checks if VBlank triggred a TICK (1/150)
(1) 2086/     BAF :                     ; --------------------------------------------------------
(1) 2087/     BAF :                     
(1) 2088/     BAF :                     check_tick:
(1) 2089/     BAF : F3                  		di				; Disable ints
(1) 2090/     BB0 : F5                  		push	af
(1) 2091/     BB1 : E5                  		push	hl
(1) 2092/     BB2 : 21 1B 00            		ld	hl,tickFlag+1		; read last TICK flag
(1) 2093/     BB5 : 7E                  		ld	a,(hl)			; non-zero value?
(1) 2094/     BB6 : B7                  		or 	a
(1) 2095/     BB7 : 28 1D               		jr	z,.ctnotick
(1) 2096/     BB9 :                     	; ints are disabled from here
(1) 2097/     BB9 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2098/     BBB : 23                  		inc	hl			; Move to tickCnt
(1) 2099/     BBC : 34                  		inc	(hl)			; and increment
(1) 2100/     BBD : CD 88 0E            		call	dac_me
(1) 2101/     BC0 : D5                  		push	de
(1) 2102/     BC1 : 2A 1F 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2103/     BC4 : ED 5B 1D 00         		ld	de,(sbeatPtck)
(1) 2104/     BC8 : CD 88 0E            		call	dac_me
(1) 2105/     BCB : 19                  		add	hl,de
(1) 2106/     BCC : 22 1F 00            		ld	(sbeatAcc),hl
(1) 2107/     BCF : D1                  		pop	de
(1) 2108/     BD0 : CD 88 0E            		call	dac_me
(1) 2109/     BD3 : CD 9C 0E            		call	dac_fill
(1) 2110/     BD6 :                     .ctnotick:
(1) 2111/     BD6 : E1                  		pop	hl
(1) 2112/     BD7 : F1                  		pop	af
(1) 2113/     BD8 : FB                  		ei				; Enable ints again
(1) 2114/     BD9 : C9                  		ret
(1) 2115/     BDA :                     
(1) 2116/     BDA :                     ; --------------------------------------------------------
(1) 2117/     BDA :                     ; set_tempo
(1) 2118/     BDA :                     ;
(1) 2119/     BDA :                     ; Input:
(1) 2120/     BDA :                     ; a - Beats per minute
(1) 2121/     BDA :                     ;
(1) 2122/     BDA :                     ; Uses:
(1) 2123/     BDA :                     ; de,hl
(1) 2124/     BDA :                     ; --------------------------------------------------------
(1) 2125/     BDA :                     
(1) 2126/     BDA :                     set_tempo:
(1) 2127/     BDA : 11 DA 00            		ld	de,218
(1) 2128/     BDD : CD EC 0B            		call	do_multiply
(1) 2129/     BE0 : AF                  		xor	a
(1) 2130/     BE1 : CB 25               		sla	l
(1) 2131/     BE3 : CB 14               		rl	h
(1) 2132/     BE5 : 17                  		rla			; AH <- sbpt, 8 fracs
(1) 2133/     BE6 : 6C                  		ld	l,h
(1) 2134/     BE7 : 67                  		ld	h,a		; HL <- AH
(1) 2135/     BE8 : 22 1D 00            		ld	(sbeatPtck),hl
(1) 2136/     BEB : C9                  		ret
(1) 2137/     BEC :                     
(1) 2138/     BEC :                     ; ---------------------------------------------
(1) 2139/     BEC :                     ; do_multiply
(1) 2140/     BEC :                     ;
(1) 2141/     BEC :                     ; Input:
(1) 2142/     BEC :                     ; hl - Start from
(1) 2143/     BEC :                     ; de - Multply by this
(1) 2144/     BEC :                     ; ---------------------------------------------
(1) 2145/     BEC :                     
(1) 2146/     BEC :                     ; 			      ; GETPATPTR
(1) 2147/     BEC :                     ; 			      ; 		ld	HL,PATCHDATA
(1) 2148/     BEC :                     ; 	dc.b	$21,$86,$18
(1) 2149/     BEC :                     ; 			      ; 		ld	DE,39
(1) 2150/     BEC :                     ; 	dc.b	$11,$27,$00
(1) 2151/     BEC :                     ; 			      ; 		jr	MULADD
(1) 2152/     BEC :                     ; 	dc.b	$18,$03
(1) 2153/     BEC :                     
(1) 2154/     BEC :                     do_multiply:
(1) 2155/     BEC : 21 00 00            		ld	hl,0
(1) 2156/     BEF :                     .mul_add:
(1) 2157/     BEF : CB 3F               		srl	a
(1) 2158/     BF1 : 30 01               		jr	nc,.mulbitclr
(1) 2159/     BF3 : 19                  		add	hl,de
(1) 2160/     BF4 :                     .mulbitclr:
(1) 2161/     BF4 : C8                  		ret	z
(1) 2162/     BF5 : CB 23               		sla	e		; if more bits still set in A, DE*=2 and loop
(1) 2163/     BF7 : CB 12               		rl	d
(1) 2164/     BF9 : 18 F4               		jr	.mul_add
(1) 2165/     BFB :                     
(1) 2166/     BFB :                     ; --------------------------------------------------------
(1) 2167/     BFB :                     ; transferRom
(1) 2168/     BFB :                     ;
(1) 2169/     BFB :                     ; Transfer bytes from ROM to Z80, this also tells
(1) 2170/     BFB :                     ; to 68k that we are reading fom ROM
(1) 2171/     BFB :                     ;
(1) 2172/     BFB :                     ; Input:
(1) 2173/     BFB :                     ; a  - Source ROM address $xx0000
(1) 2174/     BFB :                     ; bc - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 2175/     BFB :                     ; hl - Source ROM address $00xxxx
(1) 2176/     BFB :                     ; de - Destination address
(1) 2177/     BFB :                     ;
(1) 2178/     BFB :                     ; Uses:
(1) 2179/     BFB :                     ; b, ix
(1) 2180/     BFB :                     ;
(1) 2181/     BFB :                     ; Notes:
(1) 2182/     BFB :                     ; call dac_fill first if transfering anything other than
(1) 2183/     BFB :                     ; WAV sample data, just to be safe
(1) 2184/     BFB :                     ; --------------------------------------------------------
(1) 2185/     BFB :                     
(1) 2186/     BFB :                     ; TODO: check if I can improve this
(1) 2187/     BFB :                     
(1) 2188/     BFB :                     transferRom:
(1) 2189/     BFB : CD 88 0E            		call	dac_me
(1) 2190/     BFE : DD E5               		push	ix
(1) 2191/     C00 : DD 21 2D 00         		ld	ix,commZRomBlk
(1) 2192/     C04 : 22 29 00            		ld	(x68ksrclsb),hl
(1) 2193/     C07 : CB BC               		res	7,h
(1) 2194/     C09 : 06 00               		ld	b,0
(1) 2195/     C0B : 0B                  		dec	bc
(1) 2196/     C0C : 09                  		add	hl,bc
(1) 2197/     C0D : CB 7C               		bit	7,h
(1) 2198/     C0F : 20 0B               		jr	nz,.double
(1) 2199/     C11 : 2A 29 00            		ld	hl,(x68ksrclsb)		; single transfer
(1) 2200/     C14 : 0C                  		inc	c
(1) 2201/     C15 : 47                  		ld	b,a
(1) 2202/     C16 : CD 45 0C            		call	.transfer
(1) 2203/     C19 : DD E1               		pop	ix
(1) 2204/     C1B : C9                  		ret
(1) 2205/     C1C :                     .double:
(1) 2206/     C1C : CD 88 0E            		call	dac_me
(1) 2207/     C1F : 47                  		ld	b,a			; double transfer
(1) 2208/     C20 : C5                  		push	bc
(1) 2209/     C21 : E5                  		push	hl
(1) 2210/     C22 : 79                  		ld	a,c
(1) 2211/     C23 : 95                  		sub	a,l
(1) 2212/     C24 : 4F                  		ld	c,a
(1) 2213/     C25 : 2A 29 00            		ld	hl,(x68ksrclsb)
(1) 2214/     C28 : CD 45 0C            		call	.transfer
(1) 2215/     C2B : E1                  		pop	hl
(1) 2216/     C2C : C1                  		pop	bc
(1) 2217/     C2D : CD 88 0E            		call	dac_me
(1) 2218/     C30 : 4D                  		ld	c,l
(1) 2219/     C31 : 0C                  		inc	c
(1) 2220/     C32 : 3A 2A 00            		ld	a,(x68ksrcmid)
(1) 2221/     C35 : E6 80               		and	80h
(1) 2222/     C37 : C6 80               		add	a,80h
(1) 2223/     C39 : 67                  		ld	h,a
(1) 2224/     C3A : 2E 00               		ld	l,0
(1) 2225/     C3C : 30 01               		jr	nc,.x68knocarry
(1) 2226/     C3E : 04                  		inc	b
(1) 2227/     C3F :                     .x68knocarry:
(1) 2228/     C3F : CD 45 0C            		call	.transfer
(1) 2229/     C42 : DD E1               		pop	ix
(1) 2230/     C44 : C9                  		ret
(1) 2231/     C45 :                     
(1) 2232/     C45 :                     ; b  - Source ROM xx0000
(1) 2233/     C45 :                     ;  c - Bytes to transfer (00h not allowed)
(1) 2234/     C45 :                     ; hl - Source ROM 00xxxx
(1) 2235/     C45 :                     ; de - Destination address
(1) 2236/     C45 :                     ;
(1) 2237/     C45 :                     ; Uses:
(1) 2238/     C45 :                     ; a
(1) 2239/     C45 :                     .transfer:
(1) 2240/     C45 : CD 88 0E            		call	dac_me
(1) 2241/     C48 : D5                  		push	de
(1) 2242/     C49 : 11 00 60            		ld	de,6000h
(1) 2243/     C4C : 7C                  		ld	a,h
(1) 2244/     C4D : CB 07               		rlc	a
(1) 2245/     C4F : 12                  		ld	(de),a
(1) 2246/     C50 : 78                  		ld	a,b
(1) 2247/     C51 : 12                  		ld	(de),a
(1) 2248/     C52 : 1F                  		rra
(1) 2249/     C53 : 12                  		ld	(de),a
(1) 2250/     C54 : 1F                  		rra
(1) 2251/     C55 : 12                  		ld	(de),a
(1) 2252/     C56 : 1F                  		rra
(1) 2253/     C57 : CD 88 0E            		call	dac_me
(1) 2254/     C5A : 12                  		ld	(de),a
(1) 2255/     C5B : 1F                  		rra
(1) 2256/     C5C : 12                  		ld	(de),a
(1) 2257/     C5D : 1F                  		rra
(1) 2258/     C5E : 12                  		ld	(de),a
(1) 2259/     C5F : 1F                  		rra
(1) 2260/     C60 : 12                  		ld	(de),a
(1) 2261/     C61 : 1F                  		rra
(1) 2262/     C62 : 12                  		ld	(de),a
(1) 2263/     C63 : D1                  		pop	de
(1) 2264/     C64 : CB FC               		set	7,h
(1) 2265/     C66 : CD 88 0E            		call	dac_me
(1) 2266/     C69 :                     
(1) 2267/     C69 :                     	; Transfer data in parts of 3bytes
(1) 2268/     C69 :                     	; while playing cache'd WAV in the process
(1) 2269/     C69 : 79                  		ld	a,c
(1) 2270/     C6A : 06 00               		ld	b,0
(1) 2271/     C6C : DD CB 01 C6         		set	0,(ix+1)	; Tell to 68k that we are reading from ROM
(1) 2272/     C70 : D6 03               		sub	a,3
(1) 2273/     C72 : 38 14               		jr	c,.x68klast
(1) 2274/     C74 :                     .x68kloop:
(1) 2275/     C74 : 0E 02               		ld	c,3-1
(1) 2276/     C76 : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 2277/     C7A : 20 20               		jr	nz,.x68klpwt
(1) 2278/     C7C :                     .x68klpcont:
(1) 2279/     C7C : ED B0               		ldir
(1) 2280/     C7E : 00                  		nop
(1) 2281/     C7F : CD 88 0E            		call	dac_me
(1) 2282/     C82 : 00                  		nop
(1) 2283/     C83 : D6 02               		sub	a,3-1
(1) 2284/     C85 : D2 74 0C            		jp	nc,.x68kloop
(1) 2285/     C88 :                     ; last block
(1) 2286/     C88 :                     .x68klast:
(1) 2287/     C88 : C6 03               		add	a,3
(1) 2288/     C8A : 4F                  		ld	c,a
(1) 2289/     C8B : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 2290/     C8F : C2 B1 0C            		jp	nz,.x68klstwt
(1) 2291/     C92 :                     .x68klstcont:
(1) 2292/     C92 : ED B0               		ldir
(1) 2293/     C94 : CD 88 0E            		call	dac_me
(1) 2294/     C97 : DD CB 01 86         		res	0,(ix+1)
(1) 2295/     C9B : C9                  		ret
(1) 2296/     C9C :                     
(1) 2297/     C9C :                     ; If Genesis wants to do a DMA job...
(1) 2298/     C9C :                     ; This MIGHT cause the DAC to ran out of sample data
(1) 2299/     C9C :                     .x68klpwt:
(1) 2300/     C9C : DD CB 01 86         		res	0,(ix+1)		; Not reading ROM
(1) 2301/     CA0 :                     .x68kpwtlp:
(1) 2302/     CA0 : 00                  		nop
(1) 2303/     CA1 : CD 88 0E            		call	dac_me
(1) 2304/     CA4 : 00                  		nop
(1) 2305/     CA5 : DD CB 00 46         		bit	0,(ix)			; Is ROM free from 68K?
(1) 2306/     CA9 : 20 F5               		jr	nz,.x68kpwtlp
(1) 2307/     CAB : DD CB 01 C6         		set	0,(ix+1)		; Reading ROM again.
(1) 2308/     CAF : 18 CB               		jr	.x68klpcont
(1) 2309/     CB1 :                     
(1) 2310/     CB1 :                     ; For last write
(1) 2311/     CB1 :                     .x68klstwt:
(1) 2312/     CB1 : DD CB 01 86         		res	0,(ix+1)		; Not reading ROM
(1) 2313/     CB5 :                     .x68klstwtlp:
(1) 2314/     CB5 : 00                  		nop
(1) 2315/     CB6 : CD 88 0E            		call	dac_me
(1) 2316/     CB9 : 00                  		nop
(1) 2317/     CBA : DD CB 00 46         		bit	0,(ix)			; Is ROM free from 68K?
(1) 2318/     CBE : 20 F5               		jr	nz,.x68klstwtlp
(1) 2319/     CC0 : DD CB 01 C6         		set	0,(ix+1)		; Reading ROM again.
(1) 2320/     CC4 : 18 CC               		jr	.x68klstcont
(1) 2321/     CC6 :                     
(1) 2322/     CC6 :                     ; --------------------------------------------------------
(1) 2323/     CC6 :                     ; bruteforce DAC ON/OFF playback
(1) 2324/     CC6 :                     ; --------------------------------------------------------
(1) 2325/     CC6 :                     
(1) 2326/     CC6 :                     dac_on:
(1) 2327/     CC6 : 3E 2B               		ld	a,2Bh
(1) 2328/     CC8 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2329/     CCB : 3E 80               		ld	a,80h
(1) 2330/     CCD : 32 01 40            		ld	(Zym_data_1),a
(1) 2331/     CD0 : 3E D9               		ld 	a,zopcExx
(1) 2332/     CD2 : 32 88 0E            		ld	(dac_me),a
(1) 2333/     CD5 : 3E F5               		ld 	a,zopcPushAf
(1) 2334/     CD7 : 32 9C 0E            		ld	(dac_fill),a
(1) 2335/     CDA : C9                  		ret
(1) 2336/     CDB :                     dac_off:
(1) 2337/     CDB : 3E 2B               		ld	a,2Bh
(1) 2338/     CDD : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2339/     CE0 : 3E 00               		ld	a,00h
(1) 2340/     CE2 : 32 01 40            		ld	(Zym_data_1),a
(1) 2341/     CE5 : 3E C9               		ld 	a,zopcRet
(1) 2342/     CE7 : 32 88 0E            		ld	(dac_me),a
(1) 2343/     CEA : 3E C9               		ld 	a,zopcRet
(1) 2344/     CEC : 32 9C 0E            		ld	(dac_fill),a
(1) 2345/     CEF : C9                  		ret
(1) 2346/     CF0 :                     
(1) 2347/     CF0 :                     ; ====================================================================
(1) 2348/     CF0 :                     ; ----------------------------------------------------------------
(1) 2349/     CF0 :                     ; Sound chip routines
(1) 2350/     CF0 :                     ; ----------------------------------------------------------------
(1) 2351/     CF0 :                     
(1) 2352/     CF0 :                     ; --------------------------------------------------------
(1) 2353/     CF0 :                     ; psg_env
(1) 2354/     CF0 :                     ;
(1) 2355/     CF0 :                     ; Processes the PSG manually to add effects
(1) 2356/     CF0 :                     ; --------------------------------------------------------
(1) 2357/     CF0 :                     
(1) 2358/     CF0 :                     psg_env:
(1) 2359/     CF0 :                     	; NOTE: this now reads backwards, because
(1) 2360/     CF0 :                     	; of the HAT mode check
(1) 2361/     CF0 : FD 21 3B 12         		ld	iy,psgcom+3
(1) 2362/     CF4 : 21 11 7F            		ld	hl,Zpsg_ctrl
(1) 2363/     CF7 : 16 E0               		ld	d,0E0h			; PSG first ctrl command
(1) 2364/     CF9 : 1E 04               		ld	e,4			; 4 channels
(1) 2365/     CFB :                     .vloop:
(1) 2366/     CFB : CD 88 0E            		call	dac_me
(1) 2367/     CFE : FD 4E 00            		ld	c,(iy+COM)		; c - current command
(1) 2368/     D01 : FD 36 00 00         		ld	(iy+COM),0
(1) 2369/     D05 : CB 51               		bit	2,c			; bit 2 - stop sound
(1) 2370/     D07 : 28 0C               		jr	z,.ckof
(1) 2371/     D09 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 2372/     D0D : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 2373/     D11 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 2374/     D15 :                     ; 		ld	a,4			; PSG Channel 3?
(1) 2375/     D15 :                     ; 		cp	e
(1) 2376/     D15 :                     ; 		jr	nz,.ckof
(1) 2377/     D15 :                     ; 		nop
(1) 2378/     D15 :                     ; 		res	5,(ix)			; Unlock PSG3
(1) 2379/     D15 :                     .ckof:
(1) 2380/     D15 : CB 49               		bit	1,c			; bit 1 - key off
(1) 2381/     D17 : 28 0E               		jr      z,.ckon
(1) 2382/     D19 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 2383/     D1C : B7                  		or	a
(1) 2384/     D1D : 28 08               		jr	z,.ckon
(1) 2385/     D1F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2386/     D23 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 2387/     D27 :                     .ckon:
(1) 2388/     D27 : CB 41               		bit	0,c			; bit 0 - key on
(1) 2389/     D29 : 28 43               		jr	z,.envproc
(1) 2390/     D2B : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 2391/     D2F : 3A 2F 00            		ld	a,(psgHatMode)		; check if using tone3 mode.
(1) 2392/     D32 : 4F                  		ld	c,a
(1) 2393/     D33 : E6 03               		and	11b
(1) 2394/     D35 : FE 03               		cp	11b
(1) 2395/     D37 : CA 4B 0D            		jp	z,.tnmode
(1) 2396/     D3A :                     .wrfreq:
(1) 2397/     D3A : 7B                  		ld	a,e
(1) 2398/     D3B : FE 04               		cp	4
(1) 2399/     D3D : CA 61 0D            		jp	z,.sethat
(1) 2400/     D40 : FD 7E 1C            		ld	a,(iy+DTL)		; load frequency LSB or NOISE data
(1) 2401/     D43 : B2                  		or	d			; OR with current channel
(1) 2402/     D44 : 77                  		ld	(hl),a			; write it
(1) 2403/     D45 : FD 7E 20            		ld	a,(iy+DTH)
(1) 2404/     D48 : 77                  		ld	(hl),a
(1) 2405/     D49 : 18 1B               		jr	.nskip
(1) 2406/     D4B :                     
(1) 2407/     D4B :                     ; Tone3 mode
(1) 2408/     D4B :                     .tnmode:
(1) 2409/     D4B : 7B                  		ld	a,e
(1) 2410/     D4C : FE 04               		cp	4			; NOISE
(1) 2411/     D4E : 28 07               		jr	z,.psteal
(1) 2412/     D50 : FE 03               		cp	3			; PSG3, can't play
(1) 2413/     D52 : CA 66 0D            		jp	z,.nskip
(1) 2414/     D55 : 18 E3               		jr	.wrfreq
(1) 2415/     D57 :                     .psteal:
(1) 2416/     D57 : FD 7E 1C            		ld	a,(iy+DTL)		; Steal PSG3's freq
(1) 2417/     D5A : F6 C0               		or	0C0h
(1) 2418/     D5C : 77                  		ld	(hl),a
(1) 2419/     D5D : FD 7E 20            		ld	a,(iy+DTH)
(1) 2420/     D60 : 77                  		ld	(hl),a
(1) 2421/     D61 :                     .sethat:
(1) 2422/     D61 : 3A 2F 00            		ld	a,(psgHatMode)		; write hat mode only.
(1) 2423/     D64 : B2                  		or	d
(1) 2424/     D65 : 77                  		ld	(hl),a
(1) 2425/     D66 :                     .nskip:
(1) 2426/     D66 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2427/     D6A : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 2428/     D6E :                     
(1) 2429/     D6E :                     ; ----------------------------
(1) 2430/     D6E :                     ; Process effects
(1) 2431/     D6E :                     ; ----------------------------
(1) 2432/     D6E :                     
(1) 2433/     D6E :                     .envproc:
(1) 2434/     D6E : CD 88 0E            		call	dac_me
(1) 2435/     D71 : FD 7E 18            		ld	a,(iy+MODE)
(1) 2436/     D74 : B7                  		or	a			; no modes
(1) 2437/     D75 : CA F8 0D            		jp	z,.vedlp
(1) 2438/     D78 : FE 01               		cp 	001b			; Attack mode
(1) 2439/     D7A : 20 26               		jr	nz,.chk2
(1) 2440/     D7C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2441/     D80 : FD 7E 04            		ld	a,(iy+LEV)		; a - current level (volume)
(1) 2442/     D83 : FD 46 24            		ld	b,(iy+ALV)		; b - attack level
(1) 2443/     D86 : FD 96 08            		sub	a,(iy+ATK)		; (attack rate) - (level)
(1) 2444/     D89 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 2445/     D8B : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 2446/     D8D : B8                  		cp	b			; attack rate == level?
(1) 2447/     D8E : 38 08               		jr	c,.atkend
(1) 2448/     D90 : 28 06               		jr	z,.atkend
(1) 2449/     D92 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 2450/     D95 : C3 F8 0D            		jp	.vedlp
(1) 2451/     D98 :                     .atkend:
(1) 2452/     D98 : FD 70 04            		ld	(iy+LEV),b		; attack level = new level
(1) 2453/     D9B : FD 36 18 02         		ld	(iy+MODE),2		; set to decay mode
(1) 2454/     D9F : C3 F8 0D            		jp	.vedlp
(1) 2455/     DA2 :                     .chk2:
(1) 2456/     DA2 :                     
(1) 2457/     DA2 : FE 02               		cp	010b			; Decay mode
(1) 2458/     DA4 : C2 D6 0D            		jp	nz,.chk4
(1) 2459/     DA7 :                     .dectmr:
(1) 2460/     DA7 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2461/     DAB : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 2462/     DAE : FD 46 10            		ld	b,(iy+SLV)		; b - Sustain
(1) 2463/     DB1 : B8                  		cp	b
(1) 2464/     DB2 : 38 0C               		jr	c,.dkadd		; if carry: add
(1) 2465/     DB4 : 28 17               		jr	z,.dkyend		; if zero:  finish
(1) 2466/     DB6 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 2467/     DB9 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 2468/     DBB : B8                  		cp	b			; compare level
(1) 2469/     DBC : 38 0F               		jr	c,.dkyend		; and finish
(1) 2470/     DBE : 18 08               		jr	.dksav
(1) 2471/     DC0 :                     .dkadd:
(1) 2472/     DC0 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 2473/     DC3 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 2474/     DC5 : B8                  		cp	b			; compare level
(1) 2475/     DC6 : 30 05               		jr	nc,.dkyend
(1) 2476/     DC8 :                     .dksav:
(1) 2477/     DC8 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 2478/     DCB : 18 2B               		jr	.vedlp
(1) 2479/     DCD :                     .dkyend:
(1) 2480/     DCD : FD 70 04            		ld	(iy+LEV),b		; save last attack
(1) 2481/     DD0 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 2482/     DD4 : 18 22               		jr	.vedlp
(1) 2483/     DD6 :                     
(1) 2484/     DD6 :                     .chk4:
(1) 2485/     DD6 : FE 04               		cp	100b			; Sustain phase
(1) 2486/     DD8 : 20 1E               		jr	nz,.vedlp
(1) 2487/     DDA : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 2488/     DDE : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 2489/     DE1 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 2490/     DE4 : 38 05               		jr	c,.killenv		; release done
(1) 2491/     DE6 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 2492/     DE9 : 18 0D               		jr	.vedlp
(1) 2493/     DEB :                     .killenv:
(1) 2494/     DEB : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 2495/     DEF : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 2496/     DF3 : 3E 04               		ld	a,4			; PSG Channel 3?
(1) 2497/     DF5 : BB                  		cp	e
(1) 2498/     DF6 : 20 00               		jr	nz,.vedlp
(1) 2499/     DF8 :                     ; 		res	5,(ix)			; Unlock PSG3
(1) 2500/     DF8 :                     .vedlp:
(1) 2501/     DF8 : FD 2B               		dec	iy			; next COM to check
(1) 2502/     DFA : 7A                  		ld	a,d
(1) 2503/     DFB : D6 20               		sub	a,20h
(1) 2504/     DFD : 57                  		ld	d,a
(1) 2505/     DFE : 1D                  		dec	e
(1) 2506/     DFF : C2 FB 0C            		jp	nz,.vloop
(1) 2507/     E02 :                     
(1) 2508/     E02 :                     	; ----------------------------
(1) 2509/     E02 :                     	; Set final volumes
(1) 2510/     E02 : CD 88 0E            		call	dac_me
(1) 2511/     E05 : FD 21 38 12         		ld	iy,psgcom
(1) 2512/     E09 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 2513/     E0D : 21 90 00            		ld	hl,90h		; Channel + volumeset bit
(1) 2514/     E10 : 11 20 00            		ld	de,20h		; next channel increment
(1) 2515/     E13 : 06 04               		ld	b,4
(1) 2516/     E15 :                     .nextpsg:
(1) 2517/     E15 : FD CB 28 46         		bit	0,(iy+FLG)	; PSG update?
(1) 2518/     E19 : 28 13               		jr	z,.flgoff
(1) 2519/     E1B : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 2520/     E1F : FD 7E 04            		ld	a,(iy+LEV)	; a - Level
(1) 2521/     E22 : CB 3F               		srl	a		; (Level >> 4)
(1) 2522/     E24 : CB 3F               		srl	a
(1) 2523/     E26 : CB 3F               		srl	a
(1) 2524/     E28 : CB 3F               		srl	a
(1) 2525/     E2A : B5                  		or	l		; merge Channel bits
(1) 2526/     E2B : DD 77 00            		ld	(ix),a		; Write volume
(1) 2527/     E2E :                     .flgoff:
(1) 2528/     E2E : 19                  		add	hl,de		; next channel
(1) 2529/     E2F : FD 23               		inc	iy		; next com
(1) 2530/     E31 : 10 E2               		djnz	.nextpsg
(1) 2531/     E33 : CD 88 0E            		call	dac_me
(1) 2532/     E36 : C9                  		ret
(1) 2533/     E37 :                     
(1) 2534/     E37 :                     ; ; --------------------------------------------------------
(1) 2535/     E37 :                     ; ; Communicate to 32X from here
(1) 2536/     E37 :                     ; ; hl - Data to transfer
(1) 2537/     E37 :                     ; ; b - WORDS to transfer
(1) 2538/     E37 :                     ; ; c - Task id
(1) 2539/     E37 :                     ; ;
(1) 2540/     E37 :                     ; ; Uses comm4/comm6
(1) 2541/     E37 :                     ; ; --------------------------------------------------------
(1) 2542/     E37 :                     ;
(1) 2543/     E37 :                     ; mars_zcomm:
(1) 2544/     E37 :                     ; 		call	dac_me
(1) 2545/     E37 :                     ; 		push	hl
(1) 2546/     E37 :                     ; 		ld	hl,6000h		; Set bank
(1) 2547/     E37 :                     ; 		ld	(hl),0
(1) 2548/     E37 :                     ; 		ld	(hl),1
(1) 2549/     E37 :                     ; 		ld	(hl),0
(1) 2550/     E37 :                     ; 		ld	(hl),0
(1) 2551/     E37 :                     ; 		ld	(hl),0
(1) 2552/     E37 :                     ; 		ld	(hl),0
(1) 2553/     E37 :                     ; 		ld	(hl),1
(1) 2554/     E37 :                     ; 		call	dac_me
(1) 2555/     E37 :                     ; 		ld	(hl),0
(1) 2556/     E37 :                     ; 		ld	(hl),1
(1) 2557/     E37 :                     ; 		pop	hl
(1) 2558/     E37 :                     ; 		ld	ix,5100h|8000h		; ix - mars sysreg
(1) 2559/     E37 :                     ; .wait_md:	ld	a,(ix+comm8)		; 68k got it first?
(1) 2560/     E37 :                     ; 		or	a
(1) 2561/     E37 :                     ; 		jp	nz,.wait_md
(1) 2562/     E37 :                     ; .wait_md2:	ld	a,(ix+comm4+1)		; busy?
(1) 2563/     E37 :                     ; 		or	a
(1) 2564/     E37 :                     ; 		jp	m,.wait_md2
(1) 2565/     E37 :                     ; 		call	dac_me
(1) 2566/     E37 :                     ; 		ld	(ix+comm4),c		; Z80 ready
(1) 2567/     E37 :                     ; 		ld	(ix+(comm4+1)),1	; SH busy
(1) 2568/     E37 :                     ; 		ld	(ix+3),01b		; Master CMD interrupt
(1) 2569/     E37 :                     ; .wait_cmd:	bit	0,(ix+3)		; CMD clear?
(1) 2570/     E37 :                     ; 		jp	nz,.wait_cmd
(1) 2571/     E37 :                     ; 		call	dac_me
(1) 2572/     E37 :                     ; .loop:
(1) 2573/     E37 :                     ; 		call	dac_me
(1) 2574/     E37 :                     ; 		ld	a,(ix+(comm4+1))	; SH ready?
(1) 2575/     E37 :                     ; 		cp	2
(1) 2576/     E37 :                     ; 		jr	nz,.loop
(1) 2577/     E37 :                     ; 		ld	a,(ix+(comm4+1))	; SH ready?
(1) 2578/     E37 :                     ; 		cp	2
(1) 2579/     E37 :                     ; 		jr	nz,.loop
(1) 2580/     E37 :                     ; 		ld	a,c			; Z80 is busy
(1) 2581/     E37 :                     ; 		or	80h
(1) 2582/     E37 :                     ; 		ld	(ix+comm4),a
(1) 2583/     E37 :                     ; 		call	dac_me
(1) 2584/     E37 :                     ; 		ld	a,b			; check b
(1) 2585/     E37 :                     ; 		or	a
(1) 2586/     E37 :                     ; 		jr	z,.exit
(1) 2587/     E37 :                     ; 		jp	m,.exit
(1) 2588/     E37 :                     ; 		ld	a,(hl)
(1) 2589/     E37 :                     ; 		ld	(ix+comm6),a
(1) 2590/     E37 :                     ; 		call	dac_me
(1) 2591/     E37 :                     ; 		inc	hl
(1) 2592/     E37 :                     ; 		ld	a,(hl)
(1) 2593/     E37 :                     ; 		ld	(ix+comm6+1),a
(1) 2594/     E37 :                     ; 		inc	hl
(1) 2595/     E37 :                     ; 		call	dac_me
(1) 2596/     E37 :                     ; 		ld	a,c			; Z80 is ready
(1) 2597/     E37 :                     ; 		or	40h
(1) 2598/     E37 :                     ; 		ld	(ix+comm4),a
(1) 2599/     E37 :                     ; 		dec	b
(1) 2600/     E37 :                     ; 		jr	.loop
(1) 2601/     E37 :                     ; .exit:
(1) 2602/     E37 :                     ; 		ld	(ix+comm4),0		; Z80 finished
(1) 2603/     E37 :                     ; 		ret
(1) 2604/     E37 :                     
(1) 2605/     E37 :                     ; ---------------------------------------------
(1) 2606/     E37 :                     ; FM send registers
(1) 2607/     E37 :                     ;
(1) 2608/     E37 :                     ; Input:
(1) 2609/     E37 :                     ; d - ctrl
(1) 2610/     E37 :                     ; e - data
(1) 2611/     E37 :                     ; ---------------------------------------------
(1) 2612/     E37 :                     
(1) 2613/     E37 :                     ; ix - first byte: FM id
(1) 2614/     E37 :                     fm_autoset:
(1) 2615/     E37 : DD CB 00 56         		bit	2,(ix)
(1) 2616/     E3B : C2 49 0E            		jp	nz,fm_send_2
(1) 2617/     E3E :                     
(1) 2618/     E3E :                     fm_send_1:
(1) 2619/     E3E : 7A                  		ld	a,d
(1) 2620/     E3F : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2621/     E42 : 00                  		nop
(1) 2622/     E43 : 7B                  		ld	a,e
(1) 2623/     E44 : 32 01 40            		ld	(Zym_data_1),a
(1) 2624/     E47 : 00                  		nop
(1) 2625/     E48 : C9                  		ret
(1) 2626/     E49 :                     
(1) 2627/     E49 :                     fm_send_2:
(1) 2628/     E49 : 7A                  		ld	a,d
(1) 2629/     E4A : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 2630/     E4D : 00                  		nop
(1) 2631/     E4E : 7B                  		ld	a,e
(1) 2632/     E4F : 32 03 40            		ld	(Zym_data_2),a
(1) 2633/     E52 : 00                  		nop
(1) 2634/     E53 : C9                  		ret
(1) 2635/     E54 :                     
(1) 2636/     E54 :                     ; --------------------------------------------------------
(1) 2637/     E54 :                     ; dac_play
(1) 2638/     E54 :                     ;
(1) 2639/     E54 :                     ; Plays a new sample
(1) 2640/     E54 :                     ; --------------------------------------------------------
(1) 2641/     E54 :                     
(1) 2642/     E54 :                     dac_play:
(1) 2643/     E54 : F3                  		di
(1) 2644/     E55 : CD DB 0C            		call	dac_off
(1) 2645/     E58 : D9                  		exx
(1) 2646/     E59 : 01 15 00            		ld	bc,dWaveBuff>>8			; bc - WAVFIFO MSB
(1) 2647/     E5C : ED 5B 11 00         		ld	de,(wave_Pitch)			; de - Pitch
(1) 2648/     E60 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8		; hl - WAVFIFO LSB pointer (xx.00)
(1) 2649/     E63 : D9                  		exx
(1) 2650/     E64 : 2A 08 00            		ld	hl,(wave_Start)
(1) 2651/     E67 : 3A 0A 00            		ld 	a,(wave_Start+2)
(1) 2652/     E6A : 22 22 00            		ld	(dDacPntr),hl
(1) 2653/     E6D : 32 24 00            		ld	(dDacPntr+2),a
(1) 2654/     E70 : 2A 0B 00            		ld	hl,(wave_Len)
(1) 2655/     E73 : 3A 0D 00            		ld 	a,(wave_Len+2)
(1) 2656/     E76 : 22 25 00            		ld	(dDacCntr),hl
(1) 2657/     E79 : 32 27 00            		ld	(dDacCntr+2),a
(1) 2658/     E7C : AF                  		xor	a
(1) 2659/     E7D : 32 28 00            		ld	(dDacFifoMid),a
(1) 2660/     E80 : CD AA 0E            		call	dac_firstfill
(1) 2661/     E83 : CD C6 0C            		call	dac_on
(1) 2662/     E86 : FB                  		ei
(1) 2663/     E87 : C9                  		ret
(1) 2664/     E88 :                     
(1) 2665/     E88 :                     ; --------------------------------------------------------
(1) 2666/     E88 :                     ; dac_me
(1) 2667/     E88 :                     ;
(1) 2668/     E88 :                     ; Writes wave data to DAC using data stored on buffer.
(1) 2669/     E88 :                     ; Call this routine every 6 or more lines of code
(1) 2670/     E88 :                     ; (use any emu-debugger to check if it still plays
(1) 2671/     E88 :                     ; at stable 16000hz)
(1) 2672/     E88 :                     ;
(1) 2673/     E88 :                     ; Input (EXX):
(1) 2674/     E88 :                     ;  c - WAVEFIFO MSB
(1) 2675/     E88 :                     ; de - Pitch (xx.00)
(1) 2676/     E88 :                     ; h  - WAVEFIFO LSB (as xx.00)
(1) 2677/     E88 :                     ;
(1) 2678/     E88 :                     ; Uses (EXX):
(1) 2679/     E88 :                     ; b
(1) 2680/     E88 :                     ;
(1) 2681/     E88 :                     ; *** self-modifiable code ***
(1) 2682/     E88 :                     ; --------------------------------------------------------
(1) 2683/     E88 :                     
(1) 2684/     E88 : D9                  dac_me:		exx				; <-- code changes between EXX(play) and RET(stop)
(1) 2685/     E89 : 08                  		ex	af,af'
(1) 2686/     E8A : 45                  		ld	b,l
(1) 2687/     E8B : 3E 2A               		ld	a,2Ah
(1) 2688/     E8D : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 2689/     E90 : 6C                  		ld	l,h
(1) 2690/     E91 : 61                  		ld	h,c
(1) 2691/     E92 : 7E                  		ld	a,(hl)
(1) 2692/     E93 : 32 01 40            		ld	(Zym_data_1),a
(1) 2693/     E96 : 65                  		ld	h,l
(1) 2694/     E97 : 68                  		ld	l,b
(1) 2695/     E98 : 19                  		add	hl,de
(1) 2696/     E99 : 08                  		ex	af,af'
(1) 2697/     E9A : D9                  		exx
(1) 2698/     E9B : C9                  		ret
(1) 2699/     E9C :                     
(1) 2700/     E9C :                     ; --------------------------------------------------------
(1) 2701/     E9C :                     ; dac_fill
(1) 2702/     E9C :                     ;
(1) 2703/     E9C :                     ; Refills a half of the WAVE FIFO data, automatic
(1) 2704/     E9C :                     ;
(1) 2705/     E9C :                     ; *** self-modifiable code ***
(1) 2706/     E9C :                     ; --------------------------------------------------------
(1) 2707/     E9C :                     
(1) 2708/     E9C : F5                  dac_fill:	push	af			; <-- code changes between PUSH AF(play) and RET(stop)
(1) 2709/     E9D : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 2710/     EA0 : D9                  		exx
(1) 2711/     EA1 : AC                  		xor	h			; xx.00
(1) 2712/     EA2 : D9                  		exx
(1) 2713/     EA3 : E6 80               		and	80h
(1) 2714/     EA5 : C2 AE 0E            		jp	nz,dac_refill
(1) 2715/     EA8 : F1                  		pop	af
(1) 2716/     EA9 : C9                  		ret
(1) 2717/     EAA :                     ; first time
(1) 2718/     EAA :                     dac_firstfill:
(1) 2719/     EAA : CD AF 0B            		call	check_tick
(1) 2720/     EAD : F5                  		push	af
(1) 2721/     EAE :                     
(1) 2722/     EAE :                     ; If auto-fill is needed
(1) 2723/     EAE :                     ; TODO: improve this, it's rushed.
(1) 2724/     EAE :                     
(1) 2725/     EAE :                     dac_refill:
(1) 2726/     EAE : CD 88 0E            		call	dac_me
(1) 2727/     EB1 : C5                  		push	bc
(1) 2728/     EB2 : D5                  		push	de
(1) 2729/     EB3 : E5                  		push	hl
(1) 2730/     EB4 : 3A 13 00            		ld	a,(wave_Flags)
(1) 2731/     EB7 : FE 07               		cp	111b
(1) 2732/     EB9 : D2 70 0F            		jp	nc,.FDF7
(1) 2733/     EBC :                     
(1) 2734/     EBC : 3A 27 00            		ld	a,(dDacCntr+2)
(1) 2735/     EBF : 2A 25 00            		ld	hl,(dDacCntr)
(1) 2736/     EC2 : 01 80 00            		ld	bc,80h
(1) 2737/     EC5 : 37                  		scf
(1) 2738/     EC6 : 3F                  		ccf
(1) 2739/     EC7 : ED 42               		sbc	hl,bc
(1) 2740/     EC9 : DE 00               		sbc	a,0
(1) 2741/     ECB : 32 27 00            		ld	(dDacCntr+2),a
(1) 2742/     ECE : 22 25 00            		ld	(dDacCntr),hl
(1) 2743/     ED1 : 16 15               		ld	d,dWaveBuff>>8
(1) 2744/     ED3 : B7                  		or	a
(1) 2745/     ED4 : FA FE 0E            		jp	m,.FDF4DONE
(1) 2746/     ED7 :                     .keepcntr:
(1) 2747/     ED7 :                     
(1) 2748/     ED7 : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 2749/     EDA : 5F                  		ld	e,a
(1) 2750/     EDB : C6 80               		add 	a,80h
(1) 2751/     EDD : 32 28 00            		ld	(dDacFifoMid),a
(1) 2752/     EE0 : 2A 22 00            		ld	hl,(dDacPntr)
(1) 2753/     EE3 : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 2754/     EE6 : CD FB 0B            		call	transferRom
(1) 2755/     EE9 : 2A 22 00            		ld	hl,(dDacPntr)
(1) 2756/     EEC : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 2757/     EEF : 01 80 00            		ld	bc,80h
(1) 2758/     EF2 : 09                  		add	hl,bc
(1) 2759/     EF3 : CE 00               		adc	a,0
(1) 2760/     EF5 : 22 22 00            		ld	(dDacPntr),hl
(1) 2761/     EF8 : 32 24 00            		ld	(dDacPntr+2),a
(1) 2762/     EFB : C3 73 0F            		jp	.FDFreturn
(1) 2763/     EFE :                     .FDF4DONE:
(1) 2764/     EFE : 16 15               		ld	d,dWaveBuff>>8
(1) 2765/     F00 : 3A 13 00            		ld	a,(wave_Flags)
(1) 2766/     F03 : E6 01               		and	01b
(1) 2767/     F05 : B7                  		or	a
(1) 2768/     F06 : C2 29 0F            		jp	nz,.FDF72
(1) 2769/     F09 :                     
(1) 2770/     F09 : 7D                  		ld	a,l
(1) 2771/     F0A : C6 80               		add	a,80h
(1) 2772/     F0C : 4F                  		ld	c,a
(1) 2773/     F0D : 06 00               		ld	b,0
(1) 2774/     F0F : C5                  		push	bc
(1) 2775/     F10 : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 2776/     F13 : 5F                  		ld	e,a
(1) 2777/     F14 : C6 80               		add	a,80h
(1) 2778/     F16 : 32 28 00            		ld	(dDacFifoMid),a
(1) 2779/     F19 : C1                  		pop	bc			; C <- # just xfered
(1) 2780/     F1A : 79                  		ld	a,c
(1) 2781/     F1B : B0                  		or	b
(1) 2782/     F1C : 28 52               		jr	z,.FDF7
(1) 2783/     F1E : 2A 22 00            		ld	hl,(dDacPntr)
(1) 2784/     F21 : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 2785/     F24 : CD FB 0B            		call	transferRom
(1) 2786/     F27 : 18 47               		jr	.FDF7
(1) 2787/     F29 :                     .FDF72:
(1) 2788/     F29 :                     
(1) 2789/     F29 :                     	; loop sample
(1) 2790/     F29 : C5                  		push	bc
(1) 2791/     F2A : D5                  		push	de
(1) 2792/     F2B : 3A 10 00            		ld	a,(wave_Loop+2)
(1) 2793/     F2E : 4F                  		ld	c,a
(1) 2794/     F2F : ED 5B 0E 00         		ld	de,(wave_Loop)
(1) 2795/     F33 : 2A 08 00            		ld	hl,(wave_Start)
(1) 2796/     F36 : 3A 0A 00            		ld 	a,(wave_Start+2)
(1) 2797/     F39 : 81                  		add	a,c
(1) 2798/     F3A : 19                  		add	hl,de
(1) 2799/     F3B : CE 00               		adc	a,0
(1) 2800/     F3D : 22 22 00            		ld	(dDacPntr),hl
(1) 2801/     F40 : 32 24 00            		ld	(dDacPntr+2),a
(1) 2802/     F43 : 2A 0B 00            		ld	hl,(wave_Len)
(1) 2803/     F46 : 3A 0D 00            		ld 	a,(wave_Len+2)
(1) 2804/     F49 : 91                  		sub	a,c
(1) 2805/     F4A : 37                  		scf
(1) 2806/     F4B : 3F                  		ccf
(1) 2807/     F4C : ED 52               		sbc	hl,de
(1) 2808/     F4E : DE 00               		sbc	a,0
(1) 2809/     F50 : 22 25 00            		ld	(dDacCntr),hl
(1) 2810/     F53 : 32 27 00            		ld	(dDacCntr+2),a
(1) 2811/     F56 : D1                  		pop	de
(1) 2812/     F57 : C1                  		pop	bc
(1) 2813/     F58 : 78                  		ld	a,b
(1) 2814/     F59 : B1                  		or	c
(1) 2815/     F5A : 28 17               		jr	z,.FDFreturn
(1) 2816/     F5C : 3A 28 00            		ld	a,(dDacFifoMid)
(1) 2817/     F5F : 5F                  		ld	e,a
(1) 2818/     F60 : C6 80               		add	a,80h
(1) 2819/     F62 : 32 28 00            		ld	(dDacFifoMid),a
(1) 2820/     F65 : 2A 22 00            		ld	hl,(dDacPntr)
(1) 2821/     F68 : 3A 24 00            		ld	a,(dDacPntr+2)
(1) 2822/     F6B : CD FB 0B            		call	transferRom
(1) 2823/     F6E : 18 03               		jr	.FDFreturn
(1) 2824/     F70 :                     .FDF7:
(1) 2825/     F70 : CD DB 0C            		call	dac_off
(1) 2826/     F73 :                     ; 		ld	HL,FMVTBLCH6
(1) 2827/     F73 :                     ; 		ld	(HL),0C6H		; mark voice free, unlocked, and releasing
(1) 2828/     F73 :                     ; 		inc	HL
(1) 2829/     F73 :                     ; 		inc	HL
(1) 2830/     F73 :                     ; 		inc	HL
(1) 2831/     F73 :                     ; 		inc	HL
(1) 2832/     F73 :                     ; 		ld	(HL),0			; clear any pending release timer value
(1) 2833/     F73 :                     ; 		inc	HL
(1) 2834/     F73 :                     ; 		ld	(HL),0
(1) 2835/     F73 :                     .FDFreturn:
(1) 2836/     F73 : E1                  		pop	hl
(1) 2837/     F74 : D1                  		pop	de
(1) 2838/     F75 : C1                  		pop	bc
(1) 2839/     F76 : F1                  		pop	af
(1) 2840/     F77 : C9                  		ret
(1) 2841/     F78 :                     
(1) 2842/     F78 :                     ; ====================================================================
(1) 2843/     F78 :                     ; ----------------------------------------------------------------
(1) 2844/     F78 :                     ; Tables
(1) 2845/     F78 :                     ; ----------------------------------------------------------------
(1) 2846/     F78 :                     
(1) 2847/     F78 : 00 01               wavFreq_Pwm:	dw 100h		; C-0
(1) 2848/     F7A : 00 01               		dw 100h
(1) 2849/     F7C : 00 01               		dw 100h
(1) 2850/     F7E : 00 01               		dw 100h
(1) 2851/     F80 : 00 01               		dw 100h
(1) 2852/     F82 : 00 01               		dw 100h
(1) 2853/     F84 : 00 01               		dw 100h
(1) 2854/     F86 : 00 01               		dw 100h
(1) 2855/     F88 : 00 01               		dw 100h
(1) 2856/     F8A : 00 01               		dw 100h
(1) 2857/     F8C : 00 01               		dw 100h
(1) 2858/     F8E : 00 01               		dw 100h
(1) 2859/     F90 : 00 01               		dw 100h		; C-1
(1) 2860/     F92 : 00 01               		dw 100h
(1) 2861/     F94 : 00 01               		dw 100h
(1) 2862/     F96 : 00 01               		dw 100h
(1) 2863/     F98 : 00 01               		dw 100h
(1) 2864/     F9A : 00 01               		dw 100h
(1) 2865/     F9C : 00 01               		dw 100h
(1) 2866/     F9E : 00 01               		dw 100h
(1) 2867/     FA0 : 00 01               		dw 100h
(1) 2868/     FA2 : 00 01               		dw 100h
(1) 2869/     FA4 : 00 01               		dw 100h
(1) 2870/     FA6 : 00 01               		dw 100h
(1) 2871/     FA8 : 00 01               		dw 100h		; C-2
(1) 2872/     FAA : 00 01               		dw 100h
(1) 2873/     FAC : 00 01               		dw 100h
(1) 2874/     FAE : 00 01               		dw 100h
(1) 2875/     FB0 : 00 01               		dw 100h
(1) 2876/     FB2 : 00 01               		dw 100h
(1) 2877/     FB4 : 00 01               		dw 100h
(1) 2878/     FB6 : 00 01               		dw 100h
(1) 2879/     FB8 : 00 01               		dw 100h
(1) 2880/     FBA : 00 01               		dw 100h
(1) 2881/     FBC : 00 01               		dw 100h
(1) 2882/     FBE : 3B 00               		dw 03Bh
(1) 2883/     FC0 : 3E 00               		dw 03Eh		; C-3 5512
(1) 2884/     FC2 : 43 00               		dw 043h		; C#3
(1) 2885/     FC4 : 46 00               		dw 046h		; D-3
(1) 2886/     FC6 : 49 00               		dw 049h		; D#3
(1) 2887/     FC8 : 4E 00               		dw 04Eh		; E-3
(1) 2888/     FCA : 54 00               		dw 054h		; F-3
(1) 2889/     FCC : 58 00               		dw 058h		; F#3
(1) 2890/     FCE : 5E 00               		dw 05Eh		; G-3 8363 -17
(1) 2891/     FD0 : 63 00               		dw 063h		; G#3
(1) 2892/     FD2 : 68 00               		dw 068h		; A-3
(1) 2893/     FD4 : 70 00               		dw 070h		; A#3
(1) 2894/     FD6 : 75 00               		dw 075h		; B-3
(1) 2895/     FD8 : 7F 00               		dw 07Fh		; C-4 11025 -12
(1) 2896/     FDA : 88 00               		dw 088h		; C#4
(1) 2897/     FDC : 8F 00               		dw 08Fh		; D-4
(1) 2898/     FDE : 97 00               		dw 097h		; D#4
(1) 2899/     FE0 : A0 00               		dw 0A0h		; E-4
(1) 2900/     FE2 : AD 00               		dw 0ADh		; F-4
(1) 2901/     FE4 : B5 00               		dw 0B5h		; F#4
(1) 2902/     FE6 : C0 00               		dw 0C0h		; G-4
(1) 2903/     FE8 : CC 00               		dw 0CCh		; G#4
(1) 2904/     FEA : D7 00               		dw 0D7h		; A-4
(1) 2905/     FEC : E7 00               		dw 0E7h		; A#4
(1) 2906/     FEE : F0 00               		dw 0F0h		; B-4
(1) 2907/     FF0 : 00 01               		dw 100h		; C-5 22050
(1) 2908/     FF2 : 10 01               		dw 110h		; C#5
(1) 2909/     FF4 : 20 01               		dw 120h		; D-5
(1) 2910/     FF6 : 2C 01               		dw 12Ch		; D#5
(1) 2911/     FF8 : 42 01               		dw 142h		; E-5
(1) 2912/     FFA : 58 01               		dw 158h		; F-5
(1) 2913/     FFC : 6A 01               		dw 16Ah		; F#5 32000 +6
(1) 2914/     FFE : 7E 01               		dw 17Eh		; G-5
(1) 2915/    1000 : 90 01               		dw 190h		; G#5
(1) 2916/    1002 : AC 01               		dw 1ACh		; A-5
(1) 2917/    1004 : C2 01               		dw 1C2h		; A#5
(1) 2918/    1006 : E0 01               		dw 1E0h		; B-5
(1) 2919/    1008 : F8 01               		dw 1F8h		; C-6 44100 +12
(1) 2920/    100A : 10 02               		dw 210h		; C#6
(1) 2921/    100C : 40 02               		dw 240h		; D-6
(1) 2922/    100E : 60 02               		dw 260h		; D#6
(1) 2923/    1010 : 80 02               		dw 280h		; E-6
(1) 2924/    1012 : A0 02               		dw 2A0h		; F-6
(1) 2925/    1014 : D0 02               		dw 2D0h		; F#6
(1) 2926/    1016 : F8 02               		dw 2F8h		; G-6
(1) 2927/    1018 : 20 03               		dw 320h		; G#6
(1) 2928/    101A : 50 03               		dw 350h		; A-6
(1) 2929/    101C : 80 03               		dw 380h		; A#6
(1) 2930/    101E : C0 03               		dw 3C0h		; B-6
(1) 2931/    1020 : 00 04               		dw 400h		; C-7 88200
(1) 2932/    1022 : 00 01               		dw 100h
(1) 2933/    1024 : 00 01               		dw 100h
(1) 2934/    1026 : 00 01               		dw 100h
(1) 2935/    1028 : 00 01               		dw 100h
(1) 2936/    102A : 00 01               		dw 100h
(1) 2937/    102C : 00 01               		dw 100h
(1) 2938/    102E : 00 01               		dw 100h
(1) 2939/    1030 : 00 01               		dw 100h
(1) 2940/    1032 : 00 01               		dw 100h
(1) 2941/    1034 : 00 01               		dw 100h
(1) 2942/    1036 : 00 01               		dw 100h
(1) 2943/    1038 : 00 01               		dw 100h		; C-8
(1) 2944/    103A : 00 01               		dw 100h
(1) 2945/    103C : 00 01               		dw 100h
(1) 2946/    103E : 00 01               		dw 100h
(1) 2947/    1040 : 00 01               		dw 100h
(1) 2948/    1042 : 00 01               		dw 100h
(1) 2949/    1044 : 00 01               		dw 100h
(1) 2950/    1046 : 00 01               		dw 100h
(1) 2951/    1048 : 00 01               		dw 100h
(1) 2952/    104A : 00 01               		dw 100h
(1) 2953/    104C : 00 01               		dw 100h
(1) 2954/    104E : 00 01               		dw 100h
(1) 2955/    1050 : 00 01               		dw 100h		; C-9
(1) 2956/    1052 : 00 01               		dw 100h
(1) 2957/    1054 : 00 01               		dw 100h
(1) 2958/    1056 : 00 01               		dw 100h
(1) 2959/    1058 : 00 01               		dw 100h
(1) 2960/    105A : 00 01               		dw 100h
(1) 2961/    105C : 00 01               		dw 100h
(1) 2962/    105E : 00 01               		dw 100h
(1) 2963/    1060 : 00 01               		dw 100h
(1) 2964/    1062 : 00 01               		dw 100h
(1) 2965/    1064 : 00 01               		dw 100h
(1) 2966/    1066 : 00 01               		dw 100h
(1) 2967/    1068 :                     
(1) 2968/    1068 : 84 02               fmFreq_List:	dw 644		; C-0
(1) 2969/    106A : A9 02               		dw 681
(1) 2970/    106C : D2 02               		dw 722
(1) 2971/    106E : FD 02               		dw 765
(1) 2972/    1070 : 2A 03               		dw 810
(1) 2973/    1072 : 5A 03               		dw 858
(1) 2974/    1074 : 8E 03               		dw 910
(1) 2975/    1076 : C4 03               		dw 964
(1) 2976/    1078 : FD 03               		dw 1021
(1) 2977/    107A : 39 04               		dw 1081
(1) 2978/    107C : 7A 04               		dw 1146
(1) 2979/    107E : BE 04               		dw 1214
(1) 2980/    1080 :                     
(1) 2981/    1080 :                     psgFreq_List:
(1) 2982/    1080 : FF FF               		dw -1		; C-0 $0
(1) 2983/    1082 : FF FF               		dw -1
(1) 2984/    1084 : FF FF               		dw -1
(1) 2985/    1086 : FF FF               		dw -1
(1) 2986/    1088 : FF FF               		dw -1
(1) 2987/    108A : FF FF               		dw -1
(1) 2988/    108C : FF FF               		dw -1
(1) 2989/    108E : FF FF               		dw -1
(1) 2990/    1090 : FF FF               		dw -1
(1) 2991/    1092 : FF FF               		dw -1
(1) 2992/    1094 : FF FF               		dw -1
(1) 2993/    1096 : FF FF               		dw -1
(1) 2994/    1098 : FF FF               		dw -1		; C-1 $C
(1) 2995/    109A : FF FF               		dw -1
(1) 2996/    109C : FF FF               		dw -1
(1) 2997/    109E : FF FF               		dw -1
(1) 2998/    10A0 : FF FF               		dw -1
(1) 2999/    10A2 : FF FF               		dw -1
(1) 3000/    10A4 : FF FF               		dw -1
(1) 3001/    10A6 : FF FF               		dw -1
(1) 3002/    10A8 : FF FF               		dw -1
(1) 3003/    10AA : FF FF               		dw -1
(1) 3004/    10AC : FF FF               		dw -1
(1) 3005/    10AE : FF FF               		dw -1
(1) 3006/    10B0 : FF FF               		dw -1		; C-2 $18
(1) 3007/    10B2 : FF FF               		dw -1
(1) 3008/    10B4 : FF FF               		dw -1
(1) 3009/    10B6 : FF FF               		dw -1
(1) 3010/    10B8 : FF FF               		dw -1
(1) 3011/    10BA : FF FF               		dw -1
(1) 3012/    10BC : FF FF               		dw -1
(1) 3013/    10BE : FF FF               		dw -1
(1) 3014/    10C0 : FF FF               		dw -1
(1) 3015/    10C2 : FF FF               		dw -1
(1) 3016/    10C4 : FF FF               		dw -1
(1) 3017/    10C6 : FF FF               		dw -1
(1) 3018/    10C8 : FF FF               		dw -1		; C-3 $24
(1) 3019/    10CA : FF FF               		dw -1
(1) 3020/    10CC : FF FF               		dw -1
(1) 3021/    10CE : FF FF               		dw -1
(1) 3022/    10D0 : FF FF               		dw -1
(1) 3023/    10D2 : FF FF               		dw -1
(1) 3024/    10D4 : FF FF               		dw -1
(1) 3025/    10D6 : FF FF               		dw -1
(1) 3026/    10D8 : FF FF               		dw -1
(1) 3027/    10DA : F8 03               		dw 3F8h
(1) 3028/    10DC : BF 03               		dw 3BFh
(1) 3029/    10DE : 89 03               		dw 389h
(1) 3030/    10E0 : 56 03               		dw 356h		;C-4 30
(1) 3031/    10E2 : 26 03               		dw 326h
(1) 3032/    10E4 : F9 02               		dw 2F9h
(1) 3033/    10E6 : CE 02               		dw 2CEh
(1) 3034/    10E8 : A5 02               		dw 2A5h
(1) 3035/    10EA : 80 02               		dw 280h
(1) 3036/    10EC : 5C 02               		dw 25Ch
(1) 3037/    10EE : 3A 02               		dw 23Ah
(1) 3038/    10F0 : 1A 02               		dw 21Ah
(1) 3039/    10F2 : FB 01               		dw 1FBh
(1) 3040/    10F4 : DF 01               		dw 1DFh
(1) 3041/    10F6 : C4 01               		dw 1C4h
(1) 3042/    10F8 : AB 01               		dw 1ABh		;C-5 3C
(1) 3043/    10FA : 93 01               		dw 193h
(1) 3044/    10FC : 7D 01               		dw 17Dh
(1) 3045/    10FE : 67 01               		dw 167h
(1) 3046/    1100 : 53 01               		dw 153h
(1) 3047/    1102 : 40 01               		dw 140h
(1) 3048/    1104 : 2E 01               		dw 12Eh
(1) 3049/    1106 : 1D 01               		dw 11Dh
(1) 3050/    1108 : 0D 01               		dw 10Dh
(1) 3051/    110A : FE 00               		dw 0FEh
(1) 3052/    110C : EF 00               		dw 0EFh
(1) 3053/    110E : E2 00               		dw 0E2h
(1) 3054/    1110 : D6 00               		dw 0D6h		;C-6 48
(1) 3055/    1112 : C9 00               		dw 0C9h
(1) 3056/    1114 : BE 00               		dw 0BEh
(1) 3057/    1116 : B4 00               		dw 0B4h
(1) 3058/    1118 : A9 00               		dw 0A9h
(1) 3059/    111A : A0 00               		dw 0A0h
(1) 3060/    111C : 97 00               		dw 97h
(1) 3061/    111E : 8F 00               		dw 8Fh
(1) 3062/    1120 : 87 00               		dw 87h
(1) 3063/    1122 : 7F 00               		dw 7Fh
(1) 3064/    1124 : 78 00               		dw 78h
(1) 3065/    1126 : 71 00               		dw 71h
(1) 3066/    1128 : 6B 00               		dw 6Bh		; C-7 54
(1) 3067/    112A : 65 00               		dw 65h
(1) 3068/    112C : 5F 00               		dw 5Fh
(1) 3069/    112E : 5A 00               		dw 5Ah
(1) 3070/    1130 : 55 00               		dw 55h
(1) 3071/    1132 : 50 00               		dw 50h
(1) 3072/    1134 : 4B 00               		dw 4Bh
(1) 3073/    1136 : 47 00               		dw 47h
(1) 3074/    1138 : 43 00               		dw 43h
(1) 3075/    113A : 40 00               		dw 40h
(1) 3076/    113C : 3C 00               		dw 3Ch
(1) 3077/    113E : 39 00               		dw 39h
(1) 3078/    1140 : 36 00               		dw 36h		; C-8 $60
(1) 3079/    1142 : 33 00               		dw 33h
(1) 3080/    1144 : 30 00               		dw 30h
(1) 3081/    1146 : 2D 00               		dw 2Dh
(1) 3082/    1148 : 2B 00               		dw 2Bh
(1) 3083/    114A : 28 00               		dw 28h
(1) 3084/    114C : 26 00               		dw 26h
(1) 3085/    114E : 24 00               		dw 24h
(1) 3086/    1150 : 22 00               		dw 22h
(1) 3087/    1152 : 20 00               		dw 20h
(1) 3088/    1154 : 1F 00               		dw 1Fh
(1) 3089/    1156 : 1D 00               		dw 1Dh
(1) 3090/    1158 : 1B 00               		dw 1Bh		; C-9 $6C
(1) 3091/    115A : 1A 00               		dw 1Ah
(1) 3092/    115C : 18 00               		dw 18h
(1) 3093/    115E : 17 00               		dw 17h
(1) 3094/    1160 : 16 00               		dw 16h
(1) 3095/    1162 : 15 00               		dw 15h
(1) 3096/    1164 : 13 00               		dw 13h
(1) 3097/    1166 : 12 00               		dw 12h
(1) 3098/    1168 : 11 00               		dw 11h
(1) 3099/    116A : 10 00                		dw 10h
(1) 3100/    116C : 09 00                		dw 9h
(1) 3101/    116E : 08 00                		dw 8h
(1) 3102/    1170 : 00 00               		dw 0		; use +60 if using C-5 for tone 3 noise
(1) 3103/    1172 :                     
(1) 3104/    1172 :                     ; --------------------------------------------------------
(1) 3105/    1172 :                     
(1) 3106/    1172 : 00                  PSGVTBL		db 00h			; 0 - PSG channel id + flags
(1) 3107/    1173 : 00 00               		dw 0			; 1 - track channel link
(1) 3108/    1175 : 00                  		db 0			; 3 - ALV
(1) 3109/    1176 : 00                  		db 0			; 4 - ATK
(1) 3110/    1177 : 00                  		db 0			; 5 - SLV
(1) 3111/    1178 : 00                  		db 0			; 6 - DKY
(1) 3112/    1179 : 00                  		db 0			; 7 - RRT
(1) 3113/    117A : 00                  		db 0
(1) 3114/    117B : 01                  		db 01h
(1) 3115/    117C : 00 00               		dw 0			; link
(1) 3116/    117E : 00                  		db 0			; ALV
(1) 3117/    117F : 00                  		db 0			; ATK
(1) 3118/    1180 : 00                  		db 0			; SLV
(1) 3119/    1181 : 00                  		db 0			; DKY
(1) 3120/    1182 : 00                  		db 0			; RRT
(1) 3121/    1183 : 00                  		db 0
(1) 3122/    1184 : 02                  		db 02h
(1) 3123/    1185 : 00 00               		dw 0			; link
(1) 3124/    1187 : 00                  		db 0			; ALV
(1) 3125/    1188 : 00                  		db 0			; ATK
(1) 3126/    1189 : 00                  		db 0			; SLV
(1) 3127/    118A : 00                  		db 0			; DKY
(1) 3128/    118B : 00                  		db 0			; RRT
(1) 3129/    118C : 00                  		db 0
(1) 3130/    118D : FF                  		db -1			; end-of-list
(1) 3131/    118E : 03                  PSGNVTBL	db 03h
(1) 3132/    118F : 00 00               		dw 0			; track channel link
(1) 3133/    1191 : 00                  		db 0			; ALV
(1) 3134/    1192 : 00                  		db 0			; ATK
(1) 3135/    1193 : 00                  		db 0			; SLV
(1) 3136/    1194 : 00                  		db 0			; DKY
(1) 3137/    1195 : 00                  		db 0			; RRT
(1) 3138/    1196 : 00                  		db 0
(1) 3139/    1197 : FF                  		db -1			; end-of-list
(1) 3140/    1198 :                     
(1) 3141/    1198 : 00                  FMVTBL		db 00h			;  0 - FM channel (chip's actual order)
(1) 3142/    1199 : 00 00               		dw 0			;  1 - link
(1) 3143/    119B : 00 00               		dw 0			;  3 - FM instr pointer
(1) 3144/    119D : 00                  		db 0			;  5 - Pitch
(1) 3145/    119E : 00 00 00            		db 0,0,0		;  6 - 0B0h,0B4h,keys
(1) 3146/    11A1 : 00 00               		dw 0			;  9 - Main frequency
(1) 3147/    11A3 : 00 00               		dw 0			; 11 - Ex freq 1
(1) 3148/    11A5 : 00 00               		dw 0			; 13 - Ex freq 2
(1) 3149/    11A7 : 00 00               		dw 0			; 15 - Ex freq 3
(1) 3150/    11A9 : 01                  		db 01h
(1) 3151/    11AA : 00 00               		dw 0
(1) 3152/    11AC : 00 00               		dw 0
(1) 3153/    11AE : 00                  		db 0
(1) 3154/    11AF : 00 00 00            		db 0,0,0
(1) 3155/    11B2 : 00 00               		dw 0
(1) 3156/    11B4 : 00 00               		dw 0
(1) 3157/    11B6 : 00 00               		dw 0
(1) 3158/    11B8 : 00 00               		dw 0
(1) 3159/    11BA : 04                  		db 04h
(1) 3160/    11BB : 00 00               		dw 0
(1) 3161/    11BD : 00 00               		dw 0
(1) 3162/    11BF : 00                  		db 0
(1) 3163/    11C0 : 00 00 00            		db 0,0,0
(1) 3164/    11C3 : 00 00               		dw 0
(1) 3165/    11C5 : 00 00               		dw 0
(1) 3166/    11C7 : 00 00               		dw 0
(1) 3167/    11C9 : 00 00               		dw 0
(1) 3168/    11CB : 05                  		db 05h
(1) 3169/    11CC : 00 00               		dw 0
(1) 3170/    11CE : 00 00               		dw 0
(1) 3171/    11D0 : 00                  		db 0
(1) 3172/    11D1 : 00 00 00            		db 0,0,0
(1) 3173/    11D4 : 00 00               		dw 0
(1) 3174/    11D6 : 00 00               		dw 0
(1) 3175/    11D8 : 00 00               		dw 0
(1) 3176/    11DA : 00 00               		dw 0
(1) 3177/    11DC : 02                  FM3VTBL		db 02h
(1) 3178/    11DD : 00 00               		dw 0			;  1 - link
(1) 3179/    11DF : 00 00               		dw 0			;  3 - FM instr pointer
(1) 3180/    11E1 : 00                  		db 0
(1) 3181/    11E2 : 00 00 00            		db 0,0,0		;  5 - 0B0h,0B4h,keys
(1) 3182/    11E5 : 00 00               		dw 0			;  8 - Main frequency
(1) 3183/    11E7 : 00 00               		dw 0			; 10 - Ex freq 1
(1) 3184/    11E9 : 00 00               		dw 0			; 12 - Ex freq 2
(1) 3185/    11EB : 00 00               		dw 0			; 14 - Ex freq 3
(1) 3186/    11ED : 06                  FM6VTBL		db 06h
(1) 3187/    11EE : 00 00               		dw 0			;  1 - link
(1) 3188/    11F0 : 00 00               		dw 0			;  3 - FM instr pointer
(1) 3189/    11F2 : 00                  		db 0
(1) 3190/    11F3 : 00 00 00            		db 0,0,0		;  5 - 0B0h,0B4h,keys
(1) 3191/    11F6 : 00 00               		dw 0			;  8 - Main frequency
(1) 3192/    11F8 : 00 00               		dw 0			; 10 - Ex freq 1
(1) 3193/    11FA : 00 00               		dw 0			; 12 - Ex freq 2
(1) 3194/    11FC : 00 00               		dw 0			; 14 - Ex freq 3
(1) 3195/    11FE : FF                  		db -1
(1) 3196/    11FF :                     
(1) 3197/    11FF :                     ; 		align 8
(1) 3198/    11FF : 00                  PWMVTBL		db 00h		; 0 - PWM entry, bit7:locked bit6:update for 68k
(1) 3199/    1200 : 00 00               		dw 0		; 1 - track link
(1) 3200/    1202 : 00 00               		dw 0		; 3 - Pitch (note)
(1) 3201/    1204 : 00                  		db 0		; 5 - Instrument number
(1) 3202/    1205 : 00                  		db 0		; 6 - Volume
(1) 3203/    1206 : 03                  		db 11b		; 7 - Panning
(1) 3204/    1207 : 01                  		db 01h
(1) 3205/    1208 : 00 00               		dw 0
(1) 3206/    120A : 00 00               		dw 0
(1) 3207/    120C : 00                  		db 0
(1) 3208/    120D : 00                  		db 0
(1) 3209/    120E : 03                  		db 11b
(1) 3210/    120F : 02                  		db 02h
(1) 3211/    1210 : 00 00               		dw 0
(1) 3212/    1212 : 00 00               		dw 0
(1) 3213/    1214 : 00                  		db 0
(1) 3214/    1215 : 00                  		db 0
(1) 3215/    1216 : 03                  		db 11b
(1) 3216/    1217 : 03                  		db 03h
(1) 3217/    1218 : 00 00               		dw 0
(1) 3218/    121A : 00 00               		dw 0
(1) 3219/    121C : 00                  		db 0
(1) 3220/    121D : 00                  		db 0
(1) 3221/    121E : 03                  		db 11b
(1) 3222/    121F : 04                  		db 04h
(1) 3223/    1220 : 00 00               		dw 0
(1) 3224/    1222 : 00 00               		dw 0
(1) 3225/    1224 : 00                  		db 0
(1) 3226/    1225 : 00                  		db 0
(1) 3227/    1226 : 03                  		db 11b
(1) 3228/    1227 : 05                  		db 05h
(1) 3229/    1228 : 00 00               		dw 0
(1) 3230/    122A : 00 00               		dw 0
(1) 3231/    122C : 00                  		db 0
(1) 3232/    122D : 00                  		db 0
(1) 3233/    122E : 03                  		db 11b
(1) 3234/    122F : 06                  		db 06h
(1) 3235/    1230 : 00 00               		dw 0
(1) 3236/    1232 : 00 00               		dw 0
(1) 3237/    1234 : 00                  		db 0
(1) 3238/    1235 : 00                  		db 0
(1) 3239/    1236 : 03                  		db 11b
(1) 3240/    1237 : FF                  		db -1
(1) 3241/    1238 :                     
(1) 3242/    1238 : 00 00 00 00         psgcom		db 00h,00h,00h,00h	;  0 command 1 = key on, 2 = key off, 4 = stop snd
(1) 3243/    123C : FF FF FF FF         psglev		db -1, -1, -1, -1	;  4 output level attenuation (%llll.0000, -1 = silent)
(1) 3244/    1240 : 00 00 00 00         psgatk		db 00h,00h,00h,00h	;  8 attack rate
(1) 3245/    1244 : 00 00 00 00         psgdec		db 00h,00h,00h,00h	; 12 decay rate
(1) 3246/    1248 : 00 00 00 00         psgslv		db 00h,00h,00h,00h	; 16 sustain level attenuation
(1) 3247/    124C : 00 00 00 00         psgrrt		db 00h,00h,00h,00h	; 20 release rate
(1) 3248/    1250 : 00 00 00 00         psgenv		db 00h,00h,00h,00h	; 24 envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain, 4
(1) 3249/    1254 : 00 00 00 00         psgdtl		db 00h,00h,00h,00h	; 28 tone bottom 4 bits
(1) 3250/    1258 : 00 00 00 00         psgdth		db 00h,00h,00h,00h	; 32 tone upper 6 bits
(1) 3251/    125C : 00 00 00 00         psgalv		db 00h,00h,00h,00h	; 36 attack level attenuation
(1) 3252/    1260 : 00 00 00 00         whdflg		db 00h,00h,00h,00h	; 40 flags to indicate hardware should be updated
(1) 3253/    1264 : 00 00 00 00         psgtim		db 00h,00h,00h,00h	; 44 timer for sustain
(1) 3254/    1268 :                     
(1) 3255/    1268 :                     ; ====================================================================
(1) 3256/    1268 :                     ; ----------------------------------------------------------------
(1) 3257/    1268 :                     ; FM Voices
(1) 3258/    1268 :                     ; ----------------------------------------------------------------
(1) 3259/    1268 :                     
(1) 3260/    1268 :                     		include "data/sound/instr_z80.asm"
(2)    1/    1268 :                     ; ====================================================================
(2)    2/    1268 :                     ; ----------------------------------------------------------------
(2)    3/    1268 :                     ; PSG, FM, FM3, DAC instruments go here.
(2)    4/    1268 :                     ; Stored on Z80's RAM space
(2)    5/    1268 :                     ; 
(2)    6/    1268 :                     ; NOTE: Very low storage space
(2)    7/    1268 :                     ; ----------------------------------------------------------------
(2)    8/    1268 :                     
(2)    9/    1268 :                     zSmpl 		macro start,end,loop,flags
(2)   10/    1268 :                     		db start&0FFh,((start>>8)&0FFh),((start>>16)&0FFh)
(2)   11/    1268 :                     		db ((end-start)&0FFh),(((end-start)>>8)&0FFh),(((end-start)>>16)&0FFh)
(2)   12/    1268 :                     		db loop&0FFh,((loop>>8)&0FFh),((loop>>16)&0FFh)
(2)   13/    1268 :                     		db 0
(2)   14/    1268 :                     		endm
(2)   15/    1268 :                     
(2)   16/    1268 : (MACRO)             DacIns_Magic1:	zSmpl Sampl_Magic1,Sampl_Magic1_End,0
(2)   16/    1268 : 80 1B 91                            db SAMPL_MAGIC1&0FFh,((SAMPL_MAGIC1>>8)&0FFh),((SAMPL_MAGIC1>>16)&0FFh)
(2)   16/    126B : 8E 8E 01                            db ((SAMPL_MAGIC1_END-SAMPL_MAGIC1)&0FFh),(((SAMPL_MAGIC1_END-SAMPL_MAGIC1)>>8)&0FFh),(((SAMPL_MAGIC1_END-SAMPL_MAGIC1)>>16)&0FFh)
(2)   16/    126E : 00 00 00                            db 0&0FFh,((0>>8)&0FFh),((0>>16)&0FFh)
(2)   16/    1271 : 00                                  db 0
(2)   17/    1272 : (MACRO)             DacIns_Magic2:	zSmpl Sampl_Magic2,Sampl_Magic2_End,0
(2)   17/    1272 : 0E AA 92                            db SAMPL_MAGIC2&0FFh,((SAMPL_MAGIC2>>8)&0FFh),((SAMPL_MAGIC2>>16)&0FFh)
(2)   17/    1275 : 34 8E 01                            db ((SAMPL_MAGIC2_END-SAMPL_MAGIC2)&0FFh),(((SAMPL_MAGIC2_END-SAMPL_MAGIC2)>>8)&0FFh),(((SAMPL_MAGIC2_END-SAMPL_MAGIC2)>>16)&0FFh)
(2)   17/    1278 : 00 00 00                            db 0&0FFh,((0>>8)&0FFh),((0>>16)&0FFh)
(2)   17/    127B : 00                                  db 0
(2)   18/    127C : (MACRO)             DacIns_MyTime:	zSmpl Sampl_MyTime,Sampl_MyTime_End,0
(2)   18/    127C : 42 38 94                            db SAMPL_MYTIME&0FFh,((SAMPL_MYTIME>>8)&0FFh),((SAMPL_MYTIME>>16)&0FFh)
(2)   18/    127F : D5 AF 00                            db ((SAMPL_MYTIME_END-SAMPL_MYTIME)&0FFh),(((SAMPL_MYTIME_END-SAMPL_MYTIME)>>8)&0FFh),(((SAMPL_MYTIME_END-SAMPL_MYTIME)>>16)&0FFh)
(2)   18/    1282 : 00 00 00                            db 0&0FFh,((0>>8)&0FFh),((0>>16)&0FFh)
(2)   18/    1285 : 00                                  db 0
(2)   19/    1286 :                     
(2)   20/    1286 : 00 FF 40 00 80      PsgIns_00:	db 00h,0FFh,40h,00h, 80h
(2)   21/    128B : 00 FF 00 03 03      PsgIns_01:	db 00h,0FFh,00h,03h, 03h
(2)   22/    1290 : 00 FF 80 04 04      PsgIns_02:	db 00h,0FFh,80h,04h, 04h
(2)   23/    1295 : 30 FF FF 00 04      PsgIns_03:	db 30h,0FFh, -1,00h, 04h
(2)   24/    129A : 00 FF FF 01 01      PsgIns_Bass:	db 00h,0FFh, -1,01h, 01h
(2)   25/    129F : 00 FF 00 F0 F0      PsgIns_Snare:	db 00h,0FFh,00h,0F0h,0F0h
(2)   26/    12A4 :                     
(2)   27/    12A4 :                     Fmins_Guitar_Heavy:
(2)   28/    12A4 :                     		binclude "data/sound/instr/fm/guitar_heavy.gsx",2478h,28h
(2)   29/    12CC :                     FmIns_Fm3_OpenHat:
(2)   30/    12CC :                     		binclude "data/sound/instr/fm/fm3_openhat.gsx",2478h,28h
(2)   31/    12F4 :                     FmIns_Fm3_ClosedHat:
(2)   32/    12F4 :                     		binclude "data/sound/instr/fm/fm3_closedhat.gsx",2478h,28h
(2)   33/    131C :                     		
(2)   34/    131C :                     FmIns_DrumKick:
(2)   35/    131C :                     		binclude "data/sound/instr/fm/drum_kick.gsx",2478h,20h
(2)   36/    133C :                     ; FmIns_DrumSnare:
(2)   37/    133C :                     ; 		binclude "data/sound/instr/fm/drum_snare.gsx",2478h,20h
(2)   38/    133C :                     ; FmIns_DrumCloseHat:
(2)   39/    133C :                     ; 		binclude "data/sound/instr/fm/drum_closehat.gsx",2478h,20h
(2)   40/    133C :                     ; FmIns_Piano_m1:
(2)   41/    133C :                     ; 		binclude "data/sound/instr/fm/piano_m1.gsx",2478h,20h
(2)   42/    133C :                     
(2)   43/    133C :                     ; FmIns_Bass_gum:
(2)   44/    133C :                     ; 		binclude "data/sound/instr/fm/bass_gum.gsx",2478h,20h
(2)   45/    133C :                     FmIns_Bass_calm:
(2)   46/    133C :                     		binclude "data/sound/instr/fm/bass_calm.gsx",2478h,20h
(2)   47/    135C :                     ; FmIns_Bass_heavy:
(2)   48/    135C :                     ; 		binclude "data/sound/instr/fm/bass_heavy.gsx",2478h,20h
(2)   49/    135C :                     ; FmIns_Bass_ambient:
(2)   50/    135C :                     ; 		binclude "data/sound/instr/fm/bass_ambient.gsx",2478h,20h
(2)   51/    135C :                     ; FmIns_Brass_gummy:
(2)   52/    135C :                     ; 		binclude "data/sound/instr/fm/brass_gummy.gsx",2478h,20h
(2)   53/    135C :                     ; FmIns_Flaute_1:
(2)   54/    135C :                     ; 		binclude "data/sound/instr/fm/flaute_1.gsx",2478h,20h
(2)   55/    135C :                     ; FmIns_Bass_1:
(2)   56/    135C :                     ; 		binclude "data/sound/instr/fm/bass_2.gsx",2478h,20h
(2)   57/    135C :                     ; FmIns_Bass_2:
(2)   58/    135C :                     ; 		binclude "data/sound/instr/fm/bass_2.gsx",2478h,20h
(2)   59/    135C :                     ; FmIns_Bass_3:
(2)   60/    135C :                     ; 		binclude "data/sound/instr/fm/bass_3.gsx",2478h,20h
(2)   61/    135C :                     ; FmIns_Bass_4:
(2)   62/    135C :                     ; 		binclude "data/sound/instr/fm/bass_4.gsx",2478h,20h
(2)   63/    135C :                     ; FmIns_Bass_5:
(2)   64/    135C :                     ; 		binclude "data/sound/instr/fm/bass_5.gsx",2478h,20h
(2)   65/    135C :                     ; FmIns_Bass_6:
(2)   66/    135C :                     ; 		binclude "data/sound/instr/fm/bass_6.gsx",2478h,20h
(2)   67/    135C :                     ; FmIns_Bass_7:
(2)   68/    135C :                     ; 		binclude "data/sound/instr/fm/bass_7.gsx",2478h,20h
(2)   69/    135C :                     ; FmIns_Bass_heavy:
(2)   70/    135C :                     ; 		binclude "data/sound/instr/fm/bass_heavy.gsx",2478h,20h
(2)   71/    135C :                     ; FmIns_Bass_metal:
(2)   72/    135C :                     ; 		binclude "data/sound/instr/fm/bass_metal.gsx",2478h,20h
(2)   73/    135C :                     ; FmIns_Bass_synth:
(2)   74/    135C :                     ; 		binclude "data/sound/instr/fm/bass_synth_1.gsx",2478h,20h
(2)   75/    135C :                     ; FmIns_Guitar_1:
(2)   76/    135C :                     ; 		binclude "data/sound/instr/fm/guitar_1.gsx",2478h,20h
(2)   77/    135C :                     ; FmIns_Horn_1:
(2)   78/    135C :                     ; 		binclude "data/sound/instr/fm/horn_1.gsx",2478h,20h
(2)   79/    135C :                     ; FmIns_Organ_M1:
(2)   80/    135C :                     ; 		binclude "data/sound/instr/fm/organ_m1.gsx",2478h,20h
(2)   81/    135C :                     ; FmIns_Bass_Beach:
(2)   82/    135C :                     ; 		binclude "data/sound/instr/fm/bass_beach.gsx",2478h,20h
(2)   83/    135C :                     ; FmIns_Bass_Beach_2:
(2)   84/    135C :                     ; 		binclude "data/sound/instr/fm/bass_beach_2.gsx",2478h,20h
(2)   85/    135C :                     ; FmIns_Brass_Cave:
(2)   86/    135C :                     ; 		binclude "data/sound/instr/fm/brass_cave.gsx",2478h,20h
(2)   87/    135C :                     FmIns_Brass_Gem:
(2)   88/    135C :                     		binclude "data/sound/instr/fm/brass_gem.gsx",2478h,20h
(2)   89/    137C :                     FmIns_Piano_Small:
(2)   90/    137C :                     		binclude "data/sound/instr/fm/piano_small.gsx",2478h,20h
(2)   91/    139C :                     FmIns_Piano:
(2)   92/    139C :                     		binclude "data/sound/instr/fm/piano_m1.gsx",2478h,20h
(2)   93/    13BC :                     FmIns_Trumpet_2:
(2)   94/    13BC :                     		binclude "data/sound/instr/fm/trumpet_2.gsx",2478h,20h
(2)   95/    13DC :                     ; FmIns_Bell_Glass:
(2)   96/    13DC :                     ; 		binclude "data/sound/instr/fm/bell_glass.gsx",2478h,20h
(2)   97/    13DC :                     ; FmIns_Marimba_1:
(2)   98/    13DC :                     ; 		binclude "data/sound/instr/fm/marimba_1.gsx",2478h,20h
(2)   99/    13DC :                     FmIns_Ambient_dark:
(2)  100/    13DC :                     		binclude "data/sound/instr/fm/ambient_dark.gsx",2478h,20h
(2)  101/    13FC :                     FmIns_Ambient_spook:
(2)  102/    13FC :                     		binclude "data/sound/instr/fm/ambient_spook.gsx",2478h,20h
(2)  103/    141C :                     FmIns_Ambient_3:
(2)  104/    141C :                     		binclude "data/sound/instr/fm/ambient_3.gsx",2478h,20h
(2)  105/    143C :                     ; FmIns_Ding_toy:
(2)  106/    143C :                     ; 		binclude "data/sound/instr/fm/ding_toy.gsx",2478h,20h
(2)  107/    143C :                     
(1) 3261/    143C :                     		; PWM instruments are stored in SDRAM
(1) 3262/    143C :                     
(1) 3263/    143C :                     ; ====================================================================
(1) 3264/    143C :                     ; ----------------------------------------------------------------
(1) 3265/    143C :                     ; Z80 RAM
(1) 3266/    143C :                     ; ----------------------------------------------------------------
(1) 3267/    143C :                     
(1) 3268/    143C :                     ; --------------------------------------------------------
(1) 3269/    143C :                     ; Buffers
(1) 3270/    143C :                     ; --------------------------------------------------------
(1) 3271/    143C :                     
(1) 3272/    143C :                     		align 100h
(1) 3273/    1500 :                     dWaveBuff	ds 100h			; WAVE data buffer: updated every 80h bytes *LSB must be 00h*
(1) 3274/    1600 :                     trkDataC	ds 100h*MAX_TRKS	; Track data cache: 100h bytes each
(1) 3275/    1800 :                     trkBuff		ds 100h*MAX_TRKS	; Track control (20h) + channels (8h each)
(1) 3276/    1A00 :                     blkHeadC	ds 100h*MAX_TRKS	; Track blocks and heads: 80h each
(1) 3277/    1C00 :                     insDataC	ds 80h*MAX_TRKS		; Instrument pointers cache: 80h each
(1) 3278/    1D00 :                     commZfifo	ds 40h			; Buffer for command requests from 68k
(1) 3279/    1D40 :                     
      49/    1D40 :                     		cpu 68000
      50/    1D40 :                     		padding off
      51/    4240 :                     		phase Z80_CODE+*
      52/    4240 :                     Z80_CODE_END:
      53/    4240 :                     		align 2
      54/    4240 :                     
      55/    4240 :                     ; ====================================================================
      56/    4240 :                     ; ----------------------------------------------------------------
      57/    4240 :                     ; 68k code-banks for RAM
      58/    4240 :                     ;
      59/    4240 :                     ; 880000 area: 512KB max
      60/    4240 :                     ; ----------------------------------------------------------------
      61/    4240 :                     
      62/    4240 :                     Default_Boot:
      63/  FF1B54 :                     		phase RAMCODE_USER
      64/  FF1B54 :                     		include "code/default.asm"
(1)    1/  FF1B54 :                     ; ====================================================================
(1)    2/  FF1B54 :                     ; ----------------------------------------------------------------
(1)    3/  FF1B54 :                     ; Default gamemode
(1)    4/  FF1B54 :                     ; ----------------------------------------------------------------
(1)    5/  FF1B54 :                     
(1)    6/  FF1B54 :                     ; ====================================================================
(1)    7/  FF1B54 :                     ; ------------------------------------------------------
(1)    8/  FF1B54 :                     ; Variables
(1)    9/  FF1B54 :                     ; ------------------------------------------------------
(1)   10/  FF1B54 :                     
(1)   11/  FF1B54 : =$4000              var_MoveSpd	equ	$4000
(1)   12/  FF1B54 :                     
(1)   13/  FF1B54 :                     ; ====================================================================
(1)   14/  FF1B54 :                     ; ------------------------------------------------------
(1)   15/  FF1B54 :                     ; Structs
(1)   16/  FF1B54 :                     ; ------------------------------------------------------
(1)   17/  FF1B54 :                     
(1)   18/  FF1B54 :                     ; 		struct 0
(1)   19/  FF1B54 :                     ; strc_xpos	ds.w 1
(1)   20/  FF1B54 :                     ; strc_ypos	ds.w 1
(1)   21/  FF1B54 :                     ; 		finish
(1)   22/  FF1B54 :                     
(1)   23/  FF1B54 :                     ; ====================================================================
(1)   24/  FF1B54 :                     ; ------------------------------------------------------
(1)   25/  FF1B54 :                     ; This mode's RAM
(1)   26/  FF1B54 :                     ; ------------------------------------------------------
(1)   27/  FF1B54 :                     		
(1)   28/  FF1B54 : (MACRO)             		struct RAM_ModeBuff
(1)   28/  FF1B54 : =$FF1B54            GLBL_LASTPC     set *
(1)   28/    4240 :                                     dephase
(1)   28/    4240 : =$4240              GLBL_LASTORG    set *
(1)   28/FFFFFFFFFFFF8800 :                                     phase RAM_MODEBUFF
(1)   29/FFFFFFFFFFFF8800 :                     RAM_MarsPal	ds.w 256
(1)   30/FFFFFFFFFFFF8A00 :                     RAM_MarsFade	ds.w 256
(1)   31/FFFFFFFFFFFF8C00 :                     RAM_Cam_Xpos	ds.l 1
(1)   32/FFFFFFFFFFFF8C04 :                     RAM_Cam_Ypos	ds.l 1
(1)   33/FFFFFFFFFFFF8C08 :                     RAM_Cam_Zpos	ds.l 1
(1)   34/FFFFFFFFFFFF8C0C :                     RAM_Cam_Xrot	ds.l 1
(1)   35/FFFFFFFFFFFF8C10 :                     RAM_Cam_Yrot	ds.l 1
(1)   36/FFFFFFFFFFFF8C14 :                     RAM_Cam_Zrot	ds.l 1
(1)   37/FFFFFFFFFFFF8C18 :                     RAM_CamData	ds.l 1
(1)   38/FFFFFFFFFFFF8C1C :                     RAM_CamFrame	ds.l 1
(1)   39/FFFFFFFFFFFF8C20 :                     RAM_CamTimer	ds.l 1
(1)   40/FFFFFFFFFFFF8C24 :                     RAM_CamSpeed	ds.l 1
(1)   41/FFFFFFFFFFFF8C28 :                     RAM_MdlCurrMd	ds.w 1
(1)   42/FFFFFFFFFFFF8C2A :                     RAM_BgCamera	ds.w 1
(1)   43/FFFFFFFFFFFF8C2C :                     RAM_BgCamCurr	ds.w 1
(1)   44/FFFFFFFFFFFF8C2E :                     sizeof_mdglbl	ds.l 0
(1)   45/FFFFFFFFFFFF8C30 : (MACRO)             		finish
(1)   45/FFFFFFFFFFFF8800 :                                     !org GLBL_LASTORG
(1)   45/  FF1B54 :                                     phase GLBL_LASTPC
(1)   46/  FF1B54 :                     		
(1)   47/  FF1B54 :                     ; ====================================================================
(1)   48/  FF1B54 :                     ; ------------------------------------------------------
(1)   49/  FF1B54 :                     ; Code start
(1)   50/  FF1B54 :                     ; ------------------------------------------------------
(1)   51/  FF1B54 :                     
(1)   52/  FF1B54 :                     thisCode_Top:
(1)   53/  FF1B54 : 46FC 2700           		move.w	#$2700,sr
(1)   54/  FF1B58 : 61CA                		bsr	Mode_Init
(1)   55/  FF1B5A : 6100 E82A           		bsr	Video_PrintInit
(1)   56/  FF1B5E : 31FC 0000 8C28      		move.w	#0,(RAM_MdlCurrMd).w
(1)   57/  FF1B64 : 203C 0090 8005      		move.l	#GemaTrk_Demo_patt,d0
(1)   58/  FF1B6A : 223C 0090 8000      		move.l	#GemaTrk_Demo_blk,d1
(1)   59/  FF1B70 : 243C 0090 8271      		move.l	#GemaTrk_Demo_ins,d2
(1)   60/  FF1B76 : 7604                		moveq	#4,d3
(1)   61/  FF1B78 : 7800                		moveq	#0,d4
(1)   62/  FF1B7A : 6100 E548           		bsr	SoundReq_SetTrack
(1)   63/  FF1B7E : 08F9 0006 FFFF 91C7 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
(1)   64/  FF1B86 : 6100 E6AA           		bsr	Video_Update
(1)   65/  FF1B8A : 31FC 0002 8C28      		move.w	#2,(RAM_MdlCurrMd).w
(1)   66/  FF1B90 :                     		
(1)   67/  FF1B90 :                     ; ====================================================================
(1)   68/  FF1B90 :                     ; ------------------------------------------------------
(1)   69/  FF1B90 :                     ; Loop
(1)   70/  FF1B90 :                     ; ------------------------------------------------------
(1)   71/  FF1B90 :                     
(1)   72/  FF1B90 :                     .loop:
(1)   73/  FF1B90 : 6100 FDFC           		bsr	System_VSync
(1)   74/  FF1B94 : 23FC 7C00 0003 00C0 		move.l	#$7C000003,(vdp_ctrl).l
                    0004                
(1)   75/  FF1B9E : 3039 FFFF 8C2C      		move.w	(RAM_BgCamCurr).l,d0
(1)   76/  FF1BA4 : E648                		lsr.w	#3,d0
(1)   77/  FF1BA6 : 33FC 0000 00C0 0000 		move.w	#0,(vdp_data).l
(1)   78/  FF1BAE : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1)   79/  FF1BB4 :                     ; 		lea	str_Status(pc),a0
(1)   80/  FF1BB4 :                     ; 		move.l	#locate(0,1,1),d0
(1)   81/  FF1BB4 :                     ; 		bsr	Video_Print
(1)   82/  FF1BB4 : 3038 8C28           		move.w	(RAM_MdlCurrMd).w,d0
(1)   83/  FF1BB8 : C07C 001F           		and.w	#%11111,d0
(1)   84/  FF1BBC : D040                		add.w	d0,d0
(1)   85/  FF1BBE : D040                		add.w	d0,d0
(1)   86/  FF1BC0 : 4EBB 0004           		jsr	.list(pc,d0.w)
(1)   87/  FF1BC4 : 60CA                		bra	.loop
(1)   88/  FF1BC6 :                     
(1)   89/  FF1BC6 :                     ; ====================================================================
(1)   90/  FF1BC6 :                     ; ------------------------------------------------------
(1)   91/  FF1BC6 :                     ; Mode sections
(1)   92/  FF1BC6 :                     ; ------------------------------------------------------
(1)   93/  FF1BC6 :                     
(1)   94/  FF1BC6 :                     .list:
(1)   95/  FF1BC6 : 6000 000A           		bra.w	.mode0
(1)   96/  FF1BCA : 6000 00E2           		bra.w	.mode1
(1)   97/  FF1BCE : 6000 01AE           		bra.w	.mode2
(1)   98/  FF1BD2 :                     		
(1)   99/  FF1BD2 :                     ; --------------------------------------------------
(1)  100/  FF1BD2 :                     ; Mode 0
(1)  101/  FF1BD2 :                     ; --------------------------------------------------
(1)  102/  FF1BD2 :                     
(1)  103/  FF1BD2 :                     .mode0:
(1)  104/  FF1BD2 : 4A78 8C28           		tst.w	(RAM_MdlCurrMd).w
(1)  105/  FF1BD6 : 6B00 00D0           		bmi	.mode0_loop
(1)  106/  FF1BDA : 0078 8000 8C28      		or.w	#$8000,(RAM_MdlCurrMd).w
(1)  107/  FF1BE0 : 203C 0600 12BC      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display OFF
(1)  108/  FF1BE6 : 7200                		moveq	#0,d1
(1)  109/  FF1BE8 : 6100 FE02           		bsr	System_MdMars_MstTask		; Wait until it finishes.
(1)  110/  FF1BEC : 08B9 0006 FFFF 91C7 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l	; Disable MD display
(1)  111/  FF1BF4 : 6100 E63C           		bsr	Video_Update
(1)  112/  FF1BF8 :                     
(1)  113/  FF1BF8 : 203C 0090 82A4      		move.l	#CAMERA_INTRO,d0
(1)  114/  FF1BFE : 7201                		moveq	#1,d1
(1)  115/  FF1C00 : 6100 024A           		bsr	MdMdl_SetNewCamera
(1)  116/  FF1C04 : 203C 0600 1344      		move.l	#CmdTaskMd_ObjectClrAll,d0	; Clear ALL objects
(1)  117/  FF1C0A : 6100 FDFA           		bsr	System_MdMars_SlvTask
(1)  118/  FF1C0E :                     
(1)  119/  FF1C0E :                     	; Load objects
(1)  120/  FF1C0E : 223C 0000 0000      		move.l	#0,d1
(1)  121/  FF1C14 : 203C 0600 1354      		move.l	#CmdTaskMd_MakeMap,d0
(1)  122/  FF1C1A : 6100 FDEA           		bsr	System_MdMars_SlvTask		; Load map
(1)  123/  FF1C1E : 7A00                		moveq	#0,d5				; No ex-settings
(1)  124/  FF1C20 : 7200                		moveq	#0,d1				; Slot 0
(1)  125/  FF1C22 : 243C 0600 4610      		move.l	#MARSOBJ_INTRO_1,d2
(1)  126/  FF1C28 : 263C 0000 0000      		move.l	#0,d3
(1)  127/  FF1C2E : 7801                		moveq	#1,d4
(1)  128/  FF1C30 : 203C 0600 12E0      		move.l	#CmdTaskMd_ObjectSet,d0
(1)  129/  FF1C36 : 6100 FDA8           		bsr	System_MdMars_SlvAddTask
(1)  130/  FF1C3A : 7201                		moveq	#1,d1				; Slot 1
(1)  131/  FF1C3C : 243C 0600 5834      		move.l	#MARSOBJ_INTRO_2,d2
(1)  132/  FF1C42 : 263C 0000 0000      		move.l	#0,d3
(1)  133/  FF1C48 : 203C 0600 12E0      		move.l	#CmdTaskMd_ObjectSet,d0
(1)  134/  FF1C4E : 6100 FD90           		bsr	System_MdMars_SlvAddTask	; Load object
(1)  135/  FF1C52 : 7201                		moveq	#1,d1
(1)  136/  FF1C54 : 7400                		moveq	#0,d2
(1)  137/  FF1C56 : 2602                		move.l	d2,d3
(1)  138/  FF1C58 : 283C FFE0 0000      		move.l	#-$200000,d4
(1)  139/  FF1C5E : 2A02                		move.l	d2,d5
(1)  140/  FF1C60 : 2C02                		move.l	d2,d6
(1)  141/  FF1C62 : 2E02                		move.l	d2,d7
(1)  142/  FF1C64 : 203C 0600 1318      		move.l	#CmdTaskMd_ObjectPos,d0
(1)  143/  FF1C6A : 6100 FD74           		bsr	System_MdMars_SlvAddTask	; Reposition 20XX
(1)  144/  FF1C6E : 6100 FDC8           		bsr	System_MdMars_SlvSendAll
(1)  145/  FF1C72 :                     
(1)  146/  FF1C72 : 223C 0600 43D4      		move.l	#Palette_Intro,d1		; Load palette
(1)  147/  FF1C78 : 7400                		moveq	#0,d2
(1)  148/  FF1C7A : 263C 0000 0010      		move.l	#16,d3
(1)  149/  FF1C80 : 283C 0000 8000      		move.l	#$8000,d4
(1)  150/  FF1C86 : 203C 0600 12CC      		move.l	#CmdTaskMd_LoadSPal,d0
(1)  151/  FF1C8C : 6100 FD5E           		bsr	System_MdMars_MstTask
(1)  152/  FF1C90 : 203C 0600 12BC      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1)  153/  FF1C96 : 7201                		moveq	#1,d1
(1)  154/  FF1C98 : 6100 FD52           		bsr	System_MdMars_MstTask
(1)  155/  FF1C9C : 08F9 0006 FFFF 91C7 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l	; Enable MD display
(1)  156/  FF1CA4 : 6100 E58C           		bsr	Video_Update
(1)  157/  FF1CA8 :                     
(1)  158/  FF1CA8 :                     ; Mode 0 mainloop
(1)  159/  FF1CA8 :                     .mode0_loop:
(1)  160/  FF1CA8 : 7E01                		moveq	#1,d7
(1)  161/  FF1CAA : 6000 01E0           		bra	MdMdl_RunAnimation
(1)  162/  FF1CAE :                     
(1)  163/  FF1CAE :                     ; --------------------------------------------------
(1)  164/  FF1CAE :                     ; Mode 1
(1)  165/  FF1CAE :                     ; --------------------------------------------------
(1)  166/  FF1CAE :                     
(1)  167/  FF1CAE :                     .mode1:
(1)  168/  FF1CAE : 4A78 8C28           		tst.w	(RAM_MdlCurrMd).w
(1)  169/  FF1CB2 : 6B00 00C4           		bmi	.mode1_loop
(1)  170/  FF1CB6 : 0078 8000 8C28      		or.w	#$8000,(RAM_MdlCurrMd).w
(1)  171/  FF1CBC :                     
(1)  172/  FF1CBC : 203C 0600 12BC      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display OFF
(1)  173/  FF1CC2 : 7200                		moveq	#0,d1
(1)  174/  FF1CC4 : 6100 FD26           		bsr	System_MdMars_MstTask		; Wait until it finishes.
(1)  175/  FF1CC8 : 08B9 0006 FFFF 91C7 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l	; Disable MD display
(1)  176/  FF1CD0 : 6100 E560           		bsr	Video_Update
(1)  177/  FF1CD4 :                     
(1)  178/  FF1CD4 : 203C 0090 A558      		move.l	#CAMERA_INTNAME,d0
(1)  179/  FF1CDA : 7201                		moveq	#1,d1
(1)  180/  FF1CDC : 6100 016E           		bsr	MdMdl_SetNewCamera
(1)  181/  FF1CE0 : 41FA 03C8           		lea	MdPal_BgTitle(pc),a0
(1)  182/  FF1CE4 : 303C 0000           		move.w	#0,d0
(1)  183/  FF1CE8 : 323C 000F           		move.w	#16-1,d1
(1)  184/  FF1CEC : 6100 E564           		bsr	Video_LoadPal
(1)  185/  FF1CF0 : 41F9 0091 0D80      		lea	(MdMap_BgTitle),a0
(1)  186/  FF1CF6 : 203C 0001 0000      		move.l	#locate(1,0,0),d0
(1)  187/  FF1CFC : 223C 003F 001B      		move.l	#mapsize(512,224),d1
(1)  188/  FF1D02 : 343C 0001           		move.w	#1,d2
(1)  189/  FF1D06 : 6100 E574           		bsr	Video_LoadMap
(1)  190/  FF1D0A : 203C 0010 BE20      		move.l	#MdGfx_BgTitle,d0
(1)  191/  FF1D10 : 323C 01A0           		move.w	#(MdGfx_BgTitle_e-MdGfx_BgTitle),d1
(1)  192/  FF1D14 : 343C 0001           		move.w	#1,d2
(1)  193/  FF1D18 : 6100 E95E           		bsr	Video_LoadArt
(1)  194/  FF1D1C :                     
(1)  195/  FF1D1C :                     	; Load object
(1)  196/  FF1D1C : 203C 0600 1344      		move.l	#CmdTaskMd_ObjectClrAll,d0	; Clear ALL objects
(1)  197/  FF1D22 : 6100 FCE2           		bsr	System_MdMars_SlvTask
(1)  198/  FF1D26 : 7A00                		moveq	#0,d5				; No ex-settings
(1)  199/  FF1D28 : 7200                		moveq	#0,d1				; Slot 0
(1)  200/  FF1D2A : 243C 0212 6888      		move.l	#MarsObj_projname,d2
(1)  201/  FF1D30 : 263C 0000 0000      		move.l	#0,d3
(1)  202/  FF1D36 : 7801                		moveq	#1,d4
(1)  203/  FF1D38 : 203C 0600 12E0      		move.l	#CmdTaskMd_ObjectSet,d0
(1)  204/  FF1D3E : 6100 FCC6           		bsr	System_MdMars_SlvTask
(1)  205/  FF1D42 :                     
(1)  206/  FF1D42 : 223C 0600 45F4      		move.l	#Palette_projname,d1
(1)  207/  FF1D48 : 7400                		moveq	#0,d2
(1)  208/  FF1D4A : 263C 0000 000E      		move.l	#14,d3
(1)  209/  FF1D50 : 283C 0000 8000      		move.l	#$8000,d4
(1)  210/  FF1D56 : 203C 0600 12CC      		move.l	#CmdTaskMd_LoadSPal,d0		; Load palette
(1)  211/  FF1D5C : 6100 FC8E           		bsr	System_MdMars_MstTask
(1)  212/  FF1D60 : 203C 0600 12BC      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1)  213/  FF1D66 : 7201                		moveq	#1,d1
(1)  214/  FF1D68 : 6100 FC82           		bsr	System_MdMars_MstTask
(1)  215/  FF1D6C : 08F9 0006 FFFF 91C7 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l	; Enable MD display
(1)  216/  FF1D74 : 6100 E4BC           		bsr	Video_Update
(1)  217/  FF1D78 :                     
(1)  218/  FF1D78 :                     ; Mode 1 mainloop
(1)  219/  FF1D78 :                     .mode1_loop:
(1)  220/  FF1D78 : 7E02                		moveq	#2,d7
(1)  221/  FF1D7A : 6000 0110           		bra	MdMdl_RunAnimation
(1)  222/  FF1D7E :                     
(1)  223/  FF1D7E :                     ; --------------------------------------------------
(1)  224/  FF1D7E :                     ; Mode 2
(1)  225/  FF1D7E :                     ; --------------------------------------------------
(1)  226/  FF1D7E :                     
(1)  227/  FF1D7E :                     .mode2:
(1)  228/  FF1D7E : 4A78 8C28           		tst.w	(RAM_MdlCurrMd).w
(1)  229/  FF1D82 : 6B00 00C2           		bmi	.mode2_loop
(1)  230/  FF1D86 : 0078 8000 8C28      		or.w	#$8000,(RAM_MdlCurrMd).w
(1)  231/  FF1D8C :                     
(1)  232/  FF1D8C : 203C 0600 12BC      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display OFF
(1)  233/  FF1D92 : 7200                		moveq	#0,d1
(1)  234/  FF1D94 : 6100 FC56           		bsr	System_MdMars_MstTask		; Wait until it finishes.
(1)  235/  FF1D98 : 08B9 0006 FFFF 91C7 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l	; Disable MD display
(1)  236/  FF1DA0 : 6100 E490           		bsr	Video_Update
(1)  237/  FF1DA4 :                     
(1)  238/  FF1DA4 : 203C 0090 BBDC      		move.l	#CAMERA_CITY,d0
(1)  239/  FF1DAA : 7202                		moveq	#2,d1
(1)  240/  FF1DAC : 6100 009E           		bsr	MdMdl_SetNewCamera
(1)  241/  FF1DB0 : 41FA 02E2           		lea	MdPal_Bg(pc),a0
(1)  242/  FF1DB4 : 303C 0000           		move.w	#0,d0
(1)  243/  FF1DB8 : 323C 000F           		move.w	#16-1,d1
(1)  244/  FF1DBC : 6100 E494           		bsr	Video_LoadPal
(1)  245/  FF1DC0 : 41F9 0090 FD80      		lea	(MdMap_Bg),a0
(1)  246/  FF1DC6 : 203C 0001 0000      		move.l	#locate(1,0,0),d0
(1)  247/  FF1DCC : 223C 003F 001F      		move.l	#mapsize(512,256),d1
(1)  248/  FF1DD2 : 343C 0001           		move.w	#1,d2
(1)  249/  FF1DD6 : 6100 E4A4           		bsr	Video_LoadMap
(1)  250/  FF1DDA : 203C 0010 0000      		move.l	#MdGfx_Bg,d0
(1)  251/  FF1DE0 : 323C BE20           		move.w	#(MdGfx_Bg_e-MdGfx_Bg),d1
(1)  252/  FF1DE4 : 343C 0001           		move.w	#1,d2
(1)  253/  FF1DE8 : 6100 E88E           		bsr	Video_LoadArt
(1)  254/  FF1DEC :                     
(1)  255/  FF1DEC : 203C 0600 1344      		move.l	#CmdTaskMd_ObjectClrAll,d0	; Clear ALL objects
(1)  256/  FF1DF2 : 6100 FC12           		bsr	System_MdMars_SlvTask
(1)  257/  FF1DF6 : 223C 0211 2BD0      		move.l	#TEST_LAYOUT,d1
(1)  258/  FF1DFC : 203C 0600 1354      		move.l	#CmdTaskMd_MakeMap,d0
(1)  259/  FF1E02 : 6100 FC02           		bsr	System_MdMars_SlvTask		; Load map
(1)  260/  FF1E06 :                     
(1)  261/  FF1E06 :                     	; Process one frame.
(1)  262/  FF1E06 : 223C 0600 43F4      		move.l	#Palette_Map,d1
(1)  263/  FF1E0C : 7400                		moveq	#0,d2
(1)  264/  FF1E0E : 263C 0000 0100      		move.l	#256,d3
(1)  265/  FF1E14 : 283C 0000 8000      		move.l	#$8000,d4
(1)  266/  FF1E1A : 203C 0600 12CC      		move.l	#CmdTaskMd_LoadSPal,d0		; Load palette
(1)  267/  FF1E20 : 6100 FBCA           		bsr	System_MdMars_MstTask
(1)  268/  FF1E24 : 203C 0600 12BC      		move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1)  269/  FF1E2A : 7201                		moveq	#1,d1
(1)  270/  FF1E2C : 6100 FBBE           		bsr	System_MdMars_MstTask		; Send requests to
(1)  271/  FF1E30 : 08F9 0006 FFFF 91C7 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l	; Enable MD display
(1)  272/  FF1E38 : 6100 E3F8           		bsr	Video_Update
(1)  273/  FF1E3C :                     
(1)  274/  FF1E3C : 23FC FFFE E000 FFFF 		move.l	#-$12000,(RAM_Cam_Ypos).l
                    8C04                
(1)  275/  FF1E46 :                     .mode2_loop:
(1)  276/  FF1E46 : 7E00                		moveq	#0,d7
(1)  277/  FF1E48 :                     ; 		bra	MdMdl_RunAnimation
(1)  278/  FF1E48 : 6000 0102           		bra	MdMdl1_Usercontrol
(1)  279/  FF1E4C :                     
(1)  280/  FF1E4C :                     ; ====================================================================
(1)  281/  FF1E4C :                     ; ------------------------------------------------------
(1)  282/  FF1E4C :                     ; Subroutines
(1)  283/  FF1E4C :                     ; ------------------------------------------------------
(1)  284/  FF1E4C :                     
(1)  285/  FF1E4C :                     MdMdl_SetNewCamera:
(1)  286/  FF1E4C : 42B9 FFFF 8C00      		clr.l	(RAM_Cam_Xpos).l
(1)  287/  FF1E52 : 42B9 FFFF 8C04      		clr.l	(RAM_Cam_Ypos).l
(1)  288/  FF1E58 : 42B9 FFFF 8C08      		clr.l	(RAM_Cam_Zpos).l
(1)  289/  FF1E5E : 42B9 FFFF 8C0C      		clr.l	(RAM_Cam_Xrot).l
(1)  290/  FF1E64 : 42B9 FFFF 8C10      		clr.l	(RAM_Cam_Yrot).l
(1)  291/  FF1E6A : 42B9 FFFF 8C14      		clr.l	(RAM_Cam_Zrot).l
(1)  292/  FF1E70 : 7800                		moveq	#0,d4
(1)  293/  FF1E72 : 23C4 FFFF 8C1C      		move.l	d4,(RAM_CamFrame).l
(1)  294/  FF1E78 : 23C4 FFFF 8C20      		move.l	d4,(RAM_CamTimer).l
(1)  295/  FF1E7E : 23C1 FFFF 8C24      		move.l	d1,(RAM_CamSpeed).l
(1)  296/  FF1E84 : 23C0 FFFF 8C18      		move.l	d0,(RAM_CamData).l
(1)  297/  FF1E8A : 4E75                		rts
(1)  298/  FF1E8C :                     
(1)  299/  FF1E8C :                     ; d7 - Move to this mode after
(1)  300/  FF1E8C :                     ;      animation ends.
(1)  301/  FF1E8C :                     MdMdl_RunAnimation:
(1)  302/  FF1E8C : 614C                		bsr	MdMdl_CamAnimate
(1)  303/  FF1E8E : 6A06                		bpl.s	.stay
(1)  304/  FF1E90 : 31C7 8C28           		move.w	d7,(RAM_MdlCurrMd).w
(1)  305/  FF1E94 : 4E75                		rts					; exit mode
(1)  306/  FF1E96 :                     .stay:
(1)  307/  FF1E96 : 7200                		moveq	#0,d1
(1)  308/  FF1E98 : 2438 8C00           		move.l	(RAM_Cam_Xpos),d2
(1)  309/  FF1E9C : 2638 8C04           		move.l	(RAM_Cam_Ypos),d3
(1)  310/  FF1EA0 : 2838 8C08           		move.l	(RAM_Cam_Zpos),d4
(1)  311/  FF1EA4 : 2A38 8C0C           		move.l	(RAM_Cam_Xrot),d5
(1)  312/  FF1EA8 : 2C38 8C10           		move.l	(RAM_Cam_Yrot),d6
(1)  313/  FF1EAC : 2E38 8C14           		move.l	(RAM_Cam_Zrot),d7
(1)  314/  FF1EB0 : 203C 0600 1368      		move.l	#CmdTaskMd_CameraPos,d0		; Load map
(1)  315/  FF1EB6 : 6100 FB28           		bsr	System_MdMars_SlvAddTask
(1)  316/  FF1EBA : 203C 0600 138C      		move.l	#CmdTaskMd_UpdModels,d0
(1)  317/  FF1EC0 : 6100 FB1E           		bsr	System_MdMars_SlvAddTask
(1)  318/  FF1EC4 : 6100 FBB0           		bsr	System_MdMars_SlvSendDrop
(1)  319/  FF1EC8 :                     .nel2:
(1)  320/  FF1EC8 : 660E                		bne.s	.busy
(1)  321/  FF1ECA : 2238 8C0C           		move.l	(RAM_Cam_Xrot),d1
(1)  322/  FF1ECE : 4481                		neg.l	d1
(1)  323/  FF1ED0 : E089                		lsr.l	#8,d1
(1)  324/  FF1ED2 : 33C1 FFFF 8C2C      		move.w	d1,(RAM_BgCamCurr).l
(1)  325/  FF1ED8 :                     .busy:
(1)  326/  FF1ED8 : 4E75                		rts
(1)  327/  FF1EDA :                     
(1)  328/  FF1EDA :                     MdMdl_CamAnimate:
(1)  329/  FF1EDA : 2039 FFFF 8C18      		move.l	(RAM_CamData).l,d0			; If 0 == No animation
(1)  330/  FF1EE0 : 6766                		beq.s	.no_camanim
(1)  331/  FF1EE2 : 04B9 0000 0001 FFFF 		sub.l	#1,(RAM_CamTimer).l
                    8C20                
(1)  332/  FF1EEC : 6A5A                		bpl.s	.no_camanim
(1)  333/  FF1EEE : 23F9 FFFF 8C24 FFFF 		move.l	(RAM_CamSpeed).l,(RAM_CamTimer).l	; TEMPORAL timer
                    8C20                
(1)  334/  FF1EF8 : 2240                		move.l	d0,a1
(1)  335/  FF1EFA : 2219                		move.l	(a1)+,d1
(1)  336/  FF1EFC : 2039 FFFF 8C1C      		move.l	(RAM_CamFrame).l,d0
(1)  337/  FF1F02 : D0BC 0000 0001      		add.l	#1,d0
(1)  338/  FF1F08 : B081                		cmp.l	d1,d0
(1)  339/  FF1F0A : 6604                		bne.s	.on_frames
(1)  340/  FF1F0C : 70FF                		moveq	#-1,d0
(1)  341/  FF1F0E : 4E75                		rts
(1)  342/  FF1F10 :                     .on_frames:
(1)  343/  FF1F10 : 23C0 FFFF 8C1C      		move.l	d0,(RAM_CamFrame).l
(1)  344/  FF1F16 : C0FC 0018           		mulu.w	#$18,d0
(1)  345/  FF1F1A : D2C0                		adda	d0,a1
(1)  346/  FF1F1C : 23D9 FFFF 8C00      		move.l	(a1)+,(RAM_Cam_Xpos).l
(1)  347/  FF1F22 : 23D9 FFFF 8C04      		move.l	(a1)+,(RAM_Cam_Ypos).l
(1)  348/  FF1F28 : 23D9 FFFF 8C08      		move.l	(a1)+,(RAM_Cam_Zpos).l
(1)  349/  FF1F2E : 23D9 FFFF 8C0C      		move.l	(a1)+,(RAM_Cam_Xrot).l
(1)  350/  FF1F34 : 23D9 FFFF 8C10      		move.l	(a1)+,(RAM_Cam_Yrot).l
(1)  351/  FF1F3A : 23D9 FFFF 8C14      		move.l	(a1)+,(RAM_Cam_Zrot).l
(1)  352/  FF1F40 : EE89                		lsr.l	#7,d1
(1)  353/  FF1F42 : 33C1 FFFF 8C2A      		move.w	d1,(RAM_BgCamera).l
(1)  354/  FF1F48 :                     .no_camanim:
(1)  355/  FF1F48 : 7000                		moveq	#0,d0
(1)  356/  FF1F4A : 4E75                		rts
(1)  357/  FF1F4C :                     
(1)  358/  FF1F4C :                     MdMdl1_Usercontrol:
(1)  359/  FF1F4C : 2A3C 0000 4000      		move.l	#var_MoveSpd,d5
(1)  360/  FF1F52 : 2C3C FFFF C000      		move.l	#-var_MoveSpd,d6
(1)  361/  FF1F58 : 3E38 91E0           		move.w	(Controller_1+on_hold),d7
(1)  362/  FF1F5C : 0807 0000           		btst	#bitJoyUp,d7
(1)  363/  FF1F60 : 670E                		beq.s	.no_up
(1)  364/  FF1F62 :                     ; 		lea	(RAM_MdCamera),a0
(1)  365/  FF1F62 : 2039 FFFF 8C08      		move.l	(RAM_Cam_Zpos).l,d0
(1)  366/  FF1F68 : D085                		add.l	d5,d0
(1)  367/  FF1F6A : 23C0 FFFF 8C08      		move.l	d0,(RAM_Cam_Zpos).l
(1)  368/  FF1F70 :                     .no_up:
(1)  369/  FF1F70 : 0807 0001           		btst	#bitJoyDown,d7
(1)  370/  FF1F74 : 670E                		beq.s	.no_dw
(1)  371/  FF1F76 :                     ; 		lea	(RAM_MdCamera),a0
(1)  372/  FF1F76 : 2039 FFFF 8C08      		move.l	(RAM_Cam_Zpos).l,d0
(1)  373/  FF1F7C : D086                		add.l	d6,d0
(1)  374/  FF1F7E : 23C0 FFFF 8C08      		move.l	d0,(RAM_Cam_Zpos).l
(1)  375/  FF1F84 :                     .no_dw:
(1)  376/  FF1F84 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  377/  FF1F88 : 670E                		beq.s	.no_lf
(1)  378/  FF1F8A :                     ; 		lea	(RAM_MdCamera),a0
(1)  379/  FF1F8A : 2039 FFFF 8C00      		move.l	(RAM_Cam_Xpos).l,d0
(1)  380/  FF1F90 : D086                		add.l	d6,d0
(1)  381/  FF1F92 : 23C0 FFFF 8C00      		move.l	d0,(RAM_Cam_Xpos).l
(1)  382/  FF1F98 :                     .no_lf:
(1)  383/  FF1F98 : 0807 0003           		btst	#bitJoyRight,d7
(1)  384/  FF1F9C : 670E                		beq.s	.no_rg
(1)  385/  FF1F9E :                     ; 		lea	(RAM_MdCamera),a0
(1)  386/  FF1F9E : 2039 FFFF 8C00      		move.l	(RAM_Cam_Xpos).l,d0
(1)  387/  FF1FA4 : D085                		add.l	d5,d0
(1)  388/  FF1FA6 : 23C0 FFFF 8C00      		move.l	d0,(RAM_Cam_Xpos).l
(1)  389/  FF1FAC :                     .no_rg:
(1)  390/  FF1FAC :                     
(1)  391/  FF1FAC : 0807 0004           		btst	#bitJoyB,d7
(1)  392/  FF1FB0 : 671A                		beq.s	.no_a
(1)  393/  FF1FB2 :                     ; 		lea	(RAM_MdCamera),a0
(1)  394/  FF1FB2 : 2039 FFFF 8C0C      		move.l	(RAM_Cam_Xrot).l,d0
(1)  395/  FF1FB8 : 2206                		move.l	d6,d1
(1)  396/  FF1FBA : D081                		add.l	d1,d0
(1)  397/  FF1FBC : 23C0 FFFF 8C0C      		move.l	d0,(RAM_Cam_Xrot).l
(1)  398/  FF1FC2 : EE88                		lsr.l	#7,d0
(1)  399/  FF1FC4 : 4480                		neg.l	d0
(1)  400/  FF1FC6 : 33C0 FFFF 8C2A      		move.w	d0,(RAM_BgCamera).l
(1)  401/  FF1FCC :                     .no_a:
(1)  402/  FF1FCC : 0807 0005           		btst	#bitJoyC,d7
(1)  403/  FF1FD0 : 671A                		beq.s	.no_b
(1)  404/  FF1FD2 :                     ; 		lea	(RAM_MdCamera),a0
(1)  405/  FF1FD2 : 2039 FFFF 8C0C      		move.l	(RAM_Cam_Xrot).l,d0
(1)  406/  FF1FD8 : 2205                		move.l	d5,d1
(1)  407/  FF1FDA : D081                		add.l	d1,d0
(1)  408/  FF1FDC : 23C0 FFFF 8C0C      		move.l	d0,(RAM_Cam_Xrot).l
(1)  409/  FF1FE2 : EE88                		lsr.l	#7,d0
(1)  410/  FF1FE4 : 4480                		neg.l	d0
(1)  411/  FF1FE6 : 33C0 FFFF 8C2A      		move.w	d0,(RAM_BgCamera).l
(1)  412/  FF1FEC :                     .no_b:
(1)  413/  FF1FEC :                     	; Reset all
(1)  414/  FF1FEC :                     ; 		btst	#bitJoyC,d7
(1)  415/  FF1FEC :                     ; 		beq.s	.no_c
(1)  416/  FF1FEC :                     ; 		;move.w	#1,(RAM_MdMdlsUpd).l
(1)  417/  FF1FEC :                     ; 		lea	(RAM_MdCamera),a0
(1)  418/  FF1FEC :                     ; 		moveq	#0,d0
(1)  419/  FF1FEC :                     ; 		move.l	d0,(RAM_Cam_Xpos).l
(1)  420/  FF1FEC :                     ; 		move.l	d0,(RAM_Cam_Ypos).l
(1)  421/  FF1FEC :                     ; 		move.l	d0,(RAM_Cam_Zpos).l
(1)  422/  FF1FEC :                     ; 		move.l	d0,(RAM_Cam_Xrot).l
(1)  423/  FF1FEC :                     ; 		move.l	d0,(RAM_Cam_Yrot).l
(1)  424/  FF1FEC :                     ; 		move.l	d0,(RAM_Cam_Zrot).l
(1)  425/  FF1FEC :                     ; .no_c:
(1)  426/  FF1FEC :                     
(1)  427/  FF1FEC :                     
(1)  428/  FF1FEC :                     	; Up/Down
(1)  429/  FF1FEC : 3E38 91E0           		move.w	(Controller_1+on_hold),d7
(1)  430/  FF1FF0 : 3807                		move.w	d7,d4
(1)  431/  FF1FF2 : C87C 0100           		and.w	#JoyZ,d4
(1)  432/  FF1FF6 : 670E                		beq.s	.no_x
(1)  433/  FF1FF8 :                     		;move.w	#1,(RAM_MdMdlsUpd).l
(1)  434/  FF1FF8 :                     ; 		lea	(RAM_MdCamera),a0
(1)  435/  FF1FF8 : 2039 FFFF 8C04      		move.l	(RAM_Cam_Ypos).l,d0
(1)  436/  FF1FFE : D085                		add.l	d5,d0
(1)  437/  FF2000 : 23C0 FFFF 8C04      		move.l	d0,(RAM_Cam_Ypos).l
(1)  438/  FF2006 :                     .no_x:
(1)  439/  FF2006 : 3807                		move.w	d7,d4
(1)  440/  FF2008 : C87C 0200           		and.w	#JoyY,d4
(1)  441/  FF200C : 670E                		beq.s	.no_y
(1)  442/  FF200E :                     		;move.w	#1,(RAM_MdMdlsUpd).l
(1)  443/  FF200E :                     ; 		lea	(RAM_MdCamera),a0
(1)  444/  FF200E : 2039 FFFF 8C04      		move.l	(RAM_Cam_Ypos).l,d0
(1)  445/  FF2014 : D086                		add.l	d6,d0
(1)  446/  FF2016 : 23C0 FFFF 8C04      		move.l	d0,(RAM_Cam_Ypos).l
(1)  447/  FF201C :                     .no_y:
(1)  448/  FF201C :                     
(1)  449/  FF201C : 7200                		moveq	#0,d1
(1)  450/  FF201E : 2438 8C00           		move.l	(RAM_Cam_Xpos),d2
(1)  451/  FF2022 : 2638 8C04           		move.l	(RAM_Cam_Ypos),d3
(1)  452/  FF2026 : 2838 8C08           		move.l	(RAM_Cam_Zpos),d4
(1)  453/  FF202A : 2A38 8C0C           		move.l	(RAM_Cam_Xrot),d5
(1)  454/  FF202E : 2C38 8C10           		move.l	(RAM_Cam_Yrot),d6
(1)  455/  FF2032 : 2E38 8C14           		move.l	(RAM_Cam_Zrot),d7
(1)  456/  FF2036 : 203C 0600 1368      		move.l	#CmdTaskMd_CameraPos,d0		; Load map
(1)  457/  FF203C : 6100 F9A2           		bsr	System_MdMars_SlvAddTask
(1)  458/  FF2040 : 203C 0600 138C      		move.l	#CmdTaskMd_UpdModels,d0
(1)  459/  FF2046 : 6100 F998           		bsr	System_MdMars_SlvAddTask
(1)  460/  FF204A : 6100 FA2A           		bsr	System_MdMars_SlvSendDrop
(1)  461/  FF204E :                     .nel2:
(1)  462/  FF204E : 660E                		bne.s	.busy
(1)  463/  FF2050 : 2238 8C0C           		move.l	(RAM_Cam_Xrot),d1
(1)  464/  FF2054 : 4481                		neg.l	d1
(1)  465/  FF2056 : E089                		lsr.l	#8,d1
(1)  466/  FF2058 : 33C1 FFFF 8C2C      		move.w	d1,(RAM_BgCamCurr).l
(1)  467/  FF205E :                     .busy:
(1)  468/  FF205E : 4E75                		rts
(1)  469/  FF2060 :                     
(1)  470/  FF2060 :                     ; 		lea	(RAM_MdCamera),a0
(1)  471/  FF2060 :                     ; 		move.l	#CmdTaskMd_CameraPos,d0		; Cmnd $0D: Set camera positions
(1)  472/  FF2060 :                     ; 		moveq	#0,d1
(1)  473/  FF2060 :                     ; 		move.l	(RAM_Cam_Xpos).l,d2
(1)  474/  FF2060 :                     ; 		move.l	(RAM_Cam_Ypos).l,d3
(1)  475/  FF2060 :                     ; 		move.l	(RAM_Cam_Zpos).l,d4
(1)  476/  FF2060 :                     ; 		move.l	(RAM_Cam_Xrot).l,d5
(1)  477/  FF2060 :                     ; 		move.l	(RAM_Cam_Yrot).l,d6
(1)  478/  FF2060 :                     ; 		move.l	(RAM_Cam_Zrot).l,d7
(1)  479/  FF2060 :                     ; 		bsr	System_MdMars_SlvAddTask
(1)  480/  FF2060 :                     
(1)  481/  FF2060 :                     ; 	; temporal camera
(1)  482/  FF2060 :                     ; 		moveq	#0,d6
(1)  483/  FF2060 :                     ; 		move.w	(Controller_1+on_hold).l,d7
(1)  484/  FF2060 :                     ; 		btst	#bitJoyUp,d7
(1)  485/  FF2060 :                     ; 		beq.s	.nou
(1)  486/  FF2060 :                     ; 		add.l	#var_MoveSpd,(RAM_Cam_Zpos).l
(1)  487/  FF2060 :                     ; 		moveq	#1,d6
(1)  488/  FF2060 :                     ; .nou:
(1)  489/  FF2060 :                     ; 		btst	#bitJoyDown,d7
(1)  490/  FF2060 :                     ; 		beq.s	.nod
(1)  491/  FF2060 :                     ; 		add.l	#-var_MoveSpd,(RAM_Cam_Zpos).l
(1)  492/  FF2060 :                     ; 		moveq	#1,d6
(1)  493/  FF2060 :                     ; .nod:
(1)  494/  FF2060 :                     ; 		btst	#bitJoyLeft,d7
(1)  495/  FF2060 :                     ; 		beq.s	.nol
(1)  496/  FF2060 :                     ; 		add.l	#-var_MoveSpd,(RAM_Cam_Xpos).l
(1)  497/  FF2060 :                     ; 		moveq	#1,d6
(1)  498/  FF2060 :                     ; .nol:
(1)  499/  FF2060 :                     ; 		btst	#bitJoyRight,d7
(1)  500/  FF2060 :                     ; 		beq.s	.nor
(1)  501/  FF2060 :                     ; 		add.l	#var_MoveSpd,(RAM_Cam_Xpos).l
(1)  502/  FF2060 :                     ; 		moveq	#1,d6
(1)  503/  FF2060 :                     ; .nor:
(1)  504/  FF2060 :                     ; 		btst	#bitJoyA,d7
(1)  505/  FF2060 :                     ; 		beq.s	.noa
(1)  506/  FF2060 :                     ; 		add.l	#-var_MoveSpd,(RAM_Cam_Xrot).l
(1)  507/  FF2060 :                     ; 		moveq	#1,d6
(1)  508/  FF2060 :                     ; .noa:
(1)  509/  FF2060 :                     ; 		btst	#bitJoyB,d7
(1)  510/  FF2060 :                     ; 		beq.s	.nob
(1)  511/  FF2060 :                     ; 		add.l	#var_MoveSpd,(RAM_Cam_Xrot).l
(1)  512/  FF2060 :                     ; 		moveq	#1,d6
(1)  513/  FF2060 :                     ; .nob:
(1)  514/  FF2060 :                     ; ; 		tst.w	d6
(1)  515/  FF2060 :                     ; ; 		beq.s	.nel
(1)  516/  FF2060 :                     ; .first_draw:
(1)  517/  FF2060 :                     
(1)  518/  FF2060 :                     ; ====================================================================
(1)  519/  FF2060 :                     ; ------------------------------------------------------
(1)  520/  FF2060 :                     ; VBlank
(1)  521/  FF2060 :                     ; ------------------------------------------------------
(1)  522/  FF2060 :                     
(1)  523/  FF2060 :                     ; ------------------------------------------------------
(1)  524/  FF2060 :                     ; HBlank
(1)  525/  FF2060 :                     ; ------------------------------------------------------
(1)  526/  FF2060 :                     
(1)  527/  FF2060 :                     ; ====================================================================
(1)  528/  FF2060 :                     ; ------------------------------------------------------
(1)  529/  FF2060 :                     ; DATA
(1)  530/  FF2060 :                     ; 
(1)  531/  FF2060 :                     ; Small stuff goes here
(1)  532/  FF2060 :                     ; ------------------------------------------------------
(1)  533/  FF2060 :                     
(1)  534/  FF2060 :                     str_Status:
(1)  535/  FF2060 : 5C6C 205C 6C20 5C6C 		dc.b "\\l \\l \\l    \\l",$A
                    2020 2020 5C6C 0A   
(1)  536/  FF206F : 5C6C 205C 6C20 5C6C 		dc.b "\\l \\l \\l",0
                    00                  
(1)  537/  FF2078 : FFFF 8C00 FFFF 8C04 		dc.l RAM_Cam_Xpos,RAM_Cam_Ypos,RAM_Cam_Zpos
                    FFFF 8C08           
(1)  538/  FF2084 : FFFF 9816           		dc.l RAM_FrameCount
(1)  539/  FF2088 : FFFF 8C0C FFFF 8C10 		dc.l RAM_Cam_Xrot,RAM_Cam_Yrot,RAM_Cam_Zrot
                    FFFF 8C14           
(1)  540/  FF2094 :                     		align 2
(1)  541/  FF2094 :                     MdPal_Bg:
(1)  542/  FF2094 :                     		binclude "data/md/bg/bg_pal.bin"
(1)  543/  FF20AA :                     		align 2		
(1)  544/  FF20AA :                     MdPal_BgTitle:
(1)  545/  FF20AA :                     		binclude "data/md/bg_title/bg_pal.bin"
(1)  546/  FF20B4 :                     		align 2
(1)  547/  FF20B4 :                     
(1)  548/  FF20B4 :                     ; ====================================================================
(1)  549/  FF20B4 :                     
(1)  554/  FF20B4 :                     
      65/    47A0 :                     		dephase
      66/    47A0 :                     
      67/    47A0 :                     ; ====================================================================
      68/    47A0 :                     ; ----------------------------------------------------------------
      69/    47A0 :                     ; 68k DATA BANKs (at $900000) 1MB max
      70/    47A0 :                     ; ----------------------------------------------------------------
      71/    47A0 :                     
      72/    47A0 :                     	; First one is smaller than the rest...
      73/  9047A0 :                     		phase $900000+*				; Only one currently
      74/  9047A0 :                     		include "data/md_bank0.asm"
(1)    1/  9047A0 :                     ; ====================================================================
(1)    2/  9047A0 :                     ; ----------------------------------------------------------------
(1)    3/  9047A0 :                     ; Single 68k DATA BANK for MD ($900000-$9FFFFF)
(1)    4/  9047A0 :                     ; for stuff other than MD's DMA data
(1)    5/  9047A0 :                     ; 
(1)    6/  9047A0 :                     ; Maximum size: $0FFFFF bytes per bank
(1)    7/  9047A0 :                     ; ----------------------------------------------------------------
(1)    8/  9047A0 :                     
(1)    9/  9047A0 :                     		align $8000
(1)   10/  908000 :                     		include "data/sound/tracks.asm"
(2)    1/  908000 :                     ; ================================================================
(2)    2/  908000 :                     ; ------------------------------------------------------------
(2)    3/  908000 :                     ; DATA SECTION
(2)    4/  908000 :                     ; 
(2)    5/  908000 :                     ; SOUND
(2)    6/  908000 :                     ; ------------------------------------------------------------
(2)    7/  908000 :                     
(2)    8/  908000 :                     gemaInsPsg	macro pitch,psgins
(2)    9/  908000 :                     		dc.b 0,pitch
(2)   10/  908000 :                     		dc.b psgins&$FF,((psgins>>8)&$FF)
(2)   11/  908000 :                     		dc.b 0,0
(2)   12/  908000 :                     		dc.b 0,0
(2)   13/  908000 :                     		endm
(2)   14/  908000 :                     
(2)   15/  908000 :                     gemaInsPsgN	macro pitch,psgins,type
(2)   16/  908000 :                     		dc.b 1,pitch
(2)   17/  908000 :                     		dc.b psgins&$FF,((psgins>>8)&$FF)
(2)   18/  908000 :                     		dc.b type,0
(2)   19/  908000 :                     		dc.b 0,0
(2)   20/  908000 :                     		endm
(2)   21/  908000 :                     
(2)   22/  908000 :                     gemaInsFm	macro pitch,fmins
(2)   23/  908000 :                     		dc.b 2,pitch
(2)   24/  908000 :                     		dc.b fmins&$FF,((fmins>>8)&$FF)
(2)   25/  908000 :                     		dc.b 0,0
(2)   26/  908000 :                     		dc.b 0,0
(2)   27/  908000 :                     		endm
(2)   28/  908000 :                     
(2)   29/  908000 :                     gemaInsFm3	macro pitch,fmins,freq1,freq2,freq3
(2)   30/  908000 :                     		dc.b 3,pitch
(2)   31/  908000 :                     		dc.b fmins&$FF,((fmins>>8)&$FF)
(2)   32/  908000 :                     		dc.b 0,0
(2)   33/  908000 :                     		dc.b 0,0		
(2)   34/  908000 :                     		endm
(2)   35/  908000 :                     		
(2)   36/  908000 :                     gemaInsDac	macro pitch,dacins,flags
(2)   37/  908000 :                     		dc.b 4,pitch
(2)   38/  908000 :                     		dc.b dacins&$FF,((dacins>>8)&$FF)
(2)   39/  908000 :                     		dc.b flags,0		; flags: 0-dont loop, 1-loop
(2)   40/  908000 :                     		dc.b 0,0
(2)   41/  908000 :                     		endm
(2)   42/  908000 :                     
(2)   43/  908000 :                     ; Pointers go to instr_sdram.asm
(2)   44/  908000 :                     ; 
(2)   45/  908000 :                     ; gemaInsPwm	macro pitch,pointer
(2)   46/  908000 :                     ; 		dc.b 5,pitch
(2)   47/  908000 :                     ; 		dc.b 0,0		; filler
(2)   48/  908000 :                     ; 		dc.b ((pointer>>24)&$FF),((pointer>>16)&$FF)
(2)   49/  908000 :                     ; 		dc.b ((pointer>>8)&$FF),pointer&$FF
(2)   50/  908000 :                     ; 		endm
(2)   51/  908000 :                     
(2)   52/  908000 :                     gemaInsNull	macro
(2)   53/  908000 :                     		dc.b -1,0
(2)   54/  908000 :                     		dc.b  0,0
(2)   55/  908000 :                     		dc.b  0,0
(2)   56/  908000 :                     		dc.b  0,0
(2)   57/  908000 :                     		endm
(2)   58/  908000 :                     
(2)   59/  908000 :                     ; ------------------------------------------------------------
(2)   60/  908000 :                     
(2)   61/  908000 :                     ; TEST_BLOCKS	binclude "data/sound/tracks/temple_blk.bin"
(2)   62/  908000 :                     ; TEST_PATTERN	binclude "data/sound/tracks/temple_patt.bin"
(2)   63/  908000 :                     ; TEST_INSTR
(2)   64/  908000 :                     ; 		gemaInsPsg  0,PsgIns_01
(2)   65/  908000 :                     ; 		gemaInsPsg  0,PsgIns_01
(2)   66/  908000 :                     ; 		gemaInsPsgN 0,PsgIns_Snare,%101
(2)   67/  908000 :                     ; 
(2)   68/  908000 :                     ; TEST_BLOCKS_2	binclude "data/sound/tracks/kraid_blk.bin"
(2)   69/  908000 :                     ; TEST_PATTERN_2	binclude "data/sound/tracks/kraid_patt.bin"
(2)   70/  908000 :                     ; TEST_INSTR_2
(2)   71/  908000 :                     ; 		gemaInsPsgN 0,PsgIns_Bass,%011
(2)   72/  908000 :                     ; 		gemaInsPsg  0,PsgIns_03
(2)   73/  908000 :                     
(2)   74/  908000 :                     ; GemaTrk_Yuki_blk:
(2)   75/  908000 :                     ; 		binclude "data/sound/tracks/marscomm_blk.bin"
(2)   76/  908000 :                     ; GemaTrk_Yuki_patt:
(2)   77/  908000 :                     ; 		binclude "data/sound/tracks/marscomm_patt.bin"
(2)   78/  908000 :                     ; GemaTrk_Yuki_ins:
(2)   79/  908000 :                     ; 		gemaInsPwm -17,PwmIns_TECHNOBASSD
(2)   80/  908000 :                     ; 		gemaInsFm    0,FmIns_Bass_metal
(2)   81/  908000 :                     ; 		gemaInsPwm -17,PwmIns_WHODSNARE
(2)   82/  908000 :                     ; 		gemaInsPsgN  0,PsgIns_00,%100
(2)   83/  908000 :                     ; 		gemaInsFm    0,FmIns_Bass_2
(2)   84/  908000 :                     ; 		gemaInsPwm -17,PwmIns_TECHNOBASSD
(2)   85/  908000 :                     ; 		gemaInsPwm -17,PwmIns_SPHEAVY1
(2)   86/  908000 :                     ; 		gemaInsPwm -17,PwmIns_MCLSTRNG
(2)   87/  908000 :                     
(2)   88/  908000 :                     GemaTrk_Demo_blk:
(2)   89/  908000 :                     		binclude "data/sound/tracks/demo_blk.bin"
(2)   90/  908005 :                     GemaTrk_Demo_patt:
(2)   91/  908005 :                     		binclude "data/sound/tracks/demo_patt.bin"
(2)   92/  908271 :                     GemaTrk_Demo_ins:
(2)   93/  908271 : (MACRO)             		gemaInsDac  0,DacIns_MyTime,0
(2)   93/  908271 : 0400                                dc.b 4,0
(2)   93/  908273 : 7C12                                dc.b DACINS_MYTIME&$FF,((DACINS_MYTIME>>8)&$FF)
(2)   93/  908275 : 0000                                dc.b 0,0            ; 0: 0-dont loop, 1-loop
(2)   93/  908277 : 0000                                dc.b 0,0
(2)   94/  908279 : (MACRO)             		gemaInsDac  0,DacIns_Magic1,0
(2)   94/  908279 : 0400                                dc.b 4,0
(2)   94/  90827B : 6812                                dc.b DACINS_MAGIC1&$FF,((DACINS_MAGIC1>>8)&$FF)
(2)   94/  90827D : 0000                                dc.b 0,0            ; 0: 0-dont loop, 1-loop
(2)   94/  90827F : 0000                                dc.b 0,0
(2)   95/  908281 : (MACRO)             		gemaInsDac  0,DacIns_Magic2,0
(2)   95/  908281 : 0400                                dc.b 4,0
(2)   95/  908283 : 7212                                dc.b DACINS_MAGIC2&$FF,((DACINS_MAGIC2>>8)&$FF)
(2)   95/  908285 : 0000                                dc.b 0,0            ; 0: 0-dont loop, 1-loop
(2)   95/  908287 : 0000                                dc.b 0,0
(2)   96/  908289 : (MACRO)             		gemaInsNull;Fm   0,FmIns_Ambient_dark
(2)   96/  908289 : FF00                                dc.b -1,0
(2)   96/  90828B : 0000                                dc.b  0,0
(2)   96/  90828D : 0000                                dc.b  0,0
(2)   96/  90828F : 0000                                dc.b  0,0
(2)   97/  908291 : (MACRO)             		gemaInsFm   0,FmIns_Bass_Calm
(2)   97/  908291 : 0200                                dc.b 2,0
(2)   97/  908293 : 3C13                                dc.b FMINS_BASS_CALM&$FF,((FMINS_BASS_CALM>>8)&$FF)
(2)   97/  908295 : 0000                                dc.b 0,0
(2)   97/  908297 : 0000                                dc.b 0,0
(2)   98/  908299 : (MACRO)             		gemaInsNull
(2)   98/  908299 : FF00                                dc.b -1,0
(2)   98/  90829B : 0000                                dc.b  0,0
(2)   98/  90829D : 0000                                dc.b  0,0
(2)   98/  90829F : 0000                                dc.b  0,0
(2)   99/  9082A1 :                     
(1)   11/  9082A1 :                     		align 4
(1)   12/  9082A4 :                     CAMERA_INTRO:	binclude "data/mars/objects/anim/intro_anim.bin"
(1)   13/  90A558 :                     		align 4
(1)   14/  90A558 :                     CAMERA_INTNAME:	binclude "data/mars/objects/anim/projcam_anim.bin"
(1)   15/  90BBDC :                     		align 4
(1)   16/  90BBDC :                     CAMERA_CITY:	binclude "data/mars/maps/anim/camera_anim.bin"
(1)   17/  90FD80 :                     		align 4
(1)   18/  90FD80 :                     
(1)   19/  90FD80 :                     MdMap_Bg:
(1)   20/  90FD80 :                     		binclude "data/md/bg/bg_map.bin"
(1)   21/  910D80 :                     		align 2
(1)   22/  910D80 :                     MdMap_BgTitle:
(1)   23/  910D80 :                     		binclude "data/md/bg_title/bg_map.bin"
(1)   24/  911B80 :                     		align 2
(1)   25/  911B80 :                     
(1)   26/  911B80 :                     Sampl_Magic1:	binclude "data/sound/instr/smpl/magic_1.wav",$2C
(1)   27/  92AA0E :                     Sampl_Magic1_End:
(1)   28/  92AA0E :                     Sampl_Magic2:	binclude "data/sound/instr/smpl/magic_2.wav",$2C
(1)   29/  943842 :                     Sampl_Magic2_End:
(1)   30/  943842 :                     Sampl_MyTime:	binclude "data/sound/instr/smpl/mytime.wav",$2C
(1)   31/  94E817 :                     Sampl_MyTime_End:
(1)   32/  94E817 :                     
(1)   33/  94E817 :                     ; PWM_START:	binclude "data/sound/pwm_m.wav",$2C,$05FFFF
(1)   34/  94E817 :                     ; PWM_END:
(1)   35/  94E817 :                     
      75/   4E817 :                     		dephase
      76/   4E817 : (MACRO)             		org $100000-4				; Fill this bank and
      76/   4E817 : =$B17E5             paddingSoFar    set paddingSoFar + $100000-4 - *
      76/   FFFFC :                                             !org $100000-4
      77/   FFFFC : 424E 4B30           		dc.b "BNK0"				; add a tag at the end
      78/  100000 :                     
      79/  100000 :                     ; 		phase $900000+*
      80/  100000 :                     ; 		include "data/md_bank1.asm"
      81/  100000 :                     ; 		dephase
      82/  100000 :                     ; 		org $200000-4
      83/  100000 :                     ; 		dc.b "BNK1"
      84/  100000 :                     
      85/  100000 :                     ; 		phase $900000+*
      86/  100000 :                     ; 		include "data/md_bank2.asm"
      87/  100000 :                     ; 		dephase
      88/  100000 :                     ; 		org $300000-4
      89/  100000 :                     ; 		dc.b "BNK2"
      90/  100000 :                     
      91/  100000 :                     ; 		phase $900000+*
      92/  100000 :                     ; 		include "data/md_bank3.asm"
      93/  100000 :                     ; 		dephase
      94/  100000 :                     ; 		org $400000-4
      95/  100000 :                     ; 		dc.b "BNK3"
      96/  100000 :                     
      97/  100000 :                     ; ====================================================================
      98/  100000 :                     ; ----------------------------------------------------------------
      99/  100000 :                     ; DMA transfer data, RV=1 only.
     100/  100000 :                     ; ----------------------------------------------------------------
     101/  100000 :                     
     102/  100000 :                     		align 4
     103/  100000 :                     		include "data/md_dma.asm"
(1)    1/  100000 :                     ; ====================================================================
(1)    2/  100000 :                     ; ----------------------------------------------------------------
(1)    3/  100000 :                     ; DMA ROM DATA Transfer section, no bank limitations
(1)    4/  100000 :                     ; 
(1)    5/  100000 :                     ; RV bit must be set to access here
(1)    6/  100000 :                     ; ----------------------------------------------------------------
(1)    7/  100000 :                     
(1)    8/  100000 :                     		align $8000
(1)    9/  100000 :                     MdGfx_Bg:
(1)   10/  100000 :                     		binclude "data/md/bg/bg_art.bin"
(1)   11/  10BE20 :                     MdGfx_Bg_e:	align 2
(1)   12/  10BE20 :                     
(1)   13/  10BE20 :                     MdGfx_BgTitle:
(1)   14/  10BE20 :                     		binclude "data/md/bg_title/bg_art.bin"
(1)   15/  10BFC0 :                     MdGfx_BgTitle_e:
(1)   16/  10BFC0 :                     		align 2
(1)   17/  10BFC0 :                     
(1)   18/  10BFC0 :                     
     104/  10BFC0 :                     
     105/  10BFC0 :                     ; ====================================================================
     106/  10BFC0 :                     ; ----------------------------------------------------------------
     107/  10BFC0 :                     ; SH2 SECTION
     108/  10BFC0 :                     ; ----------------------------------------------------------------
     109/  10BFC0 :                     
     110/  10BFC0 :                     		align 4
     111/  10BFC0 :                     MARS_RAMDATA:
     112/  10BFC0 :                     		include "system/mars/code.asm"
(1)    1/  10BFC0 :                     ; ====================================================================		
(1)    2/  10BFC0 :                     ; ----------------------------------------------------------------
(1)    3/  10BFC0 :                     ; MARS SH2 Section
(1)    4/  10BFC0 :                     ;
(1)    5/  10BFC0 :                     ; CODE for both CPUs
(1)    6/  10BFC0 :                     ; RAM and some DATA go here
(1)    7/  10BFC0 :                     ; ----------------------------------------------------------------
(1)    8/  10BFC0 :                     
(1)    9/ 6000000 :                     		phase CS3		; now we are at SDRAM
(1)   10/ 6000000 :                     		cpu SH7600		; should be SH7095 but this works too.
(1)   11/ 6000000 :                     
(1)   12/ 6000000 :                     ; ====================================================================
(1)   13/ 6000000 :                     ; ----------------------------------------------------------------
(1)   14/ 6000000 :                     ; MARS GBR variables for both SH2
(1)   15/ 6000000 :                     ; ----------------------------------------------------------------
(1)   16/ 6000000 :                     
(1)   17/ 6000000 : (MACRO)             			struct 0
(1)   17/ 6000000 : =$6000000           GLBL_LASTPC     set *
(1)   17/  10BFC0 :                                     dephase
(1)   17/  10BFC0 : =$10BFC0            GLBL_LASTORG    set *
(1)   17/       0 :                                     phase 0
(1)   18/       0 :                     marsGbl_PlyPzList_R	ds.l 1		; Current graphic piece to draw
(1)   19/       4 :                     marsGbl_PlyPzList_W	ds.l 1		; Current graphic piece to write
(1)   20/       8 :                     marsGbl_CurrZList	ds.l 1		; Current Zsort entry
(1)   21/       C :                     marsGbl_CurrFacePos	ds.l 1		; Current top face of the list while reading model data
(1)   22/      10 :                     marsGbl_Backdata	ds.l 1		; Background data pointer
(1)   23/      14 :                     marsGbl_MdlFacesCntr	ds.w 1		; And the number of faces stored on that list
(1)   24/      16 :                     marsGbl_PolyBuffNum	ds.w 1		; PolygonBuffer switch: READ/WRITE or WRITE/READ
(1)   25/      18 :                     marsGbl_PzListCntr	ds.w 1		; Number of graphic pieces to draw
(1)   26/      1A :                     marsGbl_DrwTask		ds.w 1		; Current Drawing task for Watchdog
(1)   27/      1C :                     marsGbl_DrwPause	ds.w 1		; Pause background drawing
(1)   28/      1E :                     marsGbl_VIntFlag_M	ds.w 1		; Sets to 0 if VBlank finished on Master CPU
(1)   29/      20 :                     marsGbl_VIntFlag_S	ds.w 1		; Same thing but for the Slave CPU
(1)   30/      22 :                     marsGbl_DivStop_M	ds.w 1		; Flag to tell Watchdog we are in the middle of hardware division
(1)   31/      24 :                     marsGbl_CurrFb		ds.w 1		; Current framebuffer number
(1)   32/      26 :                     marsGbl_ZSortReq	ds.w 1		; Flag to request Zsort in Slave's watchdog
(1)   33/      28 :                     marsGbl_PwmTrkUpd	ds.w 1		; Flag to update PWM tracks (from Z80 then PWM IRQ)
(1)   34/      2A :                     marsGbl_PalDmaMidWr	ds.w 1		; Flag to tell we are in middle of transfering palette
(1)   35/      2C :                     sizeof_MarsGbl		ds.l 0
(1)   36/      2C : (MACRO)             			finish
(1)   36/       0 :                                     !org GLBL_LASTORG
(1)   36/ 6000000 :                                     phase GLBL_LASTPC
(1)   37/ 6000000 :                     
(1)   38/ 6000000 :                     ; ====================================================================
(1)   39/ 6000000 :                     ; ----------------------------------------------------------------
(1)   40/ 6000000 :                     ; MASTER CPU HEADER (vbr)
(1)   41/ 6000000 :                     ; ----------------------------------------------------------------
(1)   42/ 6000000 :                     
(1)   43/ 6000000 :                     		align 4
(1)   44/ 6000000 :                     SH2_Master:
(1)   45/ 6000000 : 0600 0F5C 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Cold PC,SP
(1)   46/ 6000008 : 0600 0F5C 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Manual PC,SP
(1)   47/ 6000010 :                     
(1)   48/ 6000010 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(1)   49/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   50/ 6000018 : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(1)   51/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   52/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   53/ 6000024 : 0600 030C           		dc.l SH2_Error			; CPU address error
(1)   54/ 6000028 : 0600 030C           		dc.l SH2_Error			; DMA address error
(1)   55/ 600002C : 0600 030C           		dc.l SH2_Error			; NMI vector
(1)   56/ 6000030 : 0600 030C           		dc.l SH2_Error			; User break vector
(1)   57/ 6000034 :                     
(1)   58/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(1)   59/ 600005C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   60/ 6000080 :                     
(1)   61/ 6000080 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(1)   62/ 6000088 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   63/ 6000090 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   64/ 6000098 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   65/ 60000A0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   66/ 60000A8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   67/ 60000B0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   68/ 60000B8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   69/ 60000C0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   70/ 60000C8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   71/ 60000D0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   72/ 60000D8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   73/ 60000E0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   74/ 60000E8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   75/ 60000F0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   76/ 60000F8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)   77/ 6000100 :                     
(1)   78/ 6000100 : 0600 0248            		dc.l master_irq			; Level 1 IRQ
(1)   79/ 6000104 : 0600 0248           		dc.l master_irq			; Level 2 & 3 IRQ's
(1)   80/ 6000108 : 0600 0248           		dc.l master_irq			; Level 4 & 5 IRQ's
(1)   81/ 600010C : 0600 0248           		dc.l master_irq			; PWM interupt
(1)   82/ 6000110 : 0600 0248           		dc.l master_irq			; Command interupt
(1)   83/ 6000114 : 0600 0248           		dc.l master_irq			; H Blank interupt
(1)   84/ 6000118 : 0600 0248           		dc.l master_irq			; V Blank interupt
(1)   85/ 600011C : 0600 0248           		dc.l master_irq			; Reset Button
(1)   86/ 6000120 : 0600 0248           		dc.l master_irq			; Watchdog
(1)   87/ 6000124 :                     
(1)   88/ 6000124 :                     ; ====================================================================
(1)   89/ 6000124 :                     ; ----------------------------------------------------------------
(1)   90/ 6000124 :                     ; SLAVE CPU HEADER (vbr)
(1)   91/ 6000124 :                     ; ----------------------------------------------------------------
(1)   92/ 6000124 :                     
(1)   93/ 6000124 :                     		align 4
(1)   94/ 6000124 :                     SH2_Slave:
(1)   95/ 6000124 : 0600 1108 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Cold PC,SP
(1)   96/ 600012C : 0600 1108 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Manual PC,SP
(1)   97/ 6000134 :                     
(1)   98/ 6000134 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(1)   99/ 6000138 : 0000 0000           		dc.l 0				; reserved
(1)  100/ 600013C : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(1)  101/ 6000140 : 2010 0400           		dc.l $20100400			; reserved
(1)  102/ 6000144 : 2010 0420           		dc.l $20100420			; reserved
(1)  103/ 6000148 : 0600 030C           		dc.l SH2_Error			; CPU address error
(1)  104/ 600014C : 0600 030C           		dc.l SH2_Error			; DMA address error
(1)  105/ 6000150 : 0600 030C           		dc.l SH2_Error			; NMI vector
(1)  106/ 6000154 : 0600 030C           		dc.l SH2_Error			; User break vector
(1)  107/ 6000158 :                     
(1)  108/ 6000158 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(1)  109/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  110/ 60001A4 :                     
(1)  111/ 60001A4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(1)  112/ 60001AC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  113/ 60001B4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  114/ 60001BC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  115/ 60001C4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  116/ 60001CC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  117/ 60001D4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  118/ 60001DC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  119/ 60001E4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  120/ 60001EC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  121/ 60001F4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  122/ 60001FC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  123/ 6000204 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  124/ 600020C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  125/ 6000214 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  126/ 600021C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  127/ 6000224 :                     
(1)  128/ 6000224 : 0600 02AC            		dc.l slave_irq			; Level 1 IRQ
(1)  129/ 6000228 : 0600 02AC           		dc.l slave_irq			; Level 2 & 3 IRQ's
(1)  130/ 600022C : 0600 02AC           		dc.l slave_irq			; Level 4 & 5 IRQ's
(1)  131/ 6000230 : 0600 02AC           		dc.l slave_irq			; PWM interupt
(1)  132/ 6000234 : 0600 02AC           		dc.l slave_irq			; Command interupt
(1)  133/ 6000238 : 0600 02AC           		dc.l slave_irq			; H Blank interupt
(1)  134/ 600023C : 0600 02AC           		dc.l slave_irq			; V Blank interupt
(1)  135/ 6000240 : 0600 02AC           		dc.l slave_irq			; Reset Button
(1)  136/ 6000244 : 0600 02AC           		dc.l slave_irq			; Watchdog
(1)  137/ 6000248 :                     
(1)  138/ 6000248 :                     ; ====================================================================
(1)  139/ 6000248 :                     ; ----------------------------------------------------------------
(1)  140/ 6000248 :                     ; irq
(1)  141/ 6000248 :                     ;
(1)  142/ 6000248 :                     ; r0-r1 are safe
(1)  143/ 6000248 :                     ; ----------------------------------------------------------------
(1)  144/ 6000248 :                     
(1)  145/ 6000248 :                     		align 4
(1)  146/ 6000248 :                     master_irq:
(1)  147/ 6000248 : 2F06                		mov.l	r0,@-r15
(1)  148/ 600024A : 2F16                		mov.l	r1,@-r15
(1)  149/ 600024C : 4F22                		sts.l	pr,@-r15
(1)  150/ 600024E :                     
(1)  151/ 600024E : 0002                		stc	sr,r0
(1)  152/ 6000250 : 4009                		shlr2	r0
(1)  153/ 6000252 : C93C                		and	#$3C,r0
(1)  154/ 6000254 : D104                		mov	#int_m_list,r1
(1)  155/ 6000256 : 301C                		add	r1,r0
(1)  156/ 6000258 : 6102                		mov	@r0,r1
(1)  157/ 600025A : 410B                		jsr	@r1
(1)  158/ 600025C : 0009                		nop
(1)  159/ 600025E :                     
(1)  160/ 600025E : 4F26                		lds.l	@r15+,pr
(1)  161/ 6000260 : 61F6                		mov.l	@r15+,r1
(1)  162/ 6000262 : 60F6                		mov.l	@r15+,r0
(1)  163/ 6000264 : 002B                		rte
(1)  164/ 6000266 : 0009                		nop
(1)  165/ 6000268 :                     		align 4
(1)  166/ 6000268 : 0600 026C           		ltorg
(1)  167/ 600026C :                     
(1)  168/ 600026C :                     ; ------------------------------------------------
(1)  169/ 600026C :                     ; irq list
(1)  170/ 600026C :                     ; ------------------------------------------------
(1)  171/ 600026C :                     
(1)  172/ 600026C :                     		align 4
(1)  173/ 600026C :                     int_m_list:
(1)  174/ 600026C : 0600 0314 0600 0314 		dc.l m_irq_bad,m_irq_bad
(1)  175/ 6000274 : 0600 0314 0600 0314 		dc.l m_irq_bad,m_irq_bad
(1)  176/ 600027C : 0600 0314 C000 0000 		dc.l m_irq_bad,m_irq_custom
(1)  177/ 6000284 : 0600 0318 0600 0318 		dc.l m_irq_pwm,m_irq_pwm
(1)  178/ 600028C : 0600 0334 0600 0334 		dc.l m_irq_cmd,m_irq_cmd
(1)  179/ 6000294 : 0600 03AC 0600 03AC 		dc.l m_irq_h,m_irq_h
(1)  180/ 600029C : 0600 03C8 0600 03C8 		dc.l m_irq_v,m_irq_v
(1)  181/ 60002A4 : 0600 046C 0600 046C 		dc.l m_irq_vres,m_irq_vres
(1)  182/ 60002AC :                     
(1)  183/ 60002AC :                     ; ====================================================================
(1)  184/ 60002AC :                     ; ----------------------------------------------------------------
(1)  185/ 60002AC :                     ; irq
(1)  186/ 60002AC :                     ;
(1)  187/ 60002AC :                     ; r0-r1 are safe
(1)  188/ 60002AC :                     ; ----------------------------------------------------------------
(1)  189/ 60002AC :                     
(1)  190/ 60002AC :                     slave_irq:
(1)  191/ 60002AC : 2F06                		mov.l	r0,@-r15
(1)  192/ 60002AE : 2F16                		mov.l	r1,@-r15
(1)  193/ 60002B0 : 4F22                		sts.l	pr,@-r15
(1)  194/ 60002B2 :                     
(1)  195/ 60002B2 : 0002                		stc	sr,r0
(1)  196/ 60002B4 : 4009                		shlr2	r0
(1)  197/ 60002B6 : C93C                		and	#$3C,r0
(1)  198/ 60002B8 : D135                		mov	#int_s_list,r1
(1)  199/ 60002BA : 301C                		add	r1,r0
(1)  200/ 60002BC : 6102                		mov	@r0,r1
(1)  201/ 60002BE : 410B                		jsr	@r1
(1)  202/ 60002C0 : 0009                		nop
(1)  203/ 60002C2 :                     
(1)  204/ 60002C2 : 4F26                		lds.l	@r15+,pr
(1)  205/ 60002C4 : 61F6                		mov.l	@r15+,r1
(1)  206/ 60002C6 : 60F6                		mov.l	@r15+,r0
(1)  207/ 60002C8 : 002B                		rte
(1)  208/ 60002CA : 0009                		nop
(1)  209/ 60002CC :                     		align 4
(1)  210/ 60002CC :                     
(1)  211/ 60002CC :                     ; ------------------------------------------------
(1)  212/ 60002CC :                     ; irq list
(1)  213/ 60002CC :                     ; ------------------------------------------------
(1)  214/ 60002CC :                     
(1)  215/ 60002CC :                     int_s_list:
(1)  216/ 60002CC : 0600 0502 0600 0502 		dc.l s_irq_bad,s_irq_bad
(1)  217/ 60002D4 : 0600 0502 0600 0502 		dc.l s_irq_bad,s_irq_bad
(1)  218/ 60002DC : 0600 0502 0600 13BC 		dc.l s_irq_bad,s_irq_custom
(1)  219/ 60002E4 : 0600 0508 0600 0508 		dc.l s_irq_pwm,s_irq_pwm
(1)  220/ 60002EC : 0600 0524 0600 0524 		dc.l s_irq_cmd,s_irq_cmd
(1)  221/ 60002F4 : 0600 0598 0600 0598 		dc.l s_irq_h,s_irq_h
(1)  222/ 60002FC : 0600 05B4 0600 05B4 		dc.l s_irq_v,s_irq_v
(1)  223/ 6000304 : 0600 05C8 0600 05C8 		dc.l s_irq_vres,s_irq_vres
(1)  224/ 600030C :                     			
(1)  225/ 600030C :                     ; ====================================================================
(1)  226/ 600030C :                     ; ----------------------------------------------------------------
(1)  227/ 600030C :                     ; Noraml error trap
(1)  228/ 600030C :                     ; ----------------------------------------------------------------
(1)  229/ 600030C :                     
(1)  230/ 600030C :                     SH2_Error:
(1)  231/ 600030C : 0009                		nop
(1)  232/ 600030E : AFFD                		bra	SH2_Error
(1)  233/ 6000310 : 0009                		nop
(1)  234/ 6000312 :                     		align 4
(1)  235/ 6000314 :                     
(1)  236/ 6000314 :                     ; ====================================================================		
(1)  237/ 6000314 :                     ; ----------------------------------------------------------------
(1)  238/ 6000314 :                     ; MARS Interrupts
(1)  239/ 6000314 :                     ; ----------------------------------------------------------------
(1)  240/ 6000314 :                     
(1)  241/ 6000314 :                     ; =================================================================
(1)  242/ 6000314 :                     ; ------------------------------------------------
(1)  243/ 6000314 :                     ; Master | Unused interrupt
(1)  244/ 6000314 :                     ; ------------------------------------------------
(1)  245/ 6000314 :                     
(1)  246/ 6000314 :                     m_irq_bad:
(1)  247/ 6000314 : 000B                		rts
(1)  248/ 6000316 : 0009                		nop
(1)  249/ 6000318 :                     		align 4
(1)  250/ 6000318 :                     
(1)  251/ 6000318 :                     ; =================================================================
(1)  252/ 6000318 :                     ; ------------------------------------------------
(1)  253/ 6000318 :                     ; Master | PWM Interrupt
(1)  254/ 6000318 :                     ; ------------------------------------------------
(1)  255/ 6000318 :                     
(1)  256/ 6000318 :                     m_irq_pwm:
(1)  257/ 6000318 :                     ; 		mov	#_sysreg+monowidth,r1
(1)  258/ 6000318 :                     ; 		mov.b	@r1,r0
(1)  259/ 6000318 :                     ;  		tst	#$80,r0
(1)  260/ 6000318 :                     ;  		bf	.exit
(1)  261/ 6000318 :                     ; 		sts	pr,@-r15
(1)  262/ 6000318 :                     ; 		mov	#MarsSound_ReadPwm,r0
(1)  263/ 6000318 :                     ; 		jsr	@r0
(1)  264/ 6000318 :                     ; 		nop
(1)  265/ 6000318 :                     ; 		lds	@r15+,pr
(1)  266/ 6000318 :                     ; .exit:		mov	#_FRT,r1
(1)  267/ 6000318 :                     ; 		mov.b	@(7,r1),r0
(1)  268/ 6000318 :                     ; 		xor	#2,r0
(1)  269/ 6000318 :                     ; 		mov.b	r0,@(7,r1)
(1)  270/ 6000318 :                     ; 		mov	#_sysreg+pwmintclr,r1
(1)  271/ 6000318 :                     ; 		mov.w	r0,@r1
(1)  272/ 6000318 :                     ; 		rts
(1)  273/ 6000318 :                     ; 		nop
(1)  274/ 6000318 :                     ; 		align 4
(1)  275/ 6000318 : 9146                		mov	#_FRT,r1
(1)  276/ 600031A : 8417                		mov.b	@(7,r1),r0
(1)  277/ 600031C : CA02                		xor	#2,r0
(1)  278/ 600031E : 8017                		mov.b	r0,@(7,r1)
(1)  279/ 6000320 : D11C                		mov	#_sysreg+pwmintclr,r1
(1)  280/ 6000322 : 2101                		mov.w	r0,@r1
(1)  281/ 6000324 : 0009                		nop
(1)  282/ 6000326 : 0009                		nop
(1)  283/ 6000328 : 0009                		nop
(1)  284/ 600032A : 0009                		nop
(1)  285/ 600032C : 0009                		nop
(1)  286/ 600032E : 000B                		rts
(1)  287/ 6000330 : 0009                		nop
(1)  288/ 6000332 :                     		align 4
(1)  289/ 6000334 :                     
(1)  290/ 6000334 :                     ; =================================================================
(1)  291/ 6000334 :                     ; ------------------------------------------------
(1)  292/ 6000334 :                     ; Master | CMD Interrupt
(1)  293/ 6000334 :                     ; 
(1)  294/ 6000334 :                     ; Recieve data from Genesis (DREQ-less)
(1)  295/ 6000334 :                     ; ------------------------------------------------
(1)  296/ 6000334 :                     
(1)  297/ 6000334 :                     m_irq_cmd:
(1)  298/ 6000334 : 9138                		mov	#_FRT,r1
(1)  299/ 6000336 : 8417                		mov.b	@(7,r1),r0
(1)  300/ 6000338 : CA02                		xor	#2,r0
(1)  301/ 600033A : 8017                		mov.b	r0,@(7,r1)
(1)  302/ 600033C : D116                		mov	#_sysreg+cmdintclr,r1
(1)  303/ 600033E : 2101                		mov.w	r0,@r1
(1)  304/ 6000340 : 2F26                		mov	r2,@-r15
(1)  305/ 6000342 : 2F36                		mov	r3,@-r15
(1)  306/ 6000344 : 2F46                		mov	r4,@-r15
(1)  307/ 6000346 : 4F03                		stc	sr,@-r15
(1)  308/ 6000348 : 902F                		mov	#$F0,r0
(1)  309/ 600034A : 400E                		ldc	r0,sr
(1)  310/ 600034C :                     
(1)  311/ 600034C :                     ; ----------------------------------------
(1)  312/ 600034C :                     
(1)  313/ 600034C :                     ; 		mov	#_sysreg+comm4,r1	; Check if Z80
(1)  314/ 600034C :                     ; 		mov.b	@(0,r1),r0		; called first
(1)  315/ 600034C :                     ; 		cmp/eq	#0,r0
(1)  316/ 600034C :                     ; 		bf	.pwm_play
(1)  317/ 600034C :                     
(1)  318/ 600034C :                     ; ----------------------------------------
(1)  319/ 600034C :                     ; Transfer from 68K
(1)  320/ 600034C :                     ; ----------------------------------------
(1)  321/ 600034C :                     
(1)  322/ 600034C : D113                		mov	#_sysreg+comm8,r1
(1)  323/ 600034E : D214                		mov	#RAM_Mars_MdTasksFifo_M,r2
(1)  324/ 6000350 : D314                		mov	#_sysreg+comm14,r3	; Also process tasks
(1)  325/ 6000352 : 6030                		mov.b	@r3,r0			; after this
(1)  326/ 6000354 : CB80                		or	#$80,r0
(1)  327/ 6000356 : 2300                		mov.b	r0,@r3
(1)  328/ 6000358 :                     .next_comm:
(1)  329/ 6000358 : E002                		mov	#2,r0		; SH is ready
(1)  330/ 600035A : 8011                		mov.b	r0,@(1,r1)
(1)  331/ 600035C :                     .wait_md_b:
(1)  332/ 600035C : 8410                		mov.b	@(0,r1),r0	; get MD status
(1)  333/ 600035E : 8800                		cmp/eq	#0,r0
(1)  334/ 6000360 : 8910                		bt	.finish
(1)  335/ 6000362 : C980                		and	#$80,r0
(1)  336/ 6000364 : 8800                		cmp/eq	#0,r0		; is MD busy?
(1)  337/ 6000366 : 89F9                		bt	.wait_md_b
(1)  338/ 6000368 : E001                		mov	#1,r0		; SH is busy
(1)  339/ 600036A : 8011                		mov.b	r0,@(1,r1)
(1)  340/ 600036C :                     .wait_md_c:
(1)  341/ 600036C : 8410                		mov.b	@(0,r1),r0
(1)  342/ 600036E : 8800                		cmp/eq	#0,r0
(1)  343/ 6000370 : 8908                		bt	.finish
(1)  344/ 6000372 : C940                		and	#$40,r0
(1)  345/ 6000374 : 8840                		cmp/eq	#$40,r0		; MD ready?
(1)  346/ 6000376 : 8BF9                		bf	.wait_md_c
(1)  347/ 6000378 : 8511                		mov.w	@(2,r1),r0	; comm10
(1)  348/ 600037A : 2201                		mov.w	r0,@r2
(1)  349/ 600037C : 8512                		mov.w	@(4,r1),r0	; comm12
(1)  350/ 600037E : 8121                		mov.w	r0,@(2,r2)
(1)  351/ 6000380 : AFEA                		bra	.next_comm
(1)  352/ 6000382 : 7204                		add	#4,r2
(1)  353/ 6000384 :                     
(1)  354/ 6000384 :                     ; ; ----------------------------------------
(1)  355/ 6000384 :                     ; ; Transfer from Z80
(1)  356/ 6000384 :                     ; ; ----------------------------------------
(1)  357/ 6000384 :                     ; 
(1)  358/ 6000384 :                     ; .pwm_play:
(1)  359/ 6000384 :                     ; 		cmp/eq	#$20,r0
(1)  360/ 6000384 :                     ; 		bt	.finish_s
(1)  361/ 6000384 :                     ; 		mov	#MarsSnd_PwmTrkData,r2
(1)  362/ 6000384 :                     ; 		cmp/eq	#$21,r0
(1)  363/ 6000384 :                     ; 		bt	.next_commz
(1)  364/ 6000384 :                     ; 		mov	#MarsSnd_PwmPlyData,r2
(1)  365/ 6000384 :                     ; 		add	#-1,r0
(1)  366/ 6000384 :                     ; 		and	#%11111,r0
(1)  367/ 6000384 :                     ; 		shll2	r0
(1)  368/ 6000384 :                     ; 		shll	r0
(1)  369/ 6000384 :                     ; 		add	r0,r2
(1)  370/ 6000384 :                     ; .next_commz:
(1)  371/ 6000384 :                     ; 		mov	#2,r0		; SH is ready
(1)  372/ 6000384 :                     ; 		mov.b	r0,@(1,r1)
(1)  373/ 6000384 :                     ; .wait_z_b:
(1)  374/ 6000384 :                     ; 		mov.b	@(0,r1),r0	; get Z80 status
(1)  375/ 6000384 :                     ; 		cmp/eq	#0,r0
(1)  376/ 6000384 :                     ; 		bt	.finish_s
(1)  377/ 6000384 :                     ; 		and	#$80,r0
(1)  378/ 6000384 :                     ; 		cmp/eq	#0,r0		; is Z80 busy?
(1)  379/ 6000384 :                     ; 		bt	.wait_z_b
(1)  380/ 6000384 :                     ; 		mov	#1,r0		; SH is busy
(1)  381/ 6000384 :                     ; 		mov.b	r0,@(1,r1)
(1)  382/ 6000384 :                     ; .wait_z_c:
(1)  383/ 6000384 :                     ; 		mov.b	@(0,r1),r0
(1)  384/ 6000384 :                     ; 		cmp/eq	#0,r0
(1)  385/ 6000384 :                     ; 		bt	.finish_s
(1)  386/ 6000384 :                     ; 		and	#$40,r0
(1)  387/ 6000384 :                     ; 		cmp/eq	#$40,r0		; Z80 ready?
(1)  388/ 6000384 :                     ; 		bf	.wait_z_c
(1)  389/ 6000384 :                     ; 		mov.w	@(2,r1),r0	; word write.
(1)  390/ 6000384 :                     ; 		mov.w	r0,@r2
(1)  391/ 6000384 :                     ; 		bra	.next_commz
(1)  392/ 6000384 :                     ; 		add	#2,r2
(1)  393/ 6000384 :                     ; 		align 4
(1)  394/ 6000384 :                     ; 
(1)  395/ 6000384 :                     ; ; ----------------------------------------
(1)  396/ 6000384 :                     ; 
(1)  397/ 6000384 :                     ; .finish_s:
(1)  398/ 6000384 :                     ; 		mov	#1,r0
(1)  399/ 6000384 :                     ; 		mov.w	r0,@(marsGbl_PwmTrkUpd,gbr)
(1)  400/ 6000384 :                     ; 		mov	#$80,r0
(1)  401/ 6000384 :                     ; 		mov.b	r0,@(1,r1)
(1)  402/ 6000384 :                     
(1)  403/ 6000384 :                     .finish:
(1)  404/ 6000384 : 4F07                		ldc 	@r15+,sr
(1)  405/ 6000386 : 64F6                		mov 	@r15+,r4
(1)  406/ 6000388 : 63F6                		mov 	@r15+,r3
(1)  407/ 600038A : 62F6                		mov 	@r15+,r2
(1)  408/ 600038C : 000B                		rts
(1)  409/ 600038E : 0009                		nop
(1)  410/ 6000390 :                     		align 4
(1)  411/ 6000390 : 0600 02CC 2000 401C 		ltorg
                    2000 401A 2000 4028 
                    0603 48D8 2000 402E 
                    FE10 00F0           
(1)  412/ 60003AC :                     		
(1)  413/ 60003AC :                     ; =================================================================
(1)  414/ 60003AC :                     ; ------------------------------------------------
(1)  415/ 60003AC :                     ; Master | HBlank
(1)  416/ 60003AC :                     ; ------------------------------------------------
(1)  417/ 60003AC :                     
(1)  418/ 60003AC :                     m_irq_h:
(1)  419/ 60003AC : 91A4                		mov	#_FRT,r1
(1)  420/ 60003AE : 8417                		mov.b	@(7,r1),r0
(1)  421/ 60003B0 : CA02                		xor	#2,r0
(1)  422/ 60003B2 : 8017                		mov.b	r0,@(7,r1)
(1)  423/ 60003B4 : D145                		mov	#_sysreg+hintclr,r1
(1)  424/ 60003B6 : 2101                		mov.w	r0,@r1
(1)  425/ 60003B8 : 0009                		nop
(1)  426/ 60003BA : 0009                		nop
(1)  427/ 60003BC : 0009                		nop
(1)  428/ 60003BE : 0009                		nop
(1)  429/ 60003C0 : 0009                		nop
(1)  430/ 60003C2 : 000B                		rts
(1)  431/ 60003C4 : 0009                		nop
(1)  432/ 60003C6 :                     		align 4
(1)  433/ 60003C8 :                     		
(1)  434/ 60003C8 :                     ; =================================================================
(1)  435/ 60003C8 :                     ; ------------------------------------------------
(1)  436/ 60003C8 :                     ; Master | VBlank
(1)  437/ 60003C8 :                     ; ------------------------------------------------
(1)  438/ 60003C8 :                     
(1)  439/ 60003C8 :                     m_irq_v:
(1)  440/ 60003C8 : 9196                		mov	#_FRT,r1
(1)  441/ 60003CA : 8417                		mov.b	@(7,r1),r0
(1)  442/ 60003CC : CA02                		xor	#2,r0
(1)  443/ 60003CE : 8017                		mov.b	r0,@(7,r1)
(1)  444/ 60003D0 : D13F                		mov	#_sysreg+vintclr,r1
(1)  445/ 60003D2 : 2101                		mov.w	r0,@r1
(1)  446/ 60003D4 :                     
(1)  447/ 60003D4 :                     	; Hardware BUG:
(1)  448/ 60003D4 :                     	; Using DMA to transfer palette
(1)  449/ 60003D4 :                     	; to _palette works on the first pass
(1)  450/ 60003D4 : D13F                		mov	#_vdpreg,r1		; Wait for palette access
(1)  451/ 60003D6 : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0		; Read status as WORD
(1)  452/ 60003D8 : C802                		tst	#2,r0			; Framebuffer busy? (wait for FEN=1)
(1)  453/ 60003DA : 8BFC                		bf	.wait_fb
(1)  454/ 60003DC : 841A                .wait		mov.b	@(vdpsts,r1),r0		; Now read as a BYTE
(1)  455/ 60003DE : C820                		tst	#$20,r0			; Palette unlocked? (wait for PEN=0)
(1)  456/ 60003E0 : 89FC                		bt	.wait
(1)  457/ 60003E2 : 4F03                		stc	sr,@-r15
(1)  458/ 60003E4 : 2F26                		mov	r2,@-r15
(1)  459/ 60003E6 : 2F36                		mov	r3,@-r15
(1)  460/ 60003E8 : 9087                		mov	#$F0,r0			; Disable interrupts
(1)  461/ 60003EA : 400E                		ldc	r0,sr
(1)  462/ 60003EC :                     
(1)  463/ 60003EC :                     	; Copy palette manually to
(1)  464/ 60003EC :                     	; SVDP
(1)  465/ 60003EC : E001                		mov	#1,r0
(1)  466/ 60003EE : C115                		mov.w	r0,@(marsGbl_PalDmaMidWr,gbr)
(1)  467/ 60003F0 : D139                		mov	#RAM_Mars_Palette,r1
(1)  468/ 60003F2 : D23A                		mov	#_palette,r2
(1)  469/ 60003F4 : E310                 		mov	#256/16,r3
(1)  470/ 60003F6 :                     .copy_pal:
(1)  471/ 60003F6 :                     	rept 16
(1)  472/ 60003F6 :                     		mov.w	@r1+,r0
(1)  473/ 60003F6 :                     		mov.w	r0,@r2
(1)  474/ 60003F6 :                     		add	#2,r2
(1)  475/ 60003F6 :                     	endm
(1)  472/ 60003F6 : 6015                		mov.w	@r1+,r0
(1)  473/ 60003F8 : 2201                		mov.w	r0,@r2
(1)  474/ 60003FA : 7202                		add	#2,r2
(1)  472/ 60003FC : 6015                		mov.w	@r1+,r0
(1)  473/ 60003FE : 2201                		mov.w	r0,@r2
(1)  474/ 6000400 : 7202                		add	#2,r2
(1)  472/ 6000402 : 6015                		mov.w	@r1+,r0
(1)  473/ 6000404 : 2201                		mov.w	r0,@r2
(1)  474/ 6000406 : 7202                		add	#2,r2
(1)  472/ 6000408 : 6015                		mov.w	@r1+,r0
(1)  473/ 600040A : 2201                		mov.w	r0,@r2
(1)  474/ 600040C : 7202                		add	#2,r2
(1)  472/ 600040E : 6015                		mov.w	@r1+,r0
(1)  473/ 6000410 : 2201                		mov.w	r0,@r2
(1)  474/ 6000412 : 7202                		add	#2,r2
(1)  472/ 6000414 : 6015                		mov.w	@r1+,r0
(1)  473/ 6000416 : 2201                		mov.w	r0,@r2
(1)  474/ 6000418 : 7202                		add	#2,r2
(1)  472/ 600041A : 6015                		mov.w	@r1+,r0
(1)  473/ 600041C : 2201                		mov.w	r0,@r2
(1)  474/ 600041E : 7202                		add	#2,r2
(1)  472/ 6000420 : 6015                		mov.w	@r1+,r0
(1)  473/ 6000422 : 2201                		mov.w	r0,@r2
(1)  474/ 6000424 : 7202                		add	#2,r2
(1)  472/ 6000426 : 6015                		mov.w	@r1+,r0
(1)  473/ 6000428 : 2201                		mov.w	r0,@r2
(1)  474/ 600042A : 7202                		add	#2,r2
(1)  472/ 600042C : 6015                		mov.w	@r1+,r0
(1)  473/ 600042E : 2201                		mov.w	r0,@r2
(1)  474/ 6000430 : 7202                		add	#2,r2
(1)  472/ 6000432 : 6015                		mov.w	@r1+,r0
(1)  473/ 6000434 : 2201                		mov.w	r0,@r2
(1)  474/ 6000436 : 7202                		add	#2,r2
(1)  472/ 6000438 : 6015                		mov.w	@r1+,r0
(1)  473/ 600043A : 2201                		mov.w	r0,@r2
(1)  474/ 600043C : 7202                		add	#2,r2
(1)  472/ 600043E : 6015                		mov.w	@r1+,r0
(1)  473/ 6000440 : 2201                		mov.w	r0,@r2
(1)  474/ 6000442 : 7202                		add	#2,r2
(1)  472/ 6000444 : 6015                		mov.w	@r1+,r0
(1)  473/ 6000446 : 2201                		mov.w	r0,@r2
(1)  474/ 6000448 : 7202                		add	#2,r2
(1)  472/ 600044A : 6015                		mov.w	@r1+,r0
(1)  473/ 600044C : 2201                		mov.w	r0,@r2
(1)  474/ 600044E : 7202                		add	#2,r2
(1)  472/ 6000450 : 6015                		mov.w	@r1+,r0
(1)  473/ 6000452 : 2201                		mov.w	r0,@r2
(1)  474/ 6000454 : 7202                		add	#2,r2
(1)  476/ 6000456 : 4310                		dt	r3
(1)  477/ 6000458 : 8BCD                		bf	.copy_pal
(1)  478/ 600045A : E000                		mov	#0,r0
(1)  479/ 600045C : C115                		mov.w	r0,@(marsGbl_PalDmaMidWr,gbr)
(1)  480/ 600045E :                     
(1)  481/ 600045E :                             ; OLD method: doesn't work on hardware
(1)  482/ 600045E :                     ; 		mov	r4,@-r15
(1)  483/ 600045E :                     ; 		mov	r5,@-r15
(1)  484/ 600045E :                     ; 		mov	r6,@-r15
(1)  485/ 600045E :                     ; 		mov	#RAM_Mars_Palette,r1		; Send palette stored on RAM
(1)  486/ 600045E :                     ; 		mov	#_palette,r2
(1)  487/ 600045E :                     ;  		mov	#256,r3
(1)  488/ 600045E :                     ; 		mov	#%0101011011110001,r4		; transfer size 2 / burst
(1)  489/ 600045E :                     ; 		mov	#_DMASOURCE0,r5 		; _DMASOURCE = $ffffff80
(1)  490/ 600045E :                     ; 		mov	#_DMAOPERATION,r6 		; _DMAOPERATION = $ffffffb0
(1)  491/ 600045E :                     ; 		mov	r1,@r5				; set source address
(1)  492/ 600045E :                     ; 		mov	r2,@(4,r5)			; set destination address
(1)  493/ 600045E :                     ; 		mov	r3,@(8,r5)			; set length
(1)  494/ 600045E :                     ; 		xor	r0,r0
(1)  495/ 600045E :                     ; 		mov	r0,@r6				; Stop OPERATION
(1)  496/ 600045E :                     ; 		xor	r0,r0
(1)  497/ 600045E :                     ; 		mov	r0,@($C,r5)			; clear TE bit
(1)  498/ 600045E :                     ; 		mov	r4,@($C,r5)			; load mode
(1)  499/ 600045E :                     ; 		add	#1,r0
(1)  500/ 600045E :                     ; 		mov	r0,@r6				; Start OPERATION
(1)  501/ 600045E :                     ; 		mov	@r15+,r6
(1)  502/ 600045E :                     ; 		mov	@r15+,r5
(1)  503/ 600045E :                     ; 		mov	@r15+,r4
(1)  504/ 600045E : 63F6                		mov	@r15+,r3
(1)  505/ 6000460 : 62F6                		mov	@r15+,r2
(1)  506/ 6000462 : 4F07                		ldc	@r15+,sr
(1)  507/ 6000464 :                     		
(1)  508/ 6000464 :                     .mid_pwrite:
(1)  509/ 6000464 : E000                		mov 	#0,r0				; Clear VintFlag for Master
(1)  510/ 6000466 : C10F                		mov.w	r0,@(marsGbl_VIntFlag_M,gbr)
(1)  511/ 6000468 : 000B                		rts
(1)  512/ 600046A : 0009                		nop
(1)  513/ 600046C :                     		align 4
(1)  514/ 600046C :                     		
(1)  515/ 600046C :                     ; =================================================================
(1)  516/ 600046C :                     ; ------------------------------------------------
(1)  517/ 600046C :                     ; Master | VRES Interrupt (RESET on Genesis)
(1)  518/ 600046C :                     ; ------------------------------------------------
(1)  519/ 600046C :                     
(1)  520/ 600046C :                     m_irq_vres:
(1)  521/ 600046C : D01C                		mov.l	#_sysreg,r0
(1)  522/ 600046E : 401E                		ldc	r0,gbr
(1)  523/ 6000470 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  524/ 6000472 : 0009                		nop
(1)  525/ 6000474 : 0009                		nop
(1)  526/ 6000476 : 0009                		nop
(1)  527/ 6000478 : 0009                		nop
(1)  528/ 600047A : 903E                		mov	#$F0,r0
(1)  529/ 600047C : 400E                		ldc	r0,sr
(1)  530/ 600047E : C406                		mov.b	@(dreqctl,gbr),r0
(1)  531/ 6000480 : C801                		tst	#1,r0
(1)  532/ 6000482 : 8B1C                		bf	.mars_reset
(1)  533/ 6000484 :                     .md_reset:
(1)  534/ 6000484 : D117                		mov.l	#"68UP",r1		; wait for the 68K to show up
(1)  535/ 6000486 : C60B                		mov.l	@(comm12,gbr),r0
(1)  536/ 6000488 : 3100                		cmp/eq	r0,r1
(1)  537/ 600048A : 8BFB                		bf	.md_reset
(1)  538/ 600048C :                     .sh_wait:
(1)  539/ 600048C : D116                		mov.l	#"S_OK",r1		; wait for the Slave CPU to show up
(1)  540/ 600048E : C609                		mov.l	@(comm4,gbr),r0
(1)  541/ 6000490 : 3100                		cmp/eq	r0,r1
(1)  542/ 6000492 : 8BFB                		bf	.sh_wait
(1)  543/ 6000494 : D015                		mov.l	#"M_OK",r0		; let the others know master ready
(1)  544/ 6000496 : C208                		mov.l	r0,@(comm0,gbr)
(1)  545/ 6000498 : 9130                		mov.l   #$FFFFFE80,r1		; Stop watchdog
(1)  546/ 600049A : 9030                		mov.w   #$A518,r0
(1)  547/ 600049C : 2101                		mov.w   r0,@r1
(1)  548/ 600049E :                     ; 		mov	#_vdpreg,r1		; Framebuffer swap request
(1)  549/ 600049E :                     ; 		mov.b	@(framectl,r1),r0	; watchdog will check for it later
(1)  550/ 600049E :                     ; 		xor	#1,r0
(1)  551/ 600049E :                     ; 		mov.b	r0,@(framectl,r1)
(1)  552/ 600049E :                     ; 		mov	#RAM_Mars_Global+marsGbl_CurrFb,r1
(1)  553/ 600049E : 2100                		mov.b	r0,@r1
(1)  554/ 60004A0 : DF13                		mov.l	#CS3|$40000-8,r15	; Set reset values
(1)  555/ 60004A2 : D014                		mov.l	#SH2_M_HotStart,r0
(1)  556/ 60004A4 : 2F02                		mov.l	r0,@r15
(1)  557/ 60004A6 : 9028                		mov.w	#$F0,r0
(1)  558/ 60004A8 : 1F01                		mov.l	r0,@(4,r15)
(1)  559/ 60004AA : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  560/ 60004AC : E000                		mov.l	#0,r0
(1)  561/ 60004AE : 2102                		mov.l	r0,@r1			; Turn any DMA tasks OFF
(1)  562/ 60004B0 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  563/ 60004B2 : E000                		mov.l	#0,r0
(1)  564/ 60004B4 : 2102                		mov.l	r0,@r1
(1)  565/ 60004B6 : 9123                		mov.l	#%0100010011100000,r1
(1)  566/ 60004B8 : 2102                		mov.l	r0,@r1			; Channel control
(1)  567/ 60004BA : 002B                		rte
(1)  568/ 60004BC : 0009                		nop
(1)  569/ 60004BE :                     .mars_reset:
(1)  570/ 60004BE : 911B                		mov	#_FRT,r1
(1)  571/ 60004C0 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  572/ 60004C2 : CB01                		or	#$01,r0
(1)  573/ 60004C4 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  574/ 60004C6 :                     .vresloop:
(1)  575/ 60004C6 : AFFE                		bra	.vresloop
(1)  576/ 60004C8 : 0009                		nop
(1)  577/ 60004CA :                     		align 4
(1)  578/ 60004CC : 2000 4018 2000 4016 		ltorg				; Save MASTER IRQ literals here
                    2000 4100 0603 4CD8 
                    2000 4200 2000 4000 
                    3638 5550 535F 4F4B 
                    4D5F 4F4B 0603 FFF8 
                    0600 0FA2 FE10 00F0 
                    FE80 A518 44E0      
(1)  579/ 6000502 :                     
(1)  580/ 6000502 :                     ; =================================================================
(1)  581/ 6000502 :                     ; ------------------------------------------------
(1)  582/ 6000502 :                     ; Master | Watchdog interrupt
(1)  583/ 6000502 :                     ; ------------------------------------------------
(1)  584/ 6000502 :                     
(1)  585/ 6000502 :                     ; m_irq_custom:
(1)  586/ 6000502 :                     ; MOVED: see cache.asm
(1)  587/ 6000502 :                     
(1)  588/ 6000502 :                     ; =================================================================
(1)  589/ 6000502 :                     ; ------------------------------------------------
(1)  590/ 6000502 :                     ; Unused
(1)  591/ 6000502 :                     ; ------------------------------------------------
(1)  592/ 6000502 :                     
(1)  593/ 6000502 :                     s_irq_bad:
(1)  594/ 6000502 : 000B                		rts
(1)  595/ 6000504 : 0009                		nop
(1)  596/ 6000506 :                     		align 4
(1)  597/ 6000508 :                     
(1)  598/ 6000508 :                     ; =================================================================
(1)  599/ 6000508 :                     ; ------------------------------------------------
(1)  600/ 6000508 :                     ; Slave | PWM Interrupt
(1)  601/ 6000508 :                     ; ------------------------------------------------
(1)  602/ 6000508 :                     
(1)  603/ 6000508 :                     s_irq_pwm:
(1)  604/ 6000508 : 9144                		mov	#_FRT,r1
(1)  605/ 600050A : 8417                		mov.b	@(7,r1),r0
(1)  606/ 600050C : CA02                		xor	#2,r0
(1)  607/ 600050E : 8017                		mov.b	r0,@(7,r1)
(1)  608/ 6000510 : D11B                		mov	#_sysreg+pwmintclr,r1
(1)  609/ 6000512 : 2101                		mov.w	r0,@r1
(1)  610/ 6000514 : 0009                		nop
(1)  611/ 6000516 : 0009                		nop
(1)  612/ 6000518 : 0009                		nop
(1)  613/ 600051A : 0009                		nop
(1)  614/ 600051C : 0009                		nop
(1)  615/ 600051E : 000B                		rts
(1)  616/ 6000520 : 0009                		nop
(1)  617/ 6000522 :                     		align 4
(1)  618/ 6000524 :                     
(1)  619/ 6000524 :                     ; =================================================================
(1)  620/ 6000524 :                     ; ------------------------------------------------
(1)  621/ 6000524 :                     ; Slave | CMD Interrupt
(1)  622/ 6000524 :                     ; 
(1)  623/ 6000524 :                     ; Recieve data from Genesis
(1)  624/ 6000524 :                     ; ------------------------------------------------
(1)  625/ 6000524 :                     
(1)  626/ 6000524 :                     s_irq_cmd:
(1)  627/ 6000524 : 9136                		mov	#_FRT,r1
(1)  628/ 6000526 : 8417                		mov.b	@(7,r1),r0
(1)  629/ 6000528 : CA02                		xor	#2,r0
(1)  630/ 600052A : 8017                		mov.b	r0,@(7,r1)
(1)  631/ 600052C : D115                		mov	#_sysreg+cmdintclr,r1
(1)  632/ 600052E : 2101                		mov.w	r0,@r1
(1)  633/ 6000530 : 2F26                		mov	r2,@-r15
(1)  634/ 6000532 : 2F36                		mov	r3,@-r15
(1)  635/ 6000534 : 2F46                		mov	r4,@-r15
(1)  636/ 6000536 : 4F03                		stc	sr,@-r15
(1)  637/ 6000538 : 902D                		mov	#$F0,r0
(1)  638/ 600053A : 400E                		ldc	r0,sr
(1)  639/ 600053C :                     
(1)  640/ 600053C :                     ; ----------------------------------------
(1)  641/ 600053C :                     ; Transfer from 68K
(1)  642/ 600053C :                     ; ----------------------------------------
(1)  643/ 600053C :                     
(1)  644/ 600053C : D112                		mov	#_sysreg+comm8,r1
(1)  645/ 600053E : D213                		mov	#RAM_Mars_MdTasksFifo_S,r2
(1)  646/ 6000540 : D313                		mov	#_sysreg+comm15,r3	; Also process tasks
(1)  647/ 6000542 : 6030                		mov.b	@r3,r0			; after this
(1)  648/ 6000544 : CB80                		or	#$80,r0
(1)  649/ 6000546 : 2300                		mov.b	r0,@r3
(1)  650/ 6000548 :                     .next_comm:
(1)  651/ 6000548 : E002                		mov	#2,r0		; SH is ready
(1)  652/ 600054A : 8011                		mov.b	r0,@(1,r1)
(1)  653/ 600054C :                     .wait_md_b:
(1)  654/ 600054C : 8410                		mov.b	@(0,r1),r0	; get MD status
(1)  655/ 600054E : 8800                		cmp/eq	#0,r0
(1)  656/ 6000550 : 8910                		bt	.finish
(1)  657/ 6000552 : C980                		and	#$80,r0
(1)  658/ 6000554 : 8800                		cmp/eq	#0,r0		; is MD busy?
(1)  659/ 6000556 : 89F9                		bt	.wait_md_b
(1)  660/ 6000558 : E001                		mov	#1,r0		; SH is busy
(1)  661/ 600055A : 8011                		mov.b	r0,@(1,r1)
(1)  662/ 600055C :                     .wait_md_c:
(1)  663/ 600055C : 8410                		mov.b	@(0,r1),r0
(1)  664/ 600055E : 8800                		cmp/eq	#0,r0
(1)  665/ 6000560 : 8908                		bt	.finish
(1)  666/ 6000562 : C940                		and	#$40,r0
(1)  667/ 6000564 : 8840                		cmp/eq	#$40,r0		; MD ready?
(1)  668/ 6000566 : 8BF9                		bf	.wait_md_c
(1)  669/ 6000568 : 8511                		mov.w	@(2,r1),r0	; comm10
(1)  670/ 600056A : 2201                		mov.w	r0,@r2
(1)  671/ 600056C : 8512                		mov.w	@(4,r1),r0	; comm12
(1)  672/ 600056E : 8121                		mov.w	r0,@(2,r2)
(1)  673/ 6000570 : AFEA                		bra	.next_comm
(1)  674/ 6000572 : 7204                		add	#4,r2
(1)  675/ 6000574 :                     .finish:
(1)  676/ 6000574 : 4F07                		ldc 	@r15+,sr
(1)  677/ 6000576 : 64F6                		mov 	@r15+,r4
(1)  678/ 6000578 : 63F6                		mov 	@r15+,r3
(1)  679/ 600057A : 62F6                		mov 	@r15+,r2
(1)  680/ 600057C : 000B                		rts
(1)  681/ 600057E : 0009                		nop
(1)  682/ 6000580 :                     		align 4
(1)  683/ 6000580 : 2000 401C 2000 401A 		ltorg
                    2000 4028 0603 4AD8 
                    2000 402F FE10 00F0 
(1)  684/ 6000598 :                     		
(1)  685/ 6000598 :                     ; =================================================================
(1)  686/ 6000598 :                     ; ------------------------------------------------
(1)  687/ 6000598 :                     ; Slave | HBlank
(1)  688/ 6000598 :                     ; ------------------------------------------------
(1)  689/ 6000598 :                     
(1)  690/ 6000598 :                     s_irq_h:
(1)  691/ 6000598 : 9152                		mov	#_FRT,r1
(1)  692/ 600059A : 8417                		mov.b	@(7,r1),r0
(1)  693/ 600059C : CA02                		xor	#2,r0
(1)  694/ 600059E : 8017                		mov.b	r0,@(7,r1)
(1)  695/ 60005A0 : D11F                		mov	#_sysreg+hintclr,r1
(1)  696/ 60005A2 : 2101                		mov.w	r0,@r1
(1)  697/ 60005A4 : 0009                		nop
(1)  698/ 60005A6 : 0009                		nop
(1)  699/ 60005A8 : 0009                		nop
(1)  700/ 60005AA : 0009                		nop
(1)  701/ 60005AC : 0009                		nop
(1)  702/ 60005AE : 000B                		rts
(1)  703/ 60005B0 : 0009                		nop
(1)  704/ 60005B2 :                     		align 4
(1)  705/ 60005B4 :                     
(1)  706/ 60005B4 :                     ; =================================================================
(1)  707/ 60005B4 :                     ; ------------------------------------------------
(1)  708/ 60005B4 :                     ; Slave | VBlank
(1)  709/ 60005B4 :                     ; ------------------------------------------------
(1)  710/ 60005B4 :                     
(1)  711/ 60005B4 :                     s_irq_v:
(1)  712/ 60005B4 : E000                		mov 	#0,r0				; Clear VintFlag for Slave
(1)  713/ 60005B6 : C110                		mov.w	r0,@(marsGbl_VIntFlag_S,gbr)
(1)  714/ 60005B8 : 9142                		mov	#_FRT,r1
(1)  715/ 60005BA : 8417                		mov.b	@(7,r1),r0
(1)  716/ 60005BC : CA02                		xor	#2,r0
(1)  717/ 60005BE : 8017                		mov.b	r0,@(7,r1)
(1)  718/ 60005C0 : D118                		mov	#_sysreg+vintclr,r1
(1)  719/ 60005C2 : 000B                		rts
(1)  720/ 60005C4 : 2101                		mov.w	r0,@r1
(1)  721/ 60005C6 :                     		align 4
(1)  722/ 60005C8 :                     
(1)  723/ 60005C8 :                     ; =================================================================
(1)  724/ 60005C8 :                     ; ------------------------------------------------
(1)  725/ 60005C8 :                     ; Slave | VRES Interrupt (Pressed RESET on Genesis)
(1)  726/ 60005C8 :                     ; ------------------------------------------------
(1)  727/ 60005C8 :                     
(1)  728/ 60005C8 :                     s_irq_vres:
(1)  729/ 60005C8 : D017                		mov.l	#_sysreg,r0
(1)  730/ 60005CA : 401E                		ldc	r0,gbr
(1)  731/ 60005CC : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  732/ 60005CE : 0009                		nop
(1)  733/ 60005D0 : 0009                		nop
(1)  734/ 60005D2 : 0009                		nop
(1)  735/ 60005D4 : 0009                		nop
(1)  736/ 60005D6 : 9034                		mov	#$F0,r0
(1)  737/ 60005D8 : 400E                		ldc	r0,sr
(1)  738/ 60005DA : C406                		mov.b	@(dreqctl,gbr),r0
(1)  739/ 60005DC : C801                		tst	#1,r0
(1)  740/ 60005DE : 8B18                		bf	.mars_reset
(1)  741/ 60005E0 :                     .md_reset:
(1)  742/ 60005E0 : D112                		mov.l	#"68UP",r1		; wait for the 68k to show up
(1)  743/ 60005E2 : C60B                		mov.l	@(comm12,gbr),r0
(1)  744/ 60005E4 : 3100                		cmp/eq	r0,r1
(1)  745/ 60005E6 : 8BFB                		bf	.md_reset
(1)  746/ 60005E8 : D011                		mov.l	#"S_OK",r0		; tell the others slave is ready
(1)  747/ 60005EA : C209                		mov.l	r0,@(comm4,gbr)
(1)  748/ 60005EC :                     .sh_wait:
(1)  749/ 60005EC : D111                		mov.l	#"M_OK",r1		; wait for the slave to show up
(1)  750/ 60005EE : C608                		mov.l	@(comm0,gbr),r0
(1)  751/ 60005F0 : 3100                		cmp/eq	r0,r1
(1)  752/ 60005F2 : 8BFB                		bf	.sh_wait
(1)  753/ 60005F4 : DF10                		mov.l	#CS3|$3F000-8,r15
(1)  754/ 60005F6 : D011                		mov.l	#SH2_S_HotStart,r0
(1)  755/ 60005F8 : 2F02                		mov.l	r0,@r15
(1)  756/ 60005FA : 9022                		mov.w	#$F0,r0
(1)  757/ 60005FC : 1F01                		mov.l	r0,@(4,r15)
(1)  758/ 60005FE : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  759/ 6000600 : E000                		mov.l	#0,r0
(1)  760/ 6000602 : 2102                		mov.l	r0,@r1			; DMA off
(1)  761/ 6000604 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  762/ 6000606 : E000                		mov.l	#0,r0
(1)  763/ 6000608 : 2102                		mov.l	r0,@r1
(1)  764/ 600060A : 911B                		mov.l	#%0100010011100000,r1
(1)  765/ 600060C : 2102                		mov.l	r0,@r1			; Channel control
(1)  766/ 600060E : 002B                		rte
(1)  767/ 6000610 : 0009                		nop
(1)  768/ 6000612 :                     .mars_reset:
(1)  769/ 6000612 : 9115                		mov	#_FRT,r1
(1)  770/ 6000614 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  771/ 6000616 : CB01                		or	#$01,r0
(1)  772/ 6000618 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  773/ 600061A :                     .vresloop:
(1)  774/ 600061A : AFFE                		bra	.vresloop
(1)  775/ 600061C : 0009                		nop
(1)  776/ 600061E :                     		align 4
(1)  777/ 6000620 : 2000 4018 2000 4016 		ltorg			; Save Slave IRQ literals
                    2000 4000 3638 5550 
                    535F 4F4B 4D5F 4F4B 
                    0603 EFF8 0600 1144 
                    FE10 00F0 44E0      
(1)  778/ 6000646 :                     
(1)  779/ 6000646 :                     ; ====================================================================
(1)  780/ 6000646 :                     ; ----------------------------------------------------------------
(1)  781/ 6000646 :                     ; MARS System features
(1)  782/ 6000646 :                     ; ----------------------------------------------------------------
(1)  783/ 6000646 :                     
(1)  784/ 6000646 :                     		include "system/mars/video.asm"
(2)    1/ 6000646 :                     ; ====================================================================
(2)    2/ 6000646 :                     ; ----------------------------------------------------------------
(2)    3/ 6000646 :                     ; MARS Video
(2)    4/ 6000646 :                     ; ----------------------------------------------------------------
(2)    5/ 6000646 :                     
(2)    6/ 6000646 :                     ; ----------------------------------------
(2)    7/ 6000646 :                     ; Settings
(2)    8/ 6000646 :                     ; ----------------------------------------
(2)    9/ 6000646 :                     
(2)   10/ 6000646 : =$3B6               MAX_FACES	equ	950		; Maximum polygon faces (models,sprites) to store on buffer
(2)   11/ 6000646 : =$436               MAX_SVDP_PZ	equ	950+128		; Pieces list: both read and write, increase the value if needed
(2)   12/ 6000646 : =$18                MAX_MODELS	equ	24		; Note: First 9 models are reserved for layout map
(2)   13/ 6000646 : =$FFFFFFFFFF..      MAX_ZDIST	equ	-$2400		; Max drawing distance (-Z max)
(2)   14/ 6000646 : =$40                LAY_WIDTH	equ	$20*2		; Layout data width * 2
(2)   15/ 6000646 :                     
(2)   16/ 6000646 :                     ; ----------------------------------------
(2)   17/ 6000646 :                     ; Variables
(2)   18/ 6000646 :                     ; ----------------------------------------
(2)   19/ 6000646 :                     
(2)   20/ 6000646 :                     ; 3D drawing area, affects 3D positions too.
(2)   21/ 6000646 : =$140               SCREEN_WIDTH	equ	320
(2)   22/ 6000646 : =$E0                SCREEN_HEIGHT	equ	224
(2)   23/ 6000646 :                     
(2)   24/ 6000646 :                     ; MSB
(2)   25/ 6000646 : =$80                PLGN_TEXURE	equ	%10000000
(2)   26/ 6000646 : =$40                PLGN_TRI	equ	%01000000
(2)   27/ 6000646 : =$20                PLGN_SPRITE	equ	%00100000	; TODO: leftover.
(2)   28/ 6000646 :                     
(2)   29/ 6000646 :                     ; ----------------------------------------
(2)   30/ 6000646 :                     ; Structs
(2)   31/ 6000646 :                     ; ----------------------------------------
(2)   32/ 6000646 :                     
(2)   33/ 6000646 :                     ; model objects
(2)   34/ 6000646 : (MACRO)             		struct 0
(2)   34/ 6000646 : =$6000646           GLBL_LASTPC     set *
(2)   34/  10C606 :                                     dephase
(2)   34/  10C606 : =$10C606            GLBL_LASTORG    set *
(2)   34/       0 :                                     phase 0
(2)   35/       0 :                     mdl_data	ds.l 1			; Model data pointer, if zero: no model
(2)   36/       4 :                     mdl_option	ds.l 1			; Model options: pixelvalue add
(2)   37/       8 :                     mdl_x_pos	ds.l 1			; X position $000000.00
(2)   38/       C :                     mdl_y_pos	ds.l 1			; Y position $000000.00
(2)   39/      10 :                     mdl_z_pos	ds.l 1			; Z position $000000.00
(2)   40/      14 :                     mdl_x_rot	ds.l 1			; X rotation $000000.00
(2)   41/      18 :                     mdl_y_rot	ds.l 1			; Y rotation $000000.00
(2)   42/      1C :                     mdl_z_rot	ds.l 1			; Z rotation $000000.00
(2)   43/      20 :                     mdl_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   44/      24 :                     mdl_animframe	ds.l 1			; Current frame in animation
(2)   45/      28 :                     mdl_animtimer	ds.l 1			; Animation timer
(2)   46/      2C :                     mdl_animspd	ds.l 1			; Animation USER speed setting
(2)   47/      30 :                     sizeof_mdlobj	ds.l 0
(2)   48/      32 : (MACRO)             		finish
(2)   48/       0 :                                     !org GLBL_LASTORG
(2)   48/ 6000646 :                                     phase GLBL_LASTPC
(2)   49/ 6000646 :                     		
(2)   50/ 6000646 :                     ; field view camera
(2)   51/ 6000646 : (MACRO)             		struct 0
(2)   51/ 6000646 : =$6000646           GLBL_LASTPC     set *
(2)   51/  10C606 :                                     dephase
(2)   51/  10C606 : =$10C606            GLBL_LASTORG    set *
(2)   51/       0 :                                     phase 0
(2)   52/       0 :                     cam_x_pos	ds.l 1			; X position $000000.00
(2)   53/       4 :                     cam_y_pos	ds.l 1			; Y position $000000.00
(2)   54/       8 :                     cam_z_pos	ds.l 1			; Z position $000000.00
(2)   55/       C :                     cam_x_rot	ds.l 1			; X rotation $000000.00
(2)   56/      10 :                     cam_y_rot	ds.l 1			; Y rotation $000000.00
(2)   57/      14 :                     cam_z_rot	ds.l 1			; Z rotation $000000.00
(2)   58/      18 :                     cam_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   59/      1C :                     cam_animframe	ds.l 1			; Current frame in animation
(2)   60/      20 :                     cam_animtimer	ds.l 1			; Animation timer
(2)   61/      24 :                     cam_animspd	ds.l 1			; Animation speed
(2)   62/      28 :                     sizeof_camera	ds.l 0
(2)   63/      2A : (MACRO)             		finish
(2)   63/       0 :                                     !org GLBL_LASTORG
(2)   63/ 6000646 :                                     phase GLBL_LASTPC
(2)   64/ 6000646 :                     		
(2)   65/ 6000646 : (MACRO)             		struct 0
(2)   65/ 6000646 : =$6000646           GLBL_LASTPC     set *
(2)   65/  10C606 :                                     dephase
(2)   65/  10C606 : =$10C606            GLBL_LASTORG    set *
(2)   65/       0 :                                     phase 0
(2)   66/       0 :                     mdllay_data	ds.l 1			; Model layout data, zero: Don't use layout
(2)   67/       4 :                     mdllay_x	ds.l 1			; X position
(2)   68/       8 :                     mdllay_y	ds.l 1			; Y position
(2)   69/       C :                     mdllay_z	ds.l 1			; Z position
(2)   70/      10 :                     mdllay_x_last	ds.l 1			; LAST saved X position
(2)   71/      14 :                     mdllay_y_last	ds.l 1			; LAST saved Y position
(2)   72/      18 :                     mdllay_z_last	ds.l 1			; LAST saved Z position
(2)   73/      1C :                     mdllay_xr_last	ds.l 1			; LAST saved X rotation
(2)   74/      20 :                     sizeof_layout	ds.l 0
(2)   75/      22 : (MACRO)             		finish
(2)   75/       0 :                                     !org GLBL_LASTORG
(2)   75/ 6000646 :                                     phase GLBL_LASTPC
(2)   76/ 6000646 :                     
(2)   77/ 6000646 : (MACRO)             		struct 0
(2)   77/ 6000646 : =$6000646           GLBL_LASTPC     set *
(2)   77/  10C606 :                                     dephase
(2)   77/  10C606 : =$10C606            GLBL_LASTORG    set *
(2)   77/       0 :                                     phase 0
(2)   78/       0 :                     plypz_ypos	ds.l 1			; Ytop | Ybottom
(2)   79/       4 :                     plypz_xl	ds.l 1
(2)   80/       8 :                     plypz_xl_dx	ds.l 1
(2)   81/       C :                     plypz_xr	ds.l 1
(2)   82/      10 :                     plypz_xr_dx	ds.l 1
(2)   83/      14 :                     plypz_src_xl	ds.l 1
(2)   84/      18 :                     plypz_src_xl_dx	ds.l 1
(2)   85/      1C :                     plypz_src_yl	ds.l 1
(2)   86/      20 :                     plypz_src_yl_dx	ds.l 1
(2)   87/      24 :                     plypz_src_xr	ds.l 1
(2)   88/      28 :                     plypz_src_xr_dx	ds.l 1
(2)   89/      2C :                     plypz_src_yr	ds.l 1
(2)   90/      30 :                     plypz_src_yr_dx	ds.l 1
(2)   91/      34 :                     plypz_mtrl	ds.l 1
(2)   92/      38 :                     plypz_type	ds.l 1			; Type | Option
(2)   93/      3C :                     sizeof_plypz	ds.l 0
(2)   94/      3E : (MACRO)             		finish
(2)   94/       0 :                                     !org GLBL_LASTORG
(2)   94/ 6000646 :                                     phase GLBL_LASTPC
(2)   95/ 6000646 :                     
(2)   96/ 6000646 : (MACRO)             		struct 0
(2)   96/ 6000646 : =$6000646           GLBL_LASTPC     set *
(2)   96/  10C606 :                                     dephase
(2)   96/  10C606 : =$10C606            GLBL_LASTORG    set *
(2)   96/       0 :                                     phase 0
(2)   97/       0 :                     polygn_type	ds.l 1		; %MSTw wwww xxxx aaaa | Type bits and Material option (Width or PalIncr)
(2)   98/       4 :                     polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)   99/       8 :                     ; polygn_zpos	ds.l 1
(2)  100/       8 :                     polygn_points	ds.l 4*2	; X/Y positions
(2)  101/      28 :                     polygn_srcpnts	ds.w 4*2	; X/Y texture points (16-bit), ignored on solidcolor
(2)  102/      38 :                     sizeof_polygn	ds.l 0
(2)  103/      3A : (MACRO)             		finish
(2)  103/       0 :                                     !org GLBL_LASTORG
(2)  103/ 6000646 :                                     phase GLBL_LASTPC
(2)  104/ 6000646 :                     
(2)  105/ 6000646 :                     ; ====================================================================
(2)  106/ 6000646 :                     ; ----------------------------------------------------------------
(2)  107/ 6000646 :                     ; Init MARS Video
(2)  108/ 6000646 :                     ; ----------------------------------------------------------------
(2)  109/ 6000646 :                     
(2)  110/ 6000646 :                     MarsVideo_Init:
(2)  111/ 6000646 : 4F22                		sts	pr,@-r15
(2)  112/ 6000648 : D42C                		mov	#_sysreg,r4
(2)  113/ 600064A : 9061                		mov 	#FM,r0			; Set SVDP permission to SH2
(2)  114/ 600064C : 8040                  		mov.b	r0,@(adapter,r4)
(2)  115/ 600064E : D42C                		mov 	#_vdpreg,r4
(2)  116/ 6000650 : B008                		bsr	.this_fb		; Init line tables for both framebuffers
(2)  117/ 6000652 : 0009                		nop
(2)  118/ 6000654 : B006                		bsr	.this_fb
(2)  119/ 6000656 : 0009                		nop
(2)  120/ 6000658 : E000                		mov	#0,r0			; Start at blank
(2)  121/ 600065A : 8041                		mov.b	r0,@(bitmapmd,r4)
(2)  122/ 600065C : 4F26                		lds	@r15+,pr
(2)  123/ 600065E : 000B                		rts
(2)  124/ 6000660 : 0009                		nop
(2)  125/ 6000662 :                     		align 4
(2)  126/ 6000664 :                     
(2)  127/ 6000664 :                     ; ------------------------------------------------
(2)  128/ 6000664 :                     ; Init current framebuffer
(2)  129/ 6000664 :                     ; ------------------------------------------------
(2)  130/ 6000664 :                     
(2)  131/ 6000664 :                     .this_fb:
(2)  132/ 6000664 : D127                 		mov	#_framebuffer,r1
(2)  133/ 6000666 : 9054                		mov	#$200/2,r0	; START line data
(2)  134/ 6000668 : 9254                		mov	#240,r2		; Vertical lines to set
(2)  135/ 600066A : 6303                		mov	r0,r3		; Increment by (copy from r0)
(2)  136/ 600066C : 2101                .loop:		mov.w	r0,@r1
(2)  137/ 600066E : 7102                		add	#2,r1
(2)  138/ 6000670 : 303C                		add	r3,r0
(2)  139/ 6000672 : 4210                		dt	r2
(2)  140/ 6000674 : 8BFA                		bf	.loop
(2)  141/ 6000676 : 8545                .fb_wait1:	mov.w   @($A,r4),r0	; Swap for next table
(2)  142/ 6000678 : C802                		tst     #2,r0
(2)  143/ 600067A : 8BFC                		bf      .fb_wait1
(2)  144/ 600067C : 8545                		mov.w   @($A,r4), r0
(2)  145/ 600067E : CA01                		xor     #1,r0
(2)  146/ 6000680 : 8145                		mov.w   r0,@($A,r4)
(2)  147/ 6000682 : C901                		and     #1,r0
(2)  148/ 6000684 : 6103                		mov     r0,r1
(2)  149/ 6000686 :                     .wait_result:
(2)  150/ 6000686 : 8545                		mov.w   @($A,r4),r0
(2)  151/ 6000688 : C901                		and     #1,r0
(2)  152/ 600068A : 3100                		cmp/eq  r0,r1
(2)  153/ 600068C : 8BFB                		bf      .wait_result
(2)  154/ 600068E : 000B                		rts
(2)  155/ 6000690 : 0009                		nop
(2)  156/ 6000692 :                     		align 4
(2)  157/ 6000694 :                     		
(2)  158/ 6000694 :                     ; ------------------------------------
(2)  159/ 6000694 :                     ; MarsVideo_ClearFrame
(2)  160/ 6000694 :                     ;
(2)  161/ 6000694 :                     ; Clear the current framebuffer
(2)  162/ 6000694 :                     ; ------------------------------------
(2)  163/ 6000694 :                     
(2)  164/ 6000694 :                     MarsVideo_ClearFrame:
(2)  165/ 6000694 : D11A                		mov	#_vdpreg,r1
(2)  166/ 6000696 : 8515                .wait2		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  167/ 6000698 : C902                		and	#%10,r0
(2)  168/ 600069A : 8802                		cmp/eq	#2,r0
(2)  169/ 600069C : 89FB                		bt	.wait2
(2)  170/ 600069E :                     
(2)  171/ 600069E : 923A                		mov	#255,r2			; r2 - lenght: 256 words per pass
(2)  172/ 60006A0 : 9337                		mov	#$200/2,r3		; r3 - Start address / 2
(2)  173/ 60006A2 : E400                		mov	#0,r4			; r4 - data (zero)
(2)  174/ 60006A4 : 9535                		mov	#256,r5			; Increment address by 256
(2)  175/ 60006A6 : 9635                		mov	#((512*240)/256)/2,r6	; 140 passes
(2)  176/ 60006A8 :                     .loop
(2)  177/ 60006A8 : 6023                		mov	r2,r0
(2)  178/ 60006AA : 8112                		mov.w	r0,@(4,r1)		; Set length
(2)  179/ 60006AC : 6033                		mov	r3,r0
(2)  180/ 60006AE : 8113                		mov.w	r0,@(6,r1)		; Set address
(2)  181/ 60006B0 : 6043                		mov	r4,r0
(2)  182/ 60006B2 : 8114                		mov.w	r0,@(8,r1)		; Set data
(2)  183/ 60006B4 : 335C                		add	r5,r3
(2)  184/ 60006B6 :                     
(2)  185/ 60006B6 : 8515                .wait		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  186/ 60006B8 : C902                		and	#%10,r0
(2)  187/ 60006BA : 8802                		cmp/eq	#2,r0
(2)  188/ 60006BC : 89FB                		bt	.wait
(2)  189/ 60006BE : 4610                		dt	r6
(2)  190/ 60006C0 : 8BF2                		bf	.loop
(2)  191/ 60006C2 : 000B                		rts
(2)  192/ 60006C4 : 0009                		nop
(2)  193/ 60006C6 :                     		align 4
(2)  194/ 60006C8 :                     
(2)  195/ 60006C8 :                     ; ------------------------------------
(2)  196/ 60006C8 :                     ; MarsVideo_FrameSwap
(2)  197/ 60006C8 :                     ; ------------------------------------
(2)  198/ 60006C8 :                     
(2)  199/ 60006C8 :                     ; MarsVideo_FrameSwap:
(2)  200/ 60006C8 :                     ; 		mov.l	#_vdpreg,r2
(2)  201/ 60006C8 :                     ; .wait_fb:
(2)  202/ 60006C8 :                     ; 		mov.w	@($A,r2),r0
(2)  203/ 60006C8 :                     ; 		tst	#2,r0
(2)  204/ 60006C8 :                     ; 		bf	.wait_fb
(2)  205/ 60006C8 :                     ; 		mov.w	@($A,r2),r0
(2)  206/ 60006C8 :                     ; 		xor	#1,r0
(2)  207/ 60006C8 :                     ; 		mov.w	r0,@($A,r2)
(2)  208/ 60006C8 :                     ; 		and	#1,r0
(2)  209/ 60006C8 :                     ; 		mov	r0,r1
(2)  210/ 60006C8 :                     ; .wait_result:
(2)  211/ 60006C8 :                     ; 		mov.w	@($A,r2),r0
(2)  212/ 60006C8 :                     ; 		and	#1,r0
(2)  213/ 60006C8 :                     ; 		cmp/eq	r0,r1
(2)  214/ 60006C8 :                     ; 		bf	.wait_result
(2)  215/ 60006C8 :                     ; 		rts
(2)  216/ 60006C8 :                     ; 		nop
(2)  217/ 60006C8 :                     ; 		align 4
(2)  218/ 60006C8 :                     
(2)  219/ 60006C8 :                     ; ------------------------------------
(2)  220/ 60006C8 :                     ; MarsVdp_LoadPal
(2)  221/ 60006C8 :                     ; 
(2)  222/ 60006C8 :                     ; Load palette to RAM
(2)  223/ 60006C8 :                     ; then the Palette will be transfered
(2)  224/ 60006C8 :                     ; on VBlank
(2)  225/ 60006C8 :                     ; 
(2)  226/ 60006C8 :                     ; Input:
(2)  227/ 60006C8 :                     ; r1 - Palette data
(2)  228/ 60006C8 :                     ; r2 - Start index
(2)  229/ 60006C8 :                     ; r3 - Number of colors
(2)  230/ 60006C8 :                     ; r4 - OR value ($0000 or $8000)
(2)  231/ 60006C8 :                     ;
(2)  232/ 60006C8 :                     ; Uses:
(2)  233/ 60006C8 :                     ; r0,r4-r6
(2)  234/ 60006C8 :                     ; ------------------------------------
(2)  235/ 60006C8 :                     
(2)  236/ 60006C8 :                     MarsVideo_LoadPal:
(2)  237/ 60006C8 : C515                		mov.w	@(marsGbl_PalDmaMidWr,gbr),r0
(2)  238/ 60006CA : 8801                		cmp/eq	#1,r0
(2)  239/ 60006CC : 89FC                		bt	MarsVideo_LoadPal
(2)  240/ 60006CE : 6513                		mov 	r1,r5
(2)  241/ 60006D0 : D60D                		mov 	#RAM_Mars_Palette,r6
(2)  242/ 60006D2 : 6023                		mov 	r2,r0
(2)  243/ 60006D4 : 4000                		shll	r0
(2)  244/ 60006D6 : 360C                		add 	r0,r6
(2)  245/ 60006D8 : 6033                		mov 	r3,r0
(2)  246/ 60006DA :                     ; 		and	#$FF,r0
(2)  247/ 60006DA :                     ; 		cmp/pl	r0
(2)  248/ 60006DA :                     ; 		bf	.badlen
(2)  249/ 60006DA : 971A                		mov	#256,r7
(2)  250/ 60006DC : 3077                		cmp/gt	r7,r0
(2)  251/ 60006DE : 8900                		bt	.loop
(2)  252/ 60006E0 : 6703                		mov	r0,r7
(2)  253/ 60006E2 :                     .loop:
(2)  254/ 60006E2 : 6055                		mov.w	@r5+,r0
(2)  255/ 60006E4 : 204B                		or	r4,r0
(2)  256/ 60006E6 : 2601                		mov.w	r0,@r6
(2)  257/ 60006E8 : 4710                		dt	r7
(2)  258/ 60006EA : 8FFA                		bf/s	.loop
(2)  259/ 60006EC : 7602                		add 	#2,r6
(2)  260/ 60006EE :                     .badlen:
(2)  261/ 60006EE : D107                		mov	#RAM_Mars_Palette,r1	; lazy fix
(2)  262/ 60006F0 : 6011                		mov.w	@r1,r0			; for background
(2)  263/ 60006F2 : 9211                		mov	#$7FFF,r2
(2)  264/ 60006F4 : 2029                		and	r2,r0
(2)  265/ 60006F6 : 2101                		mov.w	r0,@r1
(2)  266/ 60006F8 : 000B                		rts
(2)  267/ 60006FA : 0009                		nop
(2)  268/ 60006FC :                     		align 4
(2)  269/ 60006FC : 2000 4000 2000 4100 		ltorg
                    2400 0000 0603 4CD8 
                    0603 4CD8 0080 0100 
                    00F0 00FF 7FFF      
(2)  270/ 600071A :                     
(2)  271/ 600071A :                     ; ------------------------------------------------
(2)  272/ 600071A :                     ; MarsVideo_SetWatchdog
(2)  273/ 600071A :                     ; 
(2)  274/ 600071A :                     ; Initialize watchdog interrupt with
(2)  275/ 600071A :                     ; default settings
(2)  276/ 600071A :                     ; ------------------------------------------------
(2)  277/ 600071A :                     
(2)  278/ 600071A :                     MarsVideo_SetWatchdog:
(2)  279/ 600071A : D011                		mov	#RAM_Mars_VdpDrwList,r0		; Reset the piece-drawing pointer
(2)  280/ 600071C : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)	; on both READ and WRITE pointers
(2)  281/ 600071E : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  282/ 6000720 : E000                		mov	#0,r0				; Reset polygon pieces counter
(2)  283/ 6000722 : C10C                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  284/ 6000724 : D10F                		mov	#Cach_ClrLines,r1		; Line counter for the framebuffer-clear routine
(2)  285/ 6000726 : 9023                		mov	#224,r0
(2)  286/ 6000728 : 2102                		mov	r0,@r1
(2)  287/ 600072A : E008                		mov	#8,r0				; Set starting watchdog task to $08 (Clear framebuffer)
(2)  288/ 600072C : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  289/ 600072E : D00E                		mov	#TESTMARS_BG,r0
(2)  290/ 6000730 : C204                		mov	r0,@(marsGbl_Backdata,gbr)
(2)  291/ 6000732 :                     
(2)  292/ 6000732 :                     	; CRITICAL PART
(2)  293/ 6000732 : D10E                		mov	#_vdpreg,r1
(2)  294/ 6000734 : C424                		mov.b	@(marsGbl_CurrFb,gbr),r0
(2)  295/ 6000736 : 6203                		mov	r0,r2
(2)  296/ 6000738 : 4F03                		stc	sr,@-r15			; Save interrupts
(2)  297/ 600073A : 901A                		mov	#$F0,r0
(2)  298/ 600073C : 400E                		ldc	r0,sr
(2)  299/ 600073E : 841B                .wait_frmswp:	mov.b	@(framectl,r1),r0
(2)  300/ 6000740 : 3200                		cmp/eq	r0,r2
(2)  301/ 6000742 : 8BFC                		bf	.wait_frmswp
(2)  302/ 6000744 : 8515                .wait_fb:	mov.w	@($A,r1),r0			; Wait until framebuffer is unlocked
(2)  303/ 6000746 : C802                		tst	#2,r0
(2)  304/ 6000748 : 8BFC                		bf	.wait_fb
(2)  305/ 600074A : 9013                		mov.w	#$100,r0			; Pre-start SVDP fill line at address $A1
(2)  306/ 600074C : 8113                		mov.w	r0,@(6,r1)			; $5F gets added on watchdog: $A1+$5F=$100
(2)  307/ 600074E : 4F07                		ldc	@r15+,sr			; Restore interrupts
(2)  308/ 6000750 :                     
(2)  309/ 6000750 : 9111                		mov	#$FFFFFE80,r1
(2)  310/ 6000752 : 9011                		mov.w	#$5AFF,r0			; Watchdog timer
(2)  311/ 6000754 : 2101                		mov.w	r0,@r1
(2)  312/ 6000756 : 9010                		mov.w	#$A538,r0			; Enable this watchdog
(2)  313/ 6000758 : 2101                		mov.w	r0,@r1
(2)  314/ 600075A : 000B                		rts
(2)  315/ 600075C : 0009                		nop
(2)  316/ 600075E :                     		align 4
(2)  317/ 6000760 : 0602 10D0 C000 0750 		ltorg
                    0217 0EF4 2000 4100 
                    00E0 00F0 0100 FE80 
                    5AFF A538           
(2)  318/ 600077C :                     
(2)  319/ 600077C :                     ; ====================================================================
(2)  320/ 600077C :                     ; ----------------------------------------------------------------
(2)  321/ 600077C :                     ; 3D MODEL RENDERER
(2)  322/ 600077C :                     ; ----------------------------------------------------------------
(2)  323/ 600077C :                     
(2)  324/ 600077C :                     ; ------------------------------------------------
(2)  325/ 600077C :                     ; Object layout routines
(2)  326/ 600077C :                     ; ------------------------------------------------
(2)  327/ 600077C :                     
(2)  328/ 600077C :                     ; ----------------------------------------
(2)  329/ 600077C :                     ; Read layout
(2)  330/ 600077C :                     ; ----------------------------------------
(2)  331/ 600077C :                     
(2)  332/ 600077C :                     MarsLay_Read:
(2)  333/ 600077C : 4F22                		sts	pr,@-r15
(2)  334/ 600077E : DE1B                		mov	#RAM_Mars_ObjLayout,r14
(2)  335/ 6000780 : DD1B                		mov	#RAM_Mars_ObjCamera,r13
(2)  336/ 6000782 : DC1C                		mov	#RAM_Mars_Objects,r12
(2)  337/ 6000784 : 50E0                		mov	@(mdllay_data,r14),r0
(2)  338/ 6000786 : 4015                		cmp/pl	r0
(2)  339/ 6000788 : 8B2D                		bf	.no_lay
(2)  340/ 600078A : 6B03                		mov	r0,r11
(2)  341/ 600078C :                     
(2)  342/ 600078C : EA00                		mov	#0,r10				; r10 - Update counter
(2)  343/ 600078E : D91A                		mov	#-$100000,r9			;  r9 - MAX Z block size
(2)  344/ 6000790 : D819                		mov	#-$100000,r8			;  r8 - MAX Y block size	
(2)  345/ 6000792 : D719                		mov	#-$100000,r7			;  r7 - MAX X block size
(2)  346/ 6000794 : 9632                		mov	#-$8000,r6			;  r6 - X Rotation update point
(2)  347/ 6000796 :                     
(2)  348/ 6000796 : 55E6                		mov	@(mdllay_z_last,r14),r5
(2)  349/ 6000798 : 50D2                		mov	@(cam_z_pos,r13),r0
(2)  350/ 600079A : 2099                		and	r9,r0
(2)  351/ 600079C : 2599                		and	r9,r5
(2)  352/ 600079E : 3500                		cmp/eq	r0,r5
(2)  353/ 60007A0 : 8902                		bt	.no_z_upd
(2)  354/ 60007A2 :                     ; 		add	r9,r5
(2)  355/ 60007A2 :                     ; 		neg	r5,r4
(2)  356/ 60007A2 :                     ; 		cmp/gt	r5,r0
(2)  357/ 60007A2 :                     ; 		bf	.set_z_upd
(2)  358/ 60007A2 :                     ; 		cmp/ge	r4,r0
(2)  359/ 60007A2 :                     ; 		bf	.no_z_upd
(2)  360/ 60007A2 :                     ; .set_z_upd:
(2)  361/ 60007A2 : 2099                		and	r9,r0
(2)  362/ 60007A4 : 1E06                		mov	r0,@(mdllay_z_last,r14)
(2)  363/ 60007A6 : 7A01                		add	#1,r10
(2)  364/ 60007A8 :                     .no_z_upd:
(2)  365/ 60007A8 :                     
(2)  366/ 60007A8 : 55E5                		mov	@(mdllay_y_last,r14),r5
(2)  367/ 60007AA : 50D1                		mov	@(cam_y_pos,r13),r0
(2)  368/ 60007AC : 2089                		and	r8,r0
(2)  369/ 60007AE : 2589                		and	r8,r5
(2)  370/ 60007B0 : 3500                		cmp/eq	r0,r5
(2)  371/ 60007B2 : 8902                		bt	.no_y_upd
(2)  372/ 60007B4 :                     ; 		add	r8,r5
(2)  373/ 60007B4 :                     ; 		neg	r5,r4
(2)  374/ 60007B4 :                     ; 		cmp/gt	r5,r0
(2)  375/ 60007B4 :                     ; 		bf	.set_y_upd
(2)  376/ 60007B4 :                     ; 		cmp/ge	r4,r0
(2)  377/ 60007B4 :                     ; 		bf	.no_y_upd
(2)  378/ 60007B4 :                     ; .set_y_upd:
(2)  379/ 60007B4 : 2089                		and	r8,r0
(2)  380/ 60007B6 : 1E05                		mov	r0,@(mdllay_y_last,r14)
(2)  381/ 60007B8 : 7A01                		add	#1,r10
(2)  382/ 60007BA :                     .no_y_upd:
(2)  383/ 60007BA :                     
(2)  384/ 60007BA : 55E4                		mov	@(mdllay_x_last,r14),r5
(2)  385/ 60007BC : 50D0                		mov	@(cam_x_pos,r13),r0
(2)  386/ 60007BE : 2079                		and	r7,r0
(2)  387/ 60007C0 : 2579                		and	r7,r5
(2)  388/ 60007C2 : 3500                		cmp/eq	r0,r5
(2)  389/ 60007C4 : 8902                		bt	.no_x_upd
(2)  390/ 60007C6 :                     ; 		add	r7,r5
(2)  391/ 60007C6 :                     ; 		neg	r5,r4
(2)  392/ 60007C6 :                     ; 		cmp/gt	r5,r0
(2)  393/ 60007C6 :                     ; 		bf	.set_x_upd
(2)  394/ 60007C6 :                     ; 		cmp/ge	r4,r0
(2)  395/ 60007C6 :                     ; 		bf	.no_x_upd
(2)  396/ 60007C6 :                     ; .set_x_upd:
(2)  397/ 60007C6 : 2079                		and	r7,r0
(2)  398/ 60007C8 : 1E04                		mov	r0,@(mdllay_x_last,r14)
(2)  399/ 60007CA : 7A01                		add	#1,r10
(2)  400/ 60007CC :                     .no_x_upd:
(2)  401/ 60007CC :                     
(2)  402/ 60007CC : 55E7                		mov	@(mdllay_xr_last,r14),r5
(2)  403/ 60007CE : 50D3                		mov	@(cam_x_rot,r13),r0
(2)  404/ 60007D0 : 2069                		and	r6,r0
(2)  405/ 60007D2 : 2569                		and	r6,r5
(2)  406/ 60007D4 : 3500                		cmp/eq	r0,r5
(2)  407/ 60007D6 : 8902                		bt	.no_xr_upd
(2)  408/ 60007D8 :                     ; 		add	r6,r5
(2)  409/ 60007D8 :                     ; 		neg	r5,r4
(2)  410/ 60007D8 :                     ; 		cmp/gt	r5,r0
(2)  411/ 60007D8 :                     ; 		bf	.set_xr_upd
(2)  412/ 60007D8 :                     ; 		cmp/ge	r4,r0
(2)  413/ 60007D8 :                     ; 		bf	.no_xr_upd
(2)  414/ 60007D8 :                     ; .set_xr_upd:
(2)  415/ 60007D8 : 2069                		and	r6,r0
(2)  416/ 60007DA : 1E07                		mov	r0,@(mdllay_xr_last,r14)
(2)  417/ 60007DC : 7A01                		add	#1,r10
(2)  418/ 60007DE :                     .no_xr_upd:
(2)  419/ 60007DE :                     
(2)  420/ 60007DE : 4A15                		cmp/pl	r10
(2)  421/ 60007E0 : 8B01                		bf	.no_lay
(2)  422/ 60007E2 : B019                		bsr	MarsLay_Draw
(2)  423/ 60007E4 : 0009                		nop
(2)  424/ 60007E6 :                     .no_lay:
(2)  425/ 60007E6 : 4F26                		lds	@r15+,pr
(2)  426/ 60007E8 : 000B                		rts
(2)  427/ 60007EA : 0009                		nop
(2)  428/ 60007EC :                     		align 4
(2)  429/ 60007EC : 0600 6C90 0600 6C68 		ltorg
                    0600 6CB0 FFF0 0000 
                    8000                
(2)  430/ 60007FE :                     
(2)  431/ 60007FE :                     ; r1 - layout data pointer
(2)  432/ 60007FE :                     MarsLay_Make:
(2)  433/ 60007FE : DEA6                		mov	#RAM_Mars_ObjLayout,r14
(2)  434/ 6000800 : DDA6                		mov	#RAM_Mars_ObjCamera,r13
(2)  435/ 6000802 : 200A                		xor	r0,r0
(2)  436/ 6000804 : 1E10                		mov	r1,@(mdllay_data,r14)
(2)  437/ 6000806 : 1E04                		mov	r0,@(mdllay_x_last,r14)
(2)  438/ 6000808 : 1E05                		mov	r0,@(mdllay_y_last,r14)
(2)  439/ 600080A : 1E06                		mov	r0,@(mdllay_z_last,r14)
(2)  440/ 600080C : 1E01                		mov	r0,@(mdllay_x,r14)
(2)  441/ 600080E : 1E02                		mov	r0,@(mdllay_y,r14)
(2)  442/ 6000810 : 1E03                		mov	r0,@(mdllay_z,r14)
(2)  443/ 6000812 : 000B                		rts
(2)  444/ 6000814 : 0009                		nop
(2)  445/ 6000816 :                     		align 4
(2)  446/ 6000818 :                     
(2)  447/ 6000818 :                     MarsLay_Draw:
(2)  448/ 6000818 : DAA1                		mov	#RAM_Mars_Objects,r10
(2)  449/ 600081A : 62A3                		mov	r10,r2
(2)  450/ 600081C : E330                		mov	#sizeof_mdlobj,r3
(2)  451/ 600081E : E000                		mov	#0,r0
(2)  452/ 6000820 : E409                		mov	#9,r4
(2)  453/ 6000822 :                     .clrold:
(2)  454/ 6000822 : 1200                		mov	r0,@(mdl_data,r2)
(2)  455/ 6000824 : 1202                		mov	r0,@(mdl_x_pos,r2)
(2)  456/ 6000826 : 1203                		mov	r0,@(mdl_y_pos,r2)
(2)  457/ 6000828 : 1204                		mov	r0,@(mdl_z_pos,r2)
(2)  458/ 600082A : 1205                		mov	r0,@(mdl_x_rot,r2)
(2)  459/ 600082C : 1206                		mov	r0,@(mdl_y_rot,r2)
(2)  460/ 600082E : 1207                		mov	r0,@(mdl_z_rot,r2)
(2)  461/ 6000830 : 4410                		dt	r4
(2)  462/ 6000832 : 8FF6                		bf/s	.clrold
(2)  463/ 6000834 : 323C                		add	r3,r2
(2)  464/ 6000836 :                     
(2)  465/ 6000836 :                     	; r13 - Layout Ids
(2)  466/ 6000836 :                     	; r12 - Layout model list
(2)  467/ 6000836 : E400                		mov	#0,r4
(2)  468/ 6000838 : 5DE0                		mov	@(mdllay_data,r14),r13
(2)  469/ 600083A : 6CD6                		mov	@r13+,r12
(2)  470/ 600083C : D00D                		mov	.center_val,r0			; list center point
(2)  471/ 600083E : 3D0C                		add	r0,r13
(2)  472/ 6000840 :                     		
(2)  473/ 6000840 :                     	; X/Y add
(2)  474/ 6000840 : 51E4                		mov	@(mdllay_x_last,r14),r1
(2)  475/ 6000842 : 52E6                		mov	@(mdllay_z_last,r14),r2
(2)  476/ 6000844 : E040                		mov	#LAY_WIDTH,r0
(2)  477/ 6000846 : 4129                		shlr16	r1
(2)  478/ 6000848 : 4229                		shlr16	r2
(2)  479/ 600084A : 611F                		exts	r1,r1
(2)  480/ 600084C : 622F                		exts	r2,r2
(2)  481/ 600084E :                     	rept 3
(2)  482/ 600084E :                     		shar	r1
(2)  483/ 600084E :                     		shar	r2
(2)  484/ 600084E :                     	endm
(2)  482/ 600084E : 4121                		shar	r1
(2)  483/ 6000850 : 4221                		shar	r2
(2)  482/ 6000852 : 4121                		shar	r1
(2)  483/ 6000854 : 4221                		shar	r2
(2)  482/ 6000856 : 4121                		shar	r1
(2)  483/ 6000858 : 4221                		shar	r2
(2)  485/ 600085A : 4221                		shar	r2			; extra shift
(2)  486/ 600085C : 220F                		muls	r0,r2
(2)  487/ 600085E : 001A                		sts	macl,r0
(2)  488/ 6000860 : 3D1C                		add	r1,r13			; X add
(2)  489/ 6000862 : 3D08                		sub	r0,r13			; Y add
(2)  490/ 6000864 :                     		
(2)  491/ 6000864 :                     	; Rotation
(2)  492/ 6000864 : 50E7                		mov	@(mdllay_xr_last,r14),r0
(2)  493/ 6000866 : 4029                		shlr16	r0
(2)  494/ 6000868 : C93F                		and	#$3F,r0
(2)  495/ 600086A : 4008                		shll2	r0
(2)  496/ 600086C : D18D                		mov	#.list,r1
(2)  497/ 600086E : 001E                		mov	@(r0,r1),r0
(2)  498/ 6000870 : 402B                		jmp	@r0
(2)  499/ 6000872 : 0009                		nop
(2)  500/ 6000874 :                     		align 4
(2)  501/ 6000874 : 0000 0398           .center_val:	dc.l ($E*LAY_WIDTH)+($C*2)
(2)  502/ 6000878 :                     
(2)  503/ 6000878 :                     .list:
(2)  504/ 6000878 : 0600 09A8           		dc.l .front
(2)  505/ 600087C : 0600 09D0           		dc.l .front_fr
(2)  506/ 6000880 : 0600 09D0           		dc.l .front_fr
(2)  507/ 6000884 : 0600 09D0           		dc.l .front_fr
(2)  508/ 6000888 : 0600 09D0           		dc.l .front_fr
(2)  509/ 600088C : 0600 09D0           		dc.l .front_fr
(2)  510/ 6000890 : 0600 09D0           		dc.l .front_fr
(2)  511/ 6000894 : 0600 09D0           		dc.l .front_fr
(2)  512/ 6000898 : 0600 09D0           		dc.l .front_fr
(2)  513/ 600089C : 0600 09D0           		dc.l .front_fr
(2)  514/ 60008A0 : 0600 09D0           		dc.l .front_fr
(2)  515/ 60008A4 : 0600 09D0           		dc.l .front_fr
(2)  516/ 60008A8 : 0600 09D0           		dc.l .front_fr
(2)  517/ 60008AC : 0600 09D0           		dc.l .front_fr
(2)  518/ 60008B0 : 0600 09D0           		dc.l .front_fr
(2)  519/ 60008B4 : 0600 09D0           		dc.l .front_fr
(2)  520/ 60008B8 :                     		
(2)  521/ 60008B8 : 0600 09D0           		dc.l .front_fr
(2)  522/ 60008BC : 0600 09D0           		dc.l .front_fr
(2)  523/ 60008C0 : 0600 09F8           		dc.l .right_dw
(2)  524/ 60008C4 : 0600 09F8           		dc.l .right_dw
(2)  525/ 60008C8 : 0600 09F8           		dc.l .right_dw
(2)  526/ 60008CC : 0600 09F8           		dc.l .right_dw
(2)  527/ 60008D0 : 0600 09F8           		dc.l .right_dw
(2)  528/ 60008D4 : 0600 09F8           		dc.l .right_dw
(2)  529/ 60008D8 : 0600 09F8           		dc.l .right_dw
(2)  530/ 60008DC : 0600 09F8           		dc.l .right_dw
(2)  531/ 60008E0 : 0600 09F8           		dc.l .right_dw
(2)  532/ 60008E4 : 0600 09F8           		dc.l .right_dw
(2)  533/ 60008E8 : 0600 09F8           		dc.l .right_dw
(2)  534/ 60008EC : 0600 09F8           		dc.l .right_dw
(2)  535/ 60008F0 : 0600 09F8           		dc.l .right_dw
(2)  536/ 60008F4 : 0600 09F8           		dc.l .right_dw
(2)  537/ 60008F8 :                     		
(2)  538/ 60008F8 : 0600 09F8           		dc.l .right_dw
(2)  539/ 60008FC : 0600 09F8           		dc.l .right_dw
(2)  540/ 6000900 : 0600 0A48           		dc.l .down_left
(2)  541/ 6000904 : 0600 0A48           		dc.l .down_left
(2)  542/ 6000908 : 0600 0A48           		dc.l .down_left
(2)  543/ 600090C : 0600 0A48           		dc.l .down_left
(2)  544/ 6000910 : 0600 0A48           		dc.l .down_left
(2)  545/ 6000914 : 0600 0A48           		dc.l .down_left
(2)  546/ 6000918 : 0600 0A48           		dc.l .down_left
(2)  547/ 600091C : 0600 0A48           		dc.l .down_left
(2)  548/ 6000920 : 0600 0A48           		dc.l .down_left
(2)  549/ 6000924 : 0600 0A48           		dc.l .down_left
(2)  550/ 6000928 : 0600 0A48           		dc.l .down_left
(2)  551/ 600092C : 0600 0A48           		dc.l .down_left
(2)  552/ 6000930 : 0600 0A48           		dc.l .down_left
(2)  553/ 6000934 : 0600 0A48           		dc.l .down_left
(2)  554/ 6000938 :                     
(2)  555/ 6000938 : 0600 0A48           		dc.l .down_left
(2)  556/ 600093C : 0600 0A48           		dc.l .down_left
(2)  557/ 6000940 : 0600 0A70           		dc.l .front_lf
(2)  558/ 6000944 : 0600 0A70           		dc.l .front_lf
(2)  559/ 6000948 : 0600 0A70           		dc.l .front_lf
(2)  560/ 600094C : 0600 0A70           		dc.l .front_lf
(2)  561/ 6000950 : 0600 0A70           		dc.l .front_lf
(2)  562/ 6000954 : 0600 0A70           		dc.l .front_lf
(2)  563/ 6000958 : 0600 0A70           		dc.l .front_lf
(2)  564/ 600095C : 0600 0A70           		dc.l .front_lf
(2)  565/ 6000960 : 0600 0A70           		dc.l .front_lf
(2)  566/ 6000964 : 0600 0A70           		dc.l .front_lf
(2)  567/ 6000968 : 0600 0A70           		dc.l .front_lf
(2)  568/ 600096C : 0600 09A8           		dc.l .front
(2)  569/ 6000970 : 0600 09A8           		dc.l .front
(2)  570/ 6000974 : 0600 09A8           		dc.l .front
(2)  571/ 6000978 :                     
(2)  572/ 6000978 :                     ; r5 - numof pieces
(2)  573/ 6000978 :                     ; uses: r6,r7
(2)  574/ 6000978 :                     .do_piece:
(2)  575/ 6000978 : 2F16                		mov	r1,@-r15
(2)  576/ 600097A : 2FD6                		mov	r13,@-r15
(2)  577/ 600097C : D64A                		mov	#$100000,r6
(2)  578/ 600097E :                     .nxt_one:
(2)  579/ 600097E : 244A                		xor	r4,r4
(2)  580/ 6000980 : 60D5                		mov.w	@r13+,r0
(2)  581/ 6000982 : 4015                		cmp/pl 	r0
(2)  582/ 6000984 : 8B04                		bf	.blank_mdl
(2)  583/ 6000986 :                     ; 		mov	r0,r7
(2)  584/ 6000986 :                     ; 		shlr8	r0
(2)  585/ 6000986 :                     ; 		shlr2	r0
(2)  586/ 6000986 :                     ; 		shlr	r0
(2)  587/ 6000986 :                     ; 		and	#%11100,r0
(2)  588/ 6000986 :                     ; 		mov	#.xrotlist,r8
(2)  589/ 6000986 :                     ; 		mov	@(r8,r0),r8
(2)  590/ 6000986 :                     ; 		mov	r7,r0
(2)  591/ 6000986 : 70FF                		add	#-1,r0
(2)  592/ 6000988 : 4008                		shll2	r0
(2)  593/ 600098A :                     ; 		shll	r0
(2)  594/ 600098A :                     ; 		mov	#$1FFF,r7
(2)  595/ 600098A :                     ; 		and	r7,r0
(2)  596/ 600098A : 04CE                		mov	@(r12,r0),r4
(2)  597/ 600098C : D047                		mov	#$40000000,r0	; OR val: set special object mode
(2)  598/ 600098E : 240B                		or	r0,r4
(2)  599/ 6000990 :                     .blank_mdl:
(2)  600/ 6000990 : 1A12                		mov	r1,@(mdl_x_pos,r10)
(2)  601/ 6000992 : 1A23                		mov	r2,@(mdl_y_pos,r10)
(2)  602/ 6000994 : 1A34                		mov	r3,@(mdl_z_pos,r10)
(2)  603/ 6000996 :                     ; 		mov	r8,@(mdl_x_rot,r10)	
(2)  604/ 6000996 : 1A40                		mov	r4,@(mdl_data,r10)
(2)  605/ 6000998 : 7A30                		add	#sizeof_mdlobj,r10
(2)  606/ 600099A : 4510                		dt	r5
(2)  607/ 600099C : 8FEF                		bf/s	.nxt_one
(2)  608/ 600099E : 316C                		add	r6,r1
(2)  609/ 60009A0 : 6DF6                		mov	@r15+,r13
(2)  610/ 60009A2 : 61F6                		mov	@r15+,r1
(2)  611/ 60009A4 : 000B                		rts
(2)  612/ 60009A6 : 0009                		nop
(2)  613/ 60009A8 :                     		align 4
(2)  614/ 60009A8 :                     ; .xrotlist:	dc.l 0
(2)  615/ 60009A8 :                     ; 		dc.l $100000
(2)  616/ 60009A8 :                     ; 		dc.l $200000
(2)  617/ 60009A8 :                     ; 		dc.l $300000
(2)  618/ 60009A8 :                     
(2)  619/ 60009A8 :                     ; o X X X o
(2)  620/ 60009A8 :                     ; o X X X o
(2)  621/ 60009A8 :                     ; o X C X o
(2)  622/ 60009A8 :                     ; o - - - o
(2)  623/ 60009A8 :                     ; o o o o o
(2)  624/ 60009A8 :                     .front:
(2)  625/ 60009A8 : D141                		mov	#-$100000,r1
(2)  626/ 60009AA : E200                		mov	#0,r2
(2)  627/ 60009AC : D341                		mov	#-$200000,r3
(2)  628/ 60009AE : 7D02                		add	#(1*2),r13
(2)  629/ 60009B0 : DB3D                		mov	#$100000,r11
(2)  630/ 60009B2 :                     
(2)  631/ 60009B2 : 4F22                		sts	pr,@-r15
(2)  632/ 60009B4 : BFE0                		bsr	.do_piece
(2)  633/ 60009B6 : E503                		mov	#3,r5
(2)  634/ 60009B8 : 7D40                		add	#LAY_WIDTH,r13
(2)  635/ 60009BA : 33BC                		add	r11,r3
(2)  636/ 60009BC : BFDC                		bsr	.do_piece
(2)  637/ 60009BE : E503                		mov	#3,r5
(2)  638/ 60009C0 : 7D40                		add	#LAY_WIDTH,r13
(2)  639/ 60009C2 : 33BC                		add	r11,r3
(2)  640/ 60009C4 : BFD8                		bsr	.do_piece
(2)  641/ 60009C6 : E503                		mov	#3,r5
(2)  642/ 60009C8 : 4F26                		lds	@r15+,pr
(2)  643/ 60009CA : 000B                		rts
(2)  644/ 60009CC : 0009                		nop
(2)  645/ 60009CE :                     		align 4
(2)  646/ 60009D0 :                     
(2)  647/ 60009D0 :                     ; front right view
(2)  648/ 60009D0 :                     ; o o X X X
(2)  649/ 60009D0 :                     ; o - X X X
(2)  650/ 60009D0 :                     ; o - C X X
(2)  651/ 60009D0 :                     ; o - - - o
(2)  652/ 60009D0 :                     ; o o o o o
(2)  653/ 60009D0 :                     .front_fr:
(2)  654/ 60009D0 : E100                		mov	#0,r1
(2)  655/ 60009D2 : E200                		mov	#0,r2
(2)  656/ 60009D4 : D337                		mov	#-$200000,r3
(2)  657/ 60009D6 : 7D04                		add	#(2*2),r13
(2)  658/ 60009D8 : DB33                		mov	#$100000,r11
(2)  659/ 60009DA : 4F22                		sts	pr,@-r15
(2)  660/ 60009DC : BFCC                		bsr	.do_piece
(2)  661/ 60009DE : E503                		mov	#3,r5
(2)  662/ 60009E0 : 7D40                		add	#LAY_WIDTH,r13
(2)  663/ 60009E2 : 33BC                		add	r11,r3
(2)  664/ 60009E4 : BFC8                		bsr	.do_piece
(2)  665/ 60009E6 : E503                		mov	#3,r5
(2)  666/ 60009E8 : 7D40                		add	#LAY_WIDTH,r13
(2)  667/ 60009EA : 33BC                		add	r11,r3
(2)  668/ 60009EC : BFC4                		bsr	.do_piece
(2)  669/ 60009EE : E503                		mov	#3,r5
(2)  670/ 60009F0 : 4F26                		lds	@r15+,pr
(2)  671/ 60009F2 : 000B                		rts
(2)  672/ 60009F4 : 0009                		nop
(2)  673/ 60009F6 :                     		align 4
(2)  674/ 60009F8 :                     
(2)  675/ 60009F8 :                     
(2)  676/ 60009F8 :                     ; right view/down
(2)  677/ 60009F8 :                     ; o o o o o
(2)  678/ 60009F8 :                     ; o - - - o
(2)  679/ 60009F8 :                     ; o - C X X
(2)  680/ 60009F8 :                     ; o - X X X
(2)  681/ 60009F8 :                     ; o o X X X
(2)  682/ 60009F8 :                     .right_dw:
(2)  683/ 60009F8 : E100                		mov	#0,r1
(2)  684/ 60009FA : E200                		mov	#0,r2
(2)  685/ 60009FC : D32C                		mov	#-$100000,r3
(2)  686/ 60009FE : E044                		mov	#(2*2)+(LAY_WIDTH),r0
(2)  687/ 6000A00 : 3D0C                		add	r0,r13
(2)  688/ 6000A02 : DB29                		mov	#$100000,r11
(2)  689/ 6000A04 : 4F22                		sts	pr,@-r15
(2)  690/ 6000A06 : BFB7                		bsr	.do_piece
(2)  691/ 6000A08 : E503                		mov	#3,r5
(2)  692/ 6000A0A : 7D40                		add	#LAY_WIDTH,r13
(2)  693/ 6000A0C : 33BC                		add	r11,r3
(2)  694/ 6000A0E : BFB3                		bsr	.do_piece
(2)  695/ 6000A10 : E503                		mov	#3,r5
(2)  696/ 6000A12 : 7D40                		add	#LAY_WIDTH,r13
(2)  697/ 6000A14 : 33BC                		add	r11,r3
(2)  698/ 6000A16 : BFAF                		bsr	.do_piece
(2)  699/ 6000A18 : E503                		mov	#3,r5
(2)  700/ 6000A1A : 4F26                		lds	@r15+,pr
(2)  701/ 6000A1C : 000B                		rts
(2)  702/ 6000A1E : 0009                		nop
(2)  703/ 6000A20 :                     		align 4
(2)  704/ 6000A20 :                     
(2)  705/ 6000A20 :                     ; o o o o o
(2)  706/ 6000A20 :                     ; o - - - o
(2)  707/ 6000A20 :                     ; o X C X o
(2)  708/ 6000A20 :                     ; o X X X o
(2)  709/ 6000A20 :                     ; o X X X o
(2)  710/ 6000A20 :                     .down:
(2)  711/ 6000A20 : E100                		mov	#0,r1
(2)  712/ 6000A22 : E200                		mov	#0,r2
(2)  713/ 6000A24 : D322                		mov	#-$100000,r3
(2)  714/ 6000A26 : E044                		mov	#(2*2)+(LAY_WIDTH*1),r0
(2)  715/ 6000A28 : 3D0C                		add	r0,r13
(2)  716/ 6000A2A : DB1F                		mov	#$100000,r11
(2)  717/ 6000A2C : 4F22                		sts	pr,@-r15
(2)  718/ 6000A2E : BFA3                		bsr	.do_piece
(2)  719/ 6000A30 : E503                		mov	#3,r5
(2)  720/ 6000A32 : 7D40                		add	#LAY_WIDTH,r13
(2)  721/ 6000A34 : 33BC                		add	r11,r3
(2)  722/ 6000A36 : BF9F                		bsr	.do_piece
(2)  723/ 6000A38 : E503                		mov	#3,r5
(2)  724/ 6000A3A : 7D40                		add	#LAY_WIDTH,r13
(2)  725/ 6000A3C : 33BC                		add	r11,r3
(2)  726/ 6000A3E : BF9B                		bsr	.do_piece
(2)  727/ 6000A40 : E503                		mov	#3,r5
(2)  728/ 6000A42 : 4F26                		lds	@r15+,pr
(2)  729/ 6000A44 : 000B                		rts
(2)  730/ 6000A46 : 0009                		nop
(2)  731/ 6000A48 :                     		align 4
(2)  732/ 6000A48 :                     
(2)  733/ 6000A48 :                     ; o o o o o
(2)  734/ 6000A48 :                     ; o - - - o
(2)  735/ 6000A48 :                     ; X X C - o
(2)  736/ 6000A48 :                     ; X X X - o
(2)  737/ 6000A48 :                     ; X X X o o
(2)  738/ 6000A48 :                     .down_left:
(2)  739/ 6000A48 : D119                		mov	#-$100000,r1
(2)  740/ 6000A4A : E200                		mov	#0,r2
(2)  741/ 6000A4C : D318                		mov	#-$100000,r3
(2)  742/ 6000A4E : E042                		mov	#(1*2)+(LAY_WIDTH*1),r0
(2)  743/ 6000A50 : 3D0C                		add	r0,r13
(2)  744/ 6000A52 : DB15                		mov	#$100000,r11
(2)  745/ 6000A54 : 4F22                		sts	pr,@-r15
(2)  746/ 6000A56 : BF8F                		bsr	.do_piece
(2)  747/ 6000A58 : E503                		mov	#3,r5
(2)  748/ 6000A5A : 7D40                		add	#LAY_WIDTH,r13
(2)  749/ 6000A5C : 33BC                		add	r11,r3
(2)  750/ 6000A5E : BF8B                		bsr	.do_piece
(2)  751/ 6000A60 : E503                		mov	#3,r5
(2)  752/ 6000A62 : 7D40                		add	#LAY_WIDTH,r13
(2)  753/ 6000A64 : 33BC                		add	r11,r3
(2)  754/ 6000A66 : BF87                		bsr	.do_piece
(2)  755/ 6000A68 : E503                		mov	#3,r5
(2)  756/ 6000A6A : 4F26                		lds	@r15+,pr
(2)  757/ 6000A6C : 000B                		rts
(2)  758/ 6000A6E : 0009                		nop
(2)  759/ 6000A70 :                     		align 4
(2)  760/ 6000A70 :                     
(2)  761/ 6000A70 :                     
(2)  762/ 6000A70 :                     ; X X X o o
(2)  763/ 6000A70 :                     ; X X X - o
(2)  764/ 6000A70 :                     ; X X C - o
(2)  765/ 6000A70 :                     ; o - - - o
(2)  766/ 6000A70 :                     ; o o o o o
(2)  767/ 6000A70 :                     .front_lf:
(2)  768/ 6000A70 : D10F                		mov	#-$100000,r1
(2)  769/ 6000A72 : E200                		mov	#0,r2
(2)  770/ 6000A74 : D30F                		mov	#-$200000,r3
(2)  771/ 6000A76 : 7D02                		add	#(1*2),r13
(2)  772/ 6000A78 : DB0B                		mov	#$100000,r11
(2)  773/ 6000A7A : 4F22                		sts	pr,@-r15
(2)  774/ 6000A7C : BF7C                		bsr	.do_piece
(2)  775/ 6000A7E : E503                		mov	#3,r5
(2)  776/ 6000A80 : 7D40                		add	#LAY_WIDTH,r13
(2)  777/ 6000A82 : 33BC                		add	r11,r3
(2)  778/ 6000A84 : BF78                		bsr	.do_piece
(2)  779/ 6000A86 : E503                		mov	#3,r5
(2)  780/ 6000A88 : 7D40                		add	#LAY_WIDTH,r13
(2)  781/ 6000A8A : 33BC                		add	r11,r3
(2)  782/ 6000A8C : BF74                		bsr	.do_piece
(2)  783/ 6000A8E : E503                		mov	#3,r5
(2)  784/ 6000A90 : 4F26                		lds	@r15+,pr
(2)  785/ 6000A92 : 000B                		rts
(2)  786/ 6000A94 : 0009                		nop
(2)  787/ 6000A96 :                     		align 4
(2)  788/ 6000A98 : 0600 6C90 0600 6C68 		ltorg
                    0600 6CB0 0600 0878 
                    0010 0000 4000 0000 
                    FFF0 0000 FFE0 0000 
(2)  789/ 6000AB8 :                     
(2)  790/ 6000AB8 :                     ; ------------------------------------------------
(2)  791/ 6000AB8 :                     ; MarsMdl_Init
(2)  792/ 6000AB8 :                     ; 
(2)  793/ 6000AB8 :                     ; Reset ALL objects
(2)  794/ 6000AB8 :                     ; ------------------------------------------------
(2)  795/ 6000AB8 :                     
(2)  796/ 6000AB8 :                     MarsMdl_Init:
(2)  797/ 6000AB8 : D107                		mov	#RAM_Mars_Objects,r1
(2)  798/ 6000ABA : E218                		mov	#MAX_MODELS,r2
(2)  799/ 6000ABC : E000                		mov	#0,r0
(2)  800/ 6000ABE :                     .clnup:
(2)  801/ 6000ABE : 1100                		mov	r0,@(mdl_data,r1)
(2)  802/ 6000AC0 : 1108                		mov	r0,@(mdl_animdata,r1)
(2)  803/ 6000AC2 : 1102                		mov	r0,@(mdl_x_pos,r1)
(2)  804/ 6000AC4 : 1105                		mov	r0,@(mdl_x_rot,r1)
(2)  805/ 6000AC6 : 1103                		mov	r0,@(mdl_y_pos,r1)
(2)  806/ 6000AC8 : 1106                		mov	r0,@(mdl_y_rot,r1)
(2)  807/ 6000ACA : 1103                		mov	r0,@(mdl_y_pos,r1)
(2)  808/ 6000ACC : 1106                		mov	r0,@(mdl_y_rot,r1)
(2)  809/ 6000ACE : 4210                		dt	r2
(2)  810/ 6000AD0 : 8FF5                		bf/s	.clnup
(2)  811/ 6000AD2 : 7130                		add	#sizeof_mdlobj,r1
(2)  812/ 6000AD4 : 000B                		rts
(2)  813/ 6000AD6 : 0009                		nop
(2)  814/ 6000AD8 :                     		align 4
(2)  815/ 6000AD8 : 0600 6CB0           		ltorg
(2)  816/ 6000ADC :                     
(2)  817/ 6000ADC :                     ; ------------------------------------------------
(2)  818/ 6000ADC :                     ; Read model
(2)  819/ 6000ADC :                     ; ------------------------------------------------
(2)  820/ 6000ADC :                     
(2)  821/ 6000ADC :                     MarsMdl_ReadModel:
(2)  822/ 6000ADC : 4F22                		sts	pr,@-r15
(2)  823/ 6000ADE : 5DE8                		mov	@(mdl_animdata,r14),r13
(2)  824/ 6000AE0 : 4D15                		cmp/pl	r13
(2)  825/ 6000AE2 : 8B1D                		bf	.no_anim
(2)  826/ 6000AE4 : 50EA                		mov	@(mdl_animtimer,r14),r0
(2)  827/ 6000AE6 : 70FF                		add	#-1,r0
(2)  828/ 6000AE8 : 4015                		cmp/pl 	r0
(2)  829/ 6000AEA : 8918                		bt	.wait_camanim
(2)  830/ 6000AEC : 62D6                		mov	@r13+,r2
(2)  831/ 6000AEE : 50E9                		mov	@(mdl_animframe,r14),r0
(2)  832/ 6000AF0 : 7001                		add	#1,r0
(2)  833/ 6000AF2 : 3020                		cmp/eq	r2,r0
(2)  834/ 6000AF4 : 8B00                		bf	.on_frames
(2)  835/ 6000AF6 : 200A                		xor	r0,r0
(2)  836/ 6000AF8 :                     .on_frames:
(2)  837/ 6000AF8 : 6103                		mov	r0,r1
(2)  838/ 6000AFA : 1E09                		mov	r0,@(mdl_animframe,r14)
(2)  839/ 6000AFC : E018                		mov	#$18,r0
(2)  840/ 6000AFE : 210E                		mulu	r0,r1
(2)  841/ 6000B00 : 001A                		sts	macl,r0 	
(2)  842/ 6000B02 : 3D0C                		add	r0,r13
(2)  843/ 6000B04 : 61D6                		mov	@r13+,r1
(2)  844/ 6000B06 : 62D6                		mov	@r13+,r2
(2)  845/ 6000B08 : 63D6                		mov	@r13+,r3
(2)  846/ 6000B0A : 64D6                		mov	@r13+,r4
(2)  847/ 6000B0C : 65D6                		mov	@r13+,r5
(2)  848/ 6000B0E : 66D6                		mov	@r13+,r6
(2)  849/ 6000B10 :                     ; 		neg	r4,r4
(2)  850/ 6000B10 : 1E12                		mov	r1,@(mdl_x_pos,r14)
(2)  851/ 6000B12 : 1E23                		mov	r2,@(mdl_y_pos,r14)
(2)  852/ 6000B14 : 1E34                		mov	r3,@(mdl_z_pos,r14)
(2)  853/ 6000B16 : 1E45                		mov	r4,@(mdl_x_rot,r14)
(2)  854/ 6000B18 : 1E56                		mov	r5,@(mdl_y_rot,r14)
(2)  855/ 6000B1A : 1E67                		mov	r6,@(mdl_z_rot,r14)
(2)  856/ 6000B1C : 50EB                		mov	@(mdl_animspd,r14),r0		; TODO: make a timer setting
(2)  857/ 6000B1E :                     .wait_camanim:
(2)  858/ 6000B1E : 1E0A                		mov	r0,@(mdl_animtimer,r14)	
(2)  859/ 6000B20 :                     .no_anim:
(2)  860/ 6000B20 :                     	; Now start reading
(2)  861/ 6000B20 : D0AB                		mov	#$3FFFFFFF,r0
(2)  862/ 6000B22 : DDAC                		mov	#Cach_CurrPlygn,r13		; r13 - temporal face output
(2)  863/ 6000B24 : 5CE0                		mov	@(mdl_data,r14),r12		; r12 - model header
(2)  864/ 6000B26 : 2C09                		and	r0,r12
(2)  865/ 6000B28 : 5BC2                		mov 	@(8,r12),r11			; r11 - face data
(2)  866/ 6000B2A : 5AC1                		mov 	@(4,r12),r10			; r10 - vertice data (X,Y,Z)
(2)  867/ 6000B2C : 69C1                		mov.w	@r12,r9				;  r9 - Number of faces used on model
(2)  868/ 6000B2E : C602                		mov	@(marsGbl_CurrZList,gbr),r0	;  r8 - Zlist for sorting
(2)  869/ 6000B30 : 6803                		mov	r0,r8
(2)  870/ 6000B32 :                     .next_face:
(2)  871/ 6000B32 : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Ran out of space to store faces?
(2)  872/ 6000B34 : D102                		mov	.tag_maxfaces,r1
(2)  873/ 6000B36 : 3013                		cmp/ge	r1,r0
(2)  874/ 6000B38 : 8B04                		bf	.can_build
(2)  875/ 6000B3A : A146                		bra	.exit_model
(2)  876/ 6000B3C : 0009                		nop
(2)  877/ 6000B3E :                     		align 4
(2)  878/ 6000B40 : 0000 03B6           .tag_maxfaces:	dc.l	MAX_FACES
(2)  879/ 6000B44 :                     
(2)  880/ 6000B44 :                     ; --------------------------------
(2)  881/ 6000B44 :                     
(2)  882/ 6000B44 :                     .can_build:
(2)  883/ 6000B44 : 64B5                		mov.w	@r11+,r4		; Read type
(2)  884/ 6000B46 : E703                		mov	#3,r7			; r7 - Current polygon type: triangle (3)
(2)  885/ 6000B48 : 6043                		mov	r4,r0
(2)  886/ 6000B4A : 4019                		shlr8	r0
(2)  887/ 6000B4C : C840                		tst	#PLGN_TRI,r0		; Model face uses triangle?
(2)  888/ 6000B4E : 8B00                		bf	.set_tri
(2)  889/ 6000B50 : 7701                		add	#1,r7			; Face is quad, r7 = 4 points
(2)  890/ 6000B52 :                     .set_tri:
(2)  891/ 6000B52 : 4415                		cmp/pl	r4			; Faces uses texture? ($8xxx)
(2)  892/ 6000B54 : 893C                		bt	.solid_type
(2)  893/ 6000B56 :                     
(2)  894/ 6000B56 :                     ; --------------------------------
(2)  895/ 6000B56 :                     ; Set texture material
(2)  896/ 6000B56 :                     ; --------------------------------
(2)  897/ 6000B56 :                     
(2)  898/ 6000B56 : 56C3                		mov	@($C,r12),r6		; r6 - Material data
(2)  899/ 6000B58 : 65D3                		mov	r13,r5			; r5 - Go to UV section 
(2)  900/ 6000B5A : 7528                		add 	#polygn_srcpnts,r5
(2)  901/ 6000B5C : 6373                		mov	r7,r3			; r3 - copy of current face points (3 or 4)
(2)  902/ 6000B5E :                     
(2)  903/ 6000B5E :                     	; New method
(2)  904/ 6000B5E :                     	rept 3
(2)  905/ 6000B5E :                     		mov.w	@r11+,r0			; Read UV index			
(2)  906/ 6000B5E :                     		extu	r0,r0
(2)  907/ 6000B5E :                     		shll2	r0
(2)  908/ 6000B5E :                     		mov	@(r6,r0),r0
(2)  909/ 6000B5E :                     		mov.w	r0,@(2,r5)
(2)  910/ 6000B5E :                     		shlr16	r0
(2)  911/ 6000B5E :                     		mov.w	r0,@r5
(2)  912/ 6000B5E :                     		add	#4,r5
(2)  913/ 6000B5E :                     	endm
(2)  905/ 6000B5E : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  906/ 6000B60 : 600D                		extu	r0,r0
(2)  907/ 6000B62 : 4008                		shll2	r0
(2)  908/ 6000B64 : 006E                		mov	@(r6,r0),r0
(2)  909/ 6000B66 : 8151                		mov.w	r0,@(2,r5)
(2)  910/ 6000B68 : 4029                		shlr16	r0
(2)  911/ 6000B6A : 2501                		mov.w	r0,@r5
(2)  912/ 6000B6C : 7504                		add	#4,r5
(2)  905/ 6000B6E : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  906/ 6000B70 : 600D                		extu	r0,r0
(2)  907/ 6000B72 : 4008                		shll2	r0
(2)  908/ 6000B74 : 006E                		mov	@(r6,r0),r0
(2)  909/ 6000B76 : 8151                		mov.w	r0,@(2,r5)
(2)  910/ 6000B78 : 4029                		shlr16	r0
(2)  911/ 6000B7A : 2501                		mov.w	r0,@r5
(2)  912/ 6000B7C : 7504                		add	#4,r5
(2)  905/ 6000B7E : 60B5                		mov.w	@r11+,r0			; Read UV index			
(2)  906/ 6000B80 : 600D                		extu	r0,r0
(2)  907/ 6000B82 : 4008                		shll2	r0
(2)  908/ 6000B84 : 006E                		mov	@(r6,r0),r0
(2)  909/ 6000B86 : 8151                		mov.w	r0,@(2,r5)
(2)  910/ 6000B88 : 4029                		shlr16	r0
(2)  911/ 6000B8A : 2501                		mov.w	r0,@r5
(2)  912/ 6000B8C : 7504                		add	#4,r5
(2)  914/ 6000B8E : E003                		mov	#3,r0			; Triangle?
(2)  915/ 6000B90 : 3700                		cmp/eq	r0,r7
(2)  916/ 6000B92 : 8906                		bt	.alluvdone		; If yes, skip this
(2)  917/ 6000B94 : 60B5                		mov.w	@r11+,r0		; Read extra UV index			
(2)  918/ 6000B96 : 600D                		extu	r0,r0
(2)  919/ 6000B98 : 4008                		shll2	r0
(2)  920/ 6000B9A : 006E                		mov	@(r6,r0),r0
(2)  921/ 6000B9C : 8151                		mov.w	r0,@(2,r5)
(2)  922/ 6000B9E : 4029                		shlr16	r0
(2)  923/ 6000BA0 : 2501                		mov.w	r0,@r5
(2)  924/ 6000BA2 :                     .alluvdone:
(2)  925/ 6000BA2 :                     
(2)  926/ 6000BA2 : 50E1                		mov	@(mdl_option,r14),r0
(2)  927/ 6000BA4 : C9FF                		and	#$FF,r0
(2)  928/ 6000BA6 : 6103                		mov	r0,r1
(2)  929/ 6000BA8 : 6043                		mov	r4,r0
(2)  930/ 6000BAA : D508                		mov	.tag_andmtrl,r5
(2)  931/ 6000BAC : 2059                		and	r5,r0
(2)  932/ 6000BAE : 4008                		shll2	r0
(2)  933/ 6000BB0 : 4000                		shll	r0
(2)  934/ 6000BB2 : 56C4                		mov	@($10,r12),r6
(2)  935/ 6000BB4 : 360C                		add	r0,r6
(2)  936/ 6000BB6 : D088                		mov	#$E000,r0		; grab special bits
(2)  937/ 6000BB8 : 2409                		and	r0,r4
(2)  938/ 6000BBA : 4428                		shll16	r4
(2)  939/ 6000BBC : 5061                		mov	@(4,r6),r0
(2)  940/ 6000BBE : 240B                		or	r0,r4
(2)  941/ 6000BC0 : 341C                		add	r1,r4
(2)  942/ 6000BC2 : 1D40                		mov	r4,@(polygn_type,r13)
(2)  943/ 6000BC4 : 6062                		mov	@r6,r0
(2)  944/ 6000BC6 : 1D01                		mov	r0,@(polygn_mtrl,r13)
(2)  945/ 6000BC8 : A00D                		bra	.go_faces
(2)  946/ 6000BCA : 0009                		nop
(2)  947/ 6000BCC :                     .tag_andmtrl:
(2)  948/ 6000BCC : 0000 1FFF           		dc.l $1FFF
(2)  949/ 6000BD0 :                     
(2)  950/ 6000BD0 :                     ; --------------------------------
(2)  951/ 6000BD0 :                     ; Set texture material
(2)  952/ 6000BD0 :                     ; --------------------------------
(2)  953/ 6000BD0 :                     
(2)  954/ 6000BD0 :                     .solid_type:
(2)  955/ 6000BD0 : 50E1                		mov	@(mdl_option,r14),r0
(2)  956/ 6000BD2 : C9FF                		and	#$FF,r0
(2)  957/ 6000BD4 : 6103                		mov	r0,r1
(2)  958/ 6000BD6 : 6043                		mov	r4,r0
(2)  959/ 6000BD8 : D57F                		mov	#$E000,r5
(2)  960/ 6000BDA : 2459                		and	r5,r4
(2)  961/ 6000BDC : 4428                		shll16	r4
(2)  962/ 6000BDE : 341C                		add	r1,r4
(2)  963/ 6000BE0 : 1D40                		mov	r4,@(polygn_type,r13)		; Set type 0 (tri) or quad (1)
(2)  964/ 6000BE2 : C9FF                		and	#$FF,r0
(2)  965/ 6000BE4 : 1D01                		mov	r0,@(polygn_mtrl,r13)		; Set pixel color (0-255)
(2)  966/ 6000BE6 :                     
(2)  967/ 6000BE6 :                     ; --------------------------------
(2)  968/ 6000BE6 :                     ; Read faces
(2)  969/ 6000BE6 :                     ; --------------------------------
(2)  970/ 6000BE6 :                     
(2)  971/ 6000BE6 :                     .go_faces:
(2)  972/ 6000BE6 : 61D3                		mov	r13,r1
(2)  973/ 6000BE8 : 7108                		add 	#polygn_points,r1
(2)  974/ 6000BEA : 66B3                		mov	r11,r6
(2)  975/ 6000BEC : 6073                		mov	r7,r0
(2)  976/ 6000BEE : 4000                		shll	r0
(2)  977/ 6000BF0 : 3B0C                		add	r0,r11
(2)  978/ 6000BF2 : 2F86                		mov 	r8,@-r15
(2)  979/ 6000BF4 : 2F96                		mov 	r9,@-r15
(2)  980/ 6000BF6 : 2FB6                		mov 	r11,@-r15
(2)  981/ 6000BF8 : 2FC6                		mov 	r12,@-r15
(2)  982/ 6000BFA : 2FD6                		mov 	r13,@-r15
(2)  983/ 6000BFC : D830                		mov	.tag_xl,r8
(2)  984/ 6000BFE : 698B                		neg	r8,r9
(2)  985/ 6000C00 : EB90                		mov	#-112,r11
(2)  986/ 6000C02 : 6CBB                		neg	r11,r12
(2)  987/ 6000C04 : D575                		mov	#$7FFFFFFF,r5
(2)  988/ 6000C06 : EDFF                		mov	#$FFFFFFFF,r13
(2)  989/ 6000C08 :                     
(2)  990/ 6000C08 :                     	; Do 3 points
(2)  991/ 6000C08 :                     	rept 3
(2)  992/ 6000C08 :                     		mov	#0,r0
(2)  993/ 6000C08 :                     		mov.w 	@r6+,r0
(2)  994/ 6000C08 :                     		mov	#$C,r4
(2)  995/ 6000C08 :                     		mulu	r4,r0
(2)  996/ 6000C08 :                     		sts	macl,r0
(2)  997/ 6000C08 :                     		mov	r10,r4
(2)  998/ 6000C08 :                     		add 	r0,r4
(2)  999/ 6000C08 :                     		mov	@r4,r2
(2) 1000/ 6000C08 :                     		mov	@(4,r4),r3
(2) 1001/ 6000C08 :                     		mov	@(8,r4),r4
(2) 1002/ 6000C08 :                     		bsr	mdlrd_setpoint
(2) 1003/ 6000C08 :                     		nop
(2) 1004/ 6000C08 :                     		mov	r2,@r1
(2) 1005/ 6000C08 :                     		mov	r3,@(4,r1)
(2) 1006/ 6000C08 :                     		add	#8,r1
(2) 1007/ 6000C08 :                     	endm
(2)  992/ 6000C08 : E000                		mov	#0,r0
(2)  993/ 6000C0A : 6065                		mov.w 	@r6+,r0
(2)  994/ 6000C0C : E40C                		mov	#$C,r4
(2)  995/ 6000C0E : 204E                		mulu	r4,r0
(2)  996/ 6000C10 : 001A                		sts	macl,r0
(2)  997/ 6000C12 : 64A3                		mov	r10,r4
(2)  998/ 6000C14 : 340C                		add 	r0,r4
(2)  999/ 6000C16 : 6242                		mov	@r4,r2
(2) 1000/ 6000C18 : 5341                		mov	@(4,r4),r3
(2) 1001/ 6000C1A : 5442                		mov	@(8,r4),r4
(2) 1002/ 6000C1C : B0E6                		bsr	mdlrd_setpoint
(2) 1003/ 6000C1E : 0009                		nop
(2) 1004/ 6000C20 : 2122                		mov	r2,@r1
(2) 1005/ 6000C22 : 1131                		mov	r3,@(4,r1)
(2) 1006/ 6000C24 : 7108                		add	#8,r1
(2)  992/ 6000C26 : E000                		mov	#0,r0
(2)  993/ 6000C28 : 6065                		mov.w 	@r6+,r0
(2)  994/ 6000C2A : E40C                		mov	#$C,r4
(2)  995/ 6000C2C : 204E                		mulu	r4,r0
(2)  996/ 6000C2E : 001A                		sts	macl,r0
(2)  997/ 6000C30 : 64A3                		mov	r10,r4
(2)  998/ 6000C32 : 340C                		add 	r0,r4
(2)  999/ 6000C34 : 6242                		mov	@r4,r2
(2) 1000/ 6000C36 : 5341                		mov	@(4,r4),r3
(2) 1001/ 6000C38 : 5442                		mov	@(8,r4),r4
(2) 1002/ 6000C3A : B0D7                		bsr	mdlrd_setpoint
(2) 1003/ 6000C3C : 0009                		nop
(2) 1004/ 6000C3E : 2122                		mov	r2,@r1
(2) 1005/ 6000C40 : 1131                		mov	r3,@(4,r1)
(2) 1006/ 6000C42 : 7108                		add	#8,r1
(2)  992/ 6000C44 : E000                		mov	#0,r0
(2)  993/ 6000C46 : 6065                		mov.w 	@r6+,r0
(2)  994/ 6000C48 : E40C                		mov	#$C,r4
(2)  995/ 6000C4A : 204E                		mulu	r4,r0
(2)  996/ 6000C4C : 001A                		sts	macl,r0
(2)  997/ 6000C4E : 64A3                		mov	r10,r4
(2)  998/ 6000C50 : 340C                		add 	r0,r4
(2)  999/ 6000C52 : 6242                		mov	@r4,r2
(2) 1000/ 6000C54 : 5341                		mov	@(4,r4),r3
(2) 1001/ 6000C56 : 5442                		mov	@(8,r4),r4
(2) 1002/ 6000C58 : B0C8                		bsr	mdlrd_setpoint
(2) 1003/ 6000C5A : 0009                		nop
(2) 1004/ 6000C5C : 2122                		mov	r2,@r1
(2) 1005/ 6000C5E : 1131                		mov	r3,@(4,r1)
(2) 1006/ 6000C60 : 7108                		add	#8,r1
(2) 1008/ 6000C62 : E003                		mov	#3,r0			; Triangle?
(2) 1009/ 6000C64 : 3700                		cmp/eq	r0,r7
(2) 1010/ 6000C66 : 890D                		bt	.alldone		; If yes, skip this
(2) 1011/ 6000C68 : E000                		mov	#0,r0
(2) 1012/ 6000C6A : 6065                		mov.w 	@r6+,r0
(2) 1013/ 6000C6C : E40C                		mov	#$C,r4
(2) 1014/ 6000C6E : 204E                		mulu	r4,r0
(2) 1015/ 6000C70 : 001A                		sts	macl,r0
(2) 1016/ 6000C72 : 64A3                		mov	r10,r4
(2) 1017/ 6000C74 : 340C                		add 	r0,r4
(2) 1018/ 6000C76 : 6242                		mov	@r4,r2
(2) 1019/ 6000C78 : 5341                		mov	@(4,r4),r3
(2) 1020/ 6000C7A : 5442                		mov	@(8,r4),r4
(2) 1021/ 6000C7C : B0B6                		bsr	mdlrd_setpoint
(2) 1022/ 6000C7E : 0009                		nop
(2) 1023/ 6000C80 : 2122                		mov	r2,@r1
(2) 1024/ 6000C82 : 1131                		mov	r3,@(4,r1)
(2) 1025/ 6000C84 :                     .alldone:
(2) 1026/ 6000C84 : 6183                		mov	r8,r1
(2) 1027/ 6000C86 : 6293                		mov	r9,r2
(2) 1028/ 6000C88 : 63B3                		mov	r11,r3
(2) 1029/ 6000C8A : 64C3                		mov	r12,r4
(2) 1030/ 6000C8C : 66D3                		mov	r13,r6
(2) 1031/ 6000C8E : 6DF6                		mov	@r15+,r13
(2) 1032/ 6000C90 : 6CF6                		mov	@r15+,r12
(2) 1033/ 6000C92 : 6BF6                		mov	@r15+,r11
(2) 1034/ 6000C94 : 69F6                		mov	@r15+,r9
(2) 1035/ 6000C96 : 68F6                		mov	@r15+,r8
(2) 1036/ 6000C98 :                     		
(2) 1037/ 6000C98 :                     	; NOTE: if you don't like how the perspective works
(2) 1038/ 6000C98 :                     	; change this register depending how you want to ignore
(2) 1039/ 6000C98 :                     	; faces closer to the camera:
(2) 1040/ 6000C98 :                     	; 
(2) 1041/ 6000C98 :                     	; r5 - Back Z point, keep affine limitations
(2) 1042/ 6000C98 :                     	; r6 - Front Z point, skip face but larger faces are affected
(2) 1043/ 6000C98 :                     	
(2) 1044/ 6000C98 : 4511                		cmp/pz	r5
(2) 1045/ 6000C9A : 890E                		bt	.go_fout
(2) 1046/ 6000C9C :                     ; 		cmp/pz	r6
(2) 1047/ 6000C9C :                     ; 		bt	.go_fout
(2) 1048/ 6000C9C :                     		
(2) 1049/ 6000C9C :                     		
(2) 1050/ 6000C9C :                     ; 		mov	#RAM_Mars_ObjCamera,r0
(2) 1051/ 6000C9C :                     ; 		mov	@(cam_y_pos,r0),r7
(2) 1052/ 6000C9C :                     ; 		shlr2	r7
(2) 1053/ 6000C9C :                     ; 		shlr2	r7
(2) 1054/ 6000C9C :                     ; 		shlr2	r7
(2) 1055/ 6000C9C :                     ; 		shlr	r7
(2) 1056/ 6000C9C :                     ; 		exts	r7,r7
(2) 1057/ 6000C9C :                     ; 		cmp/pl	r7
(2) 1058/ 6000C9C :                     ; 		bf	.revrscam
(2) 1059/ 6000C9C :                     ; 		neg	r7,r7
(2) 1060/ 6000C9C :                     ; .revrscam:
(2) 1061/ 6000C9C :                     ; 		mov	#MAX_ZDIST,r0
(2) 1062/ 6000C9C :                     ; 		cmp/ge	r0,r7
(2) 1063/ 6000C9C :                     ; 		bt	.camlimit
(2) 1064/ 6000C9C :                     ; 		mov	r0,r7
(2) 1065/ 6000C9C :                     ; .camlimit:
(2) 1066/ 6000C9C :                     ; 		cmp/pl	r6
(2) 1067/ 6000C9C :                     ; 		bt	.face_out
(2) 1068/ 6000C9C : 90A4                		mov	#MAX_ZDIST,r0		; Draw distance
(2) 1069/ 6000C9E :                     ; 		add 	r7,r0
(2) 1070/ 6000C9E : 3503                		cmp/ge	r0,r5
(2) 1071/ 6000CA0 : 8B0B                		bf	.go_fout
(2) 1072/ 6000CA2 : 90A2                		mov	#-(SCREEN_WIDTH/2),r0
(2) 1073/ 6000CA4 : 3107                		cmp/gt	r0,r1
(2) 1074/ 6000CA6 : 8B08                		bf	.go_fout
(2) 1075/ 6000CA8 : 600B                		neg	r0,r0
(2) 1076/ 6000CAA : 3203                		cmp/ge	r0,r2
(2) 1077/ 6000CAC : 8905                		bt	.go_fout
(2) 1078/ 6000CAE : E090                		mov	#-(SCREEN_HEIGHT/2),r0
(2) 1079/ 6000CB0 : 3307                		cmp/gt	r0,r3
(2) 1080/ 6000CB2 : 8B02                		bf	.go_fout
(2) 1081/ 6000CB4 : 600B                		neg	r0,r0
(2) 1082/ 6000CB6 : 3403                		cmp/ge	r0,r4
(2) 1083/ 6000CB8 : 8B04                		bf	.face_ok
(2) 1084/ 6000CBA : A080                .go_fout:	bra	.face_out
(2) 1085/ 6000CBC : 0009                		nop
(2) 1086/ 6000CBE :                     		align 4
(2) 1087/ 6000CC0 : FFFF FF60           .tag_xl:	dc.l -160
(2) 1088/ 6000CC4 :                     
(2) 1089/ 6000CC4 :                     ; --------------------------------
(2) 1090/ 6000CC4 :                     
(2) 1091/ 6000CC4 :                     .face_ok:
(2) 1092/ 6000CC4 : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Add 1 face to the list
(2) 1093/ 6000CC6 : 7001                		add	#1,r0
(2) 1094/ 6000CC8 : C10A                		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(2) 1095/ 6000CCA : C603                		mov	@(marsGbl_CurrFacePos,gbr),r0
(2) 1096/ 6000CCC : 6103                		mov	r0,r1
(2) 1097/ 6000CCE : 62D3                		mov	r13,r2
(2) 1098/ 6000CD0 : 2852                		mov	r5,@r8				; Store current Z to Zlist
(2) 1099/ 6000CD2 : 1811                		mov	r1,@(4,r8)			; And it's address
(2) 1100/ 6000CD4 :                     		
(2) 1101/ 6000CD4 :                     ; 	Sort this face, SLOW
(2) 1102/ 6000CD4 :                     ; 	r7 - Curr Z
(2) 1103/ 6000CD4 :                     ; 	r6 - Past Z
(2) 1104/ 6000CD4 : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0
(2) 1105/ 6000CD6 : 8801                		cmp/eq	#1,r0
(2) 1106/ 6000CD8 : 891A                		bt	.first_face
(2) 1107/ 6000CDA : 8802                		cmp/eq	#2,r0
(2) 1108/ 6000CDC : 8918                		bt	.first_face
(2) 1109/ 6000CDE : 6783                		mov	r8,r7
(2) 1110/ 6000CE0 : 77F8                		add	#-8,r7
(2) 1111/ 6000CE2 :                     ; 		mov	@(marsGbl_CurrZList,gbr),r0
(2) 1112/ 6000CE2 :                     ; 		mov	r0,r6
(2) 1113/ 6000CE2 : D63F                		mov	#RAM_Mars_Plgn_ZList_0,r6
(2) 1114/ 6000CE4 : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(2) 1115/ 6000CE6 : C801                		tst     #1,r0
(2) 1116/ 6000CE8 : 8900                		bt	.page_2
(2) 1117/ 6000CEA : D63E                		mov	#RAM_Mars_Plgn_ZList_1,r6
(2) 1118/ 6000CEC :                     .page_2:
(2) 1119/ 6000CEC : 3763                		cmp/ge	r6,r7
(2) 1120/ 6000CEE : 8B0F                		bf	.first_face
(2) 1121/ 6000CF0 : 5472                		mov	@(8,r7),r4
(2) 1122/ 6000CF2 : 6572                		mov	@r7,r5
(2) 1123/ 6000CF4 : 3540                		cmp/eq	r4,r5
(2) 1124/ 6000CF6 : 890B                		bt	.first_face
(2) 1125/ 6000CF8 : 3547                		cmp/gt	r4,r5
(2) 1126/ 6000CFA : 8B07                		bf	.swap_me
(2) 1127/ 6000CFC : 6472                		mov	@r7,r4
(2) 1128/ 6000CFE : 5572                		mov	@(8,r7),r5
(2) 1129/ 6000D00 : 2752                		mov	r5,@r7
(2) 1130/ 6000D02 : 1742                		mov	r4,@(8,r7)
(2) 1131/ 6000D04 : 5471                		mov	@(4,r7),r4
(2) 1132/ 6000D06 : 5573                		mov	@($C,r7),r5
(2) 1133/ 6000D08 : 1751                		mov	r5,@(4,r7)
(2) 1134/ 6000D0A : 1743                		mov	r4,@($C,r7)
(2) 1135/ 6000D0C :                     .swap_me:
(2) 1136/ 6000D0C : AFEE                		bra	.page_2
(2) 1137/ 6000D0E : 77F8                		add	#-8,r7
(2) 1138/ 6000D10 :                     .first_face:
(2) 1139/ 6000D10 :                     
(2) 1140/ 6000D10 :                     
(2) 1141/ 6000D10 : 7808                		add	#8,r8				; Next Zlist entry
(2) 1142/ 6000D12 :                     	rept sizeof_polygn/2				; Copy words manually
(2) 1143/ 6000D12 :                     		mov.w	@r2+,r0
(2) 1144/ 6000D12 :                     		mov.w	r0,@r1
(2) 1145/ 6000D12 :                     		add	#2,r1
(2) 1146/ 6000D12 :                     	endm
(2) 1143/ 6000D12 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D14 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D16 : 7102                		add	#2,r1
(2) 1143/ 6000D18 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D1A : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D1C : 7102                		add	#2,r1
(2) 1143/ 6000D1E : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D20 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D22 : 7102                		add	#2,r1
(2) 1143/ 6000D24 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D26 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D28 : 7102                		add	#2,r1
(2) 1143/ 6000D2A : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D2C : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D2E : 7102                		add	#2,r1
(2) 1143/ 6000D30 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D32 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D34 : 7102                		add	#2,r1
(2) 1143/ 6000D36 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D38 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D3A : 7102                		add	#2,r1
(2) 1143/ 6000D3C : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D3E : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D40 : 7102                		add	#2,r1
(2) 1143/ 6000D42 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D44 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D46 : 7102                		add	#2,r1
(2) 1143/ 6000D48 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D4A : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D4C : 7102                		add	#2,r1
(2) 1143/ 6000D4E : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D50 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D52 : 7102                		add	#2,r1
(2) 1143/ 6000D54 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D56 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D58 : 7102                		add	#2,r1
(2) 1143/ 6000D5A : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D5C : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D5E : 7102                		add	#2,r1
(2) 1143/ 6000D60 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D62 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D64 : 7102                		add	#2,r1
(2) 1143/ 6000D66 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D68 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D6A : 7102                		add	#2,r1
(2) 1143/ 6000D6C : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D6E : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D70 : 7102                		add	#2,r1
(2) 1143/ 6000D72 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D74 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D76 : 7102                		add	#2,r1
(2) 1143/ 6000D78 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D7A : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D7C : 7102                		add	#2,r1
(2) 1143/ 6000D7E : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D80 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D82 : 7102                		add	#2,r1
(2) 1143/ 6000D84 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D86 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D88 : 7102                		add	#2,r1
(2) 1143/ 6000D8A : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D8C : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D8E : 7102                		add	#2,r1
(2) 1143/ 6000D90 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D92 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D94 : 7102                		add	#2,r1
(2) 1143/ 6000D96 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D98 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000D9A : 7102                		add	#2,r1
(2) 1143/ 6000D9C : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000D9E : 2101                		mov.w	r0,@r1
(2) 1145/ 6000DA0 : 7102                		add	#2,r1
(2) 1143/ 6000DA2 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000DA4 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000DA6 : 7102                		add	#2,r1
(2) 1143/ 6000DA8 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000DAA : 2101                		mov.w	r0,@r1
(2) 1145/ 6000DAC : 7102                		add	#2,r1
(2) 1143/ 6000DAE : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000DB0 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000DB2 : 7102                		add	#2,r1
(2) 1143/ 6000DB4 : 6025                		mov.w	@r2+,r0
(2) 1144/ 6000DB6 : 2101                		mov.w	r0,@r1
(2) 1145/ 6000DB8 : 7102                		add	#2,r1
(2) 1147/ 6000DBA : 6013                		mov	r1,r0
(2) 1148/ 6000DBC : C203                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(2) 1149/ 6000DBE :                     
(2) 1150/ 6000DBE :                     ; 		mov	r0,r1
(2) 1151/ 6000DBE :                     ; 		mov	@(marsGbl_ZSortReq,gbr),r0
(2) 1152/ 6000DBE :                     ; 		cmp/eq	#1,r0
(2) 1153/ 6000DBE :                     ; 		bt	.face_out
(2) 1154/ 6000DBE :                     ; 		mov	#1,r0
(2) 1155/ 6000DBE :                     ; 		mov.w	r0,@(marsGbl_ZSortReq,gbr)
(2) 1156/ 6000DBE :                     .face_out:
(2) 1157/ 6000DBE : 4910                		dt	r9
(2) 1158/ 6000DC0 : 8901                		bt	.finish_this
(2) 1159/ 6000DC2 : AEB6                		bra	.next_face
(2) 1160/ 6000DC4 : 0009                		nop
(2) 1161/ 6000DC6 :                     .finish_this:
(2) 1162/ 6000DC6 : 6083                		mov	r8,r0
(2) 1163/ 6000DC8 : C202                		mov	r0,@(marsGbl_CurrZList,gbr)
(2) 1164/ 6000DCA :                     
(2) 1165/ 6000DCA :                     .exit_model:
(2) 1166/ 6000DCA : 4F26                		lds	@r15+,pr
(2) 1167/ 6000DCC : 000B                		rts
(2) 1168/ 6000DCE : 0009                		nop
(2) 1169/ 6000DD0 :                     		align 4
(2) 1170/ 6000DD0 : 3FFF FFFF C000 0000 		ltorg
                    0000 E000 7FFF FFFF 
                    0603 0D78 0603 2B28 
                    DC00 FF60           
(2) 1171/ 6000DEC :                     
(2) 1172/ 6000DEC :                     ; ----------------------------------------	
(2) 1173/ 6000DEC :                     ; Modify position to current point
(2) 1174/ 6000DEC :                     ; ----------------------------------------
(2) 1175/ 6000DEC :                     
(2) 1176/ 6000DEC :                     		align 4
(2) 1177/ 6000DEC :                     mdlrd_setpoint:
(2) 1178/ 6000DEC : 4F22                		sts	pr,@-r15
(2) 1179/ 6000DEE : 2F56                		mov 	r5,@-r15
(2) 1180/ 6000DF0 : 2F66                		mov 	r6,@-r15
(2) 1181/ 6000DF2 : 2F76                		mov 	r7,@-r15
(2) 1182/ 6000DF4 : 2F86                		mov 	r8,@-r15
(2) 1183/ 6000DF6 : 2F96                		mov 	r9,@-r15
(2) 1184/ 6000DF8 : 2FA6                		mov 	r10,@-r15
(2) 1185/ 6000DFA : 2FB6                		mov 	r11,@-r15
(2) 1186/ 6000DFC :                     		
(2) 1187/ 6000DFC :                     	; Object rotation
(2) 1188/ 6000DFC : 6523                		mov	r2,r5			; r5 - X
(2) 1189/ 6000DFE : 6643                		mov	r4,r6			; r6 - Z
(2) 1190/ 6000E00 : 50E5                  		mov 	@(mdl_x_rot,r14),r0
(2) 1191/ 6000E02 : 4009                  		shlr2	r0
(2) 1192/ 6000E04 : 4001                  		shlr	r0
(2) 1193/ 6000E06 : B08C                  		bsr	mdlrd_rotate
(2) 1194/ 6000E08 : 4019                		shlr8	r0
(2) 1195/ 6000E0A : 6273                   		mov	r7,r2
(2) 1196/ 6000E0C : 6533                   		mov	r3,r5
(2) 1197/ 6000E0E : 6683                  		mov	r8,r6
(2) 1198/ 6000E10 : 50E6                  		mov 	@(mdl_y_rot,r14),r0
(2) 1199/ 6000E12 : 4009                  		shlr2	r0
(2) 1200/ 6000E14 : 4001                  		shlr	r0
(2) 1201/ 6000E16 : B084                  		bsr	mdlrd_rotate
(2) 1202/ 6000E18 : 4019                		shlr8	r0
(2) 1203/ 6000E1A : 6483                   		mov	r8,r4
(2) 1204/ 6000E1C : 6523                   		mov	r2,r5
(2) 1205/ 6000E1E : 6673                   		mov	r7,r6
(2) 1206/ 6000E20 : 50E7                   		mov 	@(mdl_z_rot,r14),r0
(2) 1207/ 6000E22 : 4009                  		shlr2	r0
(2) 1208/ 6000E24 : 4001                  		shlr	r0
(2) 1209/ 6000E26 : B07C                  		bsr	mdlrd_rotate
(2) 1210/ 6000E28 : 4019                		shlr8	r0
(2) 1211/ 6000E2A : 6273                   		mov	r7,r2
(2) 1212/ 6000E2C : 6383                   		mov	r8,r3
(2) 1213/ 6000E2E : 55E2                		mov	@(mdl_x_pos,r14),r5
(2) 1214/ 6000E30 : 56E3                		mov	@(mdl_y_pos,r14),r6
(2) 1215/ 6000E32 : 57E4                		mov	@(mdl_z_pos,r14),r7
(2) 1216/ 6000E34 : 4519                		shlr8	r5
(2) 1217/ 6000E36 : 4619                		shlr8	r6
(2) 1218/ 6000E38 : 4719                		shlr8	r7
(2) 1219/ 6000E3A : 655F                		exts	r5,r5
(2) 1220/ 6000E3C : 666F                		exts	r6,r6		
(2) 1221/ 6000E3E : 677F                		exts	r7,r7		
(2) 1222/ 6000E40 : 325C                		add 	r5,r2
(2) 1223/ 6000E42 : 336C                		add 	r6,r3
(2) 1224/ 6000E44 : 347C                		add 	r7,r4
(2) 1225/ 6000E46 :                     
(2) 1226/ 6000E46 :                     	; Include camera changes
(2) 1227/ 6000E46 : DB33                		mov 	#RAM_Mars_ObjCamera,r11
(2) 1228/ 6000E48 : 55B0                		mov	@(cam_x_pos,r11),r5
(2) 1229/ 6000E4A : 56B1                		mov	@(cam_y_pos,r11),r6
(2) 1230/ 6000E4C : 57B2                		mov	@(cam_z_pos,r11),r7
(2) 1231/ 6000E4E : 50E0                		mov	@(mdl_data,r14),r0		; Layout object?
(2) 1232/ 6000E50 : 4000                		shll	r0
(2) 1233/ 6000E52 : 4015                		cmp/pl	r0
(2) 1234/ 6000E54 : 8902                		bt	.lay_move
(2) 1235/ 6000E56 : D030                		mov	#$FFFFF,r0			; Limit camera movement
(2) 1236/ 6000E58 : 2509                		and	r0,r5
(2) 1237/ 6000E5A :                     ; 		and	r0,r6
(2) 1238/ 6000E5A : 2709                		and	r0,r7
(2) 1239/ 6000E5C :                     .lay_move:
(2) 1240/ 6000E5C : 4519                		shlr8	r5
(2) 1241/ 6000E5E : 4619                		shlr8	r6
(2) 1242/ 6000E60 : 4719                		shlr8	r7
(2) 1243/ 6000E62 : 655F                		exts	r5,r5
(2) 1244/ 6000E64 : 666F                		exts	r6,r6		
(2) 1245/ 6000E66 : 677F                		exts	r7,r7
(2) 1246/ 6000E68 : 3258                		sub 	r5,r2
(2) 1247/ 6000E6A : 3368                		sub 	r6,r3
(2) 1248/ 6000E6C : 347C                		add 	r7,r4
(2) 1249/ 6000E6E :                     
(2) 1250/ 6000E6E : 6523                		mov	r2,r5
(2) 1251/ 6000E70 : 6643                		mov	r4,r6
(2) 1252/ 6000E72 : 50B3                  		mov 	@(cam_x_rot,r11),r0
(2) 1253/ 6000E74 : 4009                  		shlr2	r0
(2) 1254/ 6000E76 : 4001                  		shlr	r0
(2) 1255/ 6000E78 : B053                  		bsr	mdlrd_rotate
(2) 1256/ 6000E7A : 4019                		shlr8	r0
(2) 1257/ 6000E7C : 6273                   		mov	r7,r2
(2) 1258/ 6000E7E : 6483                   		mov	r8,r4
(2) 1259/ 6000E80 : 6533                   		mov	r3,r5
(2) 1260/ 6000E82 : 6683                  		mov	r8,r6
(2) 1261/ 6000E84 : 50B4                  		mov 	@(cam_y_rot,r11),r0
(2) 1262/ 6000E86 : 4009                  		shlr2	r0
(2) 1263/ 6000E88 : 4001                  		shlr	r0
(2) 1264/ 6000E8A : B04A                  		bsr	mdlrd_rotate
(2) 1265/ 6000E8C : 4019                		shlr8	r0
(2) 1266/ 6000E8E : 6483                   		mov	r8,r4
(2) 1267/ 6000E90 : 6523                   		mov	r2,r5
(2) 1268/ 6000E92 : 6673                   		mov	r7,r6
(2) 1269/ 6000E94 : 50B5                   		mov 	@(cam_z_rot,r11),r0
(2) 1270/ 6000E96 : 4009                  		shlr2	r0
(2) 1271/ 6000E98 : 4001                  		shlr	r0
(2) 1272/ 6000E9A : B042                  		bsr	mdlrd_rotate
(2) 1273/ 6000E9C : 4019                		shlr8	r0
(2) 1274/ 6000E9E : 6273                   		mov	r7,r2
(2) 1275/ 6000EA0 : 6383                   		mov	r8,r3
(2) 1276/ 6000EA2 :                     
(2) 1277/ 6000EA2 :                     ; 		mov	#-(SCREEN_WIDTH/2)<<4,r6
(2) 1278/ 6000EA2 :                     ; 		cmp/ge	r6,r2
(2) 1279/ 6000EA2 :                     ; 		bf	.x_forz
(2) 1280/ 6000EA2 :                     ; 		neg	r6,r6
(2) 1281/ 6000EA2 :                     ; 		cmp/ge	r6,r2
(2) 1282/ 6000EA2 :                     ; 		bf	.x_rsd
(2) 1283/ 6000EA2 :                     ; .x_forz:
(2) 1284/ 6000EA2 :                     ; 		mov	r6,r2
(2) 1285/ 6000EA2 :                     ; .x_rsd:	
(2) 1286/ 6000EA2 :                     
(2) 1287/ 6000EA2 :                     ; 		mov	#-(SCREEN_HEIGHT/2),r6
(2) 1288/ 6000EA2 :                     ; 		cmp/ge	r6,r3
(2) 1289/ 6000EA2 :                     ; 		bf	.y_forz
(2) 1290/ 6000EA2 :                     ; 		neg	r6,r6
(2) 1291/ 6000EA2 :                     ; 		cmp/ge	r6,r3
(2) 1292/ 6000EA2 :                     ; 		bf	.y_rsd
(2) 1293/ 6000EA2 :                     ; .y_forz:
(2) 1294/ 6000EA2 :                     ; 		mov	r6,r3
(2) 1295/ 6000EA2 :                     ; .y_rsd:
(2) 1296/ 6000EA2 :                     
(2) 1297/ 6000EA2 :                     	; Weak perspective projection
(2) 1298/ 6000EA2 :                     	; this is the best I got,
(2) 1299/ 6000EA2 :                     	; It breaks on large faces
(2) 1300/ 6000EA2 : 983D                		mov 	#_JR,r8
(2) 1301/ 6000EA4 : D71D                		mov	#320<<16,r7
(2) 1302/ 6000EA6 : 604B                		neg	r4,r0		; reverse Z
(2) 1303/ 6000EA8 :                     ; 		add	#-16,r0
(2) 1304/ 6000EA8 : 4015                		cmp/pl	r0
(2) 1305/ 6000EAA : 890A                		bt	.inside
(2) 1306/ 6000EAC : 4701                		shlr	r7
(2) 1307/ 6000EAE :                     
(2) 1308/ 6000EAE : 327D                		dmuls	r7,r2
(2) 1309/ 6000EB0 : 000A                		sts	mach,r0
(2) 1310/ 6000EB2 : 021A                		sts	macl,r2
(2) 1311/ 6000EB4 : 220D                		xtrct	r0,r2
(2) 1312/ 6000EB6 : 337D                		dmuls	r7,r3
(2) 1313/ 6000EB8 : 000A                		sts	mach,r0
(2) 1314/ 6000EBA : 031A                		sts	macl,r3
(2) 1315/ 6000EBC : 230D                		xtrct	r0,r3
(2) 1316/ 6000EBE : A00C                		bra	.zmulti
(2) 1317/ 6000EC0 : 0009                		nop
(2) 1318/ 6000EC2 :                     .inside:
(2) 1319/ 6000EC2 : 2802                		mov 	r0,@r8
(2) 1320/ 6000EC4 : 1871                		mov 	r7,@(4,r8)
(2) 1321/ 6000EC6 : 0009                		nop
(2) 1322/ 6000EC8 : 5781                		mov 	@(4,r8),r7
(2) 1323/ 6000ECA : 327D                		dmuls	r7,r2
(2) 1324/ 6000ECC : 000A                		sts	mach,r0
(2) 1325/ 6000ECE : 021A                		sts	macl,r2
(2) 1326/ 6000ED0 : 220D                		xtrct	r0,r2
(2) 1327/ 6000ED2 : 337D                		dmuls	r7,r3
(2) 1328/ 6000ED4 : 000A                		sts	mach,r0
(2) 1329/ 6000ED6 : 031A                		sts	macl,r3
(2) 1330/ 6000ED8 : 230D                		xtrct	r0,r3
(2) 1331/ 6000EDA :                     .zmulti:
(2) 1332/ 6000EDA :                     
(2) 1333/ 6000EDA : 6BF6                		mov	@r15+,r11
(2) 1334/ 6000EDC : 6AF6                		mov	@r15+,r10
(2) 1335/ 6000EDE : 69F6                		mov	@r15+,r9
(2) 1336/ 6000EE0 : 68F6                		mov	@r15+,r8
(2) 1337/ 6000EE2 : 67F6                		mov	@r15+,r7
(2) 1338/ 6000EE4 : 66F6                		mov	@r15+,r6
(2) 1339/ 6000EE6 : 65F6                		mov	@r15+,r5
(2) 1340/ 6000EE8 :                     		
(2) 1341/ 6000EE8 :                     	; Set the most far points
(2) 1342/ 6000EE8 :                     	; for each direction (X,Y,Z)
(2) 1343/ 6000EE8 : 34D7                		cmp/gt	r13,r4
(2) 1344/ 6000EEA : 8B00                		bf	.save_z2
(2) 1345/ 6000EEC : 6D43                		mov	r4,r13
(2) 1346/ 6000EEE :                     .save_z2:
(2) 1347/ 6000EEE : 3457                		cmp/gt	r5,r4
(2) 1348/ 6000EF0 : 8900                		bt	.save_z
(2) 1349/ 6000EF2 : 6543                		mov	r4,r5
(2) 1350/ 6000EF4 :                     .save_z:
(2) 1351/ 6000EF4 : 3287                		cmp/gt	r8,r2
(2) 1352/ 6000EF6 : 8B00                		bf	.x_lw
(2) 1353/ 6000EF8 : 6823                		mov	r2,r8
(2) 1354/ 6000EFA :                     .x_lw:
(2) 1355/ 6000EFA : 3297                		cmp/gt	r9,r2
(2) 1356/ 6000EFC : 8900                		bt	.x_rw
(2) 1357/ 6000EFE : 6923                		mov	r2,r9
(2) 1358/ 6000F00 :                     .x_rw:
(2) 1359/ 6000F00 : 33B7                		cmp/gt	r11,r3
(2) 1360/ 6000F02 : 8B00                		bf	.y_lw
(2) 1361/ 6000F04 : 6B33                		mov	r3,r11
(2) 1362/ 6000F06 :                     .y_lw:
(2) 1363/ 6000F06 : 33C7                		cmp/gt	r12,r3
(2) 1364/ 6000F08 : 8900                		bt	.y_rw
(2) 1365/ 6000F0A : 6C33                		mov	r3,r12
(2) 1366/ 6000F0C :                     .y_rw:
(2) 1367/ 6000F0C :                     
(2) 1368/ 6000F0C : 4F26                		lds	@r15+,pr
(2) 1369/ 6000F0E : 000B                		rts
(2) 1370/ 6000F10 : 0009                		nop
(2) 1371/ 6000F12 :                     		align 4
(2) 1372/ 6000F14 : 0600 6C68 000F FFFF 		ltorg
                    0140 0000 FF00      
(2) 1373/ 6000F22 :                     
(2) 1374/ 6000F22 :                     ; ------------------------------
(2) 1375/ 6000F22 :                     ; Rotate point
(2) 1376/ 6000F22 :                     ;
(2) 1377/ 6000F22 :                     ; Entry:
(2) 1378/ 6000F22 :                     ; r5: x
(2) 1379/ 6000F22 :                     ; r6: y
(2) 1380/ 6000F22 :                     ; r0: theta
(2) 1381/ 6000F22 :                     ;
(2) 1382/ 6000F22 :                     ; Returns:
(2) 1383/ 6000F22 :                     ; r7: (x  cos @) + (y sin @)
(2) 1384/ 6000F22 :                     ; r8: (x -sin @) + (y cos @)
(2) 1385/ 6000F22 :                     ; ------------------------------
(2) 1386/ 6000F22 :                     
(2) 1387/ 6000F22 :                     mdlrd_rotate:
(2) 1388/ 6000F22 : 97E7                    		mov	#$7FF,r7
(2) 1389/ 6000F24 : 2079                    		and	r7,r0
(2) 1390/ 6000F26 : 4008                   		shll2	r0
(2) 1391/ 6000F28 : D75E                		mov	#sin_table,r7
(2) 1392/ 6000F2A : D85F                		mov	#sin_table+$800,r8
(2) 1393/ 6000F2C : 097E                		mov	@(r0,r7),r9
(2) 1394/ 6000F2E : 0A8E                		mov	@(r0,r8),r10
(2) 1395/ 6000F30 :                     
(2) 1396/ 6000F30 : 3A5D                		dmuls	r5,r10		; x cos @
(2) 1397/ 6000F32 : 071A                		sts	macl,r7
(2) 1398/ 6000F34 : 000A                		sts	mach,r0
(2) 1399/ 6000F36 : 270D                		xtrct	r0,r7
(2) 1400/ 6000F38 : 396D                		dmuls	r6,r9		; y sin @
(2) 1401/ 6000F3A : 081A                		sts	macl,r8
(2) 1402/ 6000F3C : 000A                		sts	mach,r0
(2) 1403/ 6000F3E : 280D                		xtrct	r0,r8
(2) 1404/ 6000F40 : 378C                		add	r8,r7
(2) 1405/ 6000F42 :                     
(2) 1406/ 6000F42 : 699B                		neg	r9,r9
(2) 1407/ 6000F44 : 395D                		dmuls	r5,r9		; x -sin @
(2) 1408/ 6000F46 : 081A                		sts	macl,r8
(2) 1409/ 6000F48 : 000A                		sts	mach,r0
(2) 1410/ 6000F4A : 280D                		xtrct	r0,r8
(2) 1411/ 6000F4C : 3A6D                		dmuls	r6,r10		; y cos @
(2) 1412/ 6000F4E : 091A                		sts	macl,r9
(2) 1413/ 6000F50 : 000A                		sts	mach,r0
(2) 1414/ 6000F52 : 290D                		xtrct	r0,r9
(2) 1415/ 6000F54 : 389C                		add	r9,r8
(2) 1416/ 6000F56 : 000B                 		rts
(2) 1417/ 6000F58 : 0009                		nop
(2) 1418/ 6000F5A :                     		align 4
(2) 1419/ 6000F5C :                     
(1)  785/ 6000F5C :                     		include "system/mars/sound.asm"
(2)    1/ 6000F5C :                     ; ; ====================================================================
(2)    2/ 6000F5C :                     ; ; ----------------------------------------------------------------
(2)    3/ 6000F5C :                     ; ; MARS Sound
(2)    4/ 6000F5C :                     ; ; ----------------------------------------------------------------
(2)    5/ 6000F5C :                     ; 
(2)    6/ 6000F5C :                     ; MAX_PWMCHNL	equ	7
(2)    7/ 6000F5C :                     ; 
(2)    8/ 6000F5C :                     ; ; 32X sound channel
(2)    9/ 6000F5C :                     ; 		struct 0
(2)   10/ 6000F5C :                     ; mchnsnd_enbl	ds.l 1
(2)   11/ 6000F5C :                     ; mchnsnd_read	ds.l 1		; 0 - off
(2)   12/ 6000F5C :                     ; mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   13/ 6000F5C :                     ; mchnsnd_start	ds.l 1
(2)   14/ 6000F5C :                     ; mchnsnd_end	ds.l 1
(2)   15/ 6000F5C :                     ; mchnsnd_loop	ds.l 1
(2)   16/ 6000F5C :                     ; mchnsnd_pitch	ds.l 1
(2)   17/ 6000F5C :                     ; mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   18/ 6000F5C :                     ; mchnsnd_vol	ds.l 1
(2)   19/ 6000F5C :                     ; sizeof_sndchn	ds.l 0
(2)   20/ 6000F5C :                     ; 		finish
(2)   21/ 6000F5C :                     ; 
(2)   22/ 6000F5C :                     ; ; ====================================================================
(2)   23/ 6000F5C :                     ; ; ----------------------------------------------------------------
(2)   24/ 6000F5C :                     ; ; Mars PWM playback (Runs on PWM interrupt)
(2)   25/ 6000F5C :                     ; ; 
(2)   26/ 6000F5C :                     ; ; READ/START/END/LOOP points are floating values (xxxxxx.00)
(2)   27/ 6000F5C :                     ; ; 
(2)   28/ 6000F5C :                     ; ; r0-r9 only
(2)   29/ 6000F5C :                     ; ; ----------------------------------------------------------------
(2)   30/ 6000F5C :                     ; 
(2)   31/ 6000F5C :                     ; ; NUMCHANNELS	equ	4
(2)   32/ 6000F5C :                     ; ; PWMSIZE		equ	2	; number of elemts in the PWM structure
(2)   33/ 6000F5C :                     ; ; 
(2)   34/ 6000F5C :                     ; ; PWMADDRESS	equ	4
(2)   35/ 6000F5C :                     ; ; 
(2)   36/ 6000F5C :                     ; ; process_pwm:
(2)   37/ 6000F5C :                     ; ; 
(2)   38/ 6000F5C :                     ; 
(2)   39/ 6000F5C :                     ; 
(2)   40/ 6000F5C :                     ; MarsSound_ReadPwm:
(2)   41/ 6000F5C :                     ; 		mov	r2,@-r15
(2)   42/ 6000F5C :                     ; 		mov	r3,@-r15
(2)   43/ 6000F5C :                     ; 		mov	r4,@-r15
(2)   44/ 6000F5C :                     ; 		mov	r5,@-r15
(2)   45/ 6000F5C :                     ; 		mov	r6,@-r15
(2)   46/ 6000F5C :                     ; 		mov	r7,@-r15
(2)   47/ 6000F5C :                     ; 		mov	r8,@-r15
(2)   48/ 6000F5C :                     ; 		mov	r9,@-r15
(2)   49/ 6000F5C :                     ; 		sts	macl,@-r15
(2)   50/ 6000F5C :                     ; 		
(2)   51/ 6000F5C :                     ; ; ------------------------------------------------
(2)   52/ 6000F5C :                     ; ; Process PWM request(s) from GEMA sound driver
(2)   53/ 6000F5C :                     ; 		mov.w	@(marsGbl_PwmTrkUpd,gbr),r0
(2)   54/ 6000F5C :                     ; 		cmp/eq	#0,r0
(2)   55/ 6000F5C :                     ; 		bt	.retry
(2)   56/ 6000F5C :                     ; 		mov	#MarsSnd_PwmPlyData,r8
(2)   57/ 6000F5C :                     ; 		mov	#MarsSnd_PwmTrkData,r7
(2)   58/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r6
(2)   59/ 6000F5C :                     ; 		mov	#MAX_PWMCHNL,r5
(2)   60/ 6000F5C :                     ; .next_pwm:
(2)   61/ 6000F5C :                     ; 		mov.b	@r8,r0
(2)   62/ 6000F5C :                     ; 		mov	r0,r3
(2)   63/ 6000F5C :                     ; 		and	#%01100000,r0
(2)   64/ 6000F5C :                     ; 		cmp/eq	#%01000000,r0
(2)   65/ 6000F5C :                     ; 		bt	.play
(2)   66/ 6000F5C :                     ; 		cmp/eq	#%00100000,r0
(2)   67/ 6000F5C :                     ; 		bf	.pwmcont
(2)   68/ 6000F5C :                     ; 		
(2)   69/ 6000F5C :                     ; 		mov.b	@r8,r0
(2)   70/ 6000F5C :                     ; 		and	#%1111,r0
(2)   71/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r6
(2)   72/ 6000F5C :                     ; 		mov 	#sizeof_sndchn,r1
(2)   73/ 6000F5C :                     ; 		mulu	r1,r0
(2)   74/ 6000F5C :                     ; 		sts	macl,r0
(2)   75/ 6000F5C :                     ; 		add 	r0,r6
(2)   76/ 6000F5C :                     ; 		mov	#0,r0
(2)   77/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_enbl,r6)
(2)   78/ 6000F5C :                     ; 		bra	.pwmcont
(2)   79/ 6000F5C :                     ; 		nop
(2)   80/ 6000F5C :                     ; .play:
(2)   81/ 6000F5C :                     ; 		mov.b	@r8,r0
(2)   82/ 6000F5C :                     ; 		and	#%1111,r0
(2)   83/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r6
(2)   84/ 6000F5C :                     ; 		mov 	#sizeof_sndchn,r1
(2)   85/ 6000F5C :                     ; 		mulu	r1,r0
(2)   86/ 6000F5C :                     ; 		sts	macl,r0
(2)   87/ 6000F5C :                     ; 		add 	r0,r6
(2)   88/ 6000F5C :                     ; 		
(2)   89/ 6000F5C :                     ; 		mov.b	@(4,r8),r0
(2)   90/ 6000F5C :                     ; 		and	#$FF,r0
(2)   91/ 6000F5C :                     ; 		shll8	r0
(2)   92/ 6000F5C :                     ; 		mov	r0,r4
(2)   93/ 6000F5C :                     ; 		mov.b	@(3,r8),r0
(2)   94/ 6000F5C :                     ; 		and	#$FF,r0
(2)   95/ 6000F5C :                     ; 		or	r4,r0
(2)   96/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_pitch,r6)
(2)   97/ 6000F5C :                     ; 		mov.b	@(6,r8),r0
(2)   98/ 6000F5C :                     ; 		and	#$FF,r0
(2)   99/ 6000F5C :                     ; 		shll2	r0
(2)  100/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_vol,r6)	
(2)  101/ 6000F5C :                     ; 
(2)  102/ 6000F5C :                     ; 		mov.b	@(5,r8),r0
(2)  103/ 6000F5C :                     ; 		shll2	r0
(2)  104/ 6000F5C :                     ; 		shll	r0
(2)  105/ 6000F5C :                     ; 		mov	r7,r4
(2)  106/ 6000F5C :                     ; 		add	r0,r4
(2)  107/ 6000F5C :                     ; 		add	#4,r4			; Move to pointer
(2)  108/ 6000F5C :                     ; 		mov	@r4,r4
(2)  109/ 6000F5C :                     ; 		mov	@r4+,r0
(2)  110/ 6000F5C :                     ; 		mov	r0,r2
(2)  111/ 6000F5C :                     ; 		mov 	#$FF000000,r3
(2)  112/ 6000F5C :                     ; 		and 	r3,r2
(2)  113/ 6000F5C :                     ; 		mov 	r2,@(mchnsnd_bank,r6)
(2)  114/ 6000F5C :                     ; 		shll8	r0
(2)  115/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_start,r6)
(2)  116/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_read,r6)
(2)  117/ 6000F5C :                     ; 
(2)  118/ 6000F5C :                     ; 		mov	@r4+,r0
(2)  119/ 6000F5C :                     ; 		shll8	r0
(2)  120/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_end,r6)
(2)  121/ 6000F5C :                     ; 		mov	@r4+,r0
(2)  122/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_loop,r6)
(2)  123/ 6000F5C :                     ; ; 		mov	@r4+,r1
(2)  124/ 6000F5C :                     ; 		mov.b	@(7,r8),r0
(2)  125/ 6000F5C :                     ; 		and	#$FF,r0
(2)  126/ 6000F5C :                     ; ; 		or	r1,r0
(2)  127/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_flags,r6)
(2)  128/ 6000F5C :                     ; 		mov	#1,r0
(2)  129/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_enbl,r6)
(2)  130/ 6000F5C :                     ; .pwmcont:
(2)  131/ 6000F5C :                     ; 		mov	r3,r0
(2)  132/ 6000F5C :                     ; 		and	#%10011111,r0
(2)  133/ 6000F5C :                     ; 		mov.b	r0,@r8
(2)  134/ 6000F5C :                     ; 		add	#8,r8
(2)  135/ 6000F5C :                     ; 		dt	r5
(2)  136/ 6000F5C :                     ; 		bf	.next_pwm
(2)  137/ 6000F5C :                     ; 		
(2)  138/ 6000F5C :                     ; 		mov	#_sysreg+comm4,r1
(2)  139/ 6000F5C :                     ; 		mov	#$00,r0			; SH is busy
(2)  140/ 6000F5C :                     ; 		mov.b	r0,@(1,r1)
(2)  141/ 6000F5C :                     ; 		mov	#0,r0
(2)  142/ 6000F5C :                     ; 		mov.w	r0,@(marsGbl_PwmTrkUpd,gbr)
(2)  143/ 6000F5C :                     ; ; ------------------------------------------------
(2)  144/ 6000F5C :                     ; 
(2)  145/ 6000F5C :                     ; .retry:
(2)  146/ 6000F5C :                     ; 		mov 	#0,r5			; LEFT start
(2)  147/ 6000F5C :                     ; 		mov 	#0,r6			; RIGHT start
(2)  148/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  149/ 6000F5C :                     ; 		mov 	#MAX_PWMCHNL,r7
(2)  150/ 6000F5C :                     ; .loop:
(2)  151/ 6000F5C :                     ; 		mov	@(mchnsnd_enbl,r8),r0
(2)  152/ 6000F5C :                     ; 		cmp/eq	#0,r0
(2)  153/ 6000F5C :                     ; 		bf	.on
(2)  154/ 6000F5C :                     ; .silent:
(2)  155/ 6000F5C :                     ; 		mov	#$7F,r0
(2)  156/ 6000F5C :                     ; 		mov	r0,r2
(2)  157/ 6000F5C :                     ; 		bra	.skip
(2)  158/ 6000F5C :                     ; 		mov	r0,r1
(2)  159/ 6000F5C :                     ; .on:
(2)  160/ 6000F5C :                     ; 		mov 	@(mchnsnd_read,r8),r4
(2)  161/ 6000F5C :                     ; 		mov 	@(mchnsnd_end,r8),r0
(2)  162/ 6000F5C :                     ; 		cmp/ge	r0,r4
(2)  163/ 6000F5C :                     ; 		bf	.read
(2)  164/ 6000F5C :                     ; 		mov 	@(mchnsnd_loop,r8),r0
(2)  165/ 6000F5C :                     ; 		cmp/eq	#-1,r0
(2)  166/ 6000F5C :                     ; 		bf	.loop_me
(2)  167/ 6000F5C :                     ; 		mov 	#0,r0
(2)  168/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  169/ 6000F5C :                     ; 		mov 	@(mchnsnd_start,r8),r4
(2)  170/ 6000F5C :                     ; 		bra	.silent
(2)  171/ 6000F5C :                     ; 		nop
(2)  172/ 6000F5C :                     ; .loop_me:
(2)  173/ 6000F5C :                     ; 		mov 	@(mchnsnd_start,r8),r4
(2)  174/ 6000F5C :                     ; 		add	r0,r4
(2)  175/ 6000F5C :                     ; 		
(2)  176/ 6000F5C :                     ; ; read wave
(2)  177/ 6000F5C :                     ; .read:
(2)  178/ 6000F5C :                     ; 		mov 	@(mchnsnd_flags,r8),r0
(2)  179/ 6000F5C :                     ; 		mov	#$00FFFFFF,r1
(2)  180/ 6000F5C :                     ; 		mov 	r4,r3
(2)  181/ 6000F5C :                     ; 		shlr8	r3
(2)  182/ 6000F5C :                     ; 		tst	#%10000000,r0
(2)  183/ 6000F5C :                     ; 		bt	.mono_a
(2)  184/ 6000F5C :                     ; 		add	#-1,r1
(2)  185/ 6000F5C :                     ; .mono_a
(2)  186/ 6000F5C :                     ; 		and	r1,r3
(2)  187/ 6000F5C :                     ; 		mov 	@(mchnsnd_bank,r8),r1
(2)  188/ 6000F5C :                     ; 		mov 	@(mchnsnd_pitch,r8),r9
(2)  189/ 6000F5C :                     ; 		or	r1,r3
(2)  190/ 6000F5C :                     ; 		mov.b	@r3+,r1
(2)  191/ 6000F5C :                     ; 		mov	r1,r2
(2)  192/ 6000F5C :                     ; 		tst	#%10000000,r0
(2)  193/ 6000F5C :                     ; 		bt	.mono
(2)  194/ 6000F5C :                     ; 		mov.b	@r3+,r2
(2)  195/ 6000F5C :                     ; 		shll	r9
(2)  196/ 6000F5C :                     ; .mono:
(2)  197/ 6000F5C :                     ; 		add	r9,r4
(2)  198/ 6000F5C :                     ; 		mov	r4,@(mchnsnd_read,r8)
(2)  199/ 6000F5C :                     ; 		mov	#$FF,r3
(2)  200/ 6000F5C :                     ; 		and	r3,r1
(2)  201/ 6000F5C :                     ; 		and	r3,r2
(2)  202/ 6000F5C :                     ; 
(2)  203/ 6000F5C :                     ; 	; Volume goes down only.
(2)  204/ 6000F5C :                     ; 	; vol=0 normal
(2)  205/ 6000F5C :                     ; 		mov	@(mchnsnd_vol,r8),r9
(2)  206/ 6000F5C :                     ; 		add	#1,r9
(2)  207/ 6000F5C :                     ; 		mulu	r9,r1
(2)  208/ 6000F5C :                     ; 		sts	macl,r4
(2)  209/ 6000F5C :                     ; 		shlr8	r4
(2)  210/ 6000F5C :                     ; 		sub	r4,r1
(2)  211/ 6000F5C :                     ; 		mulu	r9,r2
(2)  212/ 6000F5C :                     ; 		sts	macl,r4
(2)  213/ 6000F5C :                     ; 		shlr8	r4
(2)  214/ 6000F5C :                     ; 		sub	r4,r2
(2)  215/ 6000F5C :                     ; 		tst	#%00000001,r0		; TODO: temporal way to check L/R
(2)  216/ 6000F5C :                     ; 		bf	.no_l
(2)  217/ 6000F5C :                     ; 		mov	#$7F,r1
(2)  218/ 6000F5C :                     ; .no_l:
(2)  219/ 6000F5C :                     ; 		tst	#%00000010,r0
(2)  220/ 6000F5C :                     ; 		bf	.skip	
(2)  221/ 6000F5C :                     ; 		mov	#$7F,r2		
(2)  222/ 6000F5C :                     ; .skip:
(2)  223/ 6000F5C :                     ; 		add	#1,r1
(2)  224/ 6000F5C :                     ; 		add	#1,r2
(2)  225/ 6000F5C :                     ; 		add	r1,r5
(2)  226/ 6000F5C :                     ; 		add	r2,r6
(2)  227/ 6000F5C :                     ; 		add	#sizeof_sndchn,r8
(2)  228/ 6000F5C :                     ; 		dt	r7
(2)  229/ 6000F5C :                     ; 		bf	.loop
(2)  230/ 6000F5C :                     ; 		
(2)  231/ 6000F5C :                     ; 	; ***This check is for emus only***
(2)  232/ 6000F5C :                     ; 	; It recreates what happens to the PWM
(2)  233/ 6000F5C :                     ; 	; in real hardware when it overflows
(2)  234/ 6000F5C :                     ; 		mov	#$3FF,r0
(2)  235/ 6000F5C :                     ; 		cmp/gt	r0,r5
(2)  236/ 6000F5C :                     ; 		bf	.lmuch
(2)  237/ 6000F5C :                     ; 		mov	r0,r5
(2)  238/ 6000F5C :                     ; .lmuch:		cmp/gt	r0,r6
(2)  239/ 6000F5C :                     ; 		bf	.rmuch
(2)  240/ 6000F5C :                     ; 		mov	r0,r6
(2)  241/ 6000F5C :                     ; .rmuch:			
(2)  242/ 6000F5C :                     ; 		mov	#_sysreg+lchwidth,r3
(2)  243/ 6000F5C :                     ; 		mov	#_sysreg+rchwidth,r4
(2)  244/ 6000F5C :                     ;  		mov.w	r5,@r3
(2)  245/ 6000F5C :                     ;  		mov.w	r6,@r4
(2)  246/ 6000F5C :                     ; ; 		mov	#_sysreg+monowidth,r3	; Not needed on HW
(2)  247/ 6000F5C :                     ; ; 		mov.b	@r3,r0
(2)  248/ 6000F5C :                     ; ; 		tst	#$80,r0
(2)  249/ 6000F5C :                     ; ; 		bf	.retry
(2)  250/ 6000F5C :                     ; 	
(2)  251/ 6000F5C :                     ; 		lds	@r15+,macl
(2)  252/ 6000F5C :                     ; 		mov	@r15+,r9
(2)  253/ 6000F5C :                     ; 		mov	@r15+,r8
(2)  254/ 6000F5C :                     ; 		mov	@r15+,r7
(2)  255/ 6000F5C :                     ; 		mov	@r15+,r6
(2)  256/ 6000F5C :                     ; 		mov	@r15+,r5
(2)  257/ 6000F5C :                     ; 		mov	@r15+,r4
(2)  258/ 6000F5C :                     ; 		mov	@r15+,r3
(2)  259/ 6000F5C :                     ; 		mov	@r15+,r2
(2)  260/ 6000F5C :                     ; 		rts
(2)  261/ 6000F5C :                     ; 		nop
(2)  262/ 6000F5C :                     ; 		align 4
(2)  263/ 6000F5C :                     ; 		ltorg
(2)  264/ 6000F5C :                     ; 
(2)  265/ 6000F5C :                     ; ; ; ====================================================================
(2)  266/ 6000F5C :                     ; ; ; ----------------------------------------------------------------
(2)  267/ 6000F5C :                     ; ; ; Mars PWM control (Runs on VBlank)
(2)  268/ 6000F5C :                     ; ; ; ----------------------------------------------------------------
(2)  269/ 6000F5C :                     ; ; 
(2)  270/ 6000F5C :                     ; ; MarsSound_Run:
(2)  271/ 6000F5C :                     ; ; 		sts	pr,@-r15
(2)  272/ 6000F5C :                     ; ; 
(2)  273/ 6000F5C :                     ; ; 		lds	@r15+,pr
(2)  274/ 6000F5C :                     ; ; 		rts
(2)  275/ 6000F5C :                     ; ; 		nop
(2)  276/ 6000F5C :                     ; ; 		align 4
(2)  277/ 6000F5C :                     ; 
(2)  278/ 6000F5C :                     ; ; ====================================================================
(2)  279/ 6000F5C :                     ; ; ----------------------------------------------------------------
(2)  280/ 6000F5C :                     ; ; Subroutines
(2)  281/ 6000F5C :                     ; ; ----------------------------------------------------------------
(2)  282/ 6000F5C :                     ; 
(2)  283/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  284/ 6000F5C :                     ; ; Init Sound PWM
(2)  285/ 6000F5C :                     ; ; 
(2)  286/ 6000F5C :                     ; ; Frequency values:
(2)  287/ 6000F5C :                     ; ; 23011361 NTSC
(2)  288/ 6000F5C :                     ; ; 22801467 PAL
(2)  289/ 6000F5C :                     ; ; 
(2)  290/ 6000F5C :                     ; ; NOTE: cycle causes a CLICK to sound
(2)  291/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  292/ 6000F5C :                     ; 
(2)  293/ 6000F5C :                     ; MarsSound_Init:
(2)  294/ 6000F5C :                     ; 		sts	pr,@-r15
(2)  295/ 6000F5C :                     ; 		stc	gbr,@-r15
(2)  296/ 6000F5C :                     ; 		mov	#_sysreg,r0
(2)  297/ 6000F5C :                     ; 		ldc	r0,gbr
(2)  298/ 6000F5C :                     ; 		mov	#$0105,r0
(2)  299/ 6000F5C :                     ; 		mov.w	r0,@(timerctl,gbr)
(2)  300/ 6000F5C :                     ; 		mov	#((((23011361<<1)/22050+1)>>1)+1),r0	; 22050 best
(2)  301/ 6000F5C :                     ; 		mov.w	r0,@(cycle,gbr)
(2)  302/ 6000F5C :                     ; 		mov	#1,r0
(2)  303/ 6000F5C :                     ; 		mov.w	r0,@(monowidth,gbr)
(2)  304/ 6000F5C :                     ; 		mov.w	r0,@(monowidth,gbr)
(2)  305/ 6000F5C :                     ; 		mov.w	r0,@(monowidth,gbr)
(2)  306/ 6000F5C :                     ; 
(2)  307/ 6000F5C :                     ; 		mov	#0,r0
(2)  308/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r1
(2)  309/ 6000F5C :                     ; 		mov	#MAX_PWMCHNL,r2
(2)  310/ 6000F5C :                     ; 		mov	#sizeof_sndchn,r3
(2)  311/ 6000F5C :                     ; .clr_enbl:
(2)  312/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_enbl,r1)
(2)  313/ 6000F5C :                     ; 		dt	r2
(2)  314/ 6000F5C :                     ; 		bf/s	.clr_enbl
(2)  315/ 6000F5C :                     ; 		add	r3,r1
(2)  316/ 6000F5C :                     ; 		ldc	@r15+,gbr
(2)  317/ 6000F5C :                     ; 		lds	@r15+,pr
(2)  318/ 6000F5C :                     ; 		rts
(2)  319/ 6000F5C :                     ; 		nop
(2)  320/ 6000F5C :                     ; 		align 4
(2)  321/ 6000F5C :                     ; 
(2)  322/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  323/ 6000F5C :                     ; ; MarsSound_SetPwm
(2)  324/ 6000F5C :                     ; ; 
(2)  325/ 6000F5C :                     ; ; Set new sound data to a single channel
(2)  326/ 6000F5C :                     ; ; 
(2)  327/ 6000F5C :                     ; ; Input:
(2)  328/ 6000F5C :                     ; ; r1 | Channel
(2)  329/ 6000F5C :                     ; ; r2 | Start address
(2)  330/ 6000F5C :                     ; ; r3 | End address
(2)  331/ 6000F5C :                     ; ; r4 | Loop address (-1, dont loop)
(2)  332/ 6000F5C :                     ; ; r5 | Pitch ($xxxxxx.xx)
(2)  333/ 6000F5C :                     ; ; r6 | Volume
(2)  334/ 6000F5C :                     ; ; r7 | Flags (Currently: %xxxxxxLR)
(2)  335/ 6000F5C :                     ; ; 
(2)  336/ 6000F5C :                     ; ; Uses:
(2)  337/ 6000F5C :                     ; ; r0,r8-r9
(2)  338/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  339/ 6000F5C :                     ; 
(2)  340/ 6000F5C :                     ; MarsSound_SetPwm:
(2)  341/ 6000F5C :                     ; 		stc	sr,r9
(2)  342/ 6000F5C :                     ; 		mov	#$F0,r0
(2)  343/ 6000F5C :                     ; 		ldc	r0,sr
(2)  344/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  345/ 6000F5C :                     ; 		mov 	#sizeof_sndchn,r0
(2)  346/ 6000F5C :                     ; 		mulu	r1,r0
(2)  347/ 6000F5C :                     ; 		sts	macl,r0
(2)  348/ 6000F5C :                     ; 		add 	r0,r8
(2)  349/ 6000F5C :                     ; 		mov 	#0,r0
(2)  350/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  351/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  352/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  353/ 6000F5C :                     ; 		
(2)  354/ 6000F5C :                     ; 		mov 	r5,@(mchnsnd_pitch,r8)
(2)  355/ 6000F5C :                     ; 		mov 	r6,@(mchnsnd_vol,r8)
(2)  356/ 6000F5C :                     ; 		mov 	r7,@(mchnsnd_flags,r8)
(2)  357/ 6000F5C :                     ; 
(2)  358/ 6000F5C :                     ; 		mov 	r2,r0				; Set MSB
(2)  359/ 6000F5C :                     ; 		mov 	#$FF000000,r7
(2)  360/ 6000F5C :                     ; 		and 	r7,r0
(2)  361/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  362/ 6000F5C :                     ; 		mov 	r4,r0				; Set POINTS
(2)  363/ 6000F5C :                     ; 		cmp/eq	#-1,r0
(2)  364/ 6000F5C :                     ; 		bt	.endmrk
(2)  365/ 6000F5C :                     ; 		shll8	r0
(2)  366/ 6000F5C :                     ; .endmrk:
(2)  367/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_loop,r8)
(2)  368/ 6000F5C :                     ; 		mov 	r3,r0
(2)  369/ 6000F5C :                     ; 		shll8	r0
(2)  370/ 6000F5C :                     ; 		mov	r0,@(mchnsnd_end,r8)
(2)  371/ 6000F5C :                     ; 		mov 	r2,r0
(2)  372/ 6000F5C :                     ; 		shll8	r0
(2)  373/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_start,r8)	
(2)  374/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  375/ 6000F5C :                     ; 		mov 	#1,r0
(2)  376/ 6000F5C :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  377/ 6000F5C :                     ;  		ldc	r9,sr
(2)  378/ 6000F5C :                     ; 		rts
(2)  379/ 6000F5C :                     ; 		nop
(2)  380/ 6000F5C :                     ; 		align 4
(2)  381/ 6000F5C :                     ; 
(2)  382/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  383/ 6000F5C :                     ; ; MarsSound_MulPwmPitch
(2)  384/ 6000F5C :                     ; ; 
(2)  385/ 6000F5C :                     ; ; Set pitch data to 8 consecutive sound channels
(2)  386/ 6000F5C :                     ; ; starting from specific slot
(2)  387/ 6000F5C :                     ; ; 
(2)  388/ 6000F5C :                     ; ; Input:
(2)  389/ 6000F5C :                     ; ; r1 | Channel pitch slot 0
(2)  390/ 6000F5C :                     ; ; r2 | Pitch data
(2)  391/ 6000F5C :                     ; ; 
(2)  392/ 6000F5C :                     ; ; Uses:
(2)  393/ 6000F5C :                     ; ; r3,r4
(2)  394/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  395/ 6000F5C :                     ; 
(2)  396/ 6000F5C :                     ; MarsSound_SetPwmPitch:
(2)  397/ 6000F5C :                     ; 		stc	sr,r9
(2)  398/ 6000F5C :                     ; 		mov	#$F0,r0
(2)  399/ 6000F5C :                     ; 		ldc	r0,sr
(2)  400/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  401/ 6000F5C :                     ; 		mov 	#sizeof_sndchn,r0
(2)  402/ 6000F5C :                     ; 		mulu	r1,r0
(2)  403/ 6000F5C :                     ; 		sts	macl,r0
(2)  404/ 6000F5C :                     ; 		add 	r0,r8
(2)  405/ 6000F5C :                     ; 
(2)  406/ 6000F5C :                     ; 		mov	@(mchnsnd_enbl,r8),r0
(2)  407/ 6000F5C :                     ; 		cmp/eq	#1,r0
(2)  408/ 6000F5C :                     ; 		bf	.off_1
(2)  409/ 6000F5C :                     ; 		mov	@(mchnsnd_read,r8),r0
(2)  410/ 6000F5C :                     ; ; 		mov	#$FFFFFF00,r1
(2)  411/ 6000F5C :                     ; ; 		and	r1,r0
(2)  412/ 6000F5C :                     ; ; 		mov	r0,@(mchnsnd_read,r8)
(2)  413/ 6000F5C :                     ; 		mov	r2,@(mchnsnd_pitch,r8)
(2)  414/ 6000F5C :                     ; .off_1:
(2)  415/ 6000F5C :                     ;  		ldc	r9,sr
(2)  416/ 6000F5C :                     ; 		rts
(2)  417/ 6000F5C :                     ; 		nop
(2)  418/ 6000F5C :                     ; 		align 4
(2)  419/ 6000F5C :                     ; 
(2)  420/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  421/ 6000F5C :                     ; ; MarsSound_MulPwmPitch
(2)  422/ 6000F5C :                     ; ; 
(2)  423/ 6000F5C :                     ; ; Set pitch data to 8 consecutive sound channels
(2)  424/ 6000F5C :                     ; ; starting from specific slot
(2)  425/ 6000F5C :                     ; ; 
(2)  426/ 6000F5C :                     ; ; Input:
(2)  427/ 6000F5C :                     ; ; r1 | Channel pitch slot 0
(2)  428/ 6000F5C :                     ; ; r2 | Pitch data
(2)  429/ 6000F5C :                     ; ; 
(2)  430/ 6000F5C :                     ; ; Uses:
(2)  431/ 6000F5C :                     ; ; r3,r4
(2)  432/ 6000F5C :                     ; ; --------------------------------------------------------
(2)  433/ 6000F5C :                     ; 
(2)  434/ 6000F5C :                     ; MarsSound_PwmEnable:
(2)  435/ 6000F5C :                     ; 		stc	sr,r9
(2)  436/ 6000F5C :                     ; 		mov	#$F0,r0
(2)  437/ 6000F5C :                     ; 		ldc	r0,sr
(2)  438/ 6000F5C :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  439/ 6000F5C :                     ; 		mov 	#sizeof_sndchn,r0
(2)  440/ 6000F5C :                     ; 		mulu	r1,r0
(2)  441/ 6000F5C :                     ; 		sts	macl,r0
(2)  442/ 6000F5C :                     ; 		add 	r0,r8
(2)  443/ 6000F5C :                     ; 
(2)  444/ 6000F5C :                     ; 		mov	r2,@(mchnsnd_enbl,r8)
(2)  445/ 6000F5C :                     ;  		ldc	r9,sr
(2)  446/ 6000F5C :                     ; 		rts
(2)  447/ 6000F5C :                     ; 		nop
(2)  448/ 6000F5C :                     ; 		align 4
(2)  449/ 6000F5C :                     ; 		
(2)  450/ 6000F5C :                     ; ; ====================================================================
(2)  451/ 6000F5C :                     ; 
(2)  452/ 6000F5C :                     ; ; 		include "data/sound/instr_sdram.asm"
(2)  453/ 6000F5C :                     ; 
(2)  454/ 6000F5C :                     ; ; ====================================================================
(2)  455/ 6000F5C :                     ; 
(2)  456/ 6000F5C :                     ; 		ltorg			; Save literals
(2)  457/ 6000F5C :                     
(1)  786/ 6000F5C :                     		align 4
(1)  787/ 6000F5C :                     
(1)  788/ 6000F5C :                     ; ====================================================================
(1)  789/ 6000F5C :                     ; ----------------------------------------------------------------
(1)  790/ 6000F5C :                     ; Master entry
(1)  791/ 6000F5C :                     ; ----------------------------------------------------------------
(1)  792/ 6000F5C :                     
(1)  793/ 6000F5C :                     		align 4
(1)  794/ 6000F5C :                     SH2_M_Entry:
(1)  795/ 6000F5C : DF53                		mov	#CS3|$40000,r15			; Set default Stack for Master
(1)  796/ 6000F5E : 91CA                		mov	#_FRT,r1
(1)  797/ 6000F60 : E000                		mov     #0,r0
(1)  798/ 6000F62 : 8010                		mov.b   r0,@(0,r1)
(1)  799/ 6000F64 : E0E2                		mov     #$FFFFFFE2,r0
(1)  800/ 6000F66 : 8017                		mov.b   r0,@(7,r1)
(1)  801/ 6000F68 : E000                		mov     #0,r0
(1)  802/ 6000F6A : 8014                		mov.b   r0,@(4,r1)
(1)  803/ 6000F6C : E001                		mov     #1,r0
(1)  804/ 6000F6E : 8015                		mov.b   r0,@(5,r1)
(1)  805/ 6000F70 : E000                		mov     #0,r0
(1)  806/ 6000F72 : 8016                		mov.b   r0,@(6,r1)
(1)  807/ 6000F74 : E001                		mov     #1,r0
(1)  808/ 6000F76 : 8011                		mov.b   r0,@(1,r1)
(1)  809/ 6000F78 : E000                		mov     #0,r0
(1)  810/ 6000F7A : 8013                		mov.b   r0,@(3,r1)
(1)  811/ 6000F7C : 8012                		mov.b   r0,@(2,r1)
(1)  812/ 6000F7E : 90BB                		mov.l   #$FFFFFEE2,r0			; Watchdog: Set interrupt priority bits (IPRA)
(1)  813/ 6000F80 : E150                		mov     #%0101<<4,r1
(1)  814/ 6000F82 : 2011                		mov.w   r1,@r0
(1)  815/ 6000F84 : 90B9                		mov.l   #$FFFFFEE4,r0
(1)  816/ 6000F86 : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer (VBR + this/4) (WITV)
(1)  817/ 6000F88 : 4118                		shll8   r1
(1)  818/ 6000F8A : 2011                		mov.w   r1,@r0
(1)  819/ 6000F8C :                     
(1)  820/ 6000F8C :                     ; ------------------------------------------------
(1)  821/ 6000F8C :                     ; Wait for Genesis and Slave CPU
(1)  822/ 6000F8C :                     ; ------------------------------------------------
(1)  823/ 6000F8C :                     
(1)  824/ 6000F8C :                     .wait_md:
(1)  825/ 6000F8C : D248                		mov 	#_sysreg+comm0,r2		; Wait for Genesis
(1)  826/ 6000F8E : 6022                		mov.l	@r2,r0
(1)  827/ 6000F90 : 8800                		cmp/eq	#0,r0
(1)  828/ 6000F92 : 8BFB                		bf	.wait_md
(1)  829/ 6000F94 : D147                		mov.l	#"SLAV",r1
(1)  830/ 6000F96 :                     .wait_slave:
(1)  831/ 6000F96 : 5022                		mov.l	@(8,r2),r0			; Wait for Slave CPU to finish booting
(1)  832/ 6000F98 : 3010                		cmp/eq	r1,r0
(1)  833/ 6000F9A : 8BFC                		bf	.wait_slave
(1)  834/ 6000F9C : E000                		mov.l	#0,r0				; clear "SLAV"
(1)  835/ 6000F9E : 1202                		mov.l	r0,@(8,r2)
(1)  836/ 6000FA0 : 2202                		mov.l	r0,@r2
(1)  837/ 6000FA2 :                     		
(1)  838/ 6000FA2 :                     ; ====================================================================
(1)  839/ 6000FA2 :                     ; ----------------------------------------------------------------
(1)  840/ 6000FA2 :                     ; Master main code
(1)  841/ 6000FA2 :                     ; 
(1)  842/ 6000FA2 :                     ; This CPU is exclusively used for visual tasks:
(1)  843/ 6000FA2 :                     ; Polygons, Sprites, Backgrounds...
(1)  844/ 6000FA2 :                     ;
(1)  845/ 6000FA2 :                     ; To interact with the models use the Slave CPU and request
(1)  846/ 6000FA2 :                     ; a drawing task there
(1)  847/ 6000FA2 :                     ; ----------------------------------------------------------------
(1)  848/ 6000FA2 :                     
(1)  849/ 6000FA2 :                     SH2_M_HotStart:
(1)  850/ 6000FA2 : DF42                		mov	#CS3|$40000,r15				; Stack again if coming from RESET
(1)  851/ 6000FA4 : DE44                		mov	#RAM_Mars_Global,r14			; GBR - Global values/variables
(1)  852/ 6000FA6 : 4E1E                		ldc	r14,gbr
(1)  853/ 6000FA8 : 90A8                		mov	#$F0,r0					; Interrupts OFF
(1)  854/ 6000FAA : 400E                		ldc	r0,sr
(1)  855/ 6000FAC : 91A7                		mov.l	#_CCR,r1
(1)  856/ 6000FAE : E008                		mov	#%00001000,r0				; Cache OFF
(1)  857/ 6000FB0 : 2101                		mov.w	r0,@r1
(1)  858/ 6000FB2 : E019                		mov	#%00011001,r0				; Cache purge / Two-way mode / Cache ON
(1)  859/ 6000FB4 : 2101                		mov.w	r0,@r1
(1)  860/ 6000FB6 : D141                		mov	#_sysreg,r1
(1)  861/ 6000FB8 : E00A                		mov	#VIRQ_ON|CMDIRQ_ON,r0			; Enable usage of these interrupts
(1)  862/ 6000FBA : 8011                    		mov.b	r0,@(intmask,r1)			; (Watchdog is external)
(1)  863/ 6000FBC : D140                		mov 	#CACHE_MASTER,r1			; Transfer Master's fast-code to CACHE
(1)  864/ 6000FBE : D241                		mov 	#$C0000000,r2
(1)  865/ 6000FC0 : 939E                		mov 	#(CACHE_MASTER_E-CACHE_MASTER)/4,r3
(1)  866/ 6000FC2 :                     .copy:
(1)  867/ 6000FC2 : 6016                		mov 	@r1+,r0
(1)  868/ 6000FC4 : 2202                		mov 	r0,@r2
(1)  869/ 6000FC6 : 7204                		add 	#4,r2
(1)  870/ 6000FC8 : 4310                		dt	r3
(1)  871/ 6000FCA : 8BFA                		bf	.copy
(1)  872/ 6000FCC : D03E                		mov	#MarsVideo_Init,r0		; Init Video
(1)  873/ 6000FCE : 400B                		jsr	@r0
(1)  874/ 6000FD0 : 0009                		nop
(1)  875/ 6000FD2 :                     ; 		bsr	MarsSound_Init			; Init Sound
(1)  876/ 6000FD2 :                     ; 		nop
(1)  877/ 6000FD2 : E020                		mov.l	#$20,r0				; Interrupts ON
(1)  878/ 6000FD4 : 400E                		ldc	r0,sr
(1)  879/ 6000FD6 :                     
(1)  880/ 6000FD6 :                     ; --------------------------------------------------------
(1)  881/ 6000FD6 :                     ; Loop
(1)  882/ 6000FD6 :                     ; --------------------------------------------------------
(1)  883/ 6000FD6 :                     
(1)  884/ 6000FD6 :                     master_loop:
(1)  885/ 6000FD6 :                     	; --------------------
(1)  886/ 6000FD6 :                     	; DEBUG counter
(1)  887/ 6000FD6 :                     ; 		mov	#_sysreg+comm2,r4		; DEBUG COUNTER
(1)  888/ 6000FD6 :                     ; 		mov.b	@r4,r0
(1)  889/ 6000FD6 :                     ; 		add	#1,r0
(1)  890/ 6000FD6 :                     ; 		mov.b	r0,@r4
(1)  891/ 6000FD6 :                     	; --------------------
(1)  892/ 6000FD6 :                     	
(1)  893/ 6000FD6 : D13D                		mov	#_sysreg+comm14,r1
(1)  894/ 6000FD8 : 6010                		mov.b	@r1,r0
(1)  895/ 6000FDA : 6203                		mov	r0,r2
(1)  896/ 6000FDC : C980                		and 	#$80,r0
(1)  897/ 6000FDE : 8800                		cmp/eq	#0,r0			; Genesis requested tasks? (bit 7)
(1)  898/ 6000FE0 : 8B0C                		bf	.md_req			; If yes, process them first.
(1)  899/ 6000FE2 : 6023                		mov	r2,r0			; OR Process tasks from Slave SH2
(1)  900/ 6000FE4 : C97F                		and	#$7F,r0
(1)  901/ 6000FE6 : 4008                		shll2	r0
(1)  902/ 6000FE8 : D139                		mov	#.list,r1
(1)  903/ 6000FEA : 001E                		mov	@(r1,r0),r0
(1)  904/ 6000FEC : 402B                		jmp	@r0
(1)  905/ 6000FEE : 0009                		nop
(1)  906/ 6000FF0 :                     		align 4
(1)  907/ 6000FF0 :                     
(1)  908/ 6000FF0 :                     ; ------------------------------------------------
(1)  909/ 6000FF0 :                     ; Graphic processing list for Master
(1)  910/ 6000FF0 :                     ; ------------------------------------------------
(1)  911/ 6000FF0 :                     
(1)  912/ 6000FF0 :                     .list:
(1)  913/ 6000FF0 : 0600 0FD6           		dc.l master_loop	; Null task
(1)  914/ 6000FF4 : 0600 102E           		dc.l .draw_objects
(1)  915/ 6000FF8 : 0600 0FD6           		dc.l master_loop
(1)  916/ 6000FFC :                     
(1)  917/ 6000FFC :                     ; ------------------------------------------------
(1)  918/ 6000FFC :                     ; Process Visual/Audio requests from Genesis
(1)  919/ 6000FFC :                     ; ------------------------------------------------
(1)  920/ 6000FFC :                     
(1)  921/ 6000FFC :                     .md_req:
(1)  922/ 6000FFC : 4F03                		stc	sr,@-r15
(1)  923/ 6000FFE : 907D                		mov	#$F0,r0			; Disable interrupts
(1)  924/ 6001000 : 400E                		ldc	r0,sr
(1)  925/ 6001002 : ED10                		mov	#MAX_MDTASKS,r13
(1)  926/ 6001004 : DE33                		mov	#RAM_Mars_MdTasksFifo_M,r14
(1)  927/ 6001006 :                     .next_req:
(1)  928/ 6001006 : 2FD6                		mov	r13,@-r15
(1)  929/ 6001008 : 60E2                		mov	@r14,r0
(1)  930/ 600100A : 8800                		cmp/eq	#0,r0
(1)  931/ 600100C : 8903                		bt	.no_task
(1)  932/ 600100E : 400B                		jsr	@r0
(1)  933/ 6001010 : 0009                		nop
(1)  934/ 6001012 : 200A                		xor	r0,r0
(1)  935/ 6001014 : 2E02                		mov	r0,@r14
(1)  936/ 6001016 :                     .no_task:
(1)  937/ 6001016 : E020                		mov	#MAX_MDTSKARG*4,r0
(1)  938/ 6001018 : 6DF6                		mov	@r15+,r13
(1)  939/ 600101A : 4D10                		dt	r13
(1)  940/ 600101C : 8FF3                		bf/s	.next_req
(1)  941/ 600101E : 3E0C                		add	r0,r14
(1)  942/ 6001020 : D12A                		mov	#_sysreg+comm14,r1
(1)  943/ 6001022 : 6010                		mov.b	@r1,r0
(1)  944/ 6001024 : C97F                		and	#$7F,r0
(1)  945/ 6001026 : 2100                		mov.b	r0,@r1
(1)  946/ 6001028 : 4F07                		ldc 	@r15+,sr		; Re-enable interrupts
(1)  947/ 600102A : AFD4                		bra	master_loop
(1)  948/ 600102C : 0009                		nop
(1)  949/ 600102E :                     
(1)  950/ 600102E :                     ; --------------------------------------------------------
(1)  951/ 600102E :                     ; Drawing task $01
(1)  952/ 600102E :                     ;
(1)  953/ 600102E :                     ; Polygons mode
(1)  954/ 600102E :                     ; --------------------------------------------------------
(1)  955/ 600102E :                     
(1)  956/ 600102E :                     .draw_objects:
(1)  957/ 600102E : 9166                		mov	#_CCR,r1			; <-- Required for Watchdog
(1)  958/ 6001030 : E008                		mov	#%00001000,r0			; Two-way mode
(1)  959/ 6001032 : 2101                		mov.w	r0,@r1
(1)  960/ 6001034 : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1)  961/ 6001036 : 2101                		mov.w	r0,@r1
(1)  962/ 6001038 : D027                		mov	#MarsVideo_SetWatchdog,r0
(1)  963/ 600103A : 400B                		jsr	@r0
(1)  964/ 600103C : 0009                		nop
(1)  965/ 600103E :                     		
(1)  966/ 600103E :                     	; While we are doing this, the watchdog is
(1)  967/ 600103E :                     	; working on the background drawing the polygons
(1)  968/ 600103E :                     	; using the "pieces" list
(1)  969/ 600103E :                     	; 
(1)  970/ 600103E :                     	; r14 - Polygon pointers list
(1)  971/ 600103E :                     	; r13 - Number of polygons to build
(1)  972/ 600103E : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0	; Start drawing polygons from the READ buffer
(1)  973/ 6001040 : C801                		tst     #1,r0				; Check for which buffer to use
(1)  974/ 6001042 : 8903                		bt	.page_2
(1)  975/ 6001044 : DE25                		mov 	#RAM_Mars_Plgn_ZList_0,r14
(1)  976/ 6001046 : DD26                		mov	#RAM_Mars_PlgnNum_0,r13
(1)  977/ 6001048 : A004                		bra	.cont_plgn
(1)  978/ 600104A : 0009                		nop
(1)  979/ 600104C :                     .page_2:
(1)  980/ 600104C : DE25                		mov 	#RAM_Mars_Plgn_ZList_1,r14
(1)  981/ 600104E : DD26                		mov	#RAM_Mars_PlgnNum_1,r13
(1)  982/ 6001050 : 0009                		nop
(1)  983/ 6001052 : 0009                		nop
(1)  984/ 6001054 :                     .cont_plgn:
(1)  985/ 6001054 : 6DD1                		mov.w	@r13,r13			; read from memory to register
(1)  986/ 6001056 : 4D15                		cmp/pl	r13				; zero?
(1)  987/ 6001058 : 8B0C                		bf	.skip
(1)  988/ 600105A :                     .loop:
(1)  989/ 600105A : 2FE6                		mov	r14,@-r15
(1)  990/ 600105C : 2FD6                		mov	r13,@-r15
(1)  991/ 600105E : 5EE1                		mov	@(4,r14),r14			; Get location of the polygon
(1)  992/ 6001060 : 4E15                		cmp/pl	r14				; Zero?
(1)  993/ 6001062 : 8B02                		bf	.invalid			; if yes, skip
(1)  994/ 6001064 : D021                		mov 	#MarsVideo_SlicePlgn,r0
(1)  995/ 6001066 : 400B                		jsr	@r0
(1)  996/ 6001068 : 0009                		nop
(1)  997/ 600106A :                     .invalid:
(1)  998/ 600106A : 6DF6                		mov	@r15+,r13
(1)  999/ 600106C : 6EF6                		mov	@r15+,r14
(1) 1000/ 600106E : 4D10                		dt	r13				; Decrement numof_polygons
(1) 1001/ 6001070 : 8FF3                		bf/s	.loop
(1) 1002/ 6001072 : 7E08                		add	#8,r14				; Move to next entry
(1) 1003/ 6001074 :                     .skip:
(1) 1004/ 6001074 :                     		
(1) 1005/ 6001074 :                     	; --------------------------------------
(1) 1006/ 6001074 : C50C                .wait_pz: 	mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces remaining on Watchdog?
(1) 1007/ 6001076 : 8800                		cmp/eq	#0,r0
(1) 1008/ 6001078 : 8BFC                		bf	.wait_pz
(1) 1009/ 600107A : C50D                .wait_task:	mov.w	@(marsGbl_DrwTask,gbr),r0	; Any drawing task active?
(1) 1010/ 600107C : 8800                		cmp/eq	#0,r0
(1) 1011/ 600107E : 8BFC                		bf	.wait_task
(1) 1012/ 6001080 : 913F                		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1) 1013/ 6001082 : 903F                		mov.w   #$A518,r0
(1) 1014/ 6001084 : 2101                		mov.w   r0,@r1
(1) 1015/ 6001086 : D11A                		mov	#_vdpreg,r1
(1) 1016/ 6001088 : 8515                .waitfb:	mov.w	@(vdpsts,r1),r0			; Wait until any line-fill finishes.
(1) 1017/ 600108A : C802                		tst	#%10,r0
(1) 1018/ 600108C : 8BFC                		bf	.waitfb
(1) 1019/ 600108E : 841B                		mov.b	@(framectl,r1),r0		; Frameswap request, Next Watchdog will
(1) 1020/ 6001090 : CA01                		xor	#1,r0				; check for it later.
(1) 1021/ 6001092 : 801B                		mov.b	r0,@(framectl,r1)		; Save new bit
(1) 1022/ 6001094 : C024                		mov.b	r0,@(marsGbl_CurrFb,gbr)	; And a copy for checking
(1) 1023/ 6001096 :                     
(1) 1024/ 6001096 :                     	; --------------------
(1) 1025/ 6001096 :                     	; DEBUG counter
(1) 1026/ 6001096 :                     ; 		mov	#_sysreg+comm0+1,r4
(1) 1027/ 6001096 :                     ; 		mov.b	@r4,r0
(1) 1028/ 6001096 :                     ; 		add	#1,r0
(1) 1029/ 6001096 :                     ; 		mov.b	r0,@r4
(1) 1030/ 6001096 :                     	; --------------------
(1) 1031/ 6001096 :                     
(1) 1032/ 6001096 : D10D                		mov	#_sysreg+comm14,r1		; Clear task number
(1) 1033/ 6001098 : 6010                		mov.b	@r1,r0
(1) 1034/ 600109A : C980                		and	#$80,r0
(1) 1035/ 600109C : 2100                		mov.b	r0,@r1
(1) 1036/ 600109E : AF9A                		bra	master_loop
(1) 1037/ 60010A0 : 0009                		nop
(1) 1038/ 60010A2 :                     		align 4
(1) 1039/ 60010A4 : 0600 1BD4 0600 23D4 		ltorg
                    0604 0000 2000 4020 
                    534C 4156 0600 6C10 
                    2000 4000 0600 1444 
                    C000 0000 0600 0646 
                    2000 402E 0600 0FF0 
                    0603 48D8 0600 071A 
                    0603 0D78 0603 4ED8 
                    0603 2B28 0603 4EDA 
                    C000 03D0 2000 4100 
                    07FF FE10 FEE2 FEE4 
                    00F0 FE92 01D5 FE80 
                    A518                
(1) 1040/ 6001106 :                     
(1) 1041/ 6001106 :                     ; ====================================================================
(1) 1042/ 6001106 :                     ; ----------------------------------------------------------------
(1) 1043/ 6001106 :                     ; Slave entry
(1) 1044/ 6001106 :                     ; ----------------------------------------------------------------
(1) 1045/ 6001106 :                     
(1) 1046/ 6001106 :                     		align 4
(1) 1047/ 6001108 :                     SH2_S_Entry:
(1) 1048/ 6001108 : DF51                		mov.l	#CS3|$3F000,r15			; Reset stack
(1) 1049/ 600110A : 91CB                		mov	#_FRT,r1
(1) 1050/ 600110C : E000                		mov     #0,r0
(1) 1051/ 600110E : 8010                		mov.b   r0,@(0,r1)
(1) 1052/ 6001110 : E0E2                		mov     #$FFFFFFE2,r0
(1) 1053/ 6001112 : 8017                		mov.b   r0,@(7,r1)
(1) 1054/ 6001114 : E000                		mov     #0,r0
(1) 1055/ 6001116 : 8014                		mov.b   r0,@(4,r1)
(1) 1056/ 6001118 : E001                		mov     #1,r0
(1) 1057/ 600111A : 8015                		mov.b   r0,@(5,r1)
(1) 1058/ 600111C : E000                		mov     #0,r0
(1) 1059/ 600111E : 8016                		mov.b   r0,@(6,r1)
(1) 1060/ 6001120 : E001                		mov     #1,r0
(1) 1061/ 6001122 : 8011                		mov.b   r0,@(1,r1)
(1) 1062/ 6001124 : E000                		mov     #0,r0
(1) 1063/ 6001126 : 8013                		mov.b   r0,@(3,r1)
(1) 1064/ 6001128 : 8012                		mov.b   r0,@(2,r1)
(1) 1065/ 600112A : 90BC                		mov.l   #$FFFFFEE2,r0			; Watchdog: Set interrupt priority bits (IPRA)
(1) 1066/ 600112C : E150                		mov     #%0101<<4,r1
(1) 1067/ 600112E : 2011                		mov.w   r1,@r0
(1) 1068/ 6001130 : 90BA                		mov.l   #$FFFFFEE4,r0
(1) 1069/ 6001132 : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer (VBR + this/4) (WITV)
(1) 1070/ 6001134 : 4118                		shll8   r1
(1) 1071/ 6001136 : 2011                		mov.w   r1,@r0
(1) 1072/ 6001138 :                     		
(1) 1073/ 6001138 :                     ; ------------------------------------------------
(1) 1074/ 6001138 :                     ; Wait for Genesis, report to Master SH2
(1) 1075/ 6001138 :                     ; ------------------------------------------------
(1) 1076/ 6001138 :                     
(1) 1077/ 6001138 :                     .wait_md:
(1) 1078/ 6001138 : D246                		mov 	#_sysreg+comm0,r2
(1) 1079/ 600113A : 6022                		mov.l	@r2,r0
(1) 1080/ 600113C : 8800                		cmp/eq	#0,r0
(1) 1081/ 600113E : 8BFB                		bf	.wait_md
(1) 1082/ 6001140 : D045                		mov.l	#"SLAV",r0
(1) 1083/ 6001142 : 1202                		mov.l	r0,@(8,r2)
(1) 1084/ 6001144 :                     
(1) 1085/ 6001144 :                     ; ====================================================================
(1) 1086/ 6001144 :                     ; ----------------------------------------------------------------
(1) 1087/ 6001144 :                     ; Slave main code
(1) 1088/ 6001144 :                     ; ----------------------------------------------------------------
(1) 1089/ 6001144 :                     
(1) 1090/ 6001144 :                     SH2_S_HotStart:
(1) 1091/ 6001144 : DF42                		mov.l	#CS3|$3F000,r15			; Reset stack
(1) 1092/ 6001146 : DE45                		mov.l	#RAM_Mars_Global,r14		; Reset gbr
(1) 1093/ 6001148 : 4E1E                		ldc	r14,gbr
(1) 1094/ 600114A : 90AE                		mov.l	#$F0,r0				; Interrupts OFF
(1) 1095/ 600114C : 400E                		ldc	r0,sr
(1) 1096/ 600114E : 91AD                		mov.l	#_CCR,r1
(1) 1097/ 6001150 : E008                		mov	#%00001000,r0			; Cache OFF
(1) 1098/ 6001152 : 2101                		mov.w	r0,@r1
(1) 1099/ 6001154 : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1) 1100/ 6001156 : 2101                		mov.w	r0,@r1
(1) 1101/ 6001158 : D141                		mov	#_sysreg,r1
(1) 1102/ 600115A : E002                		mov	#CMDIRQ_ON,r0			; Enable these interrupts
(1) 1103/ 600115C : 8011                    		mov.b	r0,@(intmask,r1)		; (Watchdog is external)
(1) 1104/ 600115E : D141                		mov 	#CACHE_SLAVE,r1			; Transfer Slave's fast-code to CACHE
(1) 1105/ 6001160 : D241                		mov 	#$C0000000,r2
(1) 1106/ 6001162 : 93A4                		mov 	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r3
(1) 1107/ 6001164 :                     .copy:
(1) 1108/ 6001164 : 6016                		mov 	@r1+,r0
(1) 1109/ 6001166 : 2202                		mov 	r0,@r2
(1) 1110/ 6001168 : 7204                		add 	#4,r2
(1) 1111/ 600116A : 4310                		dt	r3
(1) 1112/ 600116C : 8BFA                		bf	.copy
(1) 1113/ 600116E : D03F                		mov	#MarsMdl_Init,r0		; REMINDER: 1 meter = $10000
(1) 1114/ 6001170 : 400B                		jsr	@r0
(1) 1115/ 6001172 : 0009                		nop
(1) 1116/ 6001174 : E020                		mov.l	#$20,r0				; Interrupts ON
(1) 1117/ 6001176 : 400E                		ldc	r0,sr
(1) 1118/ 6001178 :                     		
(1) 1119/ 6001178 :                     ; --------------------------------------------------------
(1) 1120/ 6001178 :                     ; Loop
(1) 1121/ 6001178 :                     ; --------------------------------------------------------
(1) 1122/ 6001178 :                     
(1) 1123/ 6001178 :                     slave_loop:
(1) 1124/ 6001178 :                     
(1) 1125/ 6001178 :                     ; ------------------------------------------------
(1) 1126/ 6001178 :                     ; Process task requests from Genesis
(1) 1127/ 6001178 :                     ; ------------------------------------------------
(1) 1128/ 6001178 :                     
(1) 1129/ 6001178 : D13D                		mov	#_sysreg+comm15,r1
(1) 1130/ 600117A : 6010                		mov.b	@r1,r0
(1) 1131/ 600117C : C980                		and	#$80,r0
(1) 1132/ 600117E : 8800                		cmp/eq	#0,r0
(1) 1133/ 6001180 : 8912                		bt	.no_req
(1) 1134/ 6001182 : ED10                		mov	#MAX_MDTASKS,r13
(1) 1135/ 6001184 : DE3B                		mov	#RAM_Mars_MdTasksFifo_S,r14
(1) 1136/ 6001186 :                     .next_req:
(1) 1137/ 6001186 : 2FD6                		mov	r13,@-r15
(1) 1138/ 6001188 : 60E2                		mov	@r14,r0
(1) 1139/ 600118A : 8800                		cmp/eq	#0,r0
(1) 1140/ 600118C : 8903                		bt	.no_task
(1) 1141/ 600118E : 400B                		jsr	@r0
(1) 1142/ 6001190 : 0009                		nop
(1) 1143/ 6001192 : 200A                		xor	r0,r0
(1) 1144/ 6001194 : 2E02                		mov	r0,@r14
(1) 1145/ 6001196 :                     .no_task:
(1) 1146/ 6001196 : E020                		mov	#MAX_MDTSKARG*4,r0
(1) 1147/ 6001198 : 6DF6                		mov	@r15+,r13
(1) 1148/ 600119A : 4D10                		dt	r13
(1) 1149/ 600119C : 8FF3                		bf/s	.next_req
(1) 1150/ 600119E : 3E0C                		add	r0,r14
(1) 1151/ 60011A0 : D133                		mov	#_sysreg+comm15,r1
(1) 1152/ 60011A2 : 6010                		mov.b	@r1,r0
(1) 1153/ 60011A4 : C97F                		and	#$7F,r0
(1) 1154/ 60011A6 : 2100                		mov.b	r0,@r1
(1) 1155/ 60011A8 :                     .no_req:
(1) 1156/ 60011A8 : D131                		mov	#_sysreg+comm15,r1
(1) 1157/ 60011AA : 6010                		mov.b	@r1,r0
(1) 1158/ 60011AC : C97F                		and	#$7F,r0
(1) 1159/ 60011AE : 8801                		cmp/eq	#1,r0
(1) 1160/ 60011B0 : 8BE2                		bf	slave_loop
(1) 1161/ 60011B2 :                     	
(1) 1162/ 60011B2 :                     ; --------------------------------------------------------
(1) 1163/ 60011B2 :                     ; Start building polygons from models
(1) 1164/ 60011B2 :                     ; 
(1) 1165/ 60011B2 :                     ; *** CAMERA ANIMATION IS DONE ON THE 68K ***
(1) 1166/ 60011B2 :                     ; --------------------------------------------------------
(1) 1167/ 60011B2 :                     
(1) 1168/ 60011B2 : E000                		mov	#0,r0
(1) 1169/ 60011B4 : C10A                		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(1) 1170/ 60011B6 : D130                		mov 	#RAM_Mars_Polygons_0,r1
(1) 1171/ 60011B8 : D230                		mov	#RAM_Mars_Plgn_ZList_0,r2
(1) 1172/ 60011BA : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1) 1173/ 60011BC : C801                		tst     #1,r0
(1) 1174/ 60011BE : 8901                		bt	.go_mdl
(1) 1175/ 60011C0 : D12F                		mov 	#RAM_Mars_Polygons_1,r1
(1) 1176/ 60011C2 : D230                		mov	#RAM_Mars_Plgn_ZList_1,r2
(1) 1177/ 60011C4 :                     .go_mdl:
(1) 1178/ 60011C4 : 6013                		mov	r1,r0
(1) 1179/ 60011C6 : C203                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(1) 1180/ 60011C8 : 6023                		mov	r2,r0
(1) 1181/ 60011CA : C202                		mov	r0,@(marsGbl_CurrZList,gbr)
(1) 1182/ 60011CC : 9170                		mov	#$FFFFFE80,r1
(1) 1183/ 60011CE : 9070                		mov.w	#$5A7F,r0			; Watchdog wait timer
(1) 1184/ 60011D0 : 2101                		mov.w	r0,@r1
(1) 1185/ 60011D2 : 906F                		mov.w	#$A538,r0			; Watchdog ON
(1) 1186/ 60011D4 : 2101                		mov.w	r0,@r1
(1) 1187/ 60011D6 :                     
(1) 1188/ 60011D6 :                     ; ----------------------------------------
(1) 1189/ 60011D6 :                     
(1) 1190/ 60011D6 : 9169                		mov	#_CCR,r1			; <-- Required for Watchdog
(1) 1191/ 60011D8 : E008                		mov	#%00001000,r0			; Two-way mode
(1) 1192/ 60011DA : 2101                		mov.w	r0,@r1
(1) 1193/ 60011DC : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1) 1194/ 60011DE : 2101                		mov.w	r0,@r1
(1) 1195/ 60011E0 : D029                		mov	#MarsLay_Read,r0		; Build layout inside camera
(1) 1196/ 60011E2 : 400B                		jsr	@r0				; takes 9 object slots
(1) 1197/ 60011E4 : 0009                		nop
(1) 1198/ 60011E6 : DE29                		mov	#RAM_Mars_Objects,r14		; Build all objects
(1) 1199/ 60011E8 : ED18                		mov	#MAX_MODELS,r13
(1) 1200/ 60011EA :                     .loop:
(1) 1201/ 60011EA : 50E0                		mov	@(mdl_data,r14),r0		; Object model data == 0 or -1?
(1) 1202/ 60011EC : 4015                		cmp/pl	r0
(1) 1203/ 60011EE : 8B08                		bf	.invlid
(1) 1204/ 60011F0 : D027                		mov	#MarsMdl_ReadModel,r0
(1) 1205/ 60011F2 : 400B                		jsr	@r0
(1) 1206/ 60011F4 : 2FD6                		mov	r13,@-r15
(1) 1207/ 60011F6 : 6DF6                		mov	@r15+,r13
(1) 1208/ 60011F8 : E000                		mov	#0,r0
(1) 1209/ 60011FA : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Ran out of space to store faces?
(1) 1210/ 60011FC : 915B                		mov	#MAX_FACES,r1
(1) 1211/ 60011FE : 3013                		cmp/ge	r1,r0
(1) 1212/ 6001200 : 8902                		bt	.skip
(1) 1213/ 6001202 :                     .invlid:
(1) 1214/ 6001202 : 4D10                		dt	r13
(1) 1215/ 6001204 : 8FF1                		bf/s	.loop
(1) 1216/ 6001206 : 7E30                		add	#sizeof_mdlobj,r14
(1) 1217/ 6001208 :                     .skip:
(1) 1218/ 6001208 : E001                		mov	#1,r0
(1) 1219/ 600120A : C113                		mov.w	r0,@(marsGbl_ZSortReq,gbr)
(1) 1220/ 600120C :                     
(1) 1221/ 600120C :                     ; ----------------------------------------
(1) 1222/ 600120C :                     
(1) 1223/ 600120C :                     .wait_z:
(1) 1224/ 600120C : C513                		mov.w	@(marsGbl_ZSortReq,gbr),r0
(1) 1225/ 600120E : 8801                		cmp/eq	#1,r0
(1) 1226/ 6001210 : 89FC                		bt	.wait_z
(1) 1227/ 6001212 : 914D                		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1) 1228/ 6001214 : 9050                		mov.w   #$A518,r0
(1) 1229/ 6001216 : 2101                		mov.w   r0,@r1
(1) 1230/ 6001218 :                     
(1) 1231/ 6001218 :                     ; ----------------------------------------
(1) 1232/ 6001218 :                     
(1) 1233/ 6001218 :                     ; 		mov 	#RAM_Mars_Plgn_ZList_0,r14
(1) 1234/ 6001218 : DD1E                		mov 	#RAM_Mars_PlgnNum_0,r13
(1) 1235/ 600121A : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1) 1236/ 600121C : C801                		tst     #1,r0
(1) 1237/ 600121E : 8900                		bt	.page_2
(1) 1238/ 6001220 :                     ; 		mov 	#RAM_Mars_Plgn_ZList_1,r14
(1) 1239/ 6001220 : DD1D                		mov 	#RAM_Mars_PlgnNum_1,r13
(1) 1240/ 6001222 :                     .page_2:
(1) 1241/ 6001222 : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0
(1) 1242/ 6001224 : 2D01                		mov.w	r0,@r13
(1) 1243/ 6001226 :                     
(1) 1244/ 6001226 : D41D                		mov	#_sysreg+comm2,r4		; DEBUG COUNTER
(1) 1245/ 6001228 :                     ; 		mov	#0,r0
(1) 1246/ 6001228 : 2401                		mov.w	r0,@r4
(1) 1247/ 600122A : D21D                		mov	#_sysreg+comm14,r2
(1) 1248/ 600122C :                     .mstr_busy:
(1) 1249/ 600122C : 6020                		mov.b	@r2,r0
(1) 1250/ 600122E : C97F                		and	#$7F,r0
(1) 1251/ 6001230 : 8800                		cmp/eq	#0,r0
(1) 1252/ 6001232 : 8BFB                		bf	.mstr_busy			; Skip frame
(1) 1253/ 6001234 : C50B                		mov.w	@(marsGbl_PolyBuffNum,gbr),r0	; Swap polygon buffer
(1) 1254/ 6001236 : CA01                 		xor	#1,r0
(1) 1255/ 6001238 : C10B                 		mov.w	r0,@(marsGbl_PolyBuffNum,gbr)
(1) 1256/ 600123A : E101                 		mov	#1,r1				; Set task $01 to Master
(1) 1257/ 600123C : 6020                		mov.b	@r2,r0
(1) 1258/ 600123E : C980                		and	#$80,r0
(1) 1259/ 6001240 : 201B                		or	r1,r0
(1) 1260/ 6001242 : 2200                		mov.b	r0,@r2
(1) 1261/ 6001244 :                     		
(1) 1262/ 6001244 : D10A                		mov	#_sysreg+comm15,r1
(1) 1263/ 6001246 : 6010                		mov.b	@r1,r0
(1) 1264/ 6001248 : C980                		and	#$80,r0
(1) 1265/ 600124A : 2100                		mov.b	r0,@r1
(1) 1266/ 600124C : AF94                		bra	slave_loop
(1) 1267/ 600124E : 0009                		nop
(1) 1268/ 6001250 :                     		align 4
(1) 1269/ 6001250 : 0603 F000 2000 4020 		ltorg
                    534C 4156 0600 6C10 
                    2000 4000 0600 1B98 
                    C000 0000 0600 0AB8 
                    2000 402F 0603 4AD8 
                    0600 7130 0603 0D78 
                    0601 4100 0603 2B28 
                    0600 077C 0600 6CB0 
                    0600 0ADC 0603 4ED8 
                    0603 4EDA 2000 4022 
                    2000 402E FE10 FEE2 
                    FEE4 00F0 FE92 000F 
                    FE80 5A7F A538 03B6 
                    A518                
(1) 1270/ 60012BA :                     
(1) 1271/ 60012BA :                     ; ====================================================================
(1) 1272/ 60012BA :                     ; --------------------------------------------------------
(1) 1273/ 60012BA :                     ; Task list for MD-to-MARS tasks, call these 68k side
(1) 1274/ 60012BA :                     ; with the respective arguments
(1) 1275/ 60012BA :                     ; 
(1) 1276/ 60012BA :                     ; *** 68k EXAMPLES ***
(1) 1277/ 60012BA :                     ; 
(1) 1278/ 60012BA :                     ; Single task:
(1) 1279/ 60012BA :                     ; 	move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1) 1280/ 60012BA :                     ; 	moveq	#1,d1
(1) 1281/ 60012BA :                     ; 	bsr	System_MdMars_MstAddTask
(1) 1282/ 60012BA :                     ; 	
(1) 1283/ 60012BA :                     ; Queued task:
(1) 1284/ 60012BA :                     ; 	move.l	#Palette_Intro,d1
(1) 1285/ 60012BA :                     ; 	moveq	#0,d2
(1) 1286/ 60012BA :                     ; 	move.w	#16,d3
(1) 1287/ 60012BA :                     ; 	moveq	#0,d4
(1) 1288/ 60012BA :                     ; 	move.l	#CmdTaskMd_LoadSPal,d0		; Load palette
(1) 1289/ 60012BA :                     ; 	bsr	System_MdMars_MstAddTask
(1) 1290/ 60012BA :                     ;	; then add more requests
(1) 1291/ 60012BA :                     ; 	bsr	System_MdMars_MstSendAll	; <-- Send all and wait
(1) 1292/ 60012BA :                     ; 	; or
(1) 1293/ 60012BA :                     ; 	bsr	System_MdMars_MstSendDrop	; <-- Send all but skip if busy
(1) 1294/ 60012BA :                     ;
(1) 1295/ 60012BA :                     ; Mst: for Master, processes until all draw-tasks finished
(1) 1296/ 60012BA :                     ; Slv: for Slave, processes after sorting model faces
(1) 1297/ 60012BA :                     ; --------------------------------------------------------
(1) 1298/ 60012BA :                     
(1) 1299/ 60012BA :                     		align 4
(1) 1300/ 60012BC :                     
(1) 1301/ 60012BC :                     ; ------------------------------------------------
(1) 1302/ 60012BC :                     ; CALLS EXCLUSIVE TO MASTER CPU
(1) 1303/ 60012BC :                     ; ------------------------------------------------
(1) 1304/ 60012BC :                     
(1) 1305/ 60012BC :                     ; ------------------------------------------------
(1) 1306/ 60012BC :                     ; Set SuperVDP bitmap value
(1) 1307/ 60012BC :                     ;
(1) 1308/ 60012BC :                     ; @($04,r14) - SuperVDP bitmap number (0-3)
(1) 1309/ 60012BC :                     ; ------------------------------------------------
(1) 1310/ 60012BC :                     
(1) 1311/ 60012BC :                     CmdTaskMd_SetBitmap:
(1) 1312/ 60012BC : D137                		mov 	#_vdpreg,r1
(1) 1313/ 60012BE : 8515                .wait_fb:	mov.w   @($A,r1),r0
(1) 1314/ 60012C0 : C802                		tst     #2,r0
(1) 1315/ 60012C2 : 8BFC                		bf      .wait_fb
(1) 1316/ 60012C4 : 50E1                		mov	@($04,r14),r0
(1) 1317/ 60012C6 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1318/ 60012C8 : 000B                		rts
(1) 1319/ 60012CA : 0009                		nop
(1) 1320/ 60012CC :                     		align 4
(1) 1321/ 60012CC :                     
(1) 1322/ 60012CC :                     ; ------------------------------------------------
(1) 1323/ 60012CC :                     ; Load palette to SuperVDP from MD
(1) 1324/ 60012CC :                     ;
(1) 1325/ 60012CC :                     ; @($04,r14) - Palette data
(1) 1326/ 60012CC :                     ; @($08,r14) - Start from
(1) 1327/ 60012CC :                     ; @($0C,r14) - Number of colors
(1) 1328/ 60012CC :                     ; @($10,r14) - OR value
(1) 1329/ 60012CC :                     ; ------------------------------------------------
(1) 1330/ 60012CC :                     
(1) 1331/ 60012CC :                     CmdTaskMd_LoadSPal:
(1) 1332/ 60012CC : 6DE3                		mov	r14,r13
(1) 1333/ 60012CE : 7D04                		add	#4,r13
(1) 1334/ 60012D0 : 61D6                		mov	@r13+,r1
(1) 1335/ 60012D2 : 62D6                		mov	@r13+,r2
(1) 1336/ 60012D4 : 63D6                		mov	@r13+,r3
(1) 1337/ 60012D6 : 64D6                		mov	@r13+,r4
(1) 1338/ 60012D8 : D031                		mov	#MarsVideo_LoadPal,r0
(1) 1339/ 60012DA : 402B                		jmp	@r0
(1) 1340/ 60012DC : 0009                		nop
(1) 1341/ 60012DE :                     		align 4
(1) 1342/ 60012E0 :                     
(1) 1343/ 60012E0 :                     ; ------------------------------------------------
(1) 1344/ 60012E0 :                     ; CALLS EXCLUSIVE TO SLAVE CPU
(1) 1345/ 60012E0 :                     ; ------------------------------------------------
(1) 1346/ 60012E0 :                     
(1) 1347/ 60012E0 :                     ; ------------------------------------------------
(1) 1348/ 60012E0 :                     ; Make new object and insert it to specific slot
(1) 1349/ 60012E0 :                     ;
(1) 1350/ 60012E0 :                     ; @($04,r14) - Object slot
(1) 1351/ 60012E0 :                     ; @($08,r14) - Object data
(1) 1352/ 60012E0 :                     ; @($0C,r14) - Object animation data
(1) 1353/ 60012E0 :                     ; @($10,r14) - Object animation speed
(1) 1354/ 60012E0 :                     ; @($14,r14) - Object options:
(1) 1355/ 60012E0 :                     ;	       %????????????????????????pppppppp
(1) 1356/ 60012E0 :                     ;		p - index pixel increment value
(1) 1357/ 60012E0 :                     ; ------------------------------------------------
(1) 1358/ 60012E0 :                     
(1) 1359/ 60012E0 :                     CmdTaskMd_ObjectSet:
(1) 1360/ 60012E0 : DC30                		mov	#RAM_Mars_Objects+(sizeof_mdlobj*9),r12
(1) 1361/ 60012E2 : 6DE3                		mov	r14,r13
(1) 1362/ 60012E4 : 7D04                		add	#4,r13
(1) 1363/ 60012E6 : 60D6                		mov	@r13+,r0
(1) 1364/ 60012E8 : E130                		mov	#sizeof_mdlobj,r1
(1) 1365/ 60012EA : 201E                		mulu	r1,r0
(1) 1366/ 60012EC : 001A                		sts	macl,r0
(1) 1367/ 60012EE : 3C0C                		add	r0,r12
(1) 1368/ 60012F0 : 200A                		xor	r0,r0
(1) 1369/ 60012F2 : 61D6                		mov	@r13+,r1
(1) 1370/ 60012F4 : 1C10                		mov	r1,@(mdl_data,r12)
(1) 1371/ 60012F6 : 61D6                		mov	@r13+,r1
(1) 1372/ 60012F8 : 1C18                		mov	r1,@(mdl_animdata,r12)
(1) 1373/ 60012FA : 61D6                		mov	@r13+,r1
(1) 1374/ 60012FC : 1C1B                		mov	r1,@(mdl_animspd,r12)
(1) 1375/ 60012FE : 61D6                		mov	@r13+,r1
(1) 1376/ 6001300 : 1C11                		mov	r1,@(mdl_option,r12)
(1) 1377/ 6001302 : 200A                		xor	r0,r0
(1) 1378/ 6001304 : 1C02                		mov	r0,@(mdl_x_pos,r12)
(1) 1379/ 6001306 : 1C03                		mov	r0,@(mdl_y_pos,r12)
(1) 1380/ 6001308 : 1C04                		mov	r0,@(mdl_z_pos,r12)
(1) 1381/ 600130A : 1C05                		mov	r0,@(mdl_x_rot,r12)
(1) 1382/ 600130C : 1C06                		mov	r0,@(mdl_y_rot,r12)
(1) 1383/ 600130E : 1C07                		mov	r0,@(mdl_z_rot,r12)
(1) 1384/ 6001310 : 1C09                		mov	r0,@(mdl_animframe,r12)
(1) 1385/ 6001312 : 1C0A                		mov	r0,@(mdl_animtimer,r12)
(1) 1386/ 6001314 : 000B                		rts
(1) 1387/ 6001316 : 0009                		nop
(1) 1388/ 6001318 :                     		align 4
(1) 1389/ 6001318 :                     		
(1) 1390/ 6001318 :                     ; ------------------------------------------------
(1) 1391/ 6001318 :                     ; Move/Rotate object from slot
(1) 1392/ 6001318 :                     ; 
(1) 1393/ 6001318 :                     ; @($04,r14) - Object slot
(1) 1394/ 6001318 :                     ; @($08,r14) - Object X pos
(1) 1395/ 6001318 :                     ; @($0C,r14) - Object Y pos
(1) 1396/ 6001318 :                     ; @($10,r14) - Object Z pos
(1) 1397/ 6001318 :                     ; @($14,r14) - Object X rot
(1) 1398/ 6001318 :                     ; @($18,r14) - Object Y rot
(1) 1399/ 6001318 :                     ; @($1C,r14) - Object Z rot
(1) 1400/ 6001318 :                     ; ------------------------------------------------
(1) 1401/ 6001318 :                     
(1) 1402/ 6001318 :                     CmdTaskMd_ObjectPos:
(1) 1403/ 6001318 : DC23                		mov	#RAM_Mars_Objects+(sizeof_mdlobj*9),r12
(1) 1404/ 600131A : 6DE3                		mov	r14,r13
(1) 1405/ 600131C : 7D04                		add	#4,r13
(1) 1406/ 600131E : 60D6                		mov	@r13+,r0
(1) 1407/ 6001320 : E130                		mov	#sizeof_mdlobj,r1
(1) 1408/ 6001322 : 201E                		mulu	r1,r0
(1) 1409/ 6001324 : 001A                		sts	macl,r0
(1) 1410/ 6001326 : 3C0C                		add	r0,r12
(1) 1411/ 6001328 : 61D6                		mov	@r13+,r1
(1) 1412/ 600132A : 62D6                		mov	@r13+,r2
(1) 1413/ 600132C : 63D6                		mov	@r13+,r3
(1) 1414/ 600132E : 64D6                		mov	@r13+,r4
(1) 1415/ 6001330 : 65D6                		mov	@r13+,r5
(1) 1416/ 6001332 : 66D6                		mov	@r13+,r6
(1) 1417/ 6001334 : 1C12                		mov	r1,@(mdl_x_pos,r12)
(1) 1418/ 6001336 : 1C23                		mov	r2,@(mdl_y_pos,r12)
(1) 1419/ 6001338 : 1C34                		mov	r3,@(mdl_z_pos,r12)
(1) 1420/ 600133A : 1C45                		mov	r4,@(mdl_x_rot,r12)
(1) 1421/ 600133C : 1C56                		mov	r5,@(mdl_y_rot,r12)
(1) 1422/ 600133E : 1C67                		mov	r6,@(mdl_z_rot,r12)
(1) 1423/ 6001340 : 000B                		rts
(1) 1424/ 6001342 : 0009                		nop
(1) 1425/ 6001344 :                     		align 4
(1) 1426/ 6001344 :                     
(1) 1427/ 6001344 :                     ; ------------------------------------------------
(1) 1428/ 6001344 :                     ; Clear ALL objects, including layout
(1) 1429/ 6001344 :                     ; ------------------------------------------------
(1) 1430/ 6001344 :                     
(1) 1431/ 6001344 :                     CmdTaskMd_ObjectClrAll:
(1) 1432/ 6001344 : 4F22                		sts	pr,@-r15
(1) 1433/ 6001346 : D019                		mov	#MarsMdl_Init,r0
(1) 1434/ 6001348 : 400B                		jsr	@r0
(1) 1435/ 600134A : 0009                		nop
(1) 1436/ 600134C : 4F26                		lds	@r15+,pr
(1) 1437/ 600134E : 000B                		rts
(1) 1438/ 6001350 : 0009                		nop
(1) 1439/ 6001352 :                     		align 4
(1) 1440/ 6001354 :                     
(1) 1441/ 6001354 :                     ; ------------------------------------------------
(1) 1442/ 6001354 :                     ; Set new map data
(1) 1443/ 6001354 :                     ; 
(1) 1444/ 6001354 :                     ; @($04,r14) - layout data (set to 0 to clear)
(1) 1445/ 6001354 :                     ; ------------------------------------------------
(1) 1446/ 6001354 :                     
(1) 1447/ 6001354 :                     CmdTaskMd_MakeMap:
(1) 1448/ 6001354 : 4F22                		sts	pr,@-r15
(1) 1449/ 6001356 :                     ; 		bsr	MarsVideo_ClearFrame
(1) 1450/ 6001356 :                     ; 		nop
(1) 1451/ 6001356 : 51E1                		mov	@(4,r14),r1
(1) 1452/ 6001358 : D015                		mov	#MarsLay_Make,r0
(1) 1453/ 600135A : 400B                		jsr	@r0
(1) 1454/ 600135C : 2FE6                		mov	r14,@-r15
(1) 1455/ 600135E : 6EF6                		mov	@r15+,r14
(1) 1456/ 6001360 : 4F26                		lds	@r15+,pr
(1) 1457/ 6001362 : 000B                		rts
(1) 1458/ 6001364 : 0009                		nop
(1) 1459/ 6001366 :                     		align 4
(1) 1460/ 6001368 :                     		
(1) 1461/ 6001368 :                     ; ------------------------------------------------
(1) 1462/ 6001368 :                     ; Set camera position
(1) 1463/ 6001368 :                     ; 
(1) 1464/ 6001368 :                     ; @($04,r14) - Camera slot (TODO)
(1) 1465/ 6001368 :                     ; @($08,r14) - Camera X pos
(1) 1466/ 6001368 :                     ; @($0C,r14) - Camera Y pos
(1) 1467/ 6001368 :                     ; @($10,r14) - Camera Z pos
(1) 1468/ 6001368 :                     ; @($14,r14) - Camera X rot
(1) 1469/ 6001368 :                     ; @($18,r14) - Camera Y rot
(1) 1470/ 6001368 :                     ; @($1C,r14) - Camera Z rot
(1) 1471/ 6001368 :                     ; ------------------------------------------------
(1) 1472/ 6001368 :                     
(1) 1473/ 6001368 :                     CmdTaskMd_CameraPos:
(1) 1474/ 6001368 : DC12                		mov	#RAM_Mars_ObjCamera,r12
(1) 1475/ 600136A : 6DE3                		mov	r14,r13
(1) 1476/ 600136C : 7D08                		add	#8,r13
(1) 1477/ 600136E : 61D6                		mov	@r13+,r1
(1) 1478/ 6001370 : 62D6                		mov	@r13+,r2
(1) 1479/ 6001372 : 63D6                		mov	@r13+,r3
(1) 1480/ 6001374 : 64D6                		mov	@r13+,r4
(1) 1481/ 6001376 : 65D6                		mov	@r13+,r5
(1) 1482/ 6001378 : 66D6                		mov	@r13+,r6
(1) 1483/ 600137A : 1C10                		mov	r1,@(cam_x_pos,r12)
(1) 1484/ 600137C : 1C21                		mov	r2,@(cam_y_pos,r12)
(1) 1485/ 600137E : 1C32                		mov	r3,@(cam_z_pos,r12)
(1) 1486/ 6001380 : 1C43                		mov	r4,@(cam_x_rot,r12)
(1) 1487/ 6001382 : 1C54                		mov	r5,@(cam_y_rot,r12)
(1) 1488/ 6001384 : 1C65                		mov	r6,@(cam_z_rot,r12)
(1) 1489/ 6001386 : 000B                		rts
(1) 1490/ 6001388 : 0009                		nop
(1) 1491/ 600138A :                     		align 4
(1) 1492/ 600138C :                     
(1) 1493/ 600138C :                     ; ------------------------------------------------
(1) 1494/ 600138C :                     ; Set camera position
(1) 1495/ 600138C :                     ; 
(1) 1496/ 600138C :                     ; @($04,r14) - Camera slot (TODO)
(1) 1497/ 600138C :                     ; @($08,r14) - Camera X pos
(1) 1498/ 600138C :                     ; @($0C,r14) - Camera Y pos
(1) 1499/ 600138C :                     ; @($10,r14) - Camera Z pos
(1) 1500/ 600138C :                     ; @($14,r14) - Camera X rot
(1) 1501/ 600138C :                     ; @($18,r14) - Camera Y rot
(1) 1502/ 600138C :                     ; @($1C,r14) - Camera Z rot
(1) 1503/ 600138C :                     ; ------------------------------------------------
(1) 1504/ 600138C :                     
(1) 1505/ 600138C :                     CmdTaskMd_UpdModels:
(1) 1506/ 600138C : D10A                		mov	#_sysreg+comm15,r1
(1) 1507/ 600138E : E201                		mov	#1,r2
(1) 1508/ 6001390 : 6010                		mov.b	@r1,r0
(1) 1509/ 6001392 : C980                		and	#$80,r0
(1) 1510/ 6001394 : 202B                		or	r2,r0
(1) 1511/ 6001396 : 2100                		mov.b	r0,@r1
(1) 1512/ 6001398 : 000B                		rts
(1) 1513/ 600139A : 0009                		nop
(1) 1514/ 600139C :                     		align 4
(1) 1515/ 600139C :                     
(1) 1516/ 600139C :                     ; ; ------------------------------------------------
(1) 1517/ 600139C :                     ; ; Set PWM to play
(1) 1518/ 600139C :                     ; ; 
(1) 1519/ 600139C :                     ; ; @($04,r14) - Channel slot
(1) 1520/ 600139C :                     ; ; @($08,r14) - Start point
(1) 1521/ 600139C :                     ; ; @($0C,r14) - End point
(1) 1522/ 600139C :                     ; ; @($10,r14) - Loop point
(1) 1523/ 600139C :                     ; ; @($14,r14) - Pitch
(1) 1524/ 600139C :                     ; ; @($18,r14) - Volume
(1) 1525/ 600139C :                     ; ; @($1C,r14) - Settings: %00000000 00000000LR | LR - output bits
(1) 1526/ 600139C :                     ; ; ------------------------------------------------
(1) 1527/ 600139C :                     ; 
(1) 1528/ 600139C :                     ; CmdTaskMd_PWM_SetChnl:
(1) 1529/ 600139C :                     ; 		sts	pr,@-r15
(1) 1530/ 600139C :                     ; 		mov	@($04,r14),r1
(1) 1531/ 600139C :                     ; 		mov	@($08,r14),r2
(1) 1532/ 600139C :                     ; 		mov	@($0C,r14),r3
(1) 1533/ 600139C :                     ; 		mov	@($10,r14),r4
(1) 1534/ 600139C :                     ; 		mov	@($14,r14),r5
(1) 1535/ 600139C :                     ; 		mov	@($18,r14),r6
(1) 1536/ 600139C :                     ; 		mov	@($1C,r14),r7
(1) 1537/ 600139C :                     ; 		bsr	MarsSound_SetPwm
(1) 1538/ 600139C :                     ; 		nop
(1) 1539/ 600139C :                     ; 		lds	@r15+,pr
(1) 1540/ 600139C :                     ; 		rts
(1) 1541/ 600139C :                     ; 		nop
(1) 1542/ 600139C :                     ; 		align 4
(1) 1543/ 600139C :                     ; 
(1) 1544/ 600139C :                     ; ; ------------------------------------------------
(1) 1545/ 600139C :                     ; ; Set PWM pitch to multiple channels
(1) 1546/ 600139C :                     ; ; 
(1) 1547/ 600139C :                     ; ; @($04,r14) - Channel 0 pitch
(1) 1548/ 600139C :                     ; ; @($08,r14) - Channel 1 pitch
(1) 1549/ 600139C :                     ; ; @($0C,r14) - Channel 2 pitch
(1) 1550/ 600139C :                     ; ; @($10,r14) - Channel 3 pitch
(1) 1551/ 600139C :                     ; ; @($14,r14) - Channel 4 pitch
(1) 1552/ 600139C :                     ; ; @($18,r14) - Channel 5 pitch
(1) 1553/ 600139C :                     ; ; @($1C,r14) - Channel 6 pitch
(1) 1554/ 600139C :                     ; ; ------------------------------------------------
(1) 1555/ 600139C :                     ; 
(1) 1556/ 600139C :                     ; CmdTaskMd_PWM_MultPitch:
(1) 1557/ 600139C :                     ; 		sts	pr,@-r15
(1) 1558/ 600139C :                     ; 		mov	#$FFFF,r7
(1) 1559/ 600139C :                     ; 		mov	r14,r13
(1) 1560/ 600139C :                     ; 		add	#4,r13
(1) 1561/ 600139C :                     ; 		mov	#0,r1
(1) 1562/ 600139C :                     ; 	rept MAX_PWMCHNL		; MAX: 7
(1) 1563/ 600139C :                     ; 		mov	@r13+,r2
(1) 1564/ 600139C :                     ; 		and	r7,r2
(1) 1565/ 600139C :                     ; 		bsr	MarsSound_SetPwmPitch
(1) 1566/ 600139C :                     ; 		nop
(1) 1567/ 600139C :                     ; 		add	#1,r1
(1) 1568/ 600139C :                     ; 	endm
(1) 1569/ 600139C :                     ; 		lds	@r15+,pr
(1) 1570/ 600139C :                     ; 		rts
(1) 1571/ 600139C :                     ; 		nop
(1) 1572/ 600139C :                     ; 		align 4
(1) 1573/ 600139C :                     ; 
(1) 1574/ 600139C :                     ; ; ------------------------------------------------
(1) 1575/ 600139C :                     ; ; Enable/Disable PWM channels from playing
(1) 1576/ 600139C :                     ; ; 
(1) 1577/ 600139C :                     ; ; @($04,r14) - Channel slot
(1) 1578/ 600139C :                     ; ; @($08,r14) - Enable/Disable/Restart
(1) 1579/ 600139C :                     ; ; ------------------------------------------------
(1) 1580/ 600139C :                     ; 
(1) 1581/ 600139C :                     ; CmdTaskMd_PWM_Enable:
(1) 1582/ 600139C :                     ; 		sts	pr,@-r15
(1) 1583/ 600139C :                     ; 		mov	@($04,r14),r1
(1) 1584/ 600139C :                     ; 		mov	@($08,r14),r2
(1) 1585/ 600139C :                     ; 		bsr	MarsSound_PwmEnable
(1) 1586/ 600139C :                     ; 		nop
(1) 1587/ 600139C :                     ; 		lds	@r15+,pr
(1) 1588/ 600139C :                     ; 		rts
(1) 1589/ 600139C :                     ; 		nop
(1) 1590/ 600139C :                     ; 		align 4
(1) 1591/ 600139C :                     
(1) 1592/ 600139C :                     ; ----------------------------------------
(1) 1593/ 600139C :                     
(1) 1594/ 600139C : 2000 4100 0600 06C8 		ltorg
                    0600 6E60 0600 6E60 
                    0600 0AB8 0600 07FE 
                    0600 6C68 2000 402F 
(1) 1595/ 60013BC :                     
(1) 1596/ 60013BC :                     ; =================================================================
(1) 1597/ 60013BC :                     ; ------------------------------------------------
(1) 1598/ 60013BC :                     ; Slave | Watchdog interrupt
(1) 1599/ 60013BC :                     ; ------------------------------------------------
(1) 1600/ 60013BC :                     
(1) 1601/ 60013BC :                     s_irq_custom:
(1) 1602/ 60013BC : 2F26                		mov	r2,@-r15
(1) 1603/ 60013BE : 2F36                		mov	r3,@-r15
(1) 1604/ 60013C0 : 2F46                		mov	r4,@-r15
(1) 1605/ 60013C2 : 2F56                		mov	r5,@-r15
(1) 1606/ 60013C4 : 2F66                		mov	r6,@-r15
(1) 1607/ 60013C6 : 2F76                		mov	r7,@-r15
(1) 1608/ 60013C8 : 9138                		mov	#_FRT,r1
(1) 1609/ 60013CA : 8417                		mov.b   @(7,r1),r0
(1) 1610/ 60013CC : CA02                		xor     #2,r0
(1) 1611/ 60013CE : 8017                		mov.b   r0,@(7,r1)
(1) 1612/ 60013D0 : C513                		mov.w	@(marsGbl_ZSortReq,gbr),r0
(1) 1613/ 60013D2 : 8801                		cmp/eq	#1,r0
(1) 1614/ 60013D4 : 8B1C                		bf	.no_req
(1) 1615/ 60013D6 :                     
(1) 1616/ 60013D6 :                     	; DONT CALL THIS
(1) 1617/ 60013D6 :                     	; IF NUMOF FACES < 2
(1) 1618/ 60013D6 : C50A                		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0
(1) 1619/ 60013D8 : 6203                		mov	r0,r2
(1) 1620/ 60013DA : E103                		mov	#3,r1
(1) 1621/ 60013DC : 3217                		cmp/gt	r1,r2
(1) 1622/ 60013DE : 8B15                		bf	.no_faces
(1) 1623/ 60013E0 : D314                		mov	#RAM_Mars_Plgn_ZList_0,r3
(1) 1624/ 60013E2 : C50B                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1) 1625/ 60013E4 : C801                		tst     #1,r0
(1) 1626/ 60013E6 : 8900                		bt	.page_2
(1) 1627/ 60013E8 : D313                		mov	#RAM_Mars_Plgn_ZList_1,r3
(1) 1628/ 60013EA :                     .page_2:
(1) 1629/ 60013EA : 6423                		mov	r2,r4
(1) 1630/ 60013EC : 74FE                		add	#-2,r4
(1) 1631/ 60013EE : 4411                		cmp/pz	r4
(1) 1632/ 60013F0 : 8B0E                		bf	.no_req
(1) 1633/ 60013F2 :                     .z_next:
(1) 1634/ 60013F2 : 6032                		mov	@r3,r0
(1) 1635/ 60013F4 : 5132                		mov	@(8,r3),r1
(1) 1636/ 60013F6 : 3017                		cmp/gt	r1,r0
(1) 1637/ 60013F8 : 8B05                		bf	.z_keep
(1) 1638/ 60013FA : 2312                		mov	r1,@r3
(1) 1639/ 60013FC : 1302                		mov	r0,@(8,r3)
(1) 1640/ 60013FE : 5031                		mov	@(4,r3),r0
(1) 1641/ 6001400 : 5133                		mov	@($C,r3),r1
(1) 1642/ 6001402 : 1311                		mov	r1,@(4,r3)
(1) 1643/ 6001404 : 1303                		mov	r0,@($C,r3)
(1) 1644/ 6001406 :                     .z_keep:
(1) 1645/ 6001406 : 4410                		dt	r4
(1) 1646/ 6001408 : 8FF3                		bf/s	.z_next
(1) 1647/ 600140A : 7308                		add	#8,r3
(1) 1648/ 600140C :                     .no_faces:
(1) 1649/ 600140C : E000                		mov	#0,r0
(1) 1650/ 600140E : C113                		mov.w	r0,@(marsGbl_ZSortReq,gbr)
(1) 1651/ 6001410 :                     
(1) 1652/ 6001410 :                     .no_req:
(1) 1653/ 6001410 : 9115                		mov	#$FFFFFE80,r1
(1) 1654/ 6001412 : 9015                		mov.w   #$A518,r0		; Watchdog OFF
(1) 1655/ 6001414 : 2101                		mov.w   r0,@r1
(1) 1656/ 6001416 : CB20                		or      #$20,r0			; ON again
(1) 1657/ 6001418 : 2101                		mov.w   r0,@r1
(1) 1658/ 600141A : E201                		mov	#1,r2
(1) 1659/ 600141C : 9011                		mov.w   #$5A00,r0		; Timer for the next one
(1) 1660/ 600141E : 202B                		or	r2,r0
(1) 1661/ 6001420 : 2101                		mov.w	r0,@r1
(1) 1662/ 6001422 :                     
(1) 1663/ 6001422 : 67F6                		mov	@r15+,r7
(1) 1664/ 6001424 : 66F6                		mov	@r15+,r6
(1) 1665/ 6001426 : 65F6                		mov	@r15+,r5
(1) 1666/ 6001428 : 64F6                		mov	@r15+,r4
(1) 1667/ 600142A : 63F6                		mov	@r15+,r3
(1) 1668/ 600142C : 62F6                		mov	@r15+,r2
(1) 1669/ 600142E : 000B                		rts
(1) 1670/ 6001430 : 0009                		nop
(1) 1671/ 6001432 :                     		align 4
(1) 1672/ 6001434 : 0603 0D78 0603 2B28 		ltorg
                    FE10 FE80 A518 5A00 
(1) 1673/ 6001444 :                     
(1) 1674/ 6001444 :                     ; ====================================================================
(1) 1675/ 6001444 :                     ; ----------------------------------------------------------------
(1) 1676/ 6001444 :                     ; Cache routines
(1) 1677/ 6001444 :                     ; ----------------------------------------------------------------
(1) 1678/ 6001444 :                     
(1) 1679/ 6001444 :                     		include "system/mars/cache.asm"
(2)    1/ 6001444 :                     ; ====================================================================
(2)    2/ 6001444 :                     ; ----------------------------------------------------------------
(2)    3/ 6001444 :                     ; CACHE code for Master CPU
(2)    4/ 6001444 :                     ;
(2)    5/ 6001444 :                     ; LIMIT: $800 bytes
(2)    6/ 6001444 :                     ; ----------------------------------------------------------------
(2)    7/ 6001444 :                     
(2)    8/ 6001444 :                     		align 4
(2)    9/ 6001444 :                     CACHE_MASTER:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     ;
(2)   12/FFFFFFFFC0000000 :                     ; Mstr_MkAllPz:
(2)   13/FFFFFFFFC0000000 :                     ; 		sts	pr,@-r15
(2)   14/FFFFFFFFC0000000 :                     ; 		mov.w	@r13,r13
(2)   15/FFFFFFFFC0000000 :                     ; 		cmp/pl	r13
(2)   16/FFFFFFFFC0000000 :                     ; 		bf	.skip
(2)   17/FFFFFFFFC0000000 :                     ; 		mov	r13,r0
(2)   18/FFFFFFFFC0000000 :                     ; 		mov	#_sysreg+comm0,r1
(2)   19/FFFFFFFFC0000000 :                     ; 		mov.w	r0,@r1
(2)   20/FFFFFFFFC0000000 :                     ; .loop:
(2)   21/FFFFFFFFC0000000 :                     ; 		mov	r14,@-r15
(2)   22/FFFFFFFFC0000000 :                     ; 		mov	r13,@-r15
(2)   23/FFFFFFFFC0000000 :                     ; 		mov	@r14,r14			; Get location of the polygon
(2)   24/FFFFFFFFC0000000 :                     ; 		cmp/pl	r14
(2)   25/FFFFFFFFC0000000 :                     ; 		bf	.invalid
(2)   26/FFFFFFFFC0000000 :                     ; 		mov 	#MarsVideo_MakePolygon,r0
(2)   27/FFFFFFFFC0000000 :                     ; 		jsr	@r0
(2)   28/FFFFFFFFC0000000 :                     ; 		nop
(2)   29/FFFFFFFFC0000000 :                     ; .invalid:
(2)   30/FFFFFFFFC0000000 :                     ; 		mov	@r15+,r13
(2)   31/FFFFFFFFC0000000 :                     ; 		mov	@r15+,r14
(2)   32/FFFFFFFFC0000000 :                     ; 		dt	r13
(2)   33/FFFFFFFFC0000000 :                     ; 		bf/s	.loop
(2)   34/FFFFFFFFC0000000 :                     ; 		add	#8,r14
(2)   35/FFFFFFFFC0000000 :                     ; .skip:
(2)   36/FFFFFFFFC0000000 :                     ; 		lds	@r15+,pr
(2)   37/FFFFFFFFC0000000 :                     ; 		rts
(2)   38/FFFFFFFFC0000000 :                     ; 		nop
(2)   39/FFFFFFFFC0000000 :                     ; 		align 4
(2)   40/FFFFFFFFC0000000 :                     ; 		ltorg
(2)   41/FFFFFFFFC0000000 :                     
(2)   42/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   43/FFFFFFFFC0000000 :                     ; MASTER Background tasks
(2)   44/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   45/FFFFFFFFC0000000 :                     
(2)   46/FFFFFFFFC0000000 :                     ; Cache_OnInterrupt:
(2)   47/FFFFFFFFC0000000 :                     m_irq_custom:
(2)   48/FFFFFFFFC0000000 : 9134                		mov	#_FRT,r1
(2)   49/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1), r0
(2)   50/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   51/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   52/FFFFFFFFC0000008 : C50D                		mov.w	@(marsGbl_DrwTask,gbr),r0	; Framebuffer clear request ($08)?
(2)   53/FFFFFFFFC000000A : 8808                		cmp/eq	#8,r0
(2)   54/FFFFFFFFC000000C : 8B33                		bf	maindrw_tasks
(2)   55/FFFFFFFFC000000E :                     
(2)   56/FFFFFFFFC000000E :                     ; --------------------------------
(2)   57/FFFFFFFFC000000E :                     ; TASK $08 - Clear Framebuffer
(2)   58/FFFFFFFFC000000E :                     ; --------------------------------
(2)   59/FFFFFFFFC000000E :                     
(2)   60/FFFFFFFFC000000E :                     ; .task_08:
(2)   61/FFFFFFFFC000000E : 2F26                		mov	r2,@-r15
(2)   62/FFFFFFFFC0000010 : 2F36                		mov	r3,@-r15
(2)   63/FFFFFFFFC0000012 : D114                		mov	#_vdpreg,r1
(2)   64/FFFFFFFFC0000014 : 8515                .wait_fb:	mov.w   @($A,r1),r0		; Framebuffer free?
(2)   65/FFFFFFFFC0000016 : C802                		tst     #2,r0
(2)   66/FFFFFFFFC0000018 : 8BFC                		bf      .wait_fb
(2)   67/FFFFFFFFC000001A :                     ; 		mov.w   @(6,r1),r0		; SVDP-fill address
(2)   68/FFFFFFFFC000001A :                     ; 		add     #$5F,r0			; Preincrement
(2)   69/FFFFFFFFC000001A :                     ; 		mov.w   r0,@(6,r1)
(2)   70/FFFFFFFFC000001A :                     ; 		mov.w   #320/2,r0		; SVDP-fill size (320 pixels)
(2)   71/FFFFFFFFC000001A :                     ; 		mov.w   r0,@(4,r1)
(2)   72/FFFFFFFFC000001A :                     
(2)   73/FFFFFFFFC000001A : C604                		mov	@(marsGbl_Backdata,gbr),r0
(2)   74/FFFFFFFFC000001C : 6303                		mov	r0,r3
(2)   75/FFFFFFFFC000001E : 9226                		mov	#$A0,r2
(2)   76/FFFFFFFFC0000020 :                     .testme:
(2)   77/FFFFFFFFC0000020 : E000                		mov.w   #0,r0				; SVDP-fill size (320 pixels)
(2)   78/FFFFFFFFC0000022 : 8112                		mov.w   r0,@(4,r1)
(2)   79/FFFFFFFFC0000024 : 6031                		mov.w	@r3,r0			; SVDP-fill pixel data and start filling
(2)   80/FFFFFFFFC0000026 : 8114                		mov.w   r0,@(8,r1)		; After finishing, SVDP-address got updated
(2)   81/FFFFFFFFC0000028 : 7302                		add	#2,r3
(2)   82/FFFFFFFFC000002A : 8515                .wme:		mov.w   @($A,r1),r0
(2)   83/FFFFFFFFC000002C : C802                		tst     #2,r0
(2)   84/FFFFFFFFC000002E : 8BFC                		bf      .wme
(2)   85/FFFFFFFFC0000030 : 4210                		dt	r2
(2)   86/FFFFFFFFC0000032 : 8BF5                		bf	.testme
(2)   87/FFFFFFFFC0000034 : 6033                		mov	r3,r0
(2)   88/FFFFFFFFC0000036 : C204                		mov	r0,@(marsGbl_Backdata,gbr)
(2)   89/FFFFFFFFC0000038 : 8513                		mov.w   @(6,r1),r0		; SVDP-fill address
(2)   90/FFFFFFFFC000003A : 7060                		add     #$60,r0			; Preincrement
(2)   91/FFFFFFFFC000003C : 8113                		mov.w   r0,@(6,r1)
(2)   92/FFFFFFFFC000003E :                     
(2)   93/FFFFFFFFC000003E :                     ; 		bra	*
(2)   94/FFFFFFFFC000003E :                     ; 		nop
(2)   95/FFFFFFFFC000003E :                     
(2)   96/FFFFFFFFC000003E : 9117                		mov.l   #$FFFFFE80,r1
(2)   97/FFFFFFFFC0000040 : 9017                		mov.w   #$A518,r0		; OFF
(2)   98/FFFFFFFFC0000042 : 2101                		mov.w   r0,@r1
(2)   99/FFFFFFFFC0000044 : CB20                		or      #$20,r0			; ON
(2)  100/FFFFFFFFC0000046 : 2101                		mov.w   r0,@r1
(2)  101/FFFFFFFFC0000048 : 9014                		mov.w   #$5A10,r0		; Timer before next watchdog
(2)  102/FFFFFFFFC000004A : 2101                		mov.w   r0,@r1
(2)  103/FFFFFFFFC000004C : D106                		mov	#Cach_ClrLines,r1	; Decrement a line to progress
(2)  104/FFFFFFFFC000004E : 6012                		mov	@r1,r0
(2)  105/FFFFFFFFC0000050 : 4010                		dt	r0
(2)  106/FFFFFFFFC0000052 : 8F02                		bf/s	.on_clr
(2)  107/FFFFFFFFC0000054 : 2102                		mov	r0,@r1
(2)  108/FFFFFFFFC0000056 : E001                		mov	#1,r0			; If finished: set task $01
(2)  109/FFFFFFFFC0000058 : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  110/FFFFFFFFC000005A :                     .on_clr:
(2)  111/FFFFFFFFC000005A : 63F6                		mov	@r15+,r3
(2)  112/FFFFFFFFC000005C : 62F6                		mov	@r15+,r2
(2)  113/FFFFFFFFC000005E : 000B                		rts
(2)  114/FFFFFFFFC0000060 : 0009                		nop
(2)  115/FFFFFFFFC0000062 :                     		align 4
(2)  116/FFFFFFFFC0000064 : 2000 4100 C000 0750 		ltorg
                    FE10 00A0 FE80 A518 
                    5A10                
(2)  117/FFFFFFFFC0000076 :                     
(2)  118/FFFFFFFFC0000076 :                     ; --------------------------------
(2)  119/FFFFFFFFC0000076 :                     ; Main drawing routine
(2)  120/FFFFFFFFC0000076 :                     ; --------------------------------
(2)  121/FFFFFFFFC0000076 :                     
(2)  122/FFFFFFFFC0000076 :                     maindrw_tasks:
(2)  123/FFFFFFFFC0000076 : 4008                		shll2	r0
(2)  124/FFFFFFFFC0000078 : D12F                		mov	#.list,r1
(2)  125/FFFFFFFFC000007A : 001E                		mov	@(r1,r0),r0
(2)  126/FFFFFFFFC000007C : 402B                		jmp	@r0
(2)  127/FFFFFFFFC000007E : 0009                		nop
(2)  128/FFFFFFFFC0000080 :                     		align 4
(2)  129/FFFFFFFFC0000080 :                     .list:
(2)  130/FFFFFFFFC0000080 : C000 00DC           		dc.l drwtsk_01		; (null entry)
(2)  131/FFFFFFFFC0000084 : C000 00DC           		dc.l drwtsk_01		; Main drawing routine
(2)  132/FFFFFFFFC0000088 : C000 008C           		dc.l drwtsk_02		; Resume from solid color
(2)  133/FFFFFFFFC000008C :                     
(2)  134/FFFFFFFFC000008C :                     ; --------------------------------
(2)  135/FFFFFFFFC000008C :                     ; Task $02
(2)  136/FFFFFFFFC000008C :                     ; --------------------------------
(2)  137/FFFFFFFFC000008C :                     
(2)  138/FFFFFFFFC000008C :                     ; TODO: currently it only resumes
(2)  139/FFFFFFFFC000008C :                     ; from solid_color
(2)  140/FFFFFFFFC000008C :                     
(2)  141/FFFFFFFFC000008C :                     drwtsk_02:
(2)  142/FFFFFFFFC000008C : 2F26                		mov	r2,@-r15
(2)  143/FFFFFFFFC000008E : C50E                		mov.w	@(marsGbl_DrwPause,gbr),r0
(2)  144/FFFFFFFFC0000090 : 8801                		cmp/eq	#1,r0
(2)  145/FFFFFFFFC0000092 : 8920                		bt	.exit
(2)  146/FFFFFFFFC0000094 : 2F36                		mov	r3,@-r15
(2)  147/FFFFFFFFC0000096 : 2F46                		mov	r4,@-r15
(2)  148/FFFFFFFFC0000098 : 2F56                		mov	r5,@-r15
(2)  149/FFFFFFFFC000009A : 2F66                		mov	r6,@-r15
(2)  150/FFFFFFFFC000009C : 2F76                		mov	r7,@-r15
(2)  151/FFFFFFFFC000009E : 2F86                		mov	r8,@-r15
(2)  152/FFFFFFFFC00000A0 : 2F96                		mov	r9,@-r15
(2)  153/FFFFFFFFC00000A2 : 2FA6                		mov	r10,@-r15
(2)  154/FFFFFFFFC00000A4 : 2FB6                		mov	r11,@-r15
(2)  155/FFFFFFFFC00000A6 : 2FC6                		mov	r12,@-r15
(2)  156/FFFFFFFFC00000A8 : 2FD6                		mov	r13,@-r15
(2)  157/FFFFFFFFC00000AA : 2FE6                		mov	r14,@-r15
(2)  158/FFFFFFFFC00000AC : 4F12                		sts	macl,@-r15
(2)  159/FFFFFFFFC00000AE : 4F02                		sts	mach,@-r15
(2)  160/FFFFFFFFC00000B0 : D022                		mov	#Cach_LnDrw_L,r0
(2)  161/FFFFFFFFC00000B2 : 6E06                		mov	@r0+,r14
(2)  162/FFFFFFFFC00000B4 : 6D06                		mov	@r0+,r13
(2)  163/FFFFFFFFC00000B6 : 6C06                		mov	@r0+,r12
(2)  164/FFFFFFFFC00000B8 : 6B06                		mov	@r0+,r11
(2)  165/FFFFFFFFC00000BA : 6A06                		mov	@r0+,r10
(2)  166/FFFFFFFFC00000BC : 6906                		mov	@r0+,r9
(2)  167/FFFFFFFFC00000BE : 6806                		mov	@r0+,r8
(2)  168/FFFFFFFFC00000C0 : 6706                		mov	@r0+,r7
(2)  169/FFFFFFFFC00000C2 : 6606                		mov	@r0+,r6
(2)  170/FFFFFFFFC00000C4 : 6506                		mov	@r0+,r5
(2)  171/FFFFFFFFC00000C6 : 6406                		mov	@r0+,r4
(2)  172/FFFFFFFFC00000C8 : 6306                		mov	@r0+,r3
(2)  173/FFFFFFFFC00000CA : 6206                		mov	@r0+,r2
(2)  174/FFFFFFFFC00000CC : 6106                		mov	@r0+,r1
(2)  175/FFFFFFFFC00000CE : E001                		mov	#1,r0
(2)  176/FFFFFFFFC00000D0 : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  177/FFFFFFFFC00000D2 : A132                		bra	drwsld_updline
(2)  178/FFFFFFFFC00000D4 : 0009                		nop
(2)  179/FFFFFFFFC00000D6 : A15A                .exit:		bra	drwtask_exit
(2)  180/FFFFFFFFC00000D8 : E210                		mov	#$10,r2
(2)  181/FFFFFFFFC00000DA :                     		align 4
(2)  182/FFFFFFFFC00000DC :                     
(2)  183/FFFFFFFFC00000DC :                     ; --------------------------------
(2)  184/FFFFFFFFC00000DC :                     ; Task $01
(2)  185/FFFFFFFFC00000DC :                     ; --------------------------------
(2)  186/FFFFFFFFC00000DC :                     
(2)  187/FFFFFFFFC00000DC :                     drwtsk_01:
(2)  188/FFFFFFFFC00000DC : 2F26                		mov	r2,@-r15
(2)  189/FFFFFFFFC00000DE : C50E                		mov.w	@(marsGbl_DrwPause,gbr),r0
(2)  190/FFFFFFFFC00000E0 : 8801                		cmp/eq	#1,r0
(2)  191/FFFFFFFFC00000E2 : 8904                		bt	.exit
(2)  192/FFFFFFFFC00000E4 : C50C                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces to draw?
(2)  193/FFFFFFFFC00000E6 : 4015                		cmp/pl	r0
(2)  194/FFFFFFFFC00000E8 : 8903                		bt	.has_pz
(2)  195/FFFFFFFFC00000EA : E000                		mov	#0,r0				; If none, just end quickly.
(2)  196/FFFFFFFFC00000EC : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  197/FFFFFFFFC00000EE : A14E                .exit:		bra	drwtask_exit
(2)  198/FFFFFFFFC00000F0 : E210                		mov	#$10,r2
(2)  199/FFFFFFFFC00000F2 :                     .has_pz:
(2)  200/FFFFFFFFC00000F2 : 2F36                		mov	r3,@-r15			; Save all these regs
(2)  201/FFFFFFFFC00000F4 : 2F46                		mov	r4,@-r15
(2)  202/FFFFFFFFC00000F6 : 2F56                		mov	r5,@-r15
(2)  203/FFFFFFFFC00000F8 : 2F66                		mov	r6,@-r15
(2)  204/FFFFFFFFC00000FA : 2F76                		mov	r7,@-r15
(2)  205/FFFFFFFFC00000FC : 2F86                		mov	r8,@-r15
(2)  206/FFFFFFFFC00000FE : 2F96                		mov	r9,@-r15
(2)  207/FFFFFFFFC0000100 : 2FA6                		mov	r10,@-r15
(2)  208/FFFFFFFFC0000102 : 2FB6                		mov	r11,@-r15
(2)  209/FFFFFFFFC0000104 : 2FC6                		mov	r12,@-r15
(2)  210/FFFFFFFFC0000106 : 2FD6                		mov	r13,@-r15
(2)  211/FFFFFFFFC0000108 : 2FE6                		mov	r14,@-r15
(2)  212/FFFFFFFFC000010A : 4F12                		sts	macl,@-r15
(2)  213/FFFFFFFFC000010C : 4F02                		sts	mach,@-r15
(2)  214/FFFFFFFFC000010E :                     drwtsk1_newpz:
(2)  215/FFFFFFFFC000010E : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0	; r14 - Current pieces pointer to READ
(2)  216/FFFFFFFFC0000110 : 6E03                		mov	r0,r14
(2)  217/FFFFFFFFC0000112 : 59E0                		mov	@(plypz_ypos,r14),r9		; Start grabbing StartY/EndY positions
(2)  218/FFFFFFFFC0000114 : 6A93                		mov	r9,r10
(2)  219/FFFFFFFFC0000116 : D00A                		mov	#$FFFF,r0
(2)  220/FFFFFFFFC0000118 : 4929                		shlr16	r9
(2)  221/FFFFFFFFC000011A : 699F                		exts	r9,r9			;  r9 - Top
(2)  222/FFFFFFFFC000011C : 2A09                		and	r0,r10			; r10 - Bottom
(2)  223/FFFFFFFFC000011E : 3090                		cmp/eq	r9,r0			; if Top==Bottom, exit
(2)  224/FFFFFFFFC0000120 : 8908                		bt	.invld_y
(2)  225/FFFFFFFFC0000122 : 900F                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2)  226/FFFFFFFFC0000124 : 3903                		cmp/ge	r0,r9
(2)  227/FFFFFFFFC0000126 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2)  228/FFFFFFFFC0000128 : 3A07                		cmp/gt	r0,r10
(2)  229/FFFFFFFFC000012A : 8B00                		bf	.len_max
(2)  230/FFFFFFFFC000012C : 6A03                		mov	r0,r10
(2)  231/FFFFFFFFC000012E :                     .len_max:
(2)  232/FFFFFFFFC000012E : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2)  233/FFFFFFFFC0000130 : 4A15                		cmp/pl	r10
(2)  234/FFFFFFFFC0000132 : 8908                		bt	drwtsk1_vld_y
(2)  235/FFFFFFFFC0000134 :                     .invld_y:
(2)  236/FFFFFFFFC0000134 : A106                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2)  237/FFFFFFFFC0000136 : 0009                		nop
(2)  238/FFFFFFFFC0000138 :                     		align 4
(2)  239/FFFFFFFFC0000138 : C000 0080 C000 06B8 		ltorg
                    0000 FFFF 00E0      
(2)  240/FFFFFFFFC0000146 :                     
(2)  241/FFFFFFFFC0000146 :                     ; ------------------------------------
(2)  242/FFFFFFFFC0000146 :                     ; If Y top / Y len are valid:
(2)  243/FFFFFFFFC0000146 :                     ; ------------------------------------
(2)  244/FFFFFFFFC0000146 :                     
(2)  245/FFFFFFFFC0000146 :                     drwtsk1_vld_y:
(2)  246/FFFFFFFFC0000146 : 51E1                		mov	@(plypz_xl,r14),r1		; r1 - X left
(2)  247/FFFFFFFFC0000148 : 52E2                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2)  248/FFFFFFFFC000014A : 53E3                		mov	@(plypz_xr,r14),r3		; r3 - X right
(2)  249/FFFFFFFFC000014C : 54E4                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2)  250/FFFFFFFFC000014E : 50EE                		mov	@(plypz_type,r14),r0		; Check material options
(2)  251/FFFFFFFFC0000150 : 4029                		shlr16	r0
(2)  252/FFFFFFFFC0000152 : 4019                		shlr8	r0
(2)  253/FFFFFFFFC0000154 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2)  254/FFFFFFFFC0000156 : 8B01                 		bf	drwtsk_texmode
(2)  255/FFFFFFFFC0000158 : A094                		bra	drwtsk_solidmode
(2)  256/FFFFFFFFC000015A : 0009                		nop
(2)  257/FFFFFFFFC000015C :                     
(2)  258/FFFFFFFFC000015C :                     ; ------------------------------------
(2)  259/FFFFFFFFC000015C :                     ; Texture mode
(2)  260/FFFFFFFFC000015C :                     ;
(2)  261/FFFFFFFFC000015C :                     ; r1  - XL
(2)  262/FFFFFFFFC000015C :                     ; r2  - XL DX
(2)  263/FFFFFFFFC000015C :                     ; r3  - XR
(2)  264/FFFFFFFFC000015C :                     ; r4  - XR DX
(2)  265/FFFFFFFFC000015C :                     ; r5  - SRC XL
(2)  266/FFFFFFFFC000015C :                     ; r6  - SRC XR
(2)  267/FFFFFFFFC000015C :                     ; r7  - SRC YL
(2)  268/FFFFFFFFC000015C :                     ; r8  - SRC YR
(2)  269/FFFFFFFFC000015C :                     ; r9  - Y current
(2)  270/FFFFFFFFC000015C :                     ; r10  - Number of lines
(2)  271/FFFFFFFFC000015C :                     ; ------------------------------------
(2)  272/FFFFFFFFC000015C :                     
(2)  273/FFFFFFFFC000015C :                     drwtsk_texmode:
(2)  274/FFFFFFFFC000015C : C511                		mov.w	@(marsGbl_DivStop_M,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2)  275/FFFFFFFFC000015E : 8801                		cmp/eq	#1,r0				; middle of HW-division
(2)  276/FFFFFFFFC0000160 : 8B02                		bf	.texvalid
(2)  277/FFFFFFFFC0000162 : A106                		bra	drwtask_return
(2)  278/FFFFFFFFC0000164 : 0009                		nop
(2)  279/FFFFFFFFC0000166 :                     		align 4
(2)  280/FFFFFFFFC0000168 :                     .texvalid:
(2)  281/FFFFFFFFC0000168 : 55E5                		mov	@(plypz_src_xl,r14),r5		; Texture X left
(2)  282/FFFFFFFFC000016A : 56E9                		mov	@(plypz_src_xr,r14),r6		; Texture X right
(2)  283/FFFFFFFFC000016C : 57E7                		mov	@(plypz_src_yl,r14),r7		; Texture Y up
(2)  284/FFFFFFFFC000016E : 58EB                		mov	@(plypz_src_yr,r14),r8		; Texture Y down
(2)  285/FFFFFFFFC0000170 :                     
(2)  286/FFFFFFFFC0000170 :                     drwsld_nxtline_tex:
(2)  287/FFFFFFFFC0000170 : 4911                		cmp/pz	r9				; Y Start below 0?
(2)  288/FFFFFFFFC0000172 : 8B69                		bf	drwsld_updline_tex
(2)  289/FFFFFFFFC0000174 : D042                		mov	tag_yhght,r0		; Y Start after 224?
(2)  290/FFFFFFFFC0000176 : 3903                		cmp/ge	r0,r9
(2)  291/FFFFFFFFC0000178 : 8973                		bt	drwtex_gonxtpz
(2)  292/FFFFFFFFC000017A : 2F26                		mov	r2,@-r15
(2)  293/FFFFFFFFC000017C : 2F46                		mov	r4,@-r15
(2)  294/FFFFFFFFC000017E : 2F56                		mov	r5,@-r15
(2)  295/FFFFFFFFC0000180 : 2F66                		mov	r6,@-r15
(2)  296/FFFFFFFFC0000182 : 2F76                		mov	r7,@-r15
(2)  297/FFFFFFFFC0000184 : 2F86                		mov	r8,@-r15
(2)  298/FFFFFFFFC0000186 : 2FA6                		mov	r10,@-r15
(2)  299/FFFFFFFFC0000188 : 2FD6                		mov	r13,@-r15
(2)  300/FFFFFFFFC000018A : 6B13                		mov	r1,r11			; r11 - X left copy
(2)  301/FFFFFFFFC000018C : 6C33                		mov	r3,r12			; r12 - X right copy
(2)  302/FFFFFFFFC000018E : 4B29                		shlr16	r11
(2)  303/FFFFFFFFC0000190 : 4C29                		shlr16	r12
(2)  304/FFFFFFFFC0000192 : 6BBF                		exts	r11,r11
(2)  305/FFFFFFFFC0000194 : 6CCF                		exts	r12,r12
(2)  306/FFFFFFFFC0000196 : 60C3                		mov	r12,r0			; r0: X Right - X Left
(2)  307/FFFFFFFFC0000198 : 30B8                		sub	r11,r0
(2)  308/FFFFFFFFC000019A : 4015                		cmp/pl	r0			; Line reversed?
(2)  309/FFFFFFFFC000019C : 8908                		bt	.txrevers
(2)  310/FFFFFFFFC000019E : 60C3                		mov	r12,r0			; Swap XL and XR values
(2)  311/FFFFFFFFC00001A0 : 6CB3                		mov	r11,r12
(2)  312/FFFFFFFFC00001A2 : 6B03                		mov	r0,r11
(2)  313/FFFFFFFFC00001A4 : 6053                		mov	r5,r0
(2)  314/FFFFFFFFC00001A6 : 6563                		mov	r6,r5
(2)  315/FFFFFFFFC00001A8 : 6603                		mov	r0,r6
(2)  316/FFFFFFFFC00001AA : 6073                		mov	r7,r0
(2)  317/FFFFFFFFC00001AC : 6783                		mov	r8,r7
(2)  318/FFFFFFFFC00001AE : 6803                		mov	r0,r8
(2)  319/FFFFFFFFC00001B0 :                     .txrevers:
(2)  320/FFFFFFFFC00001B0 : 3CB0                		cmp/eq	r11,r12				; Same X position?
(2)  321/FFFFFFFFC00001B2 : 8941                		bt	.tex_skip_line
(2)  322/FFFFFFFFC00001B4 : D031                		mov	tag_width,r0		; X right < 0?
(2)  323/FFFFFFFFC00001B6 : 4C15                		cmp/pl	r12
(2)  324/FFFFFFFFC00001B8 : 8B3E                		bf	.tex_skip_line
(2)  325/FFFFFFFFC00001BA : 3B07                		cmp/gt	r0,r11				; X left > 320?
(2)  326/FFFFFFFFC00001BC : 893C                		bt	.tex_skip_line
(2)  327/FFFFFFFFC00001BE : 62C3                		mov	r12,r2
(2)  328/FFFFFFFFC00001C0 : 60B3                		mov 	r11,r0
(2)  329/FFFFFFFFC00001C2 : 3208                		sub 	r0,r2
(2)  330/FFFFFFFFC00001C4 : 3658                		sub	r5,r6
(2)  331/FFFFFFFFC00001C6 : 3878                		sub	r7,r8
(2)  332/FFFFFFFFC00001C8 :                     
(2)  333/FFFFFFFFC00001C8 :                     	; Calculate new DX values
(2)  334/FFFFFFFFC00001C8 :                     	; make sure DIV is available
(2)  335/FFFFFFFFC00001C8 :                     	; (marsGbl_DivStop_M == 0)
(2)  336/FFFFFFFFC00001C8 : 90FA                		mov	#_JR,r0				; r6 / r2
(2)  337/FFFFFFFFC00001CA : 2022                		mov	r2,@r0
(2)  338/FFFFFFFFC00001CC : 1061                		mov	r6,@(4,r0)
(2)  339/FFFFFFFFC00001CE : 0009                		nop
(2)  340/FFFFFFFFC00001D0 : 5601                		mov	@(4,r0),r6			; r8 / r2
(2)  341/FFFFFFFFC00001D2 : 2022                		mov	r2,@r0
(2)  342/FFFFFFFFC00001D4 : 1081                		mov	r8,@(4,r0)
(2)  343/FFFFFFFFC00001D6 : 0009                		nop
(2)  344/FFFFFFFFC00001D8 : 5801                		mov	@(4,r0),r8
(2)  345/FFFFFFFFC00001DA :                     
(2)  346/FFFFFFFFC00001DA :                     	; Limit X destination points
(2)  347/FFFFFFFFC00001DA :                     	; and correct the texture's X positions
(2)  348/FFFFFFFFC00001DA : D028                		mov	tag_width,r0		; XR point > 320?
(2)  349/FFFFFFFFC00001DC : 3C07                		cmp/gt	r0,r12
(2)  350/FFFFFFFFC00001DE : 8B00                		bf	.tr_fix
(2)  351/FFFFFFFFC00001E0 : 6C03                		mov	r0,r12				; Force XR to 320
(2)  352/FFFFFFFFC00001E2 :                     .tr_fix:
(2)  353/FFFFFFFFC00001E2 : 4B15                		cmp/pl	r11				; XL point < 0?
(2)  354/FFFFFFFFC00001E4 : 8907                		bt	.tl_fix
(2)  355/FFFFFFFFC00001E6 : 62BB                		neg	r11,r2				; Fix texture positions
(2)  356/FFFFFFFFC00001E8 : 326D                		dmuls	r6,r2
(2)  357/FFFFFFFFC00001EA : 001A                		sts	macl,r0
(2)  358/FFFFFFFFC00001EC : 350C                		add	r0,r5
(2)  359/FFFFFFFFC00001EE : 328D                		dmuls	r8,r2
(2)  360/FFFFFFFFC00001F0 : 001A                		sts	macl,r0
(2)  361/FFFFFFFFC00001F2 : 370C                		add	r0,r7
(2)  362/FFFFFFFFC00001F4 : 2BBA                		xor	r11,r11				; And reset XL to 0
(2)  363/FFFFFFFFC00001F6 :                     .tl_fix:
(2)  364/FFFFFFFFC00001F6 : 3CB8                		sub 	r11,r12
(2)  365/FFFFFFFFC00001F8 : 4C15                		cmp/pl	r12
(2)  366/FFFFFFFFC00001FA : 8B1D                		bf	.tex_skip_line
(2)  367/FFFFFFFFC00001FC :                     ; 		mov	#$10,r0				; (Limiter test)
(2)  368/FFFFFFFFC00001FC :                     ; 		cmp/ge	r0,r12
(2)  369/FFFFFFFFC00001FC :                     ; 		bf	.testlwrit
(2)  370/FFFFFFFFC00001FC :                     ; 		mov	r0,r12
(2)  371/FFFFFFFFC00001FC :                     ; .testlwrit:
(2)  372/FFFFFFFFC00001FC : 6093                		mov 	r9,r0				; Y position * $200
(2)  373/FFFFFFFFC00001FE : 4018                		shll8	r0
(2)  374/FFFFFFFFC0000200 : 4000                		shll	r0
(2)  375/FFFFFFFFC0000202 : DA68                		mov 	#_overwrite+$200,r10		; Point to TOPLEFT in framebuffer
(2)  376/FFFFFFFFC0000204 : 3A0C                		add 	r0,r10				; Add Y
(2)  377/FFFFFFFFC0000206 : 3ABC                		add 	r11,r10				; Add X
(2)  378/FFFFFFFFC0000208 : 92DB                		mov	#$1FFF,r2
(2)  379/FFFFFFFFC000020A : 90DB                		mov	#$FF,r0
(2)  380/FFFFFFFFC000020C : 5BED                		mov	@(plypz_mtrl,r14),r11		; r11 - texture data
(2)  381/FFFFFFFFC000020E : 54EE                		mov	@(plypz_type,r14),r4		;  r4 - texture width|palinc
(2)  382/FFFFFFFFC0000210 : 6D43                		mov	r4,r13
(2)  383/FFFFFFFFC0000212 : 4429                		shlr16	r4
(2)  384/FFFFFFFFC0000214 : 2429                		and	r2,r4
(2)  385/FFFFFFFFC0000216 : 2D09                		and	r0,r13
(2)  386/FFFFFFFFC0000218 :                     
(2)  387/FFFFFFFFC0000218 :                     	; TODO: implement duffs device
(2)  388/FFFFFFFFC0000218 :                     .tex_xloop:
(2)  389/FFFFFFFFC0000218 : 6273                		mov	r7,r2
(2)  390/FFFFFFFFC000021A : 4229                		shlr16	r2
(2)  391/FFFFFFFFC000021C : 242E                		mulu	r2,r4
(2)  392/FFFFFFFFC000021E : 6253                		mov	r5,r2	   			; Build column index
(2)  393/FFFFFFFFC0000220 : 001A                		sts	macl,r0
(2)  394/FFFFFFFFC0000222 : 4229                		shlr16	r2
(2)  395/FFFFFFFFC0000224 : 302C                		add	r2,r0
(2)  396/FFFFFFFFC0000226 : 00BC                		mov.b	@(r0,r11),r0			; Read pixel
(2)  397/FFFFFFFFC0000228 : 30DC                		add	r13,r0
(2)  398/FFFFFFFFC000022A : C9FF                		and	#$FF,r0
(2)  399/FFFFFFFFC000022C : 2A00                		mov.b	r0,@r10	   			; Write pixel
(2)  400/FFFFFFFFC000022E : 7A01                		add 	#1,r10
(2)  401/FFFFFFFFC0000230 : 356C                		add	r6,r5				; Update X
(2)  402/FFFFFFFFC0000232 : 4C10                		dt	r12
(2)  403/FFFFFFFFC0000234 : 8FF0                		bf/s	.tex_xloop
(2)  404/FFFFFFFFC0000236 : 378C                		add	r8,r7				; Update Y
(2)  405/FFFFFFFFC0000238 :                     
(2)  406/FFFFFFFFC0000238 :                     .tex_skip_line:
(2)  407/FFFFFFFFC0000238 : 6DF6                		mov	@r15+,r13
(2)  408/FFFFFFFFC000023A : 6AF6                		mov	@r15+,r10
(2)  409/FFFFFFFFC000023C : 68F6                		mov	@r15+,r8
(2)  410/FFFFFFFFC000023E : 67F6                		mov	@r15+,r7
(2)  411/FFFFFFFFC0000240 : 66F6                		mov	@r15+,r6
(2)  412/FFFFFFFFC0000242 : 65F6                		mov	@r15+,r5
(2)  413/FFFFFFFFC0000244 : 64F6                		mov	@r15+,r4
(2)  414/FFFFFFFFC0000246 : 62F6                		mov	@r15+,r2
(2)  415/FFFFFFFFC0000248 :                     drwsld_updline_tex:
(2)  416/FFFFFFFFC0000248 : 50E6                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2)  417/FFFFFFFFC000024A : 350C                		add	r0,r5
(2)  418/FFFFFFFFC000024C : 50EA                		mov	@(plypz_src_xr_dx,r14),r0
(2)  419/FFFFFFFFC000024E : 360C                		add	r0,r6
(2)  420/FFFFFFFFC0000250 : 50E8                		mov	@(plypz_src_yl_dx,r14),r0
(2)  421/FFFFFFFFC0000252 : 370C                		add	r0,r7
(2)  422/FFFFFFFFC0000254 : 50EC                		mov	@(plypz_src_yr_dx,r14),r0
(2)  423/FFFFFFFFC0000256 : 380C                		add	r0,r8
(2)  424/FFFFFFFFC0000258 : 312C                		add	r2,r1				; Update X postions
(2)  425/FFFFFFFFC000025A : 334C                		add	r4,r3
(2)  426/FFFFFFFFC000025C : 4A10                		dt	r10
(2)  427/FFFFFFFFC000025E : 8F87                		bf/s	drwsld_nxtline_tex
(2)  428/FFFFFFFFC0000260 : 7901                		add	#1,r9
(2)  429/FFFFFFFFC0000262 :                     drwtex_gonxtpz:
(2)  430/FFFFFFFFC0000262 :                     
(2)  431/FFFFFFFFC0000262 : 7E3C                		add	#sizeof_plypz,r14		; And set new point
(2)  432/FFFFFFFFC0000264 : 60E3                		mov	r14,r0
(2)  433/FFFFFFFFC0000266 : DE50                		mov	#RAM_Mars_VdpDrwList_e,r14	; End-of-list?
(2)  434/FFFFFFFFC0000268 : 30E3                		cmp/ge	r14,r0
(2)  435/FFFFFFFFC000026A : 8B00                		bf	.reset_rd
(2)  436/FFFFFFFFC000026C : D04F                		mov	#RAM_Mars_VdpDrwList,r0
(2)  437/FFFFFFFFC000026E :                     .reset_rd:
(2)  438/FFFFFFFFC000026E : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  439/FFFFFFFFC0000270 : C50C                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Decrement piece
(2)  440/FFFFFFFFC0000272 : 70FF                		add	#-1,r0
(2)  441/FFFFFFFFC0000274 : C10C                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  442/FFFFFFFFC0000276 : A07C                		bra	drwtask_return
(2)  443/FFFFFFFFC0000278 : E210                		mov	#$10,r2				; Timer for next watchdog
(2)  444/FFFFFFFFC000027A :                     		align 4
(2)  445/FFFFFFFFC000027C : 0000 0140           tag_width:	dc.l	SCREEN_WIDTH
(2)  446/FFFFFFFFC0000280 : 0000 00E0           tag_yhght:	dc.l	SCREEN_HEIGHT
(2)  447/FFFFFFFFC0000284 :                     
(2)  448/FFFFFFFFC0000284 :                     ; ------------------------------------
(2)  449/FFFFFFFFC0000284 :                     ; Solid Color
(2)  450/FFFFFFFFC0000284 :                     ;
(2)  451/FFFFFFFFC0000284 :                     ; r1  - XL
(2)  452/FFFFFFFFC0000284 :                     ; r2  - XL DX
(2)  453/FFFFFFFFC0000284 :                     ; r3  - XR
(2)  454/FFFFFFFFC0000284 :                     ; r4  - XR DX
(2)  455/FFFFFFFFC0000284 :                     ; r9  - Y current
(2)  456/FFFFFFFFC0000284 :                     ; r10  - Number of lines
(2)  457/FFFFFFFFC0000284 :                     ; ------------------------------------
(2)  458/FFFFFFFFC0000284 :                     
(2)  459/FFFFFFFFC0000284 :                     drwtsk_solidmode:
(2)  460/FFFFFFFFC0000284 : 909E                		mov	#$FF,r0
(2)  461/FFFFFFFFC0000286 : 56ED                		mov	@(plypz_mtrl,r14),r6
(2)  462/FFFFFFFFC0000288 : 55EE                		mov	@(plypz_type,r14),r5
(2)  463/FFFFFFFFC000028A : 2509                		and	r0,r5
(2)  464/FFFFFFFFC000028C : 2609                		and	r0,r6
(2)  465/FFFFFFFFC000028E : 365C                		add	r5,r6
(2)  466/FFFFFFFFC0000290 : DD47                		mov	#_vdpreg,r13
(2)  467/FFFFFFFFC0000292 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  468/FFFFFFFFC0000294 : C802                		tst	#2,r0
(2)  469/FFFFFFFFC0000296 : 8BFC                		bf	.wait
(2)  470/FFFFFFFFC0000298 :                     drwsld_nxtline:
(2)  471/FFFFFFFFC0000298 : 6093                		mov	r9,r0
(2)  472/FFFFFFFFC000029A : 30AC                		add	r10,r0
(2)  473/FFFFFFFFC000029C : 4015                		cmp/pl	r0
(2)  474/FFFFFFFFC000029E : 8B51                		bf	drwsld_nextpz
(2)  475/FFFFFFFFC00002A0 : 4911                		cmp/pz	r9
(2)  476/FFFFFFFFC00002A2 : 8B4A                		bf	drwsld_updline
(2)  477/FFFFFFFFC00002A4 : 908F                		mov	#SCREEN_HEIGHT,r0
(2)  478/FFFFFFFFC00002A6 : 3907                		cmp/gt	r0,r9
(2)  479/FFFFFFFFC00002A8 : 894C                		bt	drwsld_nextpz
(2)  480/FFFFFFFFC00002AA :                     
(2)  481/FFFFFFFFC00002AA : 6B13                		mov	r1,r11
(2)  482/FFFFFFFFC00002AC : 6C33                		mov	r3,r12
(2)  483/FFFFFFFFC00002AE : 4B29                		shlr16	r11
(2)  484/FFFFFFFFC00002B0 : 4C29                		shlr16	r12
(2)  485/FFFFFFFFC00002B2 : 6BBF                		exts	r11,r11
(2)  486/FFFFFFFFC00002B4 : 6CCF                		exts	r12,r12
(2)  487/FFFFFFFFC00002B6 : 60C3                		mov	r12,r0
(2)  488/FFFFFFFFC00002B8 : 30B8                		sub	r11,r0
(2)  489/FFFFFFFFC00002BA : 4011                		cmp/pz	r0
(2)  490/FFFFFFFFC00002BC : 8902                		bt	.revers
(2)  491/FFFFFFFFC00002BE : 60C3                		mov	r12,r0
(2)  492/FFFFFFFFC00002C0 : 6CB3                		mov	r11,r12
(2)  493/FFFFFFFFC00002C2 : 6B03                		mov	r0,r11
(2)  494/FFFFFFFFC00002C4 :                     .revers:
(2)  495/FFFFFFFFC00002C4 : 9080                		mov	#SCREEN_WIDTH-2,r0
(2)  496/FFFFFFFFC00002C6 : 4C15                		cmp/pl	r12
(2)  497/FFFFFFFFC00002C8 : 8B37                		bf	drwsld_updline
(2)  498/FFFFFFFFC00002CA : 3B07                		cmp/gt	r0,r11
(2)  499/FFFFFFFFC00002CC : 8935                		bt	drwsld_updline
(2)  500/FFFFFFFFC00002CE : 3C07                		cmp/gt	r0,r12
(2)  501/FFFFFFFFC00002D0 : 8B00                		bf	.r_fix
(2)  502/FFFFFFFFC00002D2 : 6C03                		mov	r0,r12
(2)  503/FFFFFFFFC00002D4 :                     .r_fix:
(2)  504/FFFFFFFFC00002D4 : 4B15                		cmp/pl	r11
(2)  505/FFFFFFFFC00002D6 : 8900                		bt	.l_fix
(2)  506/FFFFFFFFC00002D8 : 2BBA                		xor	r11,r11
(2)  507/FFFFFFFFC00002DA :                     .l_fix:
(2)  508/FFFFFFFFC00002DA : E0FE                		mov	#-2,r0
(2)  509/FFFFFFFFC00002DC : 2B09                		and	r0,r11
(2)  510/FFFFFFFFC00002DE : 2C09                		and	r0,r12
(2)  511/FFFFFFFFC00002E0 : 60C3                		mov	r12,r0
(2)  512/FFFFFFFFC00002E2 : 30B8                		sub	r11,r0
(2)  513/FFFFFFFFC00002E4 : 4015                		cmp/pl	r0
(2)  514/FFFFFFFFC00002E6 : 8B28                		bf	drwsld_updline
(2)  515/FFFFFFFFC00002E8 :                     
(2)  516/FFFFFFFFC00002E8 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  517/FFFFFFFFC00002EA : C802                		tst	#2,r0
(2)  518/FFFFFFFFC00002EC : 8BFC                		bf	.wait
(2)  519/FFFFFFFFC00002EE : 60C3                		mov	r12,r0
(2)  520/FFFFFFFFC00002F0 : 30B8                		sub	r11,r0
(2)  521/FFFFFFFFC00002F2 : 6C03                		mov	r0,r12
(2)  522/FFFFFFFFC00002F4 : 4001                		shlr	r0
(2)  523/FFFFFFFFC00002F6 : 81D2                		mov.w	r0,@(4,r13)	; length
(2)  524/FFFFFFFFC00002F8 : 60B3                		mov	r11,r0
(2)  525/FFFFFFFFC00002FA : 4001                		shlr	r0
(2)  526/FFFFFFFFC00002FC : 6593                		mov	r9,r5
(2)  527/FFFFFFFFC00002FE : 7501                		add	#1,r5
(2)  528/FFFFFFFFC0000300 : 4518                		shll8	r5
(2)  529/FFFFFFFFC0000302 : 305C                		add	r5,r0
(2)  530/FFFFFFFFC0000304 : 81D3                		mov.w	r0,@(6,r13)	; address
(2)  531/FFFFFFFFC0000306 : 6063                		mov	r6,r0
(2)  532/FFFFFFFFC0000308 : 4018                		shll8	r0
(2)  533/FFFFFFFFC000030A : 206B                		or	r6,r0
(2)  534/FFFFFFFFC000030C : 81D4                		mov.w	r0,@(8,r13)	; Set data
(2)  535/FFFFFFFFC000030E :                     ; .wait:	mov.w	@(10,r13),r0
(2)  536/FFFFFFFFC000030E :                     ; 		tst	#2,r0
(2)  537/FFFFFFFFC000030E :                     ; 		bf	.wait
(2)  538/FFFFFFFFC000030E :                     
(2)  539/FFFFFFFFC000030E :                     ; 	If the line is too large, leave it to VDP
(2)  540/FFFFFFFFC000030E :                     ; 	and exit watchdog, we will come back on
(2)  541/FFFFFFFFC000030E :                     ; 	next trigger.
(2)  542/FFFFFFFFC000030E : E028                		mov	#$28,r0
(2)  543/FFFFFFFFC0000310 : 3C07                		cmp/gt	r0,r12
(2)  544/FFFFFFFFC0000312 : 8B12                		bf	drwsld_updline
(2)  545/FFFFFFFFC0000314 : E002                		mov	#2,r0
(2)  546/FFFFFFFFC0000316 : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  547/FFFFFFFFC0000318 : D026                		mov	#Cach_LnDrw_S,r0
(2)  548/FFFFFFFFC000031A : 2016                		mov	r1,@-r0
(2)  549/FFFFFFFFC000031C : 2026                		mov	r2,@-r0
(2)  550/FFFFFFFFC000031E : 2036                		mov	r3,@-r0
(2)  551/FFFFFFFFC0000320 : 2046                		mov	r4,@-r0
(2)  552/FFFFFFFFC0000322 : 2056                		mov	r5,@-r0
(2)  553/FFFFFFFFC0000324 : 2066                		mov	r6,@-r0
(2)  554/FFFFFFFFC0000326 : 2076                		mov	r7,@-r0
(2)  555/FFFFFFFFC0000328 : 2086                		mov	r8,@-r0
(2)  556/FFFFFFFFC000032A : 2096                		mov	r9,@-r0
(2)  557/FFFFFFFFC000032C : 20A6                		mov	r10,@-r0
(2)  558/FFFFFFFFC000032E : 20B6                		mov	r11,@-r0
(2)  559/FFFFFFFFC0000330 : 20C6                		mov	r12,@-r0
(2)  560/FFFFFFFFC0000332 : 20D6                		mov	r13,@-r0
(2)  561/FFFFFFFFC0000334 : 20E6                		mov	r14,@-r0
(2)  562/FFFFFFFFC0000336 : A01C                		bra	drwtask_return
(2)  563/FFFFFFFFC0000338 : E210                		mov	#$10,r2			; Exit and re-enter
(2)  564/FFFFFFFFC000033A :                     drwsld_updline:
(2)  565/FFFFFFFFC000033A : 312C                		add	r2,r1
(2)  566/FFFFFFFFC000033C : 334C                		add	r4,r3
(2)  567/FFFFFFFFC000033E : 4A10                		dt	r10
(2)  568/FFFFFFFFC0000340 : 8FAA                		bf/s	drwsld_nxtline
(2)  569/FFFFFFFFC0000342 : 7901                		add	#1,r9
(2)  570/FFFFFFFFC0000344 :                     
(2)  571/FFFFFFFFC0000344 :                     ; ------------------------------------
(2)  572/FFFFFFFFC0000344 :                     
(2)  573/FFFFFFFFC0000344 :                     drwsld_nextpz:
(2)  574/FFFFFFFFC0000344 : 7E3C                		add	#sizeof_plypz,r14		; And set new point
(2)  575/FFFFFFFFC0000346 : 60E3                		mov	r14,r0
(2)  576/FFFFFFFFC0000348 : DE1B                		mov	#RAM_Mars_VdpDrwList_e,r14	; End-of-list?
(2)  577/FFFFFFFFC000034A : 30E3                		cmp/ge	r14,r0
(2)  578/FFFFFFFFC000034C : 8B00                		bf	.reset_rd
(2)  579/FFFFFFFFC000034E : D01B                		mov	#RAM_Mars_VdpDrwList,r0
(2)  580/FFFFFFFFC0000350 :                     .reset_rd:
(2)  581/FFFFFFFFC0000350 : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  582/FFFFFFFFC0000352 : C50C                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Decrement piece
(2)  583/FFFFFFFFC0000354 : 70FF                		add	#-1,r0
(2)  584/FFFFFFFFC0000356 : C10C                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  585/FFFFFFFFC0000358 : 4015                		cmp/pl	r0
(2)  586/FFFFFFFFC000035A : 8B01                		bf	.finish_it
(2)  587/FFFFFFFFC000035C : AED7                		bra	drwtsk1_newpz
(2)  588/FFFFFFFFC000035E : 0009                		nop
(2)  589/FFFFFFFFC0000360 :                     .finish_it:
(2)  590/FFFFFFFFC0000360 : E000                		mov	#0,r0
(2)  591/FFFFFFFFC0000362 : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  592/FFFFFFFFC0000364 : A005                		bra	drwtask_return
(2)  593/FFFFFFFFC0000366 : E210                		mov	#$10,r2			; Timer for next watchdog
(2)  594/FFFFFFFFC0000368 :                     
(2)  595/FFFFFFFFC0000368 :                     ; --------------------------------
(2)  596/FFFFFFFFC0000368 :                     ; Task $00
(2)  597/FFFFFFFFC0000368 :                     ; --------------------------------
(2)  598/FFFFFFFFC0000368 :                     
(2)  599/FFFFFFFFC0000368 :                     drwtsk_00:
(2)  600/FFFFFFFFC0000368 : 2F26                		mov	r2,@-r15
(2)  601/FFFFFFFFC000036A : E000                		mov	#0,r0
(2)  602/FFFFFFFFC000036C : C10D                		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  603/FFFFFFFFC000036E : A00E                		bra	drwtask_exit
(2)  604/FFFFFFFFC0000370 : E210                		mov	#$10,r2
(2)  605/FFFFFFFFC0000372 :                     
(2)  606/FFFFFFFFC0000372 :                     drwtask_return:
(2)  607/FFFFFFFFC0000372 : 4F06                		lds	@r15+,mach
(2)  608/FFFFFFFFC0000374 : 4F16                		lds	@r15+,macl
(2)  609/FFFFFFFFC0000376 : 6EF6                		mov	@r15+,r14
(2)  610/FFFFFFFFC0000378 : 6DF6                		mov	@r15+,r13
(2)  611/FFFFFFFFC000037A : 6CF6                		mov	@r15+,r12
(2)  612/FFFFFFFFC000037C : 6BF6                		mov	@r15+,r11
(2)  613/FFFFFFFFC000037E : 6AF6                		mov	@r15+,r10
(2)  614/FFFFFFFFC0000380 : 69F6                		mov	@r15+,r9
(2)  615/FFFFFFFFC0000382 : 68F6                		mov	@r15+,r8
(2)  616/FFFFFFFFC0000384 : 67F6                		mov	@r15+,r7
(2)  617/FFFFFFFFC0000386 : 66F6                		mov	@r15+,r6
(2)  618/FFFFFFFFC0000388 : 65F6                		mov	@r15+,r5
(2)  619/FFFFFFFFC000038A : 64F6                		mov	@r15+,r4
(2)  620/FFFFFFFFC000038C : 63F6                		mov	@r15+,r3
(2)  621/FFFFFFFFC000038E :                     drwtask_exit:
(2)  622/FFFFFFFFC000038E : 911C                		mov.l   #$FFFFFE80,r1
(2)  623/FFFFFFFFC0000390 : 901C                		mov.w   #$A518,r0	; OFF
(2)  624/FFFFFFFFC0000392 : 2101                		mov.w   r0,@r1
(2)  625/FFFFFFFFC0000394 : CB20                		or      #$20,r0		; ON
(2)  626/FFFFFFFFC0000396 : 2101                		mov.w   r0,@r1
(2)  627/FFFFFFFFC0000398 : 9019                		mov.w   #$5A00,r0	; r2 - Timer
(2)  628/FFFFFFFFC000039A : 202B                		or	r2,r0
(2)  629/FFFFFFFFC000039C : 2101                		mov.w   r0,@r1
(2)  630/FFFFFFFFC000039E : 62F6                		mov	@r15+,r2
(2)  631/FFFFFFFFC00003A0 : 000B                		rts
(2)  632/FFFFFFFFC00003A2 : 0009                		nop
(2)  633/FFFFFFFFC00003A4 :                     		align 4
(2)  634/FFFFFFFFC00003A4 : 2402 0200 0603 0D78 		ltorg
                    0602 10D0 2000 4100 
                    C000 06F0 0603 0D78 
                    0602 10D0 FF00 1FFF 
                    00FF 00E0 013E FE80 
                    A518 5A00           
(2)  635/FFFFFFFFC00003D0 :                     
(2)  636/FFFFFFFFC00003D0 :                     ; ------------------------------------------------
(2)  637/FFFFFFFFC00003D0 :                     ; Read polygon and build pieces
(2)  638/FFFFFFFFC00003D0 :                     ;
(2)  639/FFFFFFFFC00003D0 :                     ; Input:
(2)  640/FFFFFFFFC00003D0 :                     ; r14 - Polygon data
(2)  641/FFFFFFFFC00003D0 :                     ;
(2)  642/FFFFFFFFC00003D0 :                     ; polygn_type bits:
(2)  643/FFFFFFFFC00003D0 :                     ; %tsp----- -------- -------- --------
(2)  644/FFFFFFFFC00003D0 :                     ;
(2)  645/FFFFFFFFC00003D0 :                     ; p - Polygon type: Quad (0) or Triangle (1)
(2)  646/FFFFFFFFC00003D0 :                     ; s - Corrds are Normal (0) or Sprite (1) <-- Unused.
(2)  647/FFFFFFFFC00003D0 :                     ; t - Polygon has texture data (1):
(2)  648/FFFFFFFFC00003D0 :                     ;     polygn_mtrlopt: Texture width
(2)  649/FFFFFFFFC00003D0 :                     ;     polygn_mtrl   : Texture data address
(2)  650/FFFFFFFFC00003D0 :                     ;     polygn_srcpnts: Texture X/Y positions for
(2)  651/FFFFFFFFC00003D0 :                     ;                     each edge (3 or 4)
(2)  652/FFFFFFFFC00003D0 :                     ; ------------------------------------------------
(2)  653/FFFFFFFFC00003D0 :                     
(2)  654/FFFFFFFFC00003D0 :                     MarsVideo_SlicePlgn:
(2)  655/FFFFFFFFC00003D0 : 4F22                		sts	pr,@-r15
(2)  656/FFFFFFFFC00003D2 : DD31                		mov	#Cach_DDA_Last,r13		; r13 - DDA last point
(2)  657/FFFFFFFFC00003D4 : DC31                		mov	#Cach_DDA_Top,r12		; r12 - DDA first point
(2)  658/FFFFFFFFC00003D6 : 50E0                		mov	@(polygn_type,r14),r0
(2)  659/FFFFFFFFC00003D8 : 4029                		shlr16	r0
(2)  660/FFFFFFFFC00003DA : 4019                		shlr8	r0
(2)  661/FFFFFFFFC00003DC : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  662/FFFFFFFFC00003DE : 8B00                		bf	.tringl
(2)  663/FFFFFFFFC00003E0 : 7D08                		add	#8,r13				; If quad: add 8
(2)  664/FFFFFFFFC00003E2 :                     .tringl:
(2)  665/FFFFFFFFC00003E2 : 61E3                		mov	r14,r1
(2)  666/FFFFFFFFC00003E4 : 62C3                		mov	r12,r2
(2)  667/FFFFFFFFC00003E6 : D32E                		mov	#Cach_DDA_Src,r3
(2)  668/FFFFFFFFC00003E8 : 7108                		add	#polygn_points,r1
(2)  669/FFFFFFFFC00003EA :                     ; 		tst	#PLGN_SPRITE,r0			; PLGN_SPRITE set?
(2)  670/FFFFFFFFC00003EA :                     ; 		bt	.plgn_pnts
(2)  671/FFFFFFFFC00003EA :                     ;
(2)  672/FFFFFFFFC00003EA :                     ; ; ----------------------------------------
(2)  673/FFFFFFFFC00003EA :                     ; ; Sprite points
(2)  674/FFFFFFFFC00003EA :                     ; ; ----------------------------------------
(2)  675/FFFFFFFFC00003EA :                     ;
(2)  676/FFFFFFFFC00003EA :                     ; ; TODO: rework or get rid of this
(2)  677/FFFFFFFFC00003EA :                     ; .spr_pnts:
(2)  678/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r8		; X pos
(2)  679/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r9		; Y pos
(2)  680/FFFFFFFFC00003EA :                     ;
(2)  681/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r4
(2)  682/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r6
(2)  683/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r5
(2)  684/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r7
(2)  685/FFFFFFFFC00003EA :                     ; 		add	#2*2,r1
(2)  686/FFFFFFFFC00003EA :                     ; 		add	r8,r4
(2)  687/FFFFFFFFC00003EA :                     ; 		add 	r8,r5
(2)  688/FFFFFFFFC00003EA :                     ; 		add	r9,r6
(2)  689/FFFFFFFFC00003EA :                     ; 		add 	r9,r7
(2)  690/FFFFFFFFC00003EA :                     ; 		mov	r5,@r2		; TR
(2)  691/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  692/FFFFFFFFC00003EA :                     ; 		mov	r6,@r2
(2)  693/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  694/FFFFFFFFC00003EA :                     ; 		mov	r4,@r2		; TL
(2)  695/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  696/FFFFFFFFC00003EA :                     ; 		mov	r6,@r2
(2)  697/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  698/FFFFFFFFC00003EA :                     ; 		mov	r4,@r2		; BL
(2)  699/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  700/FFFFFFFFC00003EA :                     ; 		mov	r7,@r2
(2)  701/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  702/FFFFFFFFC00003EA :                     ; 		mov	r5,@r2		; BR
(2)  703/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  704/FFFFFFFFC00003EA :                     ; 		mov	r7,@r2
(2)  705/FFFFFFFFC00003EA :                     ; 		add	#4,r2
(2)  706/FFFFFFFFC00003EA :                     ;
(2)  707/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r4
(2)  708/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r6
(2)  709/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r5
(2)  710/FFFFFFFFC00003EA :                     ; 		mov.w	@r1+,r7
(2)  711/FFFFFFFFC00003EA :                     ; 		mov	r5,@r3		; TR
(2)  712/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  713/FFFFFFFFC00003EA :                     ; 		mov	r6,@r3
(2)  714/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  715/FFFFFFFFC00003EA :                     ; 		mov	r4,@r3		; TL
(2)  716/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  717/FFFFFFFFC00003EA :                     ; 		mov	r6,@r3
(2)  718/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  719/FFFFFFFFC00003EA :                     ; 		mov	r4,@r3		; BL
(2)  720/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  721/FFFFFFFFC00003EA :                     ; 		mov	r7,@r3
(2)  722/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  723/FFFFFFFFC00003EA :                     ; 		mov	r5,@r3		; BR
(2)  724/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  725/FFFFFFFFC00003EA :                     ; 		mov	r7,@r3
(2)  726/FFFFFFFFC00003EA :                     ; 		add	#4,r3
(2)  727/FFFFFFFFC00003EA :                     ; ; 		mov	#4*2,r0
(2)  728/FFFFFFFFC00003EA :                     ; ; .sprsrc_pnts:
(2)  729/FFFFFFFFC00003EA :                     ; ; 		mov.w	@r1+,r0
(2)  730/FFFFFFFFC00003EA :                     ; ; 		mov.w	@r1+,r4
(2)  731/FFFFFFFFC00003EA :                     ; ; 		mov	r0,@r3
(2)  732/FFFFFFFFC00003EA :                     ; ; 		mov	r4,@(4,r3)
(2)  733/FFFFFFFFC00003EA :                     ; ; 		dt	r0
(2)  734/FFFFFFFFC00003EA :                     ; ; 		bf/s	.sprsrc_pnts
(2)  735/FFFFFFFFC00003EA :                     ; ; 		add	#8,r3
(2)  736/FFFFFFFFC00003EA :                     ; 		bra	.start_math
(2)  737/FFFFFFFFC00003EA :                     ; 		nop
(2)  738/FFFFFFFFC00003EA :                     ;
(2)  739/FFFFFFFFC00003EA :                     ; ; ----------------------------------------
(2)  740/FFFFFFFFC00003EA :                     ; ; Polygon points
(2)  741/FFFFFFFFC00003EA :                     ; ; ----------------------------------------
(2)  742/FFFFFFFFC00003EA :                     ;
(2)  743/FFFFFFFFC00003EA :                     ; .plgn_pnts:
(2)  744/FFFFFFFFC00003EA :                     
(2)  745/FFFFFFFFC00003EA :                     	; Copy polygon points Cache's DDA
(2)  746/FFFFFFFFC00003EA : E804                		mov	#4,r8
(2)  747/FFFFFFFFC00003EC : 9660                		mov	#SCREEN_WIDTH/2,r6
(2)  748/FFFFFFFFC00003EE : E770                		mov	#SCREEN_HEIGHT/2,r7
(2)  749/FFFFFFFFC00003F0 :                     .setpnts:
(2)  750/FFFFFFFFC00003F0 : 6416                		mov	@r1+,r4			; Get X
(2)  751/FFFFFFFFC00003F2 : 6516                		mov	@r1+,r5			; Get Y
(2)  752/FFFFFFFFC00003F4 : 346C                		add	r6,r4			; X + width
(2)  753/FFFFFFFFC00003F6 : 357C                		add	r7,r5			; Y + height
(2)  754/FFFFFFFFC00003F8 : 2242                		mov	r4,@r2
(2)  755/FFFFFFFFC00003FA : 1251                		mov	r5,@(4,r2)
(2)  756/FFFFFFFFC00003FC : 4810                		dt	r8
(2)  757/FFFFFFFFC00003FE : 8FF7                		bf/s	.setpnts
(2)  758/FFFFFFFFC0000400 : 7208                		add	#8,r2
(2)  759/FFFFFFFFC0000402 :                     
(2)  760/FFFFFFFFC0000402 :                     	; Copy texture source points
(2)  761/FFFFFFFFC0000402 :                     	; to Cache
(2)  762/FFFFFFFFC0000402 : E804                		mov	#4,r8
(2)  763/FFFFFFFFC0000404 :                     .src_pnts:
(2)  764/FFFFFFFFC0000404 : 6415                		mov.w	@r1+,r4
(2)  765/FFFFFFFFC0000406 : 6515                		mov.w	@r1+,r5
(2)  766/FFFFFFFFC0000408 : 2342                		mov	r4,@r3
(2)  767/FFFFFFFFC000040A : 1351                		mov	r5,@(4,r3)
(2)  768/FFFFFFFFC000040C : 4810                		dt	r8
(2)  769/FFFFFFFFC000040E : 8FF9                		bf/s	.src_pnts
(2)  770/FFFFFFFFC0000410 : 7308                		add	#8,r3
(2)  771/FFFFFFFFC0000412 :                     
(2)  772/FFFFFFFFC0000412 :                     	; Here we search for the lowest Y point
(2)  773/FFFFFFFFC0000412 :                     	; and highest Y
(2)  774/FFFFFFFFC0000412 :                     	; r10 - Top Y
(2)  775/FFFFFFFFC0000412 :                     	; r11 - Bottom Y
(2)  776/FFFFFFFFC0000412 :                     .start_math:
(2)  777/FFFFFFFFC0000412 : E903                		mov	#3,r9
(2)  778/FFFFFFFFC0000414 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  779/FFFFFFFFC0000416 : 8B00                		bf	.ytringl
(2)  780/FFFFFFFFC0000418 : 7901                		add	#1,r9
(2)  781/FFFFFFFFC000041A :                     .ytringl:
(2)  782/FFFFFFFFC000041A : DA22                		mov	#$7FFFFFFF,r10
(2)  783/FFFFFFFFC000041C : EBFF                		mov	#$FFFFFFFF,r11
(2)  784/FFFFFFFFC000041E : 67C3                		mov 	r12,r7
(2)  785/FFFFFFFFC0000420 : 68C3                		mov	r12,r8
(2)  786/FFFFFFFFC0000422 :                     .find_top:
(2)  787/FFFFFFFFC0000422 : 5071                		mov	@(4,r7),r0
(2)  788/FFFFFFFFC0000424 : 30B7                		cmp/gt	r11,r0
(2)  789/FFFFFFFFC0000426 : 8B00                		bf	.is_low
(2)  790/FFFFFFFFC0000428 : 6B03                		mov 	r0,r11
(2)  791/FFFFFFFFC000042A :                     .is_low:
(2)  792/FFFFFFFFC000042A : 5081                		mov	@(4,r8),r0
(2)  793/FFFFFFFFC000042C : 30A7                		cmp/gt	r10,r0
(2)  794/FFFFFFFFC000042E : 8901                		bt	.is_high
(2)  795/FFFFFFFFC0000430 : 6A03                		mov 	r0,r10
(2)  796/FFFFFFFFC0000432 : 6183                		mov	r8,r1
(2)  797/FFFFFFFFC0000434 :                     .is_high:
(2)  798/FFFFFFFFC0000434 : 7708                		add 	#8,r7
(2)  799/FFFFFFFFC0000436 : 4910                		dt	r9
(2)  800/FFFFFFFFC0000438 : 8FF3                		bf/s	.find_top
(2)  801/FFFFFFFFC000043A : 7808                		add	#8,r8
(2)  802/FFFFFFFFC000043C : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2)  803/FFFFFFFFC000043E : 8927                		bt	.exit
(2)  804/FFFFFFFFC0000440 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2)  805/FFFFFFFFC0000442 : 8B25                		bf	.exit
(2)  806/FFFFFFFFC0000444 : 9035                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2)  807/FFFFFFFFC0000446 : 3A03                		cmp/ge	r0,r10
(2)  808/FFFFFFFFC0000448 : 8922                		bt	.exit
(2)  809/FFFFFFFFC000044A :                     
(2)  810/FFFFFFFFC000044A :                     	; r2 - Left DDA READ pointer
(2)  811/FFFFFFFFC000044A :                     	; r3 - Right DDA READ pointer
(2)  812/FFFFFFFFC000044A :                     	; r4 - Left X
(2)  813/FFFFFFFFC000044A :                     	; r5 - Left DX
(2)  814/FFFFFFFFC000044A :                     	; r6 - Right X
(2)  815/FFFFFFFFC000044A :                     	; r7 - Right DX
(2)  816/FFFFFFFFC000044A :                     	; r8 - Left width
(2)  817/FFFFFFFFC000044A :                     	; r9 - Right width
(2)  818/FFFFFFFFC000044A :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  819/FFFFFFFFC000044A :                     	; r11 - Bottom Y
(2)  820/FFFFFFFFC000044A :                     	; r12 - First DST point
(2)  821/FFFFFFFFC000044A :                     	; r13 - Last DST point
(2)  822/FFFFFFFFC000044A : 6213                		mov	r1,r2				; r2 - X left to process
(2)  823/FFFFFFFFC000044C : 6313                		mov	r1,r3				; r3 - X right to process
(2)  824/FFFFFFFFC000044E : B031                		bsr	set_left
(2)  825/FFFFFFFFC0000450 : 0009                		nop
(2)  826/FFFFFFFFC0000452 : B073                		bsr	set_right
(2)  827/FFFFFFFFC0000454 : 0009                		nop
(2)  828/FFFFFFFFC0000456 :                     .next_pz:
(2)  829/FFFFFFFFC0000456 : 902C                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2)  830/FFFFFFFFC0000458 : 3A07                		cmp/gt	r0,r10
(2)  831/FFFFFFFFC000045A : 8919                		bt	.exit
(2)  832/FFFFFFFFC000045C : 3AB3                		cmp/ge	r11,r10				; Y top => Y bottom?
(2)  833/FFFFFFFFC000045E : 8917                		bt	.exit
(2)  834/FFFFFFFFC0000460 : C601                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2)  835/FFFFFFFFC0000462 : 6103                		mov	r0,r1
(2)  836/FFFFFFFFC0000464 : D010                		mov	#RAM_Mars_VdpDrwList_e,r0	; pointer reached end of the list?
(2)  837/FFFFFFFFC0000466 : 3103                		cmp/ge	r0,r1
(2)  838/FFFFFFFFC0000468 : 8B02                		bf	.dontreset
(2)  839/FFFFFFFFC000046A : D010                		mov	#RAM_Mars_VdpDrwList,r0		; Return WRITE pointer to the top of the list
(2)  840/FFFFFFFFC000046C : 6103                		mov	r0,r1
(2)  841/FFFFFFFFC000046E : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  842/FFFFFFFFC0000470 :                     .dontreset:
(2)  843/FFFFFFFFC0000470 : E001                		mov	#1,r0
(2)  844/FFFFFFFFC0000472 : C10E                		mov.w	r0,@(marsGbl_DrwPause,gbr)	; Tell watchdog we are mid-write
(2)  845/FFFFFFFFC0000474 : B0B3                		bsr	put_piece
(2)  846/FFFFFFFFC0000476 : 0009                		nop
(2)  847/FFFFFFFFC0000478 : E000                		mov	#0,r0
(2)  848/FFFFFFFFC000047A : C10E                		mov.w	r0,@(marsGbl_DrwPause,gbr)	; Unlock.
(2)  849/FFFFFFFFC000047C :                     
(2)  850/FFFFFFFFC000047C :                     	; X direction update
(2)  851/FFFFFFFFC000047C : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2)  852/FFFFFFFFC000047E : 8B03                		bf	.lefth2
(2)  853/FFFFFFFFC0000480 : B05C                		bsr	set_right
(2)  854/FFFFFFFFC0000482 : 0009                		nop
(2)  855/FFFFFFFFC0000484 : AFE7                		bra	.next_pz
(2)  856/FFFFFFFFC0000486 : 0009                		nop
(2)  857/FFFFFFFFC0000488 :                     .lefth2:
(2)  858/FFFFFFFFC0000488 : B014                		bsr	set_left
(2)  859/FFFFFFFFC000048A : 0009                		nop
(2)  860/FFFFFFFFC000048C : AFE3                		bra	.next_pz
(2)  861/FFFFFFFFC000048E : 0009                		nop
(2)  862/FFFFFFFFC0000490 :                     .exit:
(2)  863/FFFFFFFFC0000490 : 4F26                		lds	@r15+,pr
(2)  864/FFFFFFFFC0000492 : 000B                		rts
(2)  865/FFFFFFFFC0000494 : 0009                		nop
(2)  866/FFFFFFFFC0000496 :                     		align 4
(2)  867/FFFFFFFFC0000498 : C000 0700 C000 06F0 		ltorg
                    C000 0710 7FFF FFFF 
                    0603 0D78 0602 10D0 
                    00A0 00E0           
(2)  868/FFFFFFFFC00004B4 :                     
(2)  869/FFFFFFFFC00004B4 :                     ; --------------------------------
(2)  870/FFFFFFFFC00004B4 :                     
(2)  871/FFFFFFFFC00004B4 :                     set_left:
(2)  872/FFFFFFFFC00004B4 : 6823                		mov	r2,r8			; Get a copy of Xleft pointer
(2)  873/FFFFFFFFC00004B6 : 7820                		add	#$20,r8			; To read Texture SRC points
(2)  874/FFFFFFFFC00004B8 : 6482                		mov	@r8,r4
(2)  875/FFFFFFFFC00004BA : 5581                		mov	@(4,r8),r5
(2)  876/FFFFFFFFC00004BC : D841                		mov	#Cach_DDA_Src_L,r8
(2)  877/FFFFFFFFC00004BE : 6043                		mov	r4,r0
(2)  878/FFFFFFFFC00004C0 : 4028                		shll16	r0
(2)  879/FFFFFFFFC00004C2 : 2802                		mov	r0,@r8
(2)  880/FFFFFFFFC00004C4 : 6053                		mov	r5,r0
(2)  881/FFFFFFFFC00004C6 : 4028                		shll16	r0
(2)  882/FFFFFFFFC00004C8 : 1802                		mov	r0,@(8,r8)
(2)  883/FFFFFFFFC00004CA : 6122                		mov	@r2,r1
(2)  884/FFFFFFFFC00004CC : 5821                		mov	@(4,r2),r8
(2)  885/FFFFFFFFC00004CE : 7208                		add	#8,r2
(2)  886/FFFFFFFFC00004D0 : 32D7                		cmp/gt	r13,r2
(2)  887/FFFFFFFFC00004D2 : 8B00                		bf	.lft_ok
(2)  888/FFFFFFFFC00004D4 : 62C3                		mov 	r12,r2
(2)  889/FFFFFFFFC00004D6 :                     .lft_ok:
(2)  890/FFFFFFFFC00004D6 : 5021                		mov	@(4,r2),r0
(2)  891/FFFFFFFFC00004D8 : 3088                		sub	r8,r0
(2)  892/FFFFFFFFC00004DA : 8800                		cmp/eq	#0,r0
(2)  893/FFFFFFFFC00004DC : 89EA                		bt	set_left
(2)  894/FFFFFFFFC00004DE : 4011                		cmp/pz	r0
(2)  895/FFFFFFFFC00004E0 : 8B29                		bf	.lft_skip
(2)  896/FFFFFFFFC00004E2 :                     
(2)  897/FFFFFFFFC00004E2 : 400A                		lds	r0,mach
(2)  898/FFFFFFFFC00004E4 : 6823                		mov	r2,r8
(2)  899/FFFFFFFFC00004E6 : 7820                		add	#$20,r8
(2)  900/FFFFFFFFC00004E8 : 6082                		mov 	@r8,r0
(2)  901/FFFFFFFFC00004EA : 3048                		sub 	r4,r0
(2)  902/FFFFFFFFC00004EC : 5481                		mov 	@(4,r8),r4
(2)  903/FFFFFFFFC00004EE : 3458                		sub 	r5,r4
(2)  904/FFFFFFFFC00004F0 : 6503                		mov	r0,r5
(2)  905/FFFFFFFFC00004F2 : 4418                		shll8	r4
(2)  906/FFFFFFFFC00004F4 : 4518                		shll8	r5
(2)  907/FFFFFFFFC00004F6 : 080A                		sts	mach,r8
(2)  908/FFFFFFFFC00004F8 : E001                		mov	#1,r0				; Tell WD we are using
(2)  909/FFFFFFFFC00004FA : C111                		mov.w	r0,@(marsGbl_DivStop_M,gbr)	; HW Division
(2)  910/FFFFFFFFC00004FC : 906E                		mov	#_JR,r0
(2)  911/FFFFFFFFC00004FE : 2082                		mov	r8,@r0
(2)  912/FFFFFFFFC0000500 : 1051                		mov	r5,@(4,r0)
(2)  913/FFFFFFFFC0000502 : 0009                		nop
(2)  914/FFFFFFFFC0000504 : 5501                		mov	@(4,r0),r5
(2)  915/FFFFFFFFC0000506 : 9069                		mov	#_JR,r0
(2)  916/FFFFFFFFC0000508 : 2082                		mov	r8,@r0
(2)  917/FFFFFFFFC000050A : 1041                		mov	r4,@(4,r0)
(2)  918/FFFFFFFFC000050C : 0009                		nop
(2)  919/FFFFFFFFC000050E : 5401                		mov	@(4,r0),r4
(2)  920/FFFFFFFFC0000510 : 4418                		shll8	r4
(2)  921/FFFFFFFFC0000512 : 4518                		shll8	r5
(2)  922/FFFFFFFFC0000514 : D02C                		mov	#Cach_DDA_Src_L+$C,r0
(2)  923/FFFFFFFFC0000516 : 2042                		mov	r4,@r0
(2)  924/FFFFFFFFC0000518 : D02C                		mov	#Cach_DDA_Src_L+4,r0
(2)  925/FFFFFFFFC000051A : 2052                		mov	r5,@r0
(2)  926/FFFFFFFFC000051C : 6522                		mov	@r2,r5
(2)  927/FFFFFFFFC000051E : 3518                		sub 	r1,r5
(2)  928/FFFFFFFFC0000520 : 6413                		mov 	r1,r4
(2)  929/FFFFFFFFC0000522 : 4518                		shll8	r5
(2)  930/FFFFFFFFC0000524 : 4428                		shll16	r4
(2)  931/FFFFFFFFC0000526 : 9059                		mov	#_JR,r0
(2)  932/FFFFFFFFC0000528 : 2082                		mov	r8,@r0
(2)  933/FFFFFFFFC000052A : 1051                		mov	r5,@(4,r0)
(2)  934/FFFFFFFFC000052C : 0009                		nop
(2)  935/FFFFFFFFC000052E : 5501                		mov	@(4,r0),r5
(2)  936/FFFFFFFFC0000530 : E000                		mov	#0,r0				; Unlock HW division
(2)  937/FFFFFFFFC0000532 : C111                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2)  938/FFFFFFFFC0000534 : 4518                		shll8	r5
(2)  939/FFFFFFFFC0000536 :                     .lft_skip:
(2)  940/FFFFFFFFC0000536 : 000B                		rts
(2)  941/FFFFFFFFC0000538 : 0009                		nop
(2)  942/FFFFFFFFC000053A :                     		align 4
(2)  943/FFFFFFFFC000053C :                     
(2)  944/FFFFFFFFC000053C :                     ; --------------------------------
(2)  945/FFFFFFFFC000053C :                     
(2)  946/FFFFFFFFC000053C :                     set_right:
(2)  947/FFFFFFFFC000053C : 6933                		mov	r3,r9
(2)  948/FFFFFFFFC000053E : 7920                		add	#$20,r9
(2)  949/FFFFFFFFC0000540 : 6692                		mov	@r9,r6
(2)  950/FFFFFFFFC0000542 : 5791                		mov	@(4,r9),r7
(2)  951/FFFFFFFFC0000544 : D922                		mov	#Cach_DDA_Src_R,r9
(2)  952/FFFFFFFFC0000546 : 6063                		mov	r6,r0
(2)  953/FFFFFFFFC0000548 : 4028                		shll16	r0
(2)  954/FFFFFFFFC000054A : 2902                		mov	r0,@r9
(2)  955/FFFFFFFFC000054C : 6073                		mov	r7,r0
(2)  956/FFFFFFFFC000054E : 4028                		shll16	r0
(2)  957/FFFFFFFFC0000550 : 1902                		mov	r0,@(8,r9)
(2)  958/FFFFFFFFC0000552 :                     
(2)  959/FFFFFFFFC0000552 : 6132                		mov	@r3,r1
(2)  960/FFFFFFFFC0000554 : 5931                		mov	@(4,r3),r9
(2)  961/FFFFFFFFC0000556 : 73F8                		add	#-8,r3
(2)  962/FFFFFFFFC0000558 : 33C3                		cmp/ge	r12,r3
(2)  963/FFFFFFFFC000055A : 8900                		bt	.rgt_ok
(2)  964/FFFFFFFFC000055C : 63D3                		mov 	r13,r3
(2)  965/FFFFFFFFC000055E :                     .rgt_ok:
(2)  966/FFFFFFFFC000055E : 5031                		mov	@(4,r3),r0
(2)  967/FFFFFFFFC0000560 : 3098                		sub	r9,r0
(2)  968/FFFFFFFFC0000562 : 8800                		cmp/eq	#0,r0
(2)  969/FFFFFFFFC0000564 : 89EA                		bt	set_right
(2)  970/FFFFFFFFC0000566 : 4011                		cmp/pz	r0
(2)  971/FFFFFFFFC0000568 : 8B29                		bf	.rgt_skip
(2)  972/FFFFFFFFC000056A : 400A                		lds	r0,mach
(2)  973/FFFFFFFFC000056C : 6933                		mov	r3,r9
(2)  974/FFFFFFFFC000056E : 7920                		add	#$20,r9
(2)  975/FFFFFFFFC0000570 : 6092                		mov 	@r9,r0
(2)  976/FFFFFFFFC0000572 : 3068                		sub 	r6,r0
(2)  977/FFFFFFFFC0000574 : 5691                		mov 	@(4,r9),r6
(2)  978/FFFFFFFFC0000576 : 3678                		sub 	r7,r6
(2)  979/FFFFFFFFC0000578 : 6703                		mov	r0,r7
(2)  980/FFFFFFFFC000057A : 4618                		shll8	r6
(2)  981/FFFFFFFFC000057C : 4718                		shll8	r7
(2)  982/FFFFFFFFC000057E : 090A                		sts	mach,r9
(2)  983/FFFFFFFFC0000580 : E001                		mov	#1,r0				; Tell WD we are using
(2)  984/FFFFFFFFC0000582 : C111                		mov.w	r0,@(marsGbl_DivStop_M,gbr)	; HW Division
(2)  985/FFFFFFFFC0000584 : 902A                		mov	#_JR,r0
(2)  986/FFFFFFFFC0000586 : 2092                		mov	r9,@r0
(2)  987/FFFFFFFFC0000588 : 1071                		mov	r7,@(4,r0)
(2)  988/FFFFFFFFC000058A : 0009                		nop
(2)  989/FFFFFFFFC000058C : 5701                		mov	@(4,r0),r7
(2)  990/FFFFFFFFC000058E : 9025                		mov	#_JR,r0
(2)  991/FFFFFFFFC0000590 : 2092                		mov	r9,@r0
(2)  992/FFFFFFFFC0000592 : 1061                		mov	r6,@(4,r0)
(2)  993/FFFFFFFFC0000594 : 0009                		nop
(2)  994/FFFFFFFFC0000596 : 5601                		mov	@(4,r0),r6
(2)  995/FFFFFFFFC0000598 : 4618                		shll8	r6
(2)  996/FFFFFFFFC000059A : 4718                		shll8	r7
(2)  997/FFFFFFFFC000059C : D00D                		mov	#Cach_DDA_Src_R+4,r0
(2)  998/FFFFFFFFC000059E : 2072                		mov	r7,@r0
(2)  999/FFFFFFFFC00005A0 : D00D                		mov	#Cach_DDA_Src_R+$C,r0
(2) 1000/FFFFFFFFC00005A2 : 2062                		mov	r6,@r0
(2) 1001/FFFFFFFFC00005A4 : 6732                		mov	@r3,r7
(2) 1002/FFFFFFFFC00005A6 : 3718                		sub 	r1,r7
(2) 1003/FFFFFFFFC00005A8 : 6613                		mov 	r1,r6
(2) 1004/FFFFFFFFC00005AA : 4628                		shll16	r6
(2) 1005/FFFFFFFFC00005AC : 4718                		shll8	r7
(2) 1006/FFFFFFFFC00005AE : 9015                		mov	#_JR,r0
(2) 1007/FFFFFFFFC00005B0 : 2092                		mov	r9,@r0
(2) 1008/FFFFFFFFC00005B2 : 1071                		mov	r7,@(4,r0)
(2) 1009/FFFFFFFFC00005B4 : 0009                		nop
(2) 1010/FFFFFFFFC00005B6 : 5701                		mov	@(4,r0),r7
(2) 1011/FFFFFFFFC00005B8 : E000                		mov	#0,r0				; Unlock HW division
(2) 1012/FFFFFFFFC00005BA : C111                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2) 1013/FFFFFFFFC00005BC : 4718                		shll8	r7
(2) 1014/FFFFFFFFC00005BE :                     .rgt_skip:
(2) 1015/FFFFFFFFC00005BE : 000B                		rts
(2) 1016/FFFFFFFFC00005C0 : 0009                		nop
(2) 1017/FFFFFFFFC00005C2 :                     		align 4
(2) 1018/FFFFFFFFC00005C4 : C000 0730 C000 073C 		ltorg
                    C000 0734 C000 0740 
                    C000 0744 C000 074C 
                    FF00                
(2) 1019/FFFFFFFFC00005DE :                     
(2) 1020/FFFFFFFFC00005DE :                     ; --------------------------------
(2) 1021/FFFFFFFFC00005DE :                     ; Mark piece
(2) 1022/FFFFFFFFC00005DE :                     ; --------------------------------
(2) 1023/FFFFFFFFC00005DE :                     
(2) 1024/FFFFFFFFC00005DE :                     put_piece:
(2) 1025/FFFFFFFFC00005DE : 5821                		mov	@(4,r2),r8
(2) 1026/FFFFFFFFC00005E0 : 5931                		mov	@(4,r3),r9
(2) 1027/FFFFFFFFC00005E2 : 38A8                		sub	r10,r8
(2) 1028/FFFFFFFFC00005E4 : 39A8                		sub	r10,r9
(2) 1029/FFFFFFFFC00005E6 : 6083                		mov	r8,r0
(2) 1030/FFFFFFFFC00005E8 : 3987                		cmp/gt	r8,r9
(2) 1031/FFFFFFFFC00005EA : 8900                		bt	.lefth
(2) 1032/FFFFFFFFC00005EC : 6093                		mov	r9,r0
(2) 1033/FFFFFFFFC00005EE :                     .lefth:
(2) 1034/FFFFFFFFC00005EE : 2F26                		mov	r2,@-r15
(2) 1035/FFFFFFFFC00005F0 : 2F36                		mov	r3,@-r15
(2) 1036/FFFFFFFFC00005F2 : 2F56                		mov	r5,@-r15
(2) 1037/FFFFFFFFC00005F4 : 2F76                		mov	r7,@-r15
(2) 1038/FFFFFFFFC00005F6 : 2F86                		mov	r8,@-r15
(2) 1039/FFFFFFFFC00005F8 : 2F96                		mov	r9,@-r15
(2) 1040/FFFFFFFFC00005FA : 1141                		mov 	r4,@(plypz_xl,r1)
(2) 1041/FFFFFFFFC00005FC : 1152                		mov 	r5,@(plypz_xl_dx,r1)
(2) 1042/FFFFFFFFC00005FE : 1163                		mov 	r6,@(plypz_xr,r1)
(2) 1043/FFFFFFFFC0000600 : 1174                		mov 	r7,@(plypz_xr_dx,r1)
(2) 1044/FFFFFFFFC0000602 : 350D                		dmuls	r0,r5
(2) 1045/FFFFFFFFC0000604 : 021A                		sts	macl,r2
(2) 1046/FFFFFFFFC0000606 : 370D                		dmuls	r0,r7
(2) 1047/FFFFFFFFC0000608 : 031A                		sts	macl,r3
(2) 1048/FFFFFFFFC000060A : 342C                		add 	r2,r4
(2) 1049/FFFFFFFFC000060C : 363C                		add	r3,r6
(2) 1050/FFFFFFFFC000060E : 62A3                		mov	r10,r2
(2) 1051/FFFFFFFFC0000610 : 3A0C                		add	r0,r10
(2) 1052/FFFFFFFFC0000612 : 63A3                		mov	r10,r3
(2) 1053/FFFFFFFFC0000614 : 4228                		shll16	r2
(2) 1054/FFFFFFFFC0000616 : 232B                		or	r2,r3
(2) 1055/FFFFFFFFC0000618 : 1130                		mov	r3,@(plypz_ypos,r1)
(2) 1056/FFFFFFFFC000061A : 2F36                		mov	r3,@-r15
(2) 1057/FFFFFFFFC000061C : D220                		mov	#Cach_DDA_Src_L,r2
(2) 1058/FFFFFFFFC000061E : 6522                		mov	@r2,r5
(2) 1059/FFFFFFFFC0000620 : 1155                		mov	r5,@(plypz_src_xl,r1)
(2) 1060/FFFFFFFFC0000622 : 5721                		mov	@(4,r2),r7
(2) 1061/FFFFFFFFC0000624 : 1176                		mov	r7,@(plypz_src_xl_dx,r1)
(2) 1062/FFFFFFFFC0000626 : 5822                		mov	@(8,r2),r8
(2) 1063/FFFFFFFFC0000628 : 1187                		mov	r8,@(plypz_src_yl,r1)
(2) 1064/FFFFFFFFC000062A : 5923                		mov	@($C,r2),r9
(2) 1065/FFFFFFFFC000062C : 1198                		mov	r9,@(plypz_src_yl_dx,r1)
(2) 1066/FFFFFFFFC000062E : 370D                		dmuls	r0,r7
(2) 1067/FFFFFFFFC0000630 : 021A                		sts	macl,r2
(2) 1068/FFFFFFFFC0000632 : 390D                		dmuls	r0,r9
(2) 1069/FFFFFFFFC0000634 : 031A                		sts	macl,r3
(2) 1070/FFFFFFFFC0000636 : 352C                		add 	r2,r5
(2) 1071/FFFFFFFFC0000638 : 383C                		add	r3,r8
(2) 1072/FFFFFFFFC000063A : D21A                		mov	#Cach_DDA_Src_L,r2
(2) 1073/FFFFFFFFC000063C : 2252                		mov	r5,@r2
(2) 1074/FFFFFFFFC000063E : 1282                		mov	r8,@(8,r2)
(2) 1075/FFFFFFFFC0000640 : D219                		mov	#Cach_DDA_Src_R,r2
(2) 1076/FFFFFFFFC0000642 : 6522                		mov	@r2,r5
(2) 1077/FFFFFFFFC0000644 : 1159                		mov	r5,@(plypz_src_xr,r1)
(2) 1078/FFFFFFFFC0000646 : 5721                		mov	@(4,r2),r7
(2) 1079/FFFFFFFFC0000648 : 117A                		mov	r7,@(plypz_src_xr_dx,r1)
(2) 1080/FFFFFFFFC000064A : 5822                		mov	@(8,r2),r8
(2) 1081/FFFFFFFFC000064C : 118B                		mov	r8,@(plypz_src_yr,r1)
(2) 1082/FFFFFFFFC000064E : 5923                		mov	@($C,r2),r9
(2) 1083/FFFFFFFFC0000650 : 119C                		mov	r9,@(plypz_src_yr_dx,r1)
(2) 1084/FFFFFFFFC0000652 : 370D                		dmuls	r0,r7
(2) 1085/FFFFFFFFC0000654 : 021A                		sts	macl,r2
(2) 1086/FFFFFFFFC0000656 : 390D                		dmuls	r0,r9
(2) 1087/FFFFFFFFC0000658 : 031A                		sts	macl,r3
(2) 1088/FFFFFFFFC000065A : 352C                		add 	r2,r5
(2) 1089/FFFFFFFFC000065C : 383C                		add	r3,r8
(2) 1090/FFFFFFFFC000065E : D213                		mov	#Cach_DDA_Src_R,r2
(2) 1091/FFFFFFFFC0000660 : 2252                		mov	r5,@r2
(2) 1092/FFFFFFFFC0000662 : 1282                		mov	r8,@(8,r2)
(2) 1093/FFFFFFFFC0000664 : 63F6                		mov	@r15+,r3
(2) 1094/FFFFFFFFC0000666 : 4315                		cmp/pl	r3			; TOP check, 2 steps
(2) 1095/FFFFFFFFC0000668 : 8902                		bt	.top_neg
(2) 1096/FFFFFFFFC000066A : 4328                		shll16	r3
(2) 1097/FFFFFFFFC000066C : 4315                		cmp/pl	r3
(2) 1098/FFFFFFFFC000066E : 8B0E                		bf	.bad_piece
(2) 1099/FFFFFFFFC0000670 :                     .top_neg:
(2) 1100/FFFFFFFFC0000670 : 50E1                		mov	@(polygn_mtrl,r14),r0
(2) 1101/FFFFFFFFC0000672 : 110D                		mov 	r0,@(plypz_mtrl,r1)
(2) 1102/FFFFFFFFC0000674 : 50E0                		mov	@(polygn_type,r14),r0
(2) 1103/FFFFFFFFC0000676 : 110E                		mov 	r0,@(plypz_type,r1)
(2) 1104/FFFFFFFFC0000678 : 713C                		add	#sizeof_plypz,r1
(2) 1105/FFFFFFFFC000067A : 6013                		mov	r1,r0
(2) 1106/FFFFFFFFC000067C : D80C                		mov	#RAM_Mars_VdpDrwList_e,r8
(2) 1107/FFFFFFFFC000067E : 3083                		cmp/ge	r8,r0
(2) 1108/FFFFFFFFC0000680 : 8B01                		bf	.dontreset_pz
(2) 1109/FFFFFFFFC0000682 : D00C                		mov	#RAM_Mars_VdpDrwList,r0
(2) 1110/FFFFFFFFC0000684 : 6103                		mov	r0,r1
(2) 1111/FFFFFFFFC0000686 :                     .dontreset_pz:
(2) 1112/FFFFFFFFC0000686 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2) 1113/FFFFFFFFC0000688 : C50C                		mov.w	@(marsGbl_PzListCntr,gbr),r0
(2) 1114/FFFFFFFFC000068A : 7001                		add	#1,r0
(2) 1115/FFFFFFFFC000068C : C10C                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2) 1116/FFFFFFFFC000068E :                     .bad_piece:
(2) 1117/FFFFFFFFC000068E : 69F6                		mov	@r15+,r9
(2) 1118/FFFFFFFFC0000690 : 68F6                		mov	@r15+,r8
(2) 1119/FFFFFFFFC0000692 : 67F6                		mov	@r15+,r7
(2) 1120/FFFFFFFFC0000694 : 65F6                		mov	@r15+,r5
(2) 1121/FFFFFFFFC0000696 : 63F6                		mov	@r15+,r3
(2) 1122/FFFFFFFFC0000698 : 62F6                		mov	@r15+,r2
(2) 1123/FFFFFFFFC000069A : 000B                		rts
(2) 1124/FFFFFFFFC000069C : 0009                		nop
(2) 1125/FFFFFFFFC000069E :                     		align 4
(2) 1126/FFFFFFFFC00006A0 : C000 0730 C000 0730 		ltorg
                    C000 0740 C000 0740 
                    0603 0D78 0602 10D0 
(2) 1127/FFFFFFFFC00006B8 :                     
(2) 1128/FFFFFFFFC00006B8 :                     ; ------------------------------------------------
(2) 1129/FFFFFFFFC00006B8 :                     
(2) 1130/FFFFFFFFC00006B8 :                     		align 4
(2) 1131/FFFFFFFFC00006B8 :                     Cach_LnDrw_L	ds.l 14			;
(2) 1132/FFFFFFFFC00006F0 :                     Cach_LnDrw_S	ds.l 0			; <-- Reads backwards
(2) 1133/FFFFFFFFC00006F0 :                     Cach_DDA_Top	ds.l 2*2		; First 2 points
(2) 1134/FFFFFFFFC0000700 :                     Cach_DDA_Last	ds.l 2*2		; Triangle or Quad (+8)
(2) 1135/FFFFFFFFC0000710 :                     Cach_DDA_Src	ds.l 4*2
(2) 1136/FFFFFFFFC0000730 :                     Cach_DDA_Src_L	ds.l 4			; X/DX/Y/DX result for textures
(2) 1137/FFFFFFFFC0000740 :                     Cach_DDA_Src_R	ds.l 4
(2) 1138/FFFFFFFFC0000750 :                     Cach_ClrLines	ds.l 1			; Current lines to clear
(2) 1139/FFFFFFFFC0000754 :                     
(2) 1140/FFFFFFFFC0000754 :                     ; ------------------------------------------------
(2) 1141/ 6001B98 :                     .end:		phase CACHE_MASTER+.end&$1FFF
(2) 1142/ 6001B98 :                     CACHE_MASTER_E:
(2) 1143/ 6001B98 :                     		align 4
(2) 1147/ 6001B98 :                     
(2) 1148/ 6001B98 :                     ; ====================================================================
(2) 1149/ 6001B98 :                     ; ----------------------------------------------------------------
(2) 1150/ 6001B98 :                     ; CACHE code for Slave CPU
(2) 1151/ 6001B98 :                     ;
(2) 1152/ 6001B98 :                     ; LIMIT: $800 bytes
(2) 1153/ 6001B98 :                     ; ----------------------------------------------------------------
(2) 1154/ 6001B98 :                     
(2) 1155/ 6001B98 :                     		align 4
(2) 1156/ 6001B98 :                     CACHE_SLAVE:
(2) 1157/FFFFFFFFC0000000 :                     		phase $C0000000
(2) 1158/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2) 1159/FFFFFFFFC0000000 :                     
(2) 1160/FFFFFFFFC0000000 :                     	; code goes here...
(2) 1161/FFFFFFFFC0000000 :                     
(2) 1162/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2) 1163/FFFFFFFFC0000000 :                     		align 4
(2) 1164/FFFFFFFFC0000000 :                     Cach_CurrPlygn	ds.b sizeof_polygn	; Current polygon in modelread
(2) 1165/FFFFFFFFC0000038 : 0000 0000           Cach_TestTimer	dc.l 0
(2) 1166/FFFFFFFFC000003C :                     
(2) 1167/FFFFFFFFC000003C :                     ; ------------------------------------------------
(2) 1168/ 6001BD4 :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2) 1169/ 6001BD4 :                     CACHE_SLAVE_E:
(2) 1170/ 6001BD4 :                     		align 4
(2) 1174/ 6001BD4 :                     
(1) 1680/ 6001BD4 :                     		
(1) 1681/ 6001BD4 :                     ; ====================================================================
(1) 1682/ 6001BD4 :                     ; ----------------------------------------------------------------
(1) 1683/ 6001BD4 :                     ; Data
(1) 1684/ 6001BD4 :                     ; ----------------------------------------------------------------
(1) 1685/ 6001BD4 :                     
(1) 1686/ 6001BD4 :                     		align 4
(1) 1687/ 6001BD4 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1688/ 60043D4 :                     		align 4
(1) 1689/ 60043D4 :                     		include "data/mars_sdram.asm"
(2)    1/ 60043D4 :                     ; ====================================================================
(2)    2/ 60043D4 :                     ; ----------------------------------------------------------------
(2)    3/ 60043D4 :                     ; SH2 SDRAM user data
(2)    4/ 60043D4 :                     ; 
(2)    5/ 60043D4 :                     ; This data is stored on SDRAM, it's always available to use
(2)    6/ 60043D4 :                     ; and can be re-writeable
(2)    7/ 60043D4 :                     ; Put small sections of data like palettes or small models
(2)    8/ 60043D4 :                     ; ----------------------------------------------------------------
(2)    9/ 60043D4 :                     
(2)   10/ 60043D4 :                     ; --------------------------------------------------------
(2)   11/ 60043D4 :                     ; Palettes
(2)   12/ 60043D4 :                     ; --------------------------------------------------------
(2)   13/ 60043D4 :                     
(2)   14/ 60043D4 :                     Palette_Intro:	binclude "data/mars/objects/mtrl/intro_pal.bin"
(2)   15/ 60043F4 :                     		align 4
(2)   16/ 60043F4 :                     Palette_Map:	binclude "data/mars/maps/mtrl/marscity_pal.bin"
(2)   17/ 60045F4 :                     		align 4
(2)   18/ 60045F4 :                     Palette_projname:
(2)   19/ 60045F4 :                     		binclude "data/mars/objects/mtrl/projname_pal.bin"
(2)   20/ 6004610 :                     		align 4
(2)   21/ 6004610 :                     
(2)   22/ 6004610 :                     ; --------------------------------------------------------
(2)   23/ 6004610 :                     ; Objects
(2)   24/ 6004610 :                     ; --------------------------------------------------------
(2)   25/ 6004610 :                     
(2)   26/ 6004610 :                     		include "data/mars/objects/mdl/intro_1/head.asm"
(3)    1/ 6004610 :                     MarsObj_intro_1:
(3)    2/ 6004610 : 00B8 00C4           		dc.w 184,196
(3)    3/ 6004614 : 0600 4624 0600 4F54 		dc.l .vert,.face,.vrtx,.mtrl
                    0600 5524 0600 5834 
(3)    4/ 6004624 :                     .vert:		binclude "data/mars/objects/mdl/intro_1/vert.bin"
(3)    5/ 6004F54 :                     .face:		binclude "data/mars/objects/mdl/intro_1/face.bin"
(3)    6/ 6005524 :                     .vrtx:		binclude "data/mars/objects/mdl/intro_1/vrtx.bin"
(3)    7/ 6005834 :                     .mtrl:		include "data/mars/objects/mdl/intro_1/mtrl.asm"
(4)    1/ 6005834 :                     
(3)    8/ 6005834 :                     		align 4
(2)   27/ 6005834 :                     		align 4
(2)   28/ 6005834 :                     		include "data/mars/objects/mdl/intro_2/head.asm"
(3)    1/ 6005834 :                     MarsObj_intro_2:
(3)    2/ 6005834 : 00C7 00D7           		dc.w 199,215
(3)    3/ 6005838 : 0600 5848 0600 625C 		dc.l .vert,.face,.vrtx,.mtrl
                    0600 68AC 0600 6C0C 
(3)    4/ 6005848 :                     .vert:		binclude "data/mars/objects/mdl/intro_2/vert.bin"
(3)    5/ 600625C :                     .face:		binclude "data/mars/objects/mdl/intro_2/face.bin"
(3)    6/ 60068AC :                     .vrtx:		binclude "data/mars/objects/mdl/intro_2/vrtx.bin"
(3)    7/ 6006C0C :                     .mtrl:		include "data/mars/objects/mdl/intro_2/mtrl.asm"
(4)    1/ 6006C0C :                     
(3)    8/ 6006C0C :                     		align 4
(2)   29/ 6006C0C :                     		align 4
(2)   30/ 6006C0C :                     
(2)   31/ 6006C0C :                     ; ====================================================================
(2)   32/ 6006C0C :                     ; ----------------------------------------------------------------
(2)   33/ 6006C0C :                     ; PWM Instrument pointers stored on 32X's SDRAM area
(2)   34/ 6006C0C :                     ; the sample data is stored on the 32X's ROM view area
(2)   35/ 6006C0C :                     ; (data/mars_rom.asm)
(2)   36/ 6006C0C :                     ; ----------------------------------------------------------------
(2)   37/ 6006C0C :                     
(2)   38/ 6006C0C :                     ; Example:		
(2)   39/ 6006C0C :                     ; PwmIns_SPHEAVY1:
(2)   40/ 6006C0C :                     ; 		dc.l PwmInsWav_SPHEAVY1		; Start
(2)   41/ 6006C0C :                     ; 		dc.l PwmInsWav_SPHEAVY1_e	; End
(2)   42/ 6006C0C :                     ; 		dc.l -1				; Sample loop point (-1: don't loop)
(2)   43/ 6006C0C :                     ; 		dc.l %011			; Flags:
(2)   44/ 6006C0C :                     ; 						; %S0000000 S-stereo sample
(2)   45/ 6006C0C :                     ; 						; 
(2)   46/ 6006C0C :                     
(2)   47/ 6006C0C :                     ; 		align 4
(2)   48/ 6006C0C :                     ; PwmIns_SPHEAVY1:
(2)   49/ 6006C0C :                     ; 		dc.l PwmInsWav_SPHEAVY1
(2)   50/ 6006C0C :                     ; 		dc.l PwmInsWav_SPHEAVY1_e
(2)   51/ 6006C0C :                     ; 		dc.l -1
(2)   52/ 6006C0C :                     ; 		dc.l 0
(2)   53/ 6006C0C :                     ; PwmIns_MCLSTRNG:
(2)   54/ 6006C0C :                     ; 		dc.l PwmInsWav_MCLSTRNG
(2)   55/ 6006C0C :                     ; 		dc.l PwmInsWav_MCLSTRNG_e
(2)   56/ 6006C0C :                     ; 		dc.l -1
(2)   57/ 6006C0C :                     ; 		dc.l 0
(2)   58/ 6006C0C :                     ; PwmIns_WHODSNARE:
(2)   59/ 6006C0C :                     ; 		dc.l PwmInsWav_WHODSNARE
(2)   60/ 6006C0C :                     ; 		dc.l PwmInsWav_WHODSNARE_e
(2)   61/ 6006C0C :                     ; 		dc.l -1
(2)   62/ 6006C0C :                     ; 		dc.l 0
(2)   63/ 6006C0C :                     ; PwmIns_TECHNOBASSD:
(2)   64/ 6006C0C :                     ; 		dc.l PwmInsWav_TECHNOBASSD
(2)   65/ 6006C0C :                     ; 		dc.l PwmInsWav_TECHNOBASSD_e
(2)   66/ 6006C0C :                     ; 		dc.l -1
(2)   67/ 6006C0C :                     ; 		dc.l 0
(2)   68/ 6006C0C :                     ; PwmIns_String:
(2)   69/ 6006C0C :                     ; 		dc.l PwmInsWav_String
(2)   70/ 6006C0C :                     ; 		dc.l PwmInsWav_String_e
(2)   71/ 6006C0C :                     ; 		dc.l 0
(2)   72/ 6006C0C :                     ; 		dc.l 0
(2)   73/ 6006C0C :                     ; PwmIns_Piano:
(2)   74/ 6006C0C :                     ; 		dc.l PwmInsWav_Piano
(2)   75/ 6006C0C :                     ; 		dc.l PwmInsWav_Piano_e
(2)   76/ 6006C0C :                     ; 		dc.l -1
(2)   77/ 6006C0C :                     ; 		dc.l 0
(2)   78/ 6006C0C :                     
(1) 1690/ 6006C0C :                     
(1) 1691/ 6006C0C :                     ; ====================================================================
(1) 1692/ 6006C0C :                     ; ----------------------------------------------------------------
(1) 1693/ 6006C0C :                     ; MARS SH2 RAM
(1) 1694/ 6006C0C :                     ; ----------------------------------------------------------------
(1) 1695/ 6006C0C :                     
(1) 1696/ 6006C0C :                     		align $10
(1) 1697/ 6006C10 :                     SH2_RAM:
(1) 1698/ 6006C10 : (MACRO)             		struct SH2_RAM
(1) 1698/ 6006C10 : =$6006C10           GLBL_LASTPC     set *
(1) 1698/  112BD0 :                                     dephase
(1) 1698/  112BD0 : =$112BD0            GLBL_LASTORG    set *
(1) 1698/ 6006C10 :                                     phase SH2_RAM
(1) 1705/ 6006C10 :                     MarsRam_System	ds.b (sizeof_marssys-MarsRam_System)
(1) 1706/ 6006C68 :                     MarsRam_Video	ds.b (sizeof_marsvid-MarsRam_Video)
(1) 1707/ 6034EDC :                     MarsRam_Sound	ds.b (sizeof_marssnd-MarsRam_Sound)
(1) 1708/ 6034EF8 :                     sizeof_marsram	ds.l 0
(1) 1710/ 6034EF8 :                     
(1) 1711/ 6034EF8 :                     .here:
(1) 1715/ 6034EF8 : (MACRO)             		finish
(1) 1715/ 6006C10 :                                     !org GLBL_LASTORG
(1) 1715/ 6006C10 :                                     phase GLBL_LASTPC
(1) 1716/ 6006C10 :                     
(1) 1717/ 6006C10 :                     ; ====================================================================
(1) 1718/ 6006C10 :                     ; ----------------------------------------------------------------
(1) 1719/ 6006C10 :                     ; MARS Sound RAM
(1) 1720/ 6006C10 :                     ; ----------------------------------------------------------------
(1) 1721/ 6006C10 :                     
(1) 1722/ 6006C10 : (MACRO)             			struct MarsRam_Sound
(1) 1722/ 6006C10 : =$6006C10           GLBL_LASTPC     set *
(1) 1722/  112BD0 :                                     dephase
(1) 1722/  112BD0 : =$112BD0            GLBL_LASTORG    set *
(1) 1722/ 6034EDC :                                     phase MARSRAM_SOUND
(1) 1723/ 6034EDC :                     ; MarsSnd_PwmChnls	ds.b sizeof_sndchn*MAX_PWMCHNL
(1) 1724/ 6034EDC :                     ; MarsSnd_PwmTrkData	ds.b $80*2
(1) 1725/ 6034EDC :                     MarsSnd_PwmPlyData	ds.l 7
(1) 1726/ 6034EF8 :                     sizeof_marssnd		ds.l 0
(1) 1727/ 6034EF8 : (MACRO)             			finish
(1) 1727/ 6034EDC :                                     !org GLBL_LASTORG
(1) 1727/ 6006C10 :                                     phase GLBL_LASTPC
(1) 1728/ 6006C10 :                     
(1) 1729/ 6006C10 :                     ; ====================================================================
(1) 1730/ 6006C10 :                     ; ----------------------------------------------------------------
(1) 1731/ 6006C10 :                     ; MARS Video RAM
(1) 1732/ 6006C10 :                     ; ----------------------------------------------------------------
(1) 1733/ 6006C10 :                     
(1) 1734/ 6006C10 : (MACRO)             			struct MarsRam_Video
(1) 1734/ 6006C10 : =$6006C10           GLBL_LASTPC     set *
(1) 1734/  112BD0 :                                     dephase
(1) 1734/  112BD0 : =$112BD0            GLBL_LASTORG    set *
(1) 1734/ 6006C68 :                                     phase MARSRAM_VIDEO
(1) 1735/ 6006C68 :                     RAM_Mars_ObjCamera	ds.b sizeof_camera		; Camera buffer
(1) 1736/ 6006C90 :                     RAM_Mars_ObjLayout	ds.b sizeof_layout		; Layout buffer
(1) 1737/ 6006CB0 :                     RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS	; Objects list
(1) 1738/ 6007130 :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_FACES	; Polygon list 0
(1) 1739/ 6014100 :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_FACES	; Polygon list 1
(1) 1740/ 60210D0 :                     RAM_Mars_VdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ	; Pieces list
(1) 1741/ 6030D78 :                     RAM_Mars_VdpDrwList_e	ds.l 0				; (end-of-list label)
(1) 1742/ 6030D78 :                     RAM_Mars_Plgn_ZList_0	ds.l MAX_FACES*2		; Z value / foward faces
(1) 1743/ 6032B28 :                     RAM_Mars_Plgn_ZList_1	ds.l MAX_FACES*2		; Z value / foward faces
(1) 1744/ 60348D8 :                     RAM_Mars_MdTasksFifo_M	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Request list for Master: SVDP and PWM interaction exclusive
(1) 1745/ 6034AD8 :                     RAM_Mars_MdTasksFifo_S	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Request list for Slave: Controlling objects and camera
(1) 1746/ 6034CD8 :                     RAM_Mars_Palette	ds.w 256			; Indexed palette
(1) 1747/ 6034ED8 :                     RAM_Mars_PlgnNum_0	ds.w 1				; Number of polygons to read, both buffers
(1) 1748/ 6034EDA :                     RAM_Mars_PlgnNum_1	ds.w 1				;
(1) 1749/ 6034EDC :                     sizeof_marsvid		ds.l 0
(1) 1750/ 6034EDC : (MACRO)             			finish
(1) 1750/ 6006C68 :                                     !org GLBL_LASTORG
(1) 1750/ 6006C10 :                                     phase GLBL_LASTPC
(1) 1751/ 6006C10 :                     
(1) 1752/ 6006C10 :                     ; ====================================================================
(1) 1753/ 6006C10 :                     ; ----------------------------------------------------------------
(1) 1754/ 6006C10 :                     ; MARS System RAM
(1) 1755/ 6006C10 :                     ; ----------------------------------------------------------------
(1) 1756/ 6006C10 :                     
(1) 1757/ 6006C10 : (MACRO)             			struct MarsRam_System
(1) 1757/ 6006C10 : =$6006C10           GLBL_LASTPC     set *
(1) 1757/  112BD0 :                                     dephase
(1) 1757/  112BD0 : =$112BD0            GLBL_LASTORG    set *
(1) 1757/ 6006C10 :                                     phase MARSRAM_SYSTEM
(1) 1758/ 6006C10 :                     RAM_Mars_Global		ds.w sizeof_MarsGbl		; keep it as a word
(1) 1759/ 6006C68 :                     sizeof_marssys		ds.l 0
(1) 1760/ 6006C68 : (MACRO)             			finish
(1) 1760/ 6006C10 :                                     !org GLBL_LASTORG
(1) 1760/ 6006C10 :                                     phase GLBL_LASTPC
(1) 1761/ 6006C10 :                     
     113/ 6006C10 :                     		cpu 68000
     114/ 6006C10 :                     		padding off
     115/  112BD0 :                     		dephase
     116/  112BD0 :                     MARS_RAMDATA_E:
     117/  112BD0 :                     		align 4
     118/  112BD0 :                     
     119/  112BD0 :                     ; --------------------------------------------------------
     120/  112BD0 :                     ; MARS data for SH2's ROM view
     121/  112BD0 :                     ; This section will be gone if RV=1
     122/  112BD0 :                     ; --------------------------------------------------------
     123/  112BD0 :                     
     124/ 2112BD0 :                     		phase CS1+*
     125/ 2112BD0 :                     		align 4
     126/ 2112BD0 :                     		include "data/mars_rom.asm"
(1)    1/ 2112BD0 :                     ; ====================================================================
(1)    2/ 2112BD0 :                     ; ----------------------------------------------------------------
(1)    3/ 2112BD0 :                     ; SH2 ROM user data
(1)    4/ 2112BD0 :                     ; 
(1)    5/ 2112BD0 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 2112BD0 :                     ; Note that this section will be gone if the Genesis side is
(1)    7/ 2112BD0 :                     ; perfoming a DMA ROM-to-VDP Transfer (setting RV=1)
(1)    8/ 2112BD0 :                     ; 
(1)    9/ 2112BD0 :                     ; Note: Reading data from here is slow on hardware
(1)   10/ 2112BD0 :                     ; ----------------------------------------------------------------
(1)   11/ 2112BD0 :                     
(1)   12/ 2112BD0 :                     ; --------------------------------------------------------
(1)   13/ 2112BD0 :                     ; Textures
(1)   14/ 2112BD0 :                     ; --------------------------------------------------------
(1)   15/ 2112BD0 :                     
(1)   16/ 2112BD0 :                     		align 4
(1)   17/ 2112BD0 :                     		include "data/mars/maps/map_marscity.asm"
(2)    1/ 2112BD0 :                     ; --------------------------------------------------------
(2)    2/ 2112BD0 :                     ; Map layouts
(2)    3/ 2112BD0 :                     ; --------------------------------------------------------
(2)    4/ 2112BD0 :                     
(2)    5/ 2112BD0 :                     ; Layout block is 10m*10m
(2)    6/ 2112BD0 :                     ; center center: X=E,Y=10
(2)    7/ 2112BD0 :                     
(2)    8/ 2112BD0 :                     TEST_LAYOUT:
(2)    9/ 2112BD0 :                     		include "data/mars/maps/map2_data.asm"
(3)    1/ 2112BD0 : 0211 33D4           		dc.l .blocks
(3)    2/ 2112BD4 :                     		binclude "data/mars/maps/map2_lay.bin"
(3)    3/ 21133D4 :                     		align 4
(3)    4/ 21133D4 :                     .blocks:
(3)    5/ 21133D4 : 0211 3418           		dc.l MarsMapPz_01_floor
(3)    6/ 21133D8 : 0211 3668           		dc.l MarsMapPz_02_main
(3)    7/ 21133DC : 0211 5418           		dc.l MarsMapPz_03_prekfc
(3)    8/ 21133E0 : 0211 9D38           		dc.l MarsMapPz_04_inters
(3)    9/ 21133E4 : 0211 9F98           		dc.l MarsMapPz_05_bridge
(3)   10/ 21133E8 : 0212 0FA0           		dc.l MarsMapPz_06_septm
(3)   11/ 21133EC : 0212 1358           		dc.l MarsMapPz_07_multi
(3)   12/ 21133F0 : 0212 1750           		dc.l MarsMapPz_08_kfcn
(3)   13/ 21133F4 : 0212 2BB0           		dc.l MarsMapPz_09_kfcs
(3)   14/ 21133F8 : 0212 2EE0           		dc.l MarsMapPz_0A_carls_n
(3)   15/ 21133FC : 0212 4310           		dc.l MarsMapPz_0B_carls_s
(3)   16/ 2113400 : 0212 4658           		dc.l MarsMapPz_0C_carls_p
(3)   17/ 2113404 : 0212 48A8           		dc.l MarsMapPz_0D_midcarls
(3)   18/ 2113408 : 0212 5170           		dc.l MarsMapPz_0E_hut_l
(3)   19/ 211340C : 0212 5554           		dc.l MarsMapPz_0F_hut_r
(3)   20/ 2113410 : 0212 62F0           		dc.l MarsMapPz_10_sep_l
(3)   21/ 2113414 : 0212 65BC           		dc.l MarsMapPz_11_sep_r
(3)   22/ 2113418 :                     		include "data/mars/maps/pz/01_floor.asm"
(4)    1/ 2113418 :                     MarsMapPz_01_floor:
(4)    2/ 2113418 : 0010 0019           		dc.w 16,25
(4)    3/ 211341C : 0211 342C 0211 3558 		dc.l .vert,.face,.vrtx,.mtrl
                    0211 35F8 0211 3668 
(4)    4/ 211342C :                     .vert:		binclude "data/mars/maps/pz/01_floor_vert.bin"
(4)    5/ 2113558 :                     .face:		binclude "data/mars/maps/pz/01_floor_face.bin"
(4)    6/ 21135F8 :                     .vrtx:		binclude "data/mars/maps/pz/01_floor_vrtx.bin"
(4)    7/ 2113668 :                     .mtrl:		include "data/mars/maps/pz/01_floor_mtrl.asm"
(5)    1/ 2113668 :                     
(4)    8/ 2113668 :                     		align 4
(4)    9/ 2113668 :                     
(3)   23/ 2113668 :                     		include "data/mars/maps/pz/02_main.asm"
(4)    1/ 2113668 :                     MarsMapPz_02_main:
(4)    2/ 2113668 : 00CE 0144           		dc.w 206,324
(4)    3/ 211366C : 0211 367C 0211 4480 		dc.l .vert,.face,.vrtx,.mtrl
                    0211 4DF0 0211 5410 
(4)    4/ 211367C :                     .vert:		binclude "data/mars/maps/pz/02_main_vert.bin"
(4)    5/ 2114480 :                     .face:		binclude "data/mars/maps/pz/02_main_face.bin"
(4)    6/ 2114DF0 :                     .vrtx:		binclude "data/mars/maps/pz/02_main_vrtx.bin"
(4)    7/ 2115410 :                     .mtrl:		include "data/mars/maps/pz/02_main_mtrl.asm"
(5)    1/ 2115410 : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 2115414 : 0200                	 dc.w 512
(5)    3/ 2115416 : 0000                	 dc.w 0
(5)    4/ 2115418 :                     
(4)    8/ 2115418 :                     		align 4
(4)    9/ 2115418 :                     
(3)   24/ 2115418 :                     		include "data/mars/maps/pz/03_prekfc.asm"
(4)    1/ 2115418 :                     MarsMapPz_03_prekfc:
(4)    2/ 2115418 : 01EF 044F           		dc.w 495,1103
(4)    3/ 211541C : 0211 542C 0211 78B0 		dc.l .vert,.face,.vrtx,.mtrl
                    0211 8D60 0211 9D30 
(4)    4/ 211542C :                     .vert:		binclude "data/mars/maps/pz/03_prekfc_vert.bin"
(4)    5/ 21178B0 :                     .face:		binclude "data/mars/maps/pz/03_prekfc_face.bin"
(4)    6/ 2118D60 :                     .vrtx:		binclude "data/mars/maps/pz/03_prekfc_vrtx.bin"
(4)    7/ 2119D30 :                     .mtrl:		include "data/mars/maps/pz/03_prekfc_mtrl.asm"
(5)    1/ 2119D30 : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 2119D34 : 0200                	 dc.w 512
(5)    3/ 2119D36 : 0000                	 dc.w 0
(5)    4/ 2119D38 :                     
(4)    8/ 2119D38 :                     		align 4
(4)    9/ 2119D38 :                     
(3)   25/ 2119D38 :                     		include "data/mars/maps/pz/04_inters.asm"
(4)    1/ 2119D38 :                     MarsMapPz_04_inters:
(4)    2/ 2119D38 : 0010 0468           		dc.w 16,1128
(4)    3/ 2119D3C : 0211 9D4C 0211 9E78 		dc.l .vert,.face,.vrtx,.mtrl
                    0211 9F18 0211 9F98 
(4)    4/ 2119D4C :                     .vert:		binclude "data/mars/maps/pz/04_inters_vert.bin"
(4)    5/ 2119E78 :                     .face:		binclude "data/mars/maps/pz/04_inters_face.bin"
(4)    6/ 2119F18 :                     .vrtx:		binclude "data/mars/maps/pz/04_inters_vrtx.bin"
(4)    7/ 2119F98 :                     .mtrl:		include "data/mars/maps/pz/04_inters_mtrl.asm"
(5)    1/ 2119F98 :                     
(4)    8/ 2119F98 :                     		align 4
(4)    9/ 2119F98 :                     
(3)   26/ 2119F98 :                     		include "data/mars/maps/pz/05_bridge.asm"
(4)    1/ 2119F98 :                     MarsMapPz_05_bridge:
(4)    2/ 2119F98 : 02D5 0929           		dc.w 725,2345
(4)    3/ 2119F9C : 0211 9FAC 0211 D8B8 		dc.l .vert,.face,.vrtx,.mtrl
                    0211 F7A8 0212 0F98 
(4)    4/ 2119FAC :                     .vert:		binclude "data/mars/maps/pz/05_bridge_vert.bin"
(4)    5/ 211D8B8 :                     .face:		binclude "data/mars/maps/pz/05_bridge_face.bin"
(4)    6/ 211F7A8 :                     .vrtx:		binclude "data/mars/maps/pz/05_bridge_vrtx.bin"
(4)    7/ 2120F98 :                     .mtrl:		include "data/mars/maps/pz/05_bridge_mtrl.asm"
(5)    1/ 2120F98 : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 2120F9C : 0200                	 dc.w 512
(5)    3/ 2120F9E : 0000                	 dc.w 0
(5)    4/ 2120FA0 :                     
(4)    8/ 2120FA0 :                     		align 4
(4)    9/ 2120FA0 :                     
(3)   27/ 2120FA0 :                     		include "data/mars/maps/pz/06_septm.asm"
(4)    1/ 2120FA0 :                     MarsMapPz_06_septm:
(4)    2/ 2120FA0 : 001C 0950           		dc.w 28,2384
(4)    3/ 2120FA4 : 0212 0FB4 0212 1188 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 12A8 0212 1358 
(4)    4/ 2120FB4 :                     .vert:		binclude "data/mars/maps/pz/06_septm_vert.bin"
(4)    5/ 2121188 :                     .face:		binclude "data/mars/maps/pz/06_septm_face.bin"
(4)    6/ 21212A8 :                     .vrtx:		binclude "data/mars/maps/pz/06_septm_vrtx.bin"
(4)    7/ 2121358 :                     .mtrl:		include "data/mars/maps/pz/06_septm_mtrl.asm"
(5)    1/ 2121358 :                     
(4)    8/ 2121358 :                     		align 4
(4)    9/ 2121358 :                     
(3)   28/ 2121358 :                     		include "data/mars/maps/pz/07_multi.asm"
(4)    1/ 2121358 :                     MarsMapPz_07_multi:
(4)    2/ 2121358 : 001E 097B           		dc.w 30,2427
(4)    3/ 212135C : 0212 136C 0212 1570 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 16A0 0212 1750 
(4)    4/ 212136C :                     .vert:		binclude "data/mars/maps/pz/07_multi_vert.bin"
(4)    5/ 2121570 :                     .face:		binclude "data/mars/maps/pz/07_multi_face.bin"
(4)    6/ 21216A0 :                     .vrtx:		binclude "data/mars/maps/pz/07_multi_vrtx.bin"
(4)    7/ 2121750 :                     .mtrl:		include "data/mars/maps/pz/07_multi_mtrl.asm"
(5)    1/ 2121750 :                     
(4)    8/ 2121750 :                     		align 4
(4)    9/ 2121750 :                     
(3)   29/ 2121750 :                     		include "data/mars/maps/pz/08_kfcn.asm"
(4)    1/ 2121750 :                     MarsMapPz_08_kfcn:
(4)    2/ 2121750 : 00AD 0A26           		dc.w 173,2598
(4)    3/ 2121754 : 0212 1764 0212 1F68 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 2708 0212 2BA8 
(4)    4/ 2121764 :                     .vert:		binclude "data/mars/maps/pz/08_kfcn_vert.bin"
(4)    5/ 2121F68 :                     .face:		binclude "data/mars/maps/pz/08_kfcn_face.bin"
(4)    6/ 2122708 :                     .vrtx:		binclude "data/mars/maps/pz/08_kfcn_vrtx.bin"
(4)    7/ 2122BA8 :                     .mtrl:		include "data/mars/maps/pz/08_kfcn_mtrl.asm"
(5)    1/ 2122BA8 : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 2122BAC : 0200                	 dc.w 512
(5)    3/ 2122BAE : 0000                	 dc.w 0
(5)    4/ 2122BB0 :                     
(4)    8/ 2122BB0 :                     		align 4
(4)    9/ 2122BB0 :                     
(3)   30/ 2122BB0 :                     		include "data/mars/maps/pz/09_kfcs.asm"
(4)    1/ 2122BB0 :                     MarsMapPz_09_kfcs:
(4)    2/ 2122BB0 : 0018 0A47           		dc.w 24,2631
(4)    3/ 2122BB4 : 0212 2BC4 0212 2D50 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 2E40 0212 2EE0 
(4)    4/ 2122BC4 :                     .vert:		binclude "data/mars/maps/pz/09_kfcs_vert.bin"
(4)    5/ 2122D50 :                     .face:		binclude "data/mars/maps/pz/09_kfcs_face.bin"
(4)    6/ 2122E40 :                     .vrtx:		binclude "data/mars/maps/pz/09_kfcs_vrtx.bin"
(4)    7/ 2122EE0 :                     .mtrl:		include "data/mars/maps/pz/09_kfcs_mtrl.asm"
(5)    1/ 2122EE0 :                     
(4)    8/ 2122EE0 :                     		align 4
(4)    9/ 2122EE0 :                     
(3)   31/ 2122EE0 :                     		include "data/mars/maps/pz/0A_carls_n.asm"
(4)    1/ 2122EE0 :                     MarsMapPz_0A_carls_n:
(4)    2/ 2122EE0 : 008F 0B06           		dc.w 143,2822
(4)    3/ 2122EE4 : 0212 2EF4 0212 37E8 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 3E38 0212 4308 
(4)    4/ 2122EF4 :                     .vert:		binclude "data/mars/maps/pz/0A_carls_n_vert.bin"
(4)    5/ 21237E8 :                     .face:		binclude "data/mars/maps/pz/0A_carls_n_face.bin"
(4)    6/ 2123E38 :                     .vrtx:		binclude "data/mars/maps/pz/0A_carls_n_vrtx.bin"
(4)    7/ 2124308 :                     .mtrl:		include "data/mars/maps/pz/0A_carls_n_mtrl.asm"
(5)    1/ 2124308 : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 212430C : 0200                	 dc.w 512
(5)    3/ 212430E : 0000                	 dc.w 0
(5)    4/ 2124310 :                     
(4)    8/ 2124310 :                     		align 4
(4)    9/ 2124310 :                     
(3)   32/ 2124310 :                     		include "data/mars/maps/pz/0B_carls_s.asm"
(4)    1/ 2124310 :                     MarsMapPz_0B_carls_s:
(4)    2/ 2124310 : 0019 0B29           		dc.w 25,2857
(4)    3/ 2124314 : 0212 4324 0212 44C8 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 45B8 0212 4658 
(4)    4/ 2124324 :                     .vert:		binclude "data/mars/maps/pz/0B_carls_s_vert.bin"
(4)    5/ 21244C8 :                     .face:		binclude "data/mars/maps/pz/0B_carls_s_face.bin"
(4)    6/ 21245B8 :                     .vrtx:		binclude "data/mars/maps/pz/0B_carls_s_vrtx.bin"
(4)    7/ 2124658 :                     .mtrl:		include "data/mars/maps/pz/0B_carls_s_mtrl.asm"
(5)    1/ 2124658 :                     
(4)    8/ 2124658 :                     		align 4
(4)    9/ 2124658 :                     
(3)   33/ 2124658 :                     		include "data/mars/maps/pz/0C_carls_p.asm"
(4)    1/ 2124658 :                     MarsMapPz_0C_carls_p:
(4)    2/ 2124658 : 0010 0B42           		dc.w 16,2882
(4)    3/ 212465C : 0212 466C 0212 4798 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 4838 0212 48A8 
(4)    4/ 212466C :                     .vert:		binclude "data/mars/maps/pz/0C_carls_p_vert.bin"
(4)    5/ 2124798 :                     .face:		binclude "data/mars/maps/pz/0C_carls_p_face.bin"
(4)    6/ 2124838 :                     .vrtx:		binclude "data/mars/maps/pz/0C_carls_p_vrtx.bin"
(4)    7/ 21248A8 :                     .mtrl:		include "data/mars/maps/pz/0C_carls_p_mtrl.asm"
(5)    1/ 21248A8 :                     
(4)    8/ 21248A8 :                     		align 4
(4)    9/ 21248A8 :                     
(3)   34/ 21248A8 :                     		include "data/mars/maps/pz/0D_midcarls.asm"
(4)    1/ 21248A8 :                     MarsMapPz_0D_midcarls:
(4)    2/ 21248A8 : 0040 0B8B           		dc.w 64,2955
(4)    3/ 21248AC : 0212 48BC 0212 4C28 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 5018 0212 5168 
(4)    4/ 21248BC :                     .vert:		binclude "data/mars/maps/pz/0D_midcarls_vert.bin"
(4)    5/ 2124C28 :                     .face:		binclude "data/mars/maps/pz/0D_midcarls_face.bin"
(4)    6/ 2125018 :                     .vrtx:		binclude "data/mars/maps/pz/0D_midcarls_vrtx.bin"
(4)    7/ 2125168 :                     .mtrl:		include "data/mars/maps/pz/0D_midcarls_mtrl.asm"
(5)    1/ 2125168 : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 212516C : 0200                	 dc.w 512
(5)    3/ 212516E : 0000                	 dc.w 0
(5)    4/ 2125170 :                     
(4)    8/ 2125170 :                     		align 4
(4)    9/ 2125170 :                     
(3)   35/ 2125170 :                     		include "data/mars/maps/pz/0E_hut_l.asm"
(4)    1/ 2125170 :                     MarsMapPz_0E_hut_l:
(4)    2/ 2125170 : 001D 0BB1           		dc.w 29,2993
(4)    3/ 2125174 : 0212 5184 0212 534C 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 549C 0212 554C 
(4)    4/ 2125184 :                     .vert:		binclude "data/mars/maps/pz/0E_hut_l_vert.bin"
(4)    5/ 212534C :                     .face:		binclude "data/mars/maps/pz/0E_hut_l_face.bin"
(4)    6/ 212549C :                     .vrtx:		binclude "data/mars/maps/pz/0E_hut_l_vrtx.bin"
(4)    7/ 212554C :                     .mtrl:		include "data/mars/maps/pz/0E_hut_l_mtrl.asm"
(5)    1/ 212554C : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 2125550 : 0200                	 dc.w 512
(5)    3/ 2125552 : 0000                	 dc.w 0
(5)    4/ 2125554 :                     
(4)    8/ 2125554 :                     		align 4
(4)    9/ 2125554 :                     
(3)   36/ 2125554 :                     		include "data/mars/maps/pz/0F_hut_r.asm"
(4)    1/ 2125554 :                     MarsMapPz_0F_hut_r:
(4)    2/ 2125554 : 0063 0C21           		dc.w 99,3105
(4)    3/ 2125558 : 0212 5568 0212 5AA8 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 5F98 0212 62E8 
(4)    4/ 2125568 :                     .vert:		binclude "data/mars/maps/pz/0F_hut_r_vert.bin"
(4)    5/ 2125AA8 :                     .face:		binclude "data/mars/maps/pz/0F_hut_r_face.bin"
(4)    6/ 2125F98 :                     .vrtx:		binclude "data/mars/maps/pz/0F_hut_r_vrtx.bin"
(4)    7/ 21262E8 :                     .mtrl:		include "data/mars/maps/pz/0F_hut_r_mtrl.asm"
(5)    1/ 21262E8 : 0212 93E8           	 dc.l Textr_marscity
(5)    2/ 21262EC : 0200                	 dc.w 512
(5)    3/ 21262EE : 0000                	 dc.w 0
(5)    4/ 21262F0 :                     
(4)    8/ 21262F0 :                     		align 4
(4)    9/ 21262F0 :                     
(3)   37/ 21262F0 :                     		include "data/mars/maps/pz/10_sep_l.asm"
(4)    1/ 21262F0 :                     MarsMapPz_10_sep_l:
(4)    2/ 21262F0 : 0014 0C3F           		dc.w 20,3135
(4)    3/ 21262F4 : 0212 6304 0212 646C 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 653C 0212 65BC 
(4)    4/ 2126304 :                     .vert:		binclude "data/mars/maps/pz/10_sep_l_vert.bin"
(4)    5/ 212646C :                     .face:		binclude "data/mars/maps/pz/10_sep_l_face.bin"
(4)    6/ 212653C :                     .vrtx:		binclude "data/mars/maps/pz/10_sep_l_vrtx.bin"
(4)    7/ 21265BC :                     .mtrl:		include "data/mars/maps/pz/10_sep_l_mtrl.asm"
(5)    1/ 21265BC :                     
(4)    8/ 21265BC :                     		align 4
(4)    9/ 21265BC :                     
(3)   38/ 21265BC :                     		include "data/mars/maps/pz/11_sep_r.asm"
(4)    1/ 21265BC :                     MarsMapPz_11_sep_r:
(4)    2/ 21265BC : 0014 0C5D           		dc.w 20,3165
(4)    3/ 21265C0 : 0212 65D0 0212 6738 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 6808 0212 6888 
(4)    4/ 21265D0 :                     .vert:		binclude "data/mars/maps/pz/11_sep_r_vert.bin"
(4)    5/ 2126738 :                     .face:		binclude "data/mars/maps/pz/11_sep_r_face.bin"
(4)    6/ 2126808 :                     .vrtx:		binclude "data/mars/maps/pz/11_sep_r_vrtx.bin"
(4)    7/ 2126888 :                     .mtrl:		include "data/mars/maps/pz/11_sep_r_mtrl.asm"
(5)    1/ 2126888 :                     
(4)    8/ 2126888 :                     		align 4
(4)    9/ 2126888 :                     		align 4
(3)   39/ 2126888 :                     
(2)   10/ 2126888 :                     
(1)   18/ 2126888 :                     		align 4
(1)   19/ 2126888 :                     		include "data/mars/objects/mdl/projname/head.asm"
(2)    1/ 2126888 :                     MarsObj_projname:
(2)    2/ 2126888 : 018F 01BB           		dc.w 399,443
(2)    3/ 212688C : 0212 689C 0212 7D60 		dc.l .vert,.face,.vrtx,.mtrl
                    0212 8CF0 0212 93E0 
(2)    4/ 212689C :                     .vert:		binclude "data/mars/objects/mdl/projname/vert.bin"
(2)    5/ 2127D60 :                     .face:		binclude "data/mars/objects/mdl/projname/face.bin"
(2)    6/ 2128CF0 :                     .vrtx:		binclude "data/mars/objects/mdl/projname/vrtx.bin"
(2)    7/ 21293E0 :                     .mtrl:		include "data/mars/objects/mdl/projname/mtrl.asm"
(3)    1/ 21293E0 : 0216 93E8           	 dc.l Textr_projname
(3)    2/ 21293E4 : 0168                	 dc.w 360
(3)    3/ 21293E6 : 0000                	 dc.w 0
(3)    4/ 21293E8 :                     
(2)    8/ 21293E8 :                     		align 4
(1)   20/ 21293E8 :                     		align 4
(1)   21/ 21293E8 :                     
(1)   22/ 21293E8 :                     Textr_marscity:
(1)   23/ 21293E8 :                     		binclude "data/mars/maps/mtrl/marscity_art.bin"
(1)   24/ 21693E8 :                     		align 4
(1)   25/ 21693E8 :                     Textr_projname:
(1)   26/ 21693E8 :                     		binclude "data/mars/objects/mtrl/projname_art.bin"
(1)   27/ 216CC28 :                     		align 4
(1)   28/ 216CC28 :                     Textr_intro:
(1)   29/ 216CC28 :                     		binclude "data/mars/objects/mtrl/intro_art.bin"
(1)   30/ 2170EF4 :                     		align 4
(1)   31/ 2170EF4 :                     
(1)   32/ 2170EF4 :                     TESTMARS_BG:
(1)   33/ 2170EF4 :                     		binclude "data/mars/test_art.bin"
(1)   34/ 21826F4 :                     		align 4
(1)   35/ 21826F4 :                     
(1)   36/ 21826F4 :                     ; MARSANI_INTRO_1:
(1)   37/ 21826F4 :                     ; 		binclude "data/mars/objects/anim/logo_1_anim.bin"
(1)   38/ 21826F4 :                     ; 		align 4
(1)   39/ 21826F4 :                     
(1)   40/ 21826F4 :                     ; PWM_STEREO:	binclude "data/sound/pwm_st.wav",$2C,$200000
(1)   41/ 21826F4 :                     ; PWM_STEREO_e:
(1)   42/ 21826F4 :                     ; 		align 4
(1)   43/ 21826F4 :                     ; PwmInsWav_SPHEAVY1:
(1)   44/ 21826F4 :                     ; 		binclude "data/sound/instr/smpl/SPHEAVY1.wav",$2C
(1)   45/ 21826F4 :                     ; PwmInsWav_SPHEAVY1_e:
(1)   46/ 21826F4 :                     ; 		align 4
(1)   47/ 21826F4 :                     ; PwmInsWav_MCLSTRNG:
(1)   48/ 21826F4 :                     ; 		binclude "data/sound/instr/smpl/MCLSTRNG.wav",$2C
(1)   49/ 21826F4 :                     ; PwmInsWav_MCLSTRNG_e:
(1)   50/ 21826F4 :                     ; 		align 4
(1)   51/ 21826F4 :                     ; PwmInsWav_WHODSNARE:
(1)   52/ 21826F4 :                     ; 		binclude "data/sound/instr/smpl/ST-79_whodini-snare.wav",$2C
(1)   53/ 21826F4 :                     ; PwmInsWav_WHODSNARE_e:
(1)   54/ 21826F4 :                     ; 		align 4
(1)   55/ 21826F4 :                     ; PwmInsWav_TECHNOBASSD:
(1)   56/ 21826F4 :                     ; 		binclude "data/sound/instr/smpl/ST-72_techno-bassd3.wav",$2C
(1)   57/ 21826F4 :                     ; PwmInsWav_TECHNOBASSD_e:
(1)   58/ 21826F4 :                     ; 		align 4
(1)   59/ 21826F4 :                     ; PwmInsWav_Synth:
(1)   60/ 21826F4 :                     ; 		binclude "data/sound/instr/smpl/amiga_synth.wav",$2C
(1)   61/ 21826F4 :                     ; PwmInsWav_Synth_e:
(1)   62/ 21826F4 :                     ; 		align 4
(1)   63/ 21826F4 :                     PwmInsWav_Piano:
(1)   64/ 21826F4 :                     		binclude "data/sound/instr/smpl/piano_1.wav",$2C
(1)   65/ 21888EA :                     PwmInsWav_Piano_e:
(1)   66/ 21888EA :                     		align 4
(1)   67/ 21888EC :                     PwmInsWav_String:
(1)   68/ 21888EC :                     		binclude "data/sound/instr/smpl/string_1.wav",$2C
(1)   69/ 218D142 :                     PwmInsWav_String_e:
(1)   70/ 218D142 :                     		align 4
(1)   71/ 218D144 :                     
     127/  18D144 :                     		dephase
     128/  18D144 :                     
     129/  18D144 :                     ; ====================================================================
     130/  18D144 :                     ; ---------------------------------------------
     131/  18D144 :                     ; End
     132/  18D144 :                     ; ---------------------------------------------
     133/  18D144 :                     		
     134/  18D144 :                     ROM_END:
     135/  18D144 :                     		align $8000
     136/  190000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 6/29/2021 2:13:02


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ASCII_FONT :                FF0786 C |  ASCII_FONT_E :              FF1786 C |
 ASCII_PAL :                 FF0766 C | *ASCII_PAL_E :               FF0786 C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITHINT :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     3 - |
 BITJOYRIGHT :                    3 - | *BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        2 - |
*BITJOYY :                        1 - | *BITJOYZ :                        0 - |
 BITMAPMD :                       1 - | *BITV30 :                         3 - |
 BITVINT :                        3 - | *BITVINTENBL :                    5 - |
 BLKHEADC :                    1A00 C | *BRANCHEXT :                      0 - |
 CACHE_MASTER :             6001444 C |  CACHE_MASTER_E :           6001B98 C |
 CACHE_SLAVE :              6001B98 C |  CACHE_SLAVE_E :            6001BD4 C |
 CACH_CLRLINES :   FFFFFFFFC0000750 C |
 CACH_CLRLINES.END :                                       FFFFFFFFC0000754 C |
 CACH_CURRPLYGN :  FFFFFFFFC0000000 C |  CACH_DDA_LAST :   FFFFFFFFC0000700 C |
 CACH_DDA_SRC :    FFFFFFFFC0000710 C |  CACH_DDA_SRC_L :  FFFFFFFFC0000730 C |
 CACH_DDA_SRC_R :  FFFFFFFFC0000740 C |  CACH_DDA_TOP :    FFFFFFFFC00006F0 C |
 CACH_LNDRW_L :    FFFFFFFFC00006B8 C |  CACH_LNDRW_S :    FFFFFFFFC00006F0 C |
*CACH_TESTTIMER :  FFFFFFFFC0000038 C |
 CACH_TESTTIMER.END :                                      FFFFFFFFC000003C C |
 CAMERA_CITY :               90BBDC C |  CAMERA_INTNAME :            90A558 C |
 CAMERA_INTRO :              9082A4 C | *CAM_ANIMDATA :                  18 C |
*CAM_ANIMFRAME :                 1C C | *CAM_ANIMSPD :                   24 C |
*CAM_ANIMTIMER :                 20 C |  CAM_X_POS :                      0 C |
 CAM_X_ROT :                      C C |  CAM_Y_POS :                      4 C |
 CAM_Y_ROT :                     10 C |  CAM_Z_POS :                      8 C |
 CAM_Z_ROT :                     14 C | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CHECK_TICK :                   BAF C |
 CHECK_TICK.CTNOTICK :          BD6 C |  CHNL_CHIP :                      0 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_STATUS :                    7 - |  CHNL_TYPE :                      1 - |
 CHNL_VOL :                       4 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  CMDTASKMD_CAMERAPOS :      6001368 C |
 CMDTASKMD_LOADSPAL :       60012CC C |  CMDTASKMD_MAKEMAP :        6001354 C |
 CMDTASKMD_OBJECTCLRALL :   6001344 C |  CMDTASKMD_OBJECTPOS :      6001318 C |
 CMDTASKMD_OBJECTSET :      60012E0 C |  CMDTASKMD_SETBITMAP :      60012BC C |
 CMDTASKMD_SETBITMAP.WAIT_FB :                                      60012BE C |
 CMDTASKMD_UPDMODELS :      600138C C |  COM :                            0 - |
 COMM0 :                         20 - | *COMM10 :                        2A - |
 COMM12 :                        2C - |  COMM14 :                        2E - |
 COMM15 :                        2F - |  COMM2 :                         22 - |
 COMM4 :                         24 - | *COMM6 :                         26 - |
 COMM8 :                         28 - |  COMMZFIFO :                   1D00 C |
 COMMZREAD :                     2B C |  COMMZROMBLK :                   2D C |
 COMMZROMRD :                    2E C |  COMMZWRITE :                    2C C |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFF91DE - |
*CONTROLLER_2 :    FFFFFFFFFFFF91E4 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - |  CURRINSDATA :                   18 C |
 CURRTBLSRCH :                   32 C |  CURRTICKBITS :                  21 C |
 CURRTRKBLKHD :                  14 C |  CURRTRKDATA :                   16 C |
*CYCLE :                         32 - |  DACINS_MAGIC1 :               1268 C |
 DACINS_MAGIC2 :               1272 C |  DACINS_MYTIME :               127C C |
 DAC_FILL :                     E9C C |  DAC_FIRSTFILL :                EAA C |
 DAC_ME :                       E88 C |  DAC_OFF :                      CDB C |
 DAC_ON :                       CC6 C |  DAC_PLAY :                     E54 C |
 DAC_REFILL :                   EAE C |  DAC_REFILL.FDF4DONE :          EFE C |
 DAC_REFILL.FDF7 :              F70 C |  DAC_REFILL.FDF72 :             F29 C |
 DAC_REFILL.FDFRETURN :         F73 C | *DAC_REFILL.KEEPCNTR :          ED7 C |
*DATE :                   6/29/2021 - |  DDACCNTR :                      25 C |
 DDACFIFOMID :                   28 C |  DDACPNTR :                      22 C |
 DEFAULT_BOOT :                4240 C | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - |  DO_MULTIPLY :                  BEC C |
 DO_MULTIPLY.MULBITCLR :        BF4 C |  DO_MULTIPLY.MUL_ADD :          BEF C |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      42 C |
 DRV_LOOP.CMND_0 :               FF C |  DRV_LOOP.CMND_TRKPLAY :        104 C |
 DRV_LOOP.CMND_WAV_PITCH :      1C7 C |  DRV_LOOP.CMND_WAV_SET :        15D C |
 DRV_LOOP.LIST :                 B9 C |  DRV_LOOP.NEITHER :              8A C |
 DRV_LOOP.NEXT_CMD :             8A C |  DRV_LOOP.NOBEATS :              74 C |
 DRV_LOOP.NOTICKS :              62 C |  DRWSLD_NEXTPZ :   FFFFFFFFC0000344 C |
 DRWSLD_NEXTPZ.FINISH_IT :                                 FFFFFFFFC0000360 C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC0000350 C |
 DRWSLD_NXTLINE :  FFFFFFFFC0000298 C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC00002DA C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC00002C4 C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC00002D4 C |
 DRWSLD_NXTLINE.WAIT :                                     FFFFFFFFC00002E8 C |
 DRWSLD_NXTLINE_TEX :                                      FFFFFFFFC0000170 C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                        FFFFFFFFC0000238 C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                            FFFFFFFFC0000218 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                               FFFFFFFFC00001F6 C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                               FFFFFFFFC00001E2 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                             FFFFFFFFC00001B0 C |
 DRWSLD_UPDLINE :  FFFFFFFFC000033A C |
 DRWSLD_UPDLINE_TEX :                                      FFFFFFFFC0000248 C |
 DRWTASK_EXIT :    FFFFFFFFC000038E C |  DRWTASK_RETURN :  FFFFFFFFC0000372 C |
 DRWTEX_GONXTPZ :  FFFFFFFFC0000262 C |
 DRWTEX_GONXTPZ.RESET_RD :                                 FFFFFFFFC000026E C |
 DRWTSK1_NEWPZ :   FFFFFFFFC000010E C |
 DRWTSK1_NEWPZ.INVLD_Y :                                   FFFFFFFFC0000134 C |
 DRWTSK1_NEWPZ.LEN_MAX :                                   FFFFFFFFC000012E C |
 DRWTSK1_VLD_Y :   FFFFFFFFC0000146 C | *DRWTSK_00 :       FFFFFFFFC0000368 C |
 DRWTSK_01 :       FFFFFFFFC00000DC C |  DRWTSK_01.EXIT :  FFFFFFFFC00000EE C |
 DRWTSK_01.HAS_PZ :                                        FFFFFFFFC00000F2 C |
 DRWTSK_02 :       FFFFFFFFC000008C C |  DRWTSK_02.EXIT :  FFFFFFFFC00000D6 C |
 DRWTSK_SOLIDMODE :                                        FFFFFFFFC0000284 C |
 DRWTSK_SOLIDMODE.WAIT :                                   FFFFFFFFC0000292 C |
 DRWTSK_TEXMODE :  FFFFFFFFC000015C C |
 DRWTSK_TEXMODE.TEXVALID :                                 FFFFFFFFC0000168 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1500 C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     5 - | *FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FM3VTBL :                     11DC C |  FM6VTBL :                     11ED C |
 FMFREQ_LIST :                 1068 C | *FMINS_AMBIENT_3 :             141C C |
*FMINS_AMBIENT_DARK :          13DC C | *FMINS_AMBIENT_SPOOK :         13FC C |
 FMINS_BASS_CALM :             133C C | *FMINS_BRASS_GEM :             135C C |
*FMINS_DRUMKICK :              131C C | *FMINS_FM3_CLOSEDHAT :         12F4 C |
*FMINS_FM3_OPENHAT :           12CC C | *FMINS_GUITAR_HEAVY :          12A4 C |
*FMINS_PIANO :                 139C C | *FMINS_PIANO_SMALL :           137C C |
*FMINS_TRUMPET_2 :             13BC C |  FMVTBL :                      1198 C |
 FM_AUTOSET :                   E37 C |  FM_SEND_1 :                    E3E C |
 FM_SEND_2 :                    E49 C |  FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMATRK_DEMO_BLK :          908000 C |  GEMATRK_DEMO_INS :          908271 C |
 GEMATRK_DEMO_PATT :         908005 C |  GEMA_INIT :                    B31 C |
 GET_CMDBYTE :                  B86 C |  GET_CMDBYTE.GETCBYTEL :        B89 C |
 GLBL_LASTORG :              112BD0 - |  GLBL_LASTPC :              6006C10 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :              FF1B52 C | *HINT_DEFAULT.HERE :         FF1B56 C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - |  INSDATAC :                    1C00 C |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
 INTMASK :                        1 - |  INT_M_LIST :               600026C C |
 INT_S_LIST :               60002CC C | *JOYA :                          40 - |
*JOYB :                          10 - | *JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - |  JOYY :                         200 - |
 JOYZ :                         100 - |  LAY_WIDTH :                     40 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :              FF0752 C |
 LITERAL_F_00000000_1 :     6000268 C |  LITERAL_F_00000001_1 :     6000390 C |
 LITERAL_F_00000002_1 :     60003A0 C |  LITERAL_F_00000003_1 :     60004D8 C |
 LITERAL_F_00000004_1 :     60004F4 C |  LITERAL_F_00000005_1 :     600058C C |
 LITERAL_F_00000006_1 :     600063C C |  LITERAL_F_00000007_1 :     6000708 C |
 LITERAL_F_00000008_1 :     600070C C |  LITERAL_F_00000009_1 :     6000760 C |
 LITERAL_F_0000000A_1 :     6000764 C |  LITERAL_F_0000000B_1 :     6000768 C |
 LITERAL_F_0000000C_1 :     60007EC C |  LITERAL_F_0000000D_1 :     60007F0 C |
 LITERAL_F_0000000E_1 :     60007F4 C |  LITERAL_F_0000000F_1 :     6000A98 C |
 LITERAL_F_00000010_1 :     6000A9C C |  LITERAL_F_00000011_1 :     6000AA0 C |
 LITERAL_F_00000012_1 :     6000AA4 C |  LITERAL_F_00000013_1 :     6000AD8 C |
 LITERAL_F_00000014_1 :     6000DD4 C |  LITERAL_F_00000015_1 :     6000DE0 C |
 LITERAL_F_00000016_1 :     6000DE4 C |  LITERAL_F_00000017_1 :     6000F14 C |
 LITERAL_F_00000018_1 :     60010A4 C |  LITERAL_F_00000019_1 :     60010A8 C |
 LITERAL_F_0000001A_1 :     60010B8 C |  LITERAL_F_0000001B_1 :     60010C0 C |
 LITERAL_F_0000001C_1 :     6001100 C |  LITERAL_F_0000001D_1 :     60010D0 C |
 LITERAL_F_0000001E_1 :     60010D4 C |  LITERAL_F_0000001F_1 :     60010DC C |
 LITERAL_F_00000020_1 :     60010E0 C |  LITERAL_F_00000021_1 :     60010E4 C |
 LITERAL_F_00000022_1 :     60010E8 C |  LITERAL_F_00000023_1 :     60010EC C |
 LITERAL_F_00000024_1 :     600125C C |  LITERAL_F_00000025_1 :     6001264 C |
 LITERAL_F_00000026_1 :     60012AE C |  LITERAL_F_00000027_1 :     6001274 C |
 LITERAL_F_00000028_1 :     6001278 C |  LITERAL_F_00000029_1 :     600127C C |
 LITERAL_F_0000002A_1 :     6001280 C |  LITERAL_F_0000002B_1 :     6001284 C |
 LITERAL_F_0000002C_1 :     600128C C |  LITERAL_F_0000002D_1 :     6001294 C |
 LITERAL_F_0000002E_1 :     6001298 C |  LITERAL_F_0000002F_1 :     60013A4 C |
 LITERAL_F_00000030_1 :     60013A8 C |  LITERAL_F_00000031_1 :     60013B4 C |
 LITERAL_F_00000032_1 :     6001434 C |  LITERAL_F_00000033_1 :     6001438 C |
 LITERAL_F_00000034_1 :                                    FFFFFFFFC0000068 C |
 LITERAL_F_00000035_1 :                                    FFFFFFFFC0000138 C |
 LITERAL_F_00000036_1 :                                    FFFFFFFFC000013C C |
 LITERAL_F_00000037_1 :                                    FFFFFFFFC00003A8 C |
 LITERAL_F_00000038_1 :                                    FFFFFFFFC00003AC C |
 LITERAL_F_00000039_1 :                                    FFFFFFFFC00003B4 C |
 LITERAL_F_0000003A_1 :                                    FFFFFFFFC00003B8 C |
 LITERAL_F_0000003B_1 :                                    FFFFFFFFC00003BC C |
 LITERAL_F_0000003C_1 :                                    FFFFFFFFC0000498 C |
 LITERAL_F_0000003D_1 :                                    FFFFFFFFC000049C C |
 LITERAL_F_0000003E_1 :                                    FFFFFFFFC00004A0 C |
 LITERAL_F_0000003F_1 :                                    FFFFFFFFC00004A8 C |
 LITERAL_F_00000040_1 :                                    FFFFFFFFC00004AC C |
 LITERAL_F_00000041_1 :                                    FFFFFFFFC00005C4 C |
 LITERAL_F_00000042_1 :                                    FFFFFFFFC00005C8 C |
 LITERAL_F_00000043_1 :                                    FFFFFFFFC00005CC C |
 LITERAL_F_00000044_1 :                                    FFFFFFFFC00005D0 C |
 LITERAL_F_00000045_1 :                                    FFFFFFFFC00005D4 C |
 LITERAL_F_00000046_1 :                                    FFFFFFFFC00005D8 C |
 LITERAL_F_00000047_1 :                                    FFFFFFFFC00006A0 C |
 LITERAL_F_00000048_1 :                                    FFFFFFFFC00006A4 C |
 LITERAL_F_00000049_1 :                                    FFFFFFFFC00006A8 C |
 LITERAL_F_0000004A_1 :                                    FFFFFFFFC00006AC C |
 LITERAL_F_0000004B_1 :                                    FFFFFFFFC00006B0 C |
 LITERAL_F_0000004C_1 :                                    FFFFFFFFC00006B4 C |
 LITERAL_L_0000E000_1 :     6000DD8 C |
 LITERAL_L_0000FFFF_1 :                                    FFFFFFFFC0000140 C |
 LITERAL_L_000FFFFF_1 :     6000F18 C |  LITERAL_L_00100000_1 :     6000AA8 C |
 LITERAL_L_01400000_1 :     6000F1C C |  LITERAL_L_06000646_1 :     60010C8 C |
 LITERAL_L_060006C8_1 :     60013A0 C |  LITERAL_L_0600071A_1 :     60010D8 C |
 LITERAL_L_0600077C_1 :     6001288 C |  LITERAL_L_060007FE_1 :     60013B0 C |
 LITERAL_L_06000AB8_1 :     600126C C |  LITERAL_L_06000AB8_2 :     60013AC C |
 LITERAL_L_06000ADC_1 :     6001290 C |  LITERAL_L_0603EFF8_1 :     6000638 C |
 LITERAL_L_0603F000_1 :     6001250 C |  LITERAL_L_0603FFF8_1 :     60004F0 C |
 LITERAL_L_06040000_1 :     60010AC C |  LITERAL_L_20004000_1 :     60004E0 C |
 LITERAL_L_20004000_2 :     6000628 C |  LITERAL_L_20004000_3 :     60006FC C |
 LITERAL_L_20004000_4 :     60010BC C |  LITERAL_L_20004000_5 :     6001260 C |
 LITERAL_L_20004016_1 :     60004D0 C |  LITERAL_L_20004016_2 :     6000624 C |
 LITERAL_L_20004018_1 :     60004CC C |  LITERAL_L_20004018_2 :     6000620 C |
 LITERAL_L_2000401A_1 :     6000398 C |  LITERAL_L_2000401A_2 :     6000584 C |
 LITERAL_L_2000401C_1 :     6000394 C |  LITERAL_L_2000401C_2 :     6000580 C |
 LITERAL_L_20004020_1 :     60010B0 C |  LITERAL_L_20004020_2 :     6001254 C |
 LITERAL_L_20004022_1 :     600129C C |  LITERAL_L_20004028_1 :     600039C C |
 LITERAL_L_20004028_2 :     6000588 C |  LITERAL_L_2000402E_1 :     60003A4 C |
 LITERAL_L_2000402E_2 :     60010CC C |  LITERAL_L_2000402E_3 :     60012A0 C |
 LITERAL_L_2000402F_1 :     6000590 C |  LITERAL_L_2000402F_2 :     6001270 C |
 LITERAL_L_2000402F_3 :     60013B8 C |  LITERAL_L_20004100_1 :     60004D4 C |
 LITERAL_L_20004100_2 :     6000700 C |  LITERAL_L_20004100_3 :     600076C C |
 LITERAL_L_20004100_4 :     60010F0 C |  LITERAL_L_20004100_5 :     600139C C |
 LITERAL_L_20004100_6 :                                    FFFFFFFFC0000064 C |
 LITERAL_L_20004100_7 :                                    FFFFFFFFC00003B0 C |
 LITERAL_L_20004200_1 :     60004DC C |  LITERAL_L_24000000_1 :     6000704 C |
 LITERAL_L_24020200_1 :                                    FFFFFFFFC00003A4 C |
 LITERAL_L_36385550_1 :     60004E4 C |  LITERAL_L_36385550_2 :     600062C C |
 LITERAL_L_3FFFFFFF_1 :     6000DD0 C |  LITERAL_L_40000000_1 :     6000AAC C |
 LITERAL_L_4D5F4F4B_1 :     60004EC C |  LITERAL_L_4D5F4F4B_2 :     6000634 C |
 LITERAL_L_534C4156_1 :     60010B4 C |  LITERAL_L_534C4156_2 :     6001258 C |
 LITERAL_L_535F4F4B_1 :     60004E8 C |  LITERAL_L_535F4F4B_2 :     6000630 C |
 LITERAL_L_7FFFFFFF_1 :     6000DDC C |
 LITERAL_L_7FFFFFFF_2 :                                    FFFFFFFFC00004A4 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     60010C4 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     6001268 C |
 LITERAL_L_FFFFFFFFFFE00000_1 :                                     6000AB4 C |
 LITERAL_L_FFFFFFFFFFF00000_1 :                                     60007F8 C |
 LITERAL_L_FFFFFFFFFFF00000_2 :                                     6000AB0 C |
 LITERAL_W_0080_1 :         6000710 C |
 LITERAL_W_00A0_1 :                                        FFFFFFFFC000006E C |
 LITERAL_W_00A0_2 :                                        FFFFFFFFC00004B0 C |
 LITERAL_W_00E0_1 :         6000770 C |
 LITERAL_W_00E0_2 :                                        FFFFFFFFC0000144 C |
 LITERAL_W_00E0_3 :                                        FFFFFFFFC00003C6 C |
 LITERAL_W_00E0_4 :                                        FFFFFFFFC00004B2 C |
 LITERAL_W_00F0_1 :         60003AA C |  LITERAL_W_00F0_2 :         60004FA C |
 LITERAL_W_00F0_3 :         6000596 C |  LITERAL_W_00F0_4 :         6000642 C |
 LITERAL_W_00F0_5 :         6000714 C |  LITERAL_W_00F0_6 :         6000772 C |
 LITERAL_W_00F0_7 :         60010FC C |  LITERAL_W_00F0_8 :         60012AA C |
 LITERAL_W_00FF_1 :         6000716 C |
 LITERAL_W_00FF_2 :                                        FFFFFFFFC00003C4 C |
 LITERAL_W_0100_1 :         6000712 C |  LITERAL_W_0100_2 :         6000774 C |
 LITERAL_W_013E_1 :                                        FFFFFFFFC00003C8 C |
 LITERAL_W_03B6_1 :         60012B6 C |  LITERAL_W_07FF_1 :         60010F4 C |
 LITERAL_W_1FFF_1 :                                        FFFFFFFFC00003C2 C |
 LITERAL_W_44E0_1 :         6000500 C |  LITERAL_W_44E0_2 :         6000644 C |
 LITERAL_W_5A00_1 :         6001442 C |
 LITERAL_W_5A00_2 :                                        FFFFFFFFC00003CE C |
 LITERAL_W_5A10_1 :                                        FFFFFFFFC0000074 C |
 LITERAL_W_5A7F_1 :         60012B2 C |  LITERAL_W_5AFF_1 :         6000778 C |
 LITERAL_W_7FFF_1 :         6000718 C |  LITERAL_W_8000_1 :         60007FC C |
 LITERAL_W_A518_1 :         60004FE C |  LITERAL_W_A518_2 :         6001104 C |
 LITERAL_W_A518_3 :         60012B8 C |  LITERAL_W_A518_4 :         6001440 C |
 LITERAL_W_A518_5 :                                        FFFFFFFFC0000072 C |
 LITERAL_W_A518_6 :                                        FFFFFFFFC00003CC C |
 LITERAL_W_A538_1 :         600077A C |  LITERAL_W_A538_2 :         60012B4 C |
 LITERAL_W_DC00_1 :         6000DE8 C |  LITERAL_W_FE10_1 :         60003A8 C |
 LITERAL_W_FE10_2 :         60004F8 C |  LITERAL_W_FE10_3 :         6000594 C |
 LITERAL_W_FE10_4 :         6000640 C |  LITERAL_W_FE10_5 :         60010F6 C |
 LITERAL_W_FE10_6 :         60012A4 C |  LITERAL_W_FE10_7 :         600143C C |
 LITERAL_W_FE10_8 :                                        FFFFFFFFC000006C C |
 LITERAL_W_FE80_1 :         60004FC C |  LITERAL_W_FE80_2 :         6000776 C |
 LITERAL_W_FE80_3 :         6001102 C |  LITERAL_W_FE80_4 :         60012B0 C |
 LITERAL_W_FE80_5 :         600143E C |
 LITERAL_W_FE80_6 :                                        FFFFFFFFC0000070 C |
 LITERAL_W_FE80_7 :                                        FFFFFFFFC00003CA C |
 LITERAL_W_FE92_1 :         60010FE C |  LITERAL_W_FE92_2 :         60012AC C |
 LITERAL_W_FEE2_1 :         60010F8 C |  LITERAL_W_FEE2_2 :         60012A6 C |
 LITERAL_W_FEE4_1 :         60010FA C |  LITERAL_W_FEE4_2 :         60012A8 C |
 LITERAL_W_FF00_1 :         6000F20 C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC00003C0 C |
 LITERAL_W_FF00_3 :                                        FFFFFFFFC00005DC C |
 LITERAL_W_FF60_1 :         6000DEA C | *MACEXP :                         7 - |
 MAINDRW_TASKS :   FFFFFFFFC0000076 C |
 MAINDRW_TASKS.LIST :                                      FFFFFFFFC0000080 C |
*MARS :                           1 - | *MARSCD :                         0 - |
 MARSGBL_BACKDATA :              10 C |  MARSGBL_CURRFACEPOS :            C C |
 MARSGBL_CURRFB :                24 C |  MARSGBL_CURRZLIST :              8 C |
 MARSGBL_DIVSTOP_M :             22 C |  MARSGBL_DRWPAUSE :              1C C |
 MARSGBL_DRWTASK :               1A C |  MARSGBL_MDLFACESCNTR :          14 C |
 MARSGBL_PALDMAMIDWR :           2A C |  MARSGBL_PLYPZLIST_R :            0 C |
 MARSGBL_PLYPZLIST_W :            4 C |  MARSGBL_POLYBUFFNUM :           16 C |
*MARSGBL_PWMTRKUPD :             28 C |  MARSGBL_PZLISTCNTR :            18 C |
 MARSGBL_VINTFLAG_M :            1E C |  MARSGBL_VINTFLAG_S :            20 C |
 MARSGBL_ZSORTREQ :              26 C |  MARSLAY_DRAW :             6000818 C |
 MARSLAY_DRAW.BLANK_MDL :   6000990 C |  MARSLAY_DRAW.CENTER_VAL :  6000874 C |
 MARSLAY_DRAW.CLROLD :      6000822 C | *MARSLAY_DRAW.DOWN :        6000A20 C |
 MARSLAY_DRAW.DOWN_LEFT :   6000A48 C |  MARSLAY_DRAW.DO_PIECE :    6000978 C |
 MARSLAY_DRAW.FRONT :       60009A8 C |  MARSLAY_DRAW.FRONT_FR :    60009D0 C |
 MARSLAY_DRAW.FRONT_LF :    6000A70 C |  MARSLAY_DRAW.LIST :        6000878 C |
 MARSLAY_DRAW.NXT_ONE :     600097E C |  MARSLAY_DRAW.RIGHT_DW :    60009F8 C |
 MARSLAY_MAKE :             60007FE C |  MARSLAY_READ :             600077C C |
 MARSLAY_READ.NO_LAY :      60007E6 C |  MARSLAY_READ.NO_XR_UPD :   60007DE C |
 MARSLAY_READ.NO_X_UPD :    60007CC C |  MARSLAY_READ.NO_Y_UPD :    60007BA C |
 MARSLAY_READ.NO_Z_UPD :    60007A8 C |  MARSMAPPZ_01_FLOOR :       2113418 C |
 MARSMAPPZ_01_FLOOR.FACE :  2113558 C |  MARSMAPPZ_01_FLOOR.MTRL :  2113668 C |
 MARSMAPPZ_01_FLOOR.VERT :  211342C C |  MARSMAPPZ_01_FLOOR.VRTX :  21135F8 C |
 MARSMAPPZ_02_MAIN :        2113668 C |  MARSMAPPZ_02_MAIN.FACE :   2114480 C |
 MARSMAPPZ_02_MAIN.MTRL :   2115410 C |  MARSMAPPZ_02_MAIN.VERT :   211367C C |
 MARSMAPPZ_02_MAIN.VRTX :   2114DF0 C |  MARSMAPPZ_03_PREKFC :      2115418 C |
 MARSMAPPZ_03_PREKFC.FACE : 21178B0 C |  MARSMAPPZ_03_PREKFC.MTRL : 2119D30 C |
 MARSMAPPZ_03_PREKFC.VERT : 211542C C |  MARSMAPPZ_03_PREKFC.VRTX : 2118D60 C |
 MARSMAPPZ_04_INTERS :      2119D38 C |  MARSMAPPZ_04_INTERS.FACE : 2119E78 C |
 MARSMAPPZ_04_INTERS.MTRL : 2119F98 C |  MARSMAPPZ_04_INTERS.VERT : 2119D4C C |
 MARSMAPPZ_04_INTERS.VRTX : 2119F18 C |  MARSMAPPZ_05_BRIDGE :      2119F98 C |
 MARSMAPPZ_05_BRIDGE.FACE : 211D8B8 C |  MARSMAPPZ_05_BRIDGE.MTRL : 2120F98 C |
 MARSMAPPZ_05_BRIDGE.VERT : 2119FAC C |  MARSMAPPZ_05_BRIDGE.VRTX : 211F7A8 C |
 MARSMAPPZ_06_SEPTM :       2120FA0 C |  MARSMAPPZ_06_SEPTM.FACE :  2121188 C |
 MARSMAPPZ_06_SEPTM.MTRL :  2121358 C |  MARSMAPPZ_06_SEPTM.VERT :  2120FB4 C |
 MARSMAPPZ_06_SEPTM.VRTX :  21212A8 C |  MARSMAPPZ_07_MULTI :       2121358 C |
 MARSMAPPZ_07_MULTI.FACE :  2121570 C |  MARSMAPPZ_07_MULTI.MTRL :  2121750 C |
 MARSMAPPZ_07_MULTI.VERT :  212136C C |  MARSMAPPZ_07_MULTI.VRTX :  21216A0 C |
 MARSMAPPZ_08_KFCN :        2121750 C |  MARSMAPPZ_08_KFCN.FACE :   2121F68 C |
 MARSMAPPZ_08_KFCN.MTRL :   2122BA8 C |  MARSMAPPZ_08_KFCN.VERT :   2121764 C |
 MARSMAPPZ_08_KFCN.VRTX :   2122708 C |  MARSMAPPZ_09_KFCS :        2122BB0 C |
 MARSMAPPZ_09_KFCS.FACE :   2122D50 C |  MARSMAPPZ_09_KFCS.MTRL :   2122EE0 C |
 MARSMAPPZ_09_KFCS.VERT :   2122BC4 C |  MARSMAPPZ_09_KFCS.VRTX :   2122E40 C |
 MARSMAPPZ_0A_CARLS_N :     2122EE0 C |
 MARSMAPPZ_0A_CARLS_N.FACE :                                        21237E8 C |
 MARSMAPPZ_0A_CARLS_N.MTRL :                                        2124308 C |
 MARSMAPPZ_0A_CARLS_N.VERT :                                        2122EF4 C |
 MARSMAPPZ_0A_CARLS_N.VRTX :                                        2123E38 C |
 MARSMAPPZ_0B_CARLS_S :     2124310 C |
 MARSMAPPZ_0B_CARLS_S.FACE :                                        21244C8 C |
 MARSMAPPZ_0B_CARLS_S.MTRL :                                        2124658 C |
 MARSMAPPZ_0B_CARLS_S.VERT :                                        2124324 C |
 MARSMAPPZ_0B_CARLS_S.VRTX :                                        21245B8 C |
 MARSMAPPZ_0C_CARLS_P :     2124658 C |
 MARSMAPPZ_0C_CARLS_P.FACE :                                        2124798 C |
 MARSMAPPZ_0C_CARLS_P.MTRL :                                        21248A8 C |
 MARSMAPPZ_0C_CARLS_P.VERT :                                        212466C C |
 MARSMAPPZ_0C_CARLS_P.VRTX :                                        2124838 C |
 MARSMAPPZ_0D_MIDCARLS :    21248A8 C |
 MARSMAPPZ_0D_MIDCARLS.FACE :                                       2124C28 C |
 MARSMAPPZ_0D_MIDCARLS.MTRL :                                       2125168 C |
 MARSMAPPZ_0D_MIDCARLS.VERT :                                       21248BC C |
 MARSMAPPZ_0D_MIDCARLS.VRTX :                                       2125018 C |
 MARSMAPPZ_0E_HUT_L :       2125170 C |  MARSMAPPZ_0E_HUT_L.FACE :  212534C C |
 MARSMAPPZ_0E_HUT_L.MTRL :  212554C C |  MARSMAPPZ_0E_HUT_L.VERT :  2125184 C |
 MARSMAPPZ_0E_HUT_L.VRTX :  212549C C |  MARSMAPPZ_0F_HUT_R :       2125554 C |
 MARSMAPPZ_0F_HUT_R.FACE :  2125AA8 C |  MARSMAPPZ_0F_HUT_R.MTRL :  21262E8 C |
 MARSMAPPZ_0F_HUT_R.VERT :  2125568 C |  MARSMAPPZ_0F_HUT_R.VRTX :  2125F98 C |
 MARSMAPPZ_10_SEP_L :       21262F0 C |  MARSMAPPZ_10_SEP_L.FACE :  212646C C |
 MARSMAPPZ_10_SEP_L.MTRL :  21265BC C |  MARSMAPPZ_10_SEP_L.VERT :  2126304 C |
 MARSMAPPZ_10_SEP_L.VRTX :  212653C C |  MARSMAPPZ_11_SEP_R :       21265BC C |
 MARSMAPPZ_11_SEP_R.FACE :  2126738 C |  MARSMAPPZ_11_SEP_R.MTRL :  2126888 C |
 MARSMAPPZ_11_SEP_R.VERT :  21265D0 C |  MARSMAPPZ_11_SEP_R.VRTX :  2126808 C |
 MARSMDL_INIT :             6000AB8 C |  MARSMDL_INIT.CLNUP :       6000ABE C |
 MARSMDL_READMODEL :        6000ADC C |
 MARSMDL_READMODEL.ALLDONE :                                        6000C84 C |
 MARSMDL_READMODEL.ALLUVDONE :                                      6000BA2 C |
 MARSMDL_READMODEL.CAN_BUILD :                                      6000B44 C |
 MARSMDL_READMODEL.EXIT_MODEL :                                     6000DCA C |
 MARSMDL_READMODEL.FACE_OK :                                        6000CC4 C |
 MARSMDL_READMODEL.FACE_OUT :                                       6000DBE C |
 MARSMDL_READMODEL.FINISH_THIS :                                    6000DC6 C |
 MARSMDL_READMODEL.FIRST_FACE :                                     6000D10 C |
 MARSMDL_READMODEL.GO_FACES :                                       6000BE6 C |
 MARSMDL_READMODEL.GO_FOUT :                                        6000CBA C |
 MARSMDL_READMODEL.NEXT_FACE :                                      6000B32 C |
 MARSMDL_READMODEL.NO_ANIM :                                        6000B20 C |
 MARSMDL_READMODEL.ON_FRAMES :                                      6000AF8 C |
 MARSMDL_READMODEL.PAGE_2 : 6000CEC C |
 MARSMDL_READMODEL.SET_TRI :                                        6000B52 C |
 MARSMDL_READMODEL.SOLID_TYPE :                                     6000BD0 C |
 MARSMDL_READMODEL.SWAP_ME :                                        6000D0C C |
 MARSMDL_READMODEL.TAG_ANDMTRL :                                    6000BCC C |
 MARSMDL_READMODEL.TAG_MAXFACES :                                   6000B40 C |
 MARSMDL_READMODEL.TAG_XL : 6000CC0 C |
 MARSMDL_READMODEL.WAIT_CAMANIM :                                   6000B1E C |
 MARSOBJ_INTRO_1 :          6004610 C |  MARSOBJ_INTRO_1.FACE :     6004F54 C |
 MARSOBJ_INTRO_1.MTRL :     6005834 C |  MARSOBJ_INTRO_1.VERT :     6004624 C |
 MARSOBJ_INTRO_1.VRTX :     6005524 C |  MARSOBJ_INTRO_2 :          6005834 C |
 MARSOBJ_INTRO_2.FACE :     600625C C |  MARSOBJ_INTRO_2.MTRL :     6006C0C C |
 MARSOBJ_INTRO_2.VERT :     6005848 C |  MARSOBJ_INTRO_2.VRTX :     60068AC C |
 MARSOBJ_PROJNAME :         2126888 C |  MARSOBJ_PROJNAME.FACE :    2127D60 C |
 MARSOBJ_PROJNAME.MTRL :    21293E0 C |  MARSOBJ_PROJNAME.VERT :    212689C C |
 MARSOBJ_PROJNAME.VRTX :    2128CF0 C |  MARSRAM_SOUND :            6034EDC C |
 MARSRAM_SYSTEM :           6006C10 C |  MARSRAM_VIDEO :            6006C68 C |
*MARSSND_PWMPLYDATA :       6034EDC C | *MARSVIDEO_CLEARFRAME :     6000694 C |
 MARSVIDEO_CLEARFRAME.LOOP :                                        60006A8 C |
 MARSVIDEO_CLEARFRAME.WAIT :                                        60006B6 C |
 MARSVIDEO_CLEARFRAME.WAIT2 :                                       6000696 C |
 MARSVIDEO_INIT :           6000646 C |  MARSVIDEO_INIT.FB_WAIT1 :  6000676 C |
 MARSVIDEO_INIT.LOOP :      600066C C |  MARSVIDEO_INIT.THIS_FB :   6000664 C |
 MARSVIDEO_INIT.WAIT_RESULT :                                       6000686 C |
 MARSVIDEO_LOADPAL :        60006C8 C | *MARSVIDEO_LOADPAL.BADLEN : 60006EE C |
 MARSVIDEO_LOADPAL.LOOP :   60006E2 C |  MARSVIDEO_SETWATCHDOG :    600071A C |
 MARSVIDEO_SETWATCHDOG.WAIT_FB :                                    6000744 C |
 MARSVIDEO_SETWATCHDOG.WAIT_FRMSWP :                                600073E C |
 MARSVIDEO_SLICEPLGN :                                     FFFFFFFFC00003D0 C |
 MARSVIDEO_SLICEPLGN.DONTRESET :                           FFFFFFFFC0000470 C |
 MARSVIDEO_SLICEPLGN.EXIT :                                FFFFFFFFC0000490 C |
 MARSVIDEO_SLICEPLGN.FIND_TOP :                            FFFFFFFFC0000422 C |
 MARSVIDEO_SLICEPLGN.IS_HIGH :                             FFFFFFFFC0000434 C |
 MARSVIDEO_SLICEPLGN.IS_LOW :                              FFFFFFFFC000042A C |
 MARSVIDEO_SLICEPLGN.LEFTH2 :                              FFFFFFFFC0000488 C |
 MARSVIDEO_SLICEPLGN.NEXT_PZ :                             FFFFFFFFC0000456 C |
 MARSVIDEO_SLICEPLGN.SETPNTS :                             FFFFFFFFC00003F0 C |
 MARSVIDEO_SLICEPLGN.SRC_PNTS :                            FFFFFFFFC0000404 C |
*MARSVIDEO_SLICEPLGN.START_MATH :                          FFFFFFFFC0000412 C |
 MARSVIDEO_SLICEPLGN.TRINGL :                              FFFFFFFFC00003E2 C |
 MARSVIDEO_SLICEPLGN.YTRINGL :                             FFFFFFFFC000041A C |
 MARS_ENTRY :                   800 C |  MARS_ENTRY.ADAPTERENABLE :     872 C |
 MARS_ENTRY.CLRRAM :            8F0 C |  MARS_ENTRY.COPYME :            90C C |
 MARS_ENTRY.HOTSTART :          8BE C |  MARS_ENTRY.INIT :              880 C |
 MARS_ENTRY.NO_MARS :           930 C |  MARS_ENTRY.RAMCODE :           84A C |
 MARS_ENTRY.RESTARTICD :        85A C |  MARS_ENTRY.WAITFRAME :         8D0 C |
 MARS_ENTRY.WM :                892 C |  MARS_ENTRY.WS :                89C C |
 MARS_RAMDATA :              10BFC0 C |  MARS_RAMDATA_E :            112BD0 C |
 MASTER_IRQ :               6000248 C |  MASTER_LOOP :              6000FD6 C |
 MASTER_LOOP.CONT_PLGN :    6001054 C |  MASTER_LOOP.DRAW_OBJECTS : 600102E C |
 MASTER_LOOP.INVALID :      600106A C |  MASTER_LOOP.LIST :         6000FF0 C |
 MASTER_LOOP.LOOP :         600105A C |  MASTER_LOOP.MD_REQ :       6000FFC C |
 MASTER_LOOP.NEXT_REQ :     6001006 C |  MASTER_LOOP.NO_TASK :      6001016 C |
 MASTER_LOOP.PAGE_2 :       600104C C |  MASTER_LOOP.SKIP :         6001074 C |
 MASTER_LOOP.WAITFB :       6001088 C |  MASTER_LOOP.WAIT_PZ :      6001074 C |
 MASTER_LOOP.WAIT_TASK :    600107A C |  MAX_FACES :                    3B6 - |
 MAX_MDERAM :                   800 - |  MAX_MDTASKS :                   10 - |
 MAX_MDTSKARG :                   8 - |  MAX_MODELS :                    18 - |
*MAX_PWMCHNL :                    7 - |  MAX_SVDP_PZ :                  436 - |
 MAX_TRKCHN :                    12 - |  MAX_TRKS :                       2 - |
 MAX_ZDIST :       FFFFFFFFFFFFDC00 - | *MCD :                            0 - |
*MCHNSND_BANK :                   8 C | *MCHNSND_ENBL :                   0 C |
*MCHNSND_END :                   10 C | *MCHNSND_FLAGS :                 1C C |
*MCHNSND_LOOP :                  14 C | *MCHNSND_PITCH :                 18 C |
*MCHNSND_READ :                   4 C | *MCHNSND_START :                  C C |
*MCHNSND_VOL :                   20 C |  MDGFX_BG :                  100000 C |
 MDGFX_BGTITLE :             10BE20 C |  MDGFX_BGTITLE_E :           10BFC0 C |
 MDGFX_BG_E :                10BE20 C |  MDLLAY_DATA :                    0 C |
 MDLLAY_X :                       4 C |  MDLLAY_XR_LAST :                1C C |
 MDLLAY_X_LAST :                 10 C |  MDLLAY_Y :                       8 C |
 MDLLAY_Y_LAST :                 14 C |  MDLLAY_Z :                       C C |
 MDLLAY_Z_LAST :                 18 C |  MDLRD_ROTATE :             6000F22 C |
 MDLRD_SETPOINT :           6000DEC C |  MDLRD_SETPOINT.INSIDE :    6000EC2 C |
 MDLRD_SETPOINT.LAY_MOVE :  6000E5C C |  MDLRD_SETPOINT.SAVE_Z :    6000EF4 C |
 MDLRD_SETPOINT.SAVE_Z2 :   6000EEE C |  MDLRD_SETPOINT.X_LW :      6000EFA C |
 MDLRD_SETPOINT.X_RW :      6000F00 C |  MDLRD_SETPOINT.Y_LW :      6000F06 C |
 MDLRD_SETPOINT.Y_RW :      6000F0C C |  MDLRD_SETPOINT.ZMULTI :    6000EDA C |
 MDL_ANIMDATA :                  20 C |  MDL_ANIMFRAME :                 24 C |
 MDL_ANIMSPD :                   2C C |  MDL_ANIMTIMER :                 28 C |
 MDL_DATA :                       0 C |  MDL_OPTION :                     4 C |
 MDL_X_POS :                      8 C |  MDL_X_ROT :                     14 C |
 MDL_Y_POS :                      C C |  MDL_Y_ROT :                     18 C |
 MDL_Z_POS :                     10 C |  MDL_Z_ROT :                     1C C |
 MDMAP_BG :                  90FD80 C |  MDMAP_BGTITLE :             910D80 C |
 MDMDL1_USERCONTROL :        FF1F4C C |  MDMDL1_USERCONTROL.BUSY :   FF205E C |
*MDMDL1_USERCONTROL.NEL2 :   FF204E C |  MDMDL1_USERCONTROL.NO_A :   FF1FCC C |
 MDMDL1_USERCONTROL.NO_B :   FF1FEC C |  MDMDL1_USERCONTROL.NO_DW :  FF1F84 C |
 MDMDL1_USERCONTROL.NO_LF :  FF1F98 C |  MDMDL1_USERCONTROL.NO_RG :  FF1FAC C |
 MDMDL1_USERCONTROL.NO_UP :  FF1F70 C |  MDMDL1_USERCONTROL.NO_X :   FF2006 C |
 MDMDL1_USERCONTROL.NO_Y :   FF201C C |  MDMDL_CAMANIMATE :          FF1EDA C |
 MDMDL_CAMANIMATE.NO_CAMANIM :                                       FF1F48 C |
 MDMDL_CAMANIMATE.ON_FRAMES :                                        FF1F10 C |
 MDMDL_RUNANIMATION :        FF1E8C C |  MDMDL_RUNANIMATION.BUSY :   FF1ED8 C |
*MDMDL_RUNANIMATION.NEL2 :   FF1EC8 C |  MDMDL_RUNANIMATION.STAY :   FF1E96 C |
 MDMDL_SETNEWCAMERA :        FF1E4C C |  MDPAL_BG :                  FF2094 C |
 MDPAL_BGTITLE :             FF20AA C | *MDPAL_BGTITLE.END :         FF20B6 C |
 MDRAMCODE :                    94A C |  MDRAMCODE_END :               249E C |
 MDRAM_START :             FFFF8800 - |  MD_BANK_SRAM :              A130F1 - |
 MD_ERRADDR :                   948 C |  MD_ERRBUS :                    948 C |
 MD_ERRCHK :                    948 C |  MD_ERRILL :                    948 C |
 MD_ERROREX :                   948 C |  MD_ERRORTRAP :                 948 C |
 MD_ERRPRIVL :                  948 C |  MD_ERRTRAPV :                  948 C |
 MD_ERRZDIV :                   948 C |  MD_LINE1010 :                  948 C |
 MD_LINE1111 :                  948 C |  MD_TRACE :                     948 C |
*MINFO_RAM_S :               FF0000 C |  MODE :                          18 - |
 MODE_INIT :                 FF1B24 C |  MODE_INIT.CLR :             FF1B32 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
*MONOWIDTH :                     38 - |  M_IRQ_BAD :                6000314 C |
 M_IRQ_CMD :                6000334 C |  M_IRQ_CMD.FINISH :         6000384 C |
 M_IRQ_CMD.NEXT_COMM :      6000358 C |  M_IRQ_CMD.WAIT_MD_B :      600035C C |
 M_IRQ_CMD.WAIT_MD_C :      600036C C |  M_IRQ_CUSTOM :    FFFFFFFFC0000000 C |
 M_IRQ_CUSTOM.ON_CLR :                                     FFFFFFFFC000005A C |
 M_IRQ_CUSTOM.TESTME :                                     FFFFFFFFC0000020 C |
 M_IRQ_CUSTOM.WAIT_FB :                                    FFFFFFFFC0000014 C |
 M_IRQ_CUSTOM.WME :                                        FFFFFFFFC000002A C |
 M_IRQ_H :                  60003AC C |  M_IRQ_PWM :                6000318 C |
 M_IRQ_V :                  60003C8 C |  M_IRQ_V.COPY_PAL :         60003F6 C |
*M_IRQ_V.MID_PWRITE :       6000464 C |  M_IRQ_V.WAIT :             60003DC C |
 M_IRQ_V.WAIT_FB :          60003D6 C |  M_IRQ_VRES :               600046C C |
 M_IRQ_VRES.MARS_RESET :    60004BE C |  M_IRQ_VRES.MD_RESET :      6000484 C |
 M_IRQ_VRES.SH_WAIT :       600048C C |  M_IRQ_VRES.VRESLOOP :      60004C6 C |
*NESTMAX :                      100 - |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - |  PADDINGSOFAR :               B17E5 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
 PALETTE_INTRO :            60043D4 C |  PALETTE_MAP :              60043F4 C |
 PALETTE_PROJNAME :         60045F4 C | *PEN :                           20 - |
 PLAYONCHIP :                   1E0 C |  PLAYONCHIP.CONT_PSG :          2E6 C |
 PLAYONCHIP.COPYBYTES :         3AA C |  PLAYONCHIP.DAC_INS :           394 C |
 PLAYONCHIP.DO_CHNL :           22D C |  PLAYONCHIP.EFF_X_FM :          281 C |
 PLAYONCHIP.FMPAN_LIST :        2A4 C |  PLAYONCHIP.FM_EFF :            278 C |
 PLAYONCHIP.FM_INS :            320 C |  PLAYONCHIP.F_LP :              746 C |
 PLAYONCHIP.GETOCT :            649 C |  PLAYONCHIP.GET_INSTYPE :       6C6 C |
 PLAYONCHIP.INS_NS :            2D7 C |  PLAYONCHIP.INS_PSG :           2C3 C |
 PLAYONCHIP.KEYOFF :            6AE C |  PLAYONCHIP.L_LP :              724 C |
 PLAYONCHIP.NEWP :              755 C |  PLAYONCHIP.NGOOD :             740 C |
 PLAYONCHIP.NOLNK :             743 C |  PLAYONCHIP.NORMLPSG :          596 C |
 PLAYONCHIP.NOTE_DAC :          6B9 C |  PLAYONCHIP.NOTE_FM :           5CB C |
 PLAYONCHIP.NOTE_FM3 :          6AD C |  PLAYONCHIP.NOTE_PWM :          6C5 C |
 PLAYONCHIP.NOTNSE :            4D7 C |  PLAYONCHIP.NOTNSEV :           3D5 C |
 PLAYONCHIP.NXT_CHNL :          1F6 C |  PLAYONCHIP.NXT_TRACK :         1F2 C |
 PLAYONCHIP.PNCONT :            4DA C |  PLAYONCHIP.POFF :              5B3 C |
 PLAYONCHIP.PSGCHNL3 :          58B C | *PLAYONCHIP.PSGVOLTBL :         70A C |
 PLAYONCHIP.PSTOP :             59B C |  PLAYONCHIP.PVCONT :            3D8 C |
 PLAYONCHIP.REQ_EFF :           25E C |  PLAYONCHIP.REQ_INS :           2A8 C |
 PLAYONCHIP.REQ_NOTE :          4AE C |  PLAYONCHIP.REQ_VOL :           3B6 C |
 PLAYONCHIP.SETGOOD :           762 C |  PLAYONCHIP.SETLV :             356 C |
 PLAYONCHIP.SRCH_CHNLTBL :      71B C |  PLAYONCHIP.SRCH_FM :           6EA C |
*PLAYONCHIP.SRCH_FM3 :          6F2 C | *PLAYONCHIP.SRCH_FM6 :          6FA C |
 PLAYONCHIP.SRCH_PSG :          6E2 C |  PLAYONCHIP.SRCH_PSGN :         6DA C |
 PLAYONCHIP.SRCH_PWM :          702 C |  PLAYONCHIP.TLV_LV1 :           436 C |
 PLAYONCHIP.TLV_LV2 :           45D C |  PLAYONCHIP.TLV_LV2_OK :        454 C |
 PLAYONCHIP.TLV_LV3 :           47C C |  PLAYONCHIP.TLV_LV4 :           48F C |
 PLAYONCHIP.VOL_FM :            3EE C |  PLAYONCHIP.VOL_PWM :           495 C |
*PLGN_SPRITE :                   20 - |  PLGN_TEXURE :                   80 - |
 PLGN_TRI :                      40 - |  PLYPZ_MTRL :                    34 C |
 PLYPZ_SRC_XL :                  14 C |  PLYPZ_SRC_XL_DX :               18 C |
 PLYPZ_SRC_XR :                  24 C |  PLYPZ_SRC_XR_DX :               28 C |
 PLYPZ_SRC_YL :                  1C C |  PLYPZ_SRC_YL_DX :               20 C |
 PLYPZ_SRC_YR :                  2C C |  PLYPZ_SRC_YR_DX :               30 C |
 PLYPZ_TYPE :                    38 C |  PLYPZ_XL :                       4 C |
 PLYPZ_XL_DX :                    8 C |  PLYPZ_XR :                       C C |
 PLYPZ_XR_DX :                   10 C |  PLYPZ_YPOS :                     0 C |
 POLYGN_MTRL :                    4 C |  POLYGN_POINTS :                  8 C |
 POLYGN_SRCPNTS :                28 C |  POLYGN_TYPE :                    0 C |
*PSGALV :                      125C C | *PSGATK :                      1240 C |
 PSGCOM :                      1238 C | *PSGDEC :                      1244 C |
*PSGDTH :                      1258 C | *PSGDTL :                      1254 C |
*PSGENV :                      1250 C |  PSGFREQ_LIST :                1080 C |
 PSGHATMODE :                    2F C | *PSGINS_00 :                   1286 C |
*PSGINS_01 :                   128B C | *PSGINS_02 :                   1290 C |
*PSGINS_03 :                   1295 C | *PSGINS_BASS :                 129A C |
*PSGINS_SNARE :                129F C | *PSGLEV :                      123C C |
 PSGNVTBL :                    118E C | *PSGRRT :                      124C C |
*PSGSLV :                      1248 C | *PSGTIM :                      1264 C |
 PSGVTBL :                     1172 C | *PSG_CTRL :                  C00011 - |
 PSG_ENV :                      CF0 C |  PSG_ENV.ATKEND :               D98 C |
 PSG_ENV.CHK2 :                 DA2 C |  PSG_ENV.CHK4 :                 DD6 C |
 PSG_ENV.CKOF :                 D15 C |  PSG_ENV.CKON :                 D27 C |
*PSG_ENV.DECTMR :               DA7 C |  PSG_ENV.DKADD :                DC0 C |
 PSG_ENV.DKSAV :                DC8 C |  PSG_ENV.DKYEND :               DCD C |
 PSG_ENV.ENVPROC :              D6E C |  PSG_ENV.FLGOFF :               E2E C |
 PSG_ENV.KILLENV :              DEB C |  PSG_ENV.NEXTPSG :              E15 C |
 PSG_ENV.NSKIP :                D66 C |  PSG_ENV.PSTEAL :               D57 C |
 PSG_ENV.SETHAT :               D61 C |  PSG_ENV.TNMODE :               D4B C |
 PSG_ENV.VEDLP :                DF8 C |  PSG_ENV.VLOOP :                CFB C |
 PSG_ENV.WRFREQ :               D3A C |  PUT_PIECE :       FFFFFFFFC00005DE C |
 PUT_PIECE.BAD_PIECE :                                     FFFFFFFFC000068E C |
 PUT_PIECE.DONTRESET_PZ :                                  FFFFFFFFC0000686 C |
 PUT_PIECE.LEFTH : FFFFFFFFC00005EE C |
 PUT_PIECE.TOP_NEG :                                       FFFFFFFFC0000670 C |
*PWMCTL :                        31 - | *PWMINSWAV_PIANO :          21826F4 C |
*PWMINSWAV_PIANO_E :        21888EA C | *PWMINSWAV_STRING :         21888EC C |
*PWMINSWAV_STRING_E :       218D142 C |  PWMINTCLR :                     1C - |
*PWMIRQ_ON :                      1 - |  PWMVTBL :                     11FF C |
 RAMCODE_USER :              FF1B54 C |  RAM_BGCAMCURR :   FFFFFFFFFFFF8C2C C |
 RAM_BGCAMERA :    FFFFFFFFFFFF8C2A C |  RAM_CAMDATA :     FFFFFFFFFFFF8C18 C |
 RAM_CAMFRAME :    FFFFFFFFFFFF8C1C C |  RAM_CAMSPEED :    FFFFFFFFFFFF8C24 C |
 RAM_CAMTIMER :    FFFFFFFFFFFF8C20 C |  RAM_CAM_XPOS :    FFFFFFFFFFFF8C00 C |
 RAM_CAM_XROT :    FFFFFFFFFFFF8C0C C |  RAM_CAM_YPOS :    FFFFFFFFFFFF8C04 C |
 RAM_CAM_YROT :    FFFFFFFFFFFF8C10 C |  RAM_CAM_ZPOS :    FFFFFFFFFFFF8C08 C |
 RAM_CAM_ZROT :    FFFFFFFFFFFF8C14 C |  RAM_FRAMECOUNT :  FFFFFFFFFFFF9816 C |
 RAM_INITFLUG :    FFFFFFFFFFFF9822 C |  RAM_INPUTDATA :   FFFFFFFFFFFF91DE C |
*RAM_MARSFADE :    FFFFFFFFFFFF8A00 C | *RAM_MARSPAL :     FFFFFFFFFFFF8800 C |
 RAM_MARS_GLOBAL :          6006C10 C |  RAM_MARS_MDTASKSFIFO_M :   60348D8 C |
 RAM_MARS_MDTASKSFIFO_S :   6034AD8 C |  RAM_MARS_OBJCAMERA :       6006C68 C |
 RAM_MARS_OBJECTS :         6006CB0 C |  RAM_MARS_OBJLAYOUT :       6006C90 C |
 RAM_MARS_PALETTE :         6034CD8 C |  RAM_MARS_PLGNNUM_0 :       6034ED8 C |
 RAM_MARS_PLGNNUM_1 :       6034EDA C |  RAM_MARS_PLGN_ZLIST_0 :    6030D78 C |
 RAM_MARS_PLGN_ZLIST_1 :    6032B28 C |  RAM_MARS_POLYGONS_0 :      6007130 C |
 RAM_MARS_POLYGONS_1 :      6014100 C |  RAM_MARS_VDPDRWLIST :      60210D0 C |
 RAM_MARS_VDPDRWLIST_E :    6030D78 C |  RAM_MDGLOBAL :    FFFFFFFFFFFF9838 C |
 RAM_MDLCURRMD :   FFFFFFFFFFFF8C28 C |  RAM_MDMARSHINT :  FFFFFFFFFFFF982C C |
 RAM_MDMARSTCNTM : FFFFFFFFFFFF9832 C |  RAM_MDMARSTCNTS : FFFFFFFFFFFF9834 C |
 RAM_MDMARSTSKM :  FFFFFFFFFFFF93F6 C |  RAM_MDMARSTSKS :  FFFFFFFFFFFF95F6 C |
 RAM_MDMARSTSSGL : FFFFFFFFFFFF97F6 C |  RAM_MDMARSVINT :  FFFFFFFFFFFF9826 C |
 RAM_MDSOUND :     FFFFFFFFFFFF9000 C |  RAM_MDSYSTEM :    FFFFFFFFFFFF91DE C |
 RAM_MDVIDEO :     FFFFFFFFFFFF9044 C |  RAM_MODEBUFF :    FFFFFFFFFFFF8800 C |
*RAM_PWM_LIST :    FFFFFFFFFFFF9000 C | *RAM_SAVEDATA :    FFFFFFFFFFFF91F6 C |
 RAM_SNDSAVEREG :  FFFFFFFFFFFF9024 C | *RAM_SYSFLAGS :    FFFFFFFFFFFF9836 C |
 RAM_SYSRANDSEED : FFFFFFFFFFFF981E C |  RAM_SYSRANDVAL :  FFFFFFFFFFFF981A C |
 RAM_VDPREGS :     FFFFFFFFFFFF91C6 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFF9046 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFF9044 C | *RCHWIDTH :                      36 - |
*RELAXED :                        0 - |  REQSAMPL :                      34 C |
 ROM_END :                   18D144 C |  RRT :                           14 - |
 SAMPL_MAGIC1 :              911B80 C |  SAMPL_MAGIC1_END :          92AA0E C |
 SAMPL_MAGIC2 :              92AA0E C |  SAMPL_MAGIC2_END :          943842 C |
 SAMPL_MYTIME :              943842 C |  SAMPL_MYTIME_END :          94E817 C |
 SBEATACC :                      1F C |  SBEATPTCK :                     1D C |
 SCREEN_HEIGHT :                 E0 - |  SCREEN_WIDTH :                 140 - |
 SET_LEFT :        FFFFFFFFC00004B4 C |  SET_LEFT.LFT_OK : FFFFFFFFC00004D6 C |
 SET_LEFT.LFT_SKIP :                                       FFFFFFFFC0000536 C |
 SET_RIGHT :       FFFFFFFFC000053C C |
 SET_RIGHT.RGT_OK :                                        FFFFFFFFC000055E C |
 SET_RIGHT.RGT_SKIP :                                      FFFFFFFFC00005BE C |
*SET_TEMPO :                    BDA C |  SH2_ERROR :                600030C C |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              6000F5C C |
 SH2_M_ENTRY.WAIT_MD :      6000F8C C |  SH2_M_ENTRY.WAIT_SLAVE :   6000F96 C |
 SH2_M_HOTSTART :           6000FA2 C |  SH2_M_HOTSTART.COPY :      6000FC2 C |
 SH2_RAM :                  6006C10 C |  SH2_SLAVE :                6000124 C |
 SH2_S_ENTRY :              6001108 C |  SH2_S_ENTRY.WAIT_MD :      6001138 C |
 SH2_S_HOTSTART :           6001144 C |  SH2_S_HOTSTART.COPY :      6001164 C |
*SHIFT :                          3 - |  SIN_TABLE :                6001BD4 C |
 SIZEOF_CAMERA :                 28 C |  SIZEOF_INPUT :                   6 C |
 SIZEOF_LAYOUT :                 20 C |  SIZEOF_MARSGBL :                2C C |
*SIZEOF_MARSRAM :           6034EF8 C | *SIZEOF_MARSRAM.HERE :      6034EF8 C |
 SIZEOF_MARSSND :           6034EF8 C |  SIZEOF_MARSSYS :           6006C68 C |
 SIZEOF_MARSVID :           6034EDC C |  SIZEOF_MDGLBL :   FFFFFFFFFFFF8C2E C |
 SIZEOF_MDLOBJ :                 30 C | *SIZEOF_MDRAM :    FFFFFFFFFFFF8C2E C |
 SIZEOF_MDSND :    FFFFFFFFFFFF9044 C |  SIZEOF_MDSYS :    FFFFFFFFFFFF9838 C |
 SIZEOF_MDVID :    FFFFFFFFFFFF91DE C |  SIZEOF_PLYPZ :                  3C C |
 SIZEOF_POLYGN :                 38 C |  SIZEOF_PWM :                    24 C |
 SLAVE_IRQ :                60002AC C |  SLAVE_LOOP :               6001178 C |
 SLAVE_LOOP.GO_MDL :        60011C4 C |  SLAVE_LOOP.INVLID :        6001202 C |
 SLAVE_LOOP.LOOP :          60011EA C |  SLAVE_LOOP.MSTR_BUSY :     600122C C |
 SLAVE_LOOP.NEXT_REQ :      6001186 C |  SLAVE_LOOP.NO_REQ :        60011A8 C |
 SLAVE_LOOP.NO_TASK :       6001196 C |  SLAVE_LOOP.PAGE_2 :        6001222 C |
 SLAVE_LOOP.SKIP :          6001208 C |  SLAVE_LOOP.WAIT_Z :        600120C C |
 SLV :                           10 - |  SNDLOCKZ80 :                FF011A C |
 SNDLOCKZ80.WAIT :           FF0122 C |  SNDREQ_ENTER :              FF013A C |
 SNDREQ_ENTER.WAIT :         FF0160 C |  SNDREQ_EXIT :               FF0170 C |
 SNDREQ_SADDR :              FF0198 C |  SNDREQ_SBYTE :              FF01A0 C |
 SNDREQ_SCMD :               FF0186 C | *SNDREQ_SLONG :              FF0194 C |
 SNDREQ_SWORD :              FF019C C | *SNDSENDCMD :                FF0138 C |
 SNDUNLOCKZ80 :              FF012E C | *SOUNDREQ_SETSAMPLE :        FF00F0 C |
 SOUNDREQ_SETTRACK :         FF00C4 C | *SOUND_DMA_PAUSE :           FF005A C |
 SOUND_DMA_PAUSE.RETRY :     FF0060 C |  SOUND_DMA_PAUSE.SAFE :      FF008C C |
 SOUND_DMA_PAUSE.WAIT :      FF0068 C | *SOUND_DMA_RESUME :          FF0098 C |
 SOUND_INIT :                FF0000 C |  SOUND_INIT.CLEANUP :        FF0026 C |
 SOUND_INIT.COPY :           FF003C C |  SOUND_INIT.WAIT :           FF0010 C |
*SOUND_REQUEST :             FF00B0 C |  STANDBY :                        2 - |
*STR_STATUS :                FF2060 C | *SYSMARS_ID :                A130EC - |
 SYSMARS_REG :               A15100 - |  SYSMDMARS_INSTASK :         FF1AA2 C |
 SYSMDMARS_INSTASK.RAN_OUT : FF1AB2 C |  SYSMDMARS_TRANSFER :        FF1AB4 C |
 SYSMDMARS_TRANSFER.EXIT :   FF1B1C C |  SYSMDMARS_TRANSFER.LOOP :   FF1AEA C |
*SYSMDMARS_TRANSFER.MID_WRITE :                                      FF1B22 C |
 SYSMDMARS_TRANSFER.WAIT_CMD :                                       FF1AE2 C |
 SYSTEM_INIT :               FF1786 C |  SYSTEM_INIT.CLRINPUT :      FF17C4 C |
 SYSTEM_INIT.WAIT :          FF1794 C |  SYSTEM_INPUT :              FF1808 C |
 SYSTEM_INPUT.EXIT :         FF1836 C |  SYSTEM_INPUT.ID_0D :        FF185C C |
 SYSTEM_INPUT.LIST :         FF183C C |  SYSTEM_INPUT.OLDPAD :       FF18BA C |
 SYSTEM_INPUT.PICK_ID :      FF18F2 C |  SYSTEM_INPUT.READ :         FF1908 C |
 SYSTEM_INPUT.STEP_1 :       FF1914 C |  SYSTEM_INPUT.STEP_2 :       FF1920 C |
 SYSTEM_INPUT.THIS_ONE :     FF181C C | *SYSTEM_INPUT.WAIT :         FF1808 C |
 SYSTEM_JUMPRAMCODE :        FF19B6 C |
 SYSTEM_JUMPRAMCODE.COPYME2 :                                        FF19C8 C |
*SYSTEM_MDMARS_MSTADDTASK :  FF19D4 C | *SYSTEM_MDMARS_MSTSENDALL :  FF1A20 C |
*SYSTEM_MDMARS_MSTSENDDROP : FF1A50 C |
 SYSTEM_MDMARS_MSTSENDDROP.GO_M :                                    FF1A70 C |
 SYSTEM_MDMARS_MSTTASK :     FF19EC C |  SYSTEM_MDMARS_SLVADDTASK :  FF19E0 C |
 SYSTEM_MDMARS_SLVSENDALL :  FF1A38 C |  SYSTEM_MDMARS_SLVSENDDROP : FF1A76 C |
 SYSTEM_MDMARS_SLVSENDDROP.GO_S :                                    FF1A98 C |
 SYSTEM_MDMARS_SLVTASK :     FF1A06 C | *SYSTEM_RANDOM :             FF1922 C |
 SYSTEM_SETINTS :            FF1940 C |  SYSTEM_SETINTS.NOHINT :     FF1964 C |
 SYSTEM_SETINTS.NOVINT :     FF1952 C | *SYSTEM_SRAMINIT :           FF1966 C |
 SYSTEM_SRAMINIT.INITSAVE :  FF197A C |  SYSTEM_VSYNC :              FF198E C |
 SYSTEM_VSYNC.INSIDE :       FF19A8 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
*SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                6000502 C |  S_IRQ_CMD :                6000524 C |
 S_IRQ_CMD.FINISH :         6000574 C |  S_IRQ_CMD.NEXT_COMM :      6000548 C |
 S_IRQ_CMD.WAIT_MD_B :      600054C C |  S_IRQ_CMD.WAIT_MD_C :      600055C C |
 S_IRQ_CUSTOM :             60013BC C |  S_IRQ_CUSTOM.NO_FACES :    600140C C |
 S_IRQ_CUSTOM.NO_REQ :      6001410 C |  S_IRQ_CUSTOM.PAGE_2 :      60013EA C |
 S_IRQ_CUSTOM.Z_KEEP :      6001406 C |  S_IRQ_CUSTOM.Z_NEXT :      60013F2 C |
 S_IRQ_H :                  6000598 C |  S_IRQ_PWM :                6000508 C |
 S_IRQ_V :                  60005B4 C |  S_IRQ_VRES :               60005C8 C |
 S_IRQ_VRES.MARS_RESET :    6000612 C |  S_IRQ_VRES.MD_RESET :      60005E0 C |
 S_IRQ_VRES.SH_WAIT :       60005EC C |  S_IRQ_VRES.VRESLOOP :      600061A C |
 TAG_WIDTH :       FFFFFFFFC000027C C |  TAG_YHGHT :       FFFFFFFFC0000280 C |
 TESTMARS_BG :              2170EF4 C |  TEST_LAYOUT :              2112BD0 C |
 TEST_LAYOUT.BLOCKS :       21133D4 C | *TEXTR_INTRO :              216CC28 C |
 TEXTR_MARSCITY :           21293E8 C |  TEXTR_PROJNAME :           21693E8 C |
 TH :                      20000000 - | *THISCODE_TOP :              FF1B54 C |
 THISCODE_TOP.LIST :         FF1BC6 C |  THISCODE_TOP.LOOP :         FF1B90 C |
 THISCODE_TOP.MODE0 :        FF1BD2 C |  THISCODE_TOP.MODE0_LOOP :   FF1CA8 C |
 THISCODE_TOP.MODE1 :        FF1CAE C |  THISCODE_TOP.MODE1_LOOP :   FF1D78 C |
 THISCODE_TOP.MODE2 :        FF1D7E C |  THISCODE_TOP.MODE2_LOOP :   FF1E46 C |
 TICKCNT :                       1C C |  TICKFLAG :                      1A C |
*TIME :                     2:13:02 - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRANSFERROM :                  BFB C |
 TRANSFERROM.DOUBLE :           C1C C |  TRANSFERROM.TRANSFER :         C45 C |
 TRANSFERROM.X68KLAST :         C88 C |  TRANSFERROM.X68KLOOP :         C74 C |
 TRANSFERROM.X68KLPCONT :       C7C C |  TRANSFERROM.X68KLPWT :         C9C C |
 TRANSFERROM.X68KLSTCONT :      C92 C |  TRANSFERROM.X68KLSTWT :        CB1 C |
 TRANSFERROM.X68KLSTWTLP :      CB5 C |  TRANSFERROM.X68KNOCARRY :      C3F C |
 TRANSFERROM.X68KPWTLP :        CA0 C |  TRKBUFF :                     1800 C |
 TRKDATAC :                    1600 C |  TRK_CURRBLK :                   11 - |
 TRK_HALFWAY :                   10 - |  TRK_READ :                       C - |
 TRK_ROMBLK :                     0 - |  TRK_ROMINS :                     6 - |
 TRK_ROMPATT :                    3 - |  TRK_ROMPATTRD :                  9 - |
 TRK_ROWS :                       E - |  TRK_SETBLK :                    12 - |
 TRK_STATUS :                    13 - |  TRK_TICKSET :                   15 - |
 TRK_TICKTMR :                   14 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPDTRACK :                     764 C |
 UPDTRACK.CHLST_UNLK :          B28 C |  UPDTRACK.CLRF :                9D3 C |
 UPDTRACK.CLRF2 :               907 C |  UPDTRACK.CLRFE :               9AB C |
 UPDTRACK.DECROW :              8A9 C |  UPDTRACK.EFF_B :               8F2 C |
 UPDTRACK.EXIT :                8A0 C |  UPDTRACK.FIRST_FILL :          9BA C |
 UPDTRACK.INC_CPATT :           8B4 C |  UPDTRACK.IS_NOTE :             802 C |
 UPDTRACK.NEXT :                781 C |  UPDTRACK.NEXT_NOTE :           7F1 C |
 UPDTRACK.NEXT_TRACK :          921 C |  UPDTRACK.NO_EFF :              869 C |
 UPDTRACK.NO_INS :              84A C |  UPDTRACK.NO_NOTE :             83E C |
 UPDTRACK.NO_UPDST :            897 C |  UPDTRACK.NO_VOL :              856 C |
 UPDTRACK.OLD_TYPE :            82F C |  UPDTRACK.READ_TRACK :          7AF C |
 UPDTRACK.SET_TRACK :           928 C |  UPDTRACK.SFXMD :               7C3 C |
 UPDTRACK.SILNC_CHIP :          A9F C |  UPDTRACK.SIL_FM :              AE6 C |
 UPDTRACK.TRACK_END :           99C C |  UPDTRACK.UNLKNOW :             AC8 C |
 VARNULLVRAM :                  7FF - |  VAR_MOVESPD :                 4000 - |
*VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - | *VIDEO_AUTOMAP_VERT :        FF0344 C |
 VIDEO_AUTOMAP_VERT.XLOOP :  FF0354 C |  VIDEO_AUTOMAP_VERT.YLOOP :  FF0366 C |
 VIDEO_CLEAR :               FF01E4 C | *VIDEO_COPY :                FF05F2 C |
 VIDEO_COPY.DMAW :           FF0606 C |  VIDEO_COPY.DMAWE :          FF0660 C |
 VIDEO_FILL :                FF057E C |  VIDEO_FILL.DMAW :           FF0592 C |
 VIDEO_FILL.DMAWE :          FF05DA C |  VIDEO_INIT :                FF01AE C |
 VIDEO_INIT.CLRRAM :         FF01B8 C | *VIDEO_INIT.EXIT :           FF01E2 C |
 VIDEO_INIT.LOOP :           FF01D4 C |  VIDEO_LOADART :             FF0678 C |
 VIDEO_LOADART.FROM_RAM :    FF0740 C |  VIDEO_LOADART.WAIT :        FF06F0 C |
 VIDEO_LOADMAP :             FF027C C |  VIDEO_LOADMAP.CONT :        FF02A2 C |
 VIDEO_LOADMAP.NODBLE :      FF02C2 C |  VIDEO_LOADMAP.NONULL :      FF02A0 C |
 VIDEO_LOADMAP.XLOOP :       FF0292 C |  VIDEO_LOADMAP.YLOOP :       FF0288 C |
*VIDEO_LOADMAP_VERT :        FF02D4 C |  VIDEO_LOADMAP_VERT.CONT :   FF0308 C |
 VIDEO_LOADMAP_VERT.NODBLE : FF032A C |  VIDEO_LOADMAP_VERT.NONULL : FF0306 C |
*VIDEO_LOADMAP_VERT.OUTDBL : FF0334 C |  VIDEO_LOADMAP_VERT.XLOOP :  FF02E2 C |
 VIDEO_LOADMAP_VERT.YLOOP :  FF02F4 C |  VIDEO_LOADPAL :             FF0252 C |
 VIDEO_LOADPAL.LOOP :        FF0274 C |  VIDEO_LOADPAL.OUTV :        FF026A C |
*VIDEO_PRINT :               FF03AA C |  VIDEO_PRINT.DONIBL :        FF04C4 C |
 VIDEO_PRINT.EXIT :          FF0434 C |  VIDEO_PRINT.ISBYTE :        FF03FE C |
 VIDEO_PRINT.ISLONG :        FF0422 C |  VIDEO_PRINT.ISWORD :        FF0410 C |
 VIDEO_PRINT.LNGLOOP :       FF04B4 C |  VIDEO_PRINT.LOOP :          FF03BE C |
 VIDEO_PRINT.LOWR :          FF04D4 C |  VIDEO_PRINT.NEWJUMP :       FF03B8 C |
 VIDEO_PRINT.NEXT :          FF03E0 C |  VIDEO_PRINT.NEXTV :         FF043E C |
 VIDEO_PRINT.NOTHING :       FF04E0 C |  VIDEO_PRINT.PUTTEXT :       FF03D2 C |
 VIDEO_PRINT.SPECIAL :       FF03E4 C |  VIDEO_PRINT.VBYTE :         FF0470 C |
 VIDEO_PRINT.VLONG :         FF04BC C |  VIDEO_PRINT.VWORD :         FF0492 C |
 VIDEO_PRINTINIT :           FF0386 C |  VIDEO_UPDATE :              FF0232 C |
*VIDEO_UPDATE.EXIT :         FF0250 C |  VIDEO_UPDATE.LOOP :         FF0244 C |
 VID_PICKLAYER :             FF04E2 C |  VID_PICKLAYER.GOLYR :       FF0532 C |
 VID_PICKLAYER.NOWD :        FF051C C |  VID_PICKLAYER.PLAWND :      FF050A C |
 VID_PICKLAYER.THISSZ :      FF0552 C |  VID_PICKLAYER.THISSZJ :     FF057A C |
 VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :              FF1B3A C |  VIRQ_ON :                        8 - |
 VRESINTCLR :                    14 - |  WAVE_FLAGS :                    13 C |
 WAVE_LEN :                       B C |  WAVE_LOOP :                      E C |
 WAVE_PITCH :                    11 C |  WAVE_START :                     8 C |
*WAVFREQ_PWM :                  F78 C | *WHDFLG :                      1260 C |
 X68KSRCLSB :                    29 C |  X68KSRCMID :                    2A C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                    2500 C |
 Z80_CODE_END :                4240 C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      3E C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - |  _CCR :                    FFFFFE92 - |
 _DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
 _DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - |  _FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
 _FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
 _JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - |  _OVERWRITE :              24020000 - |
 _PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
 _SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
 _TOCR :                          7 - |  _VDPREG :                 20004100 - |

   1412 symbols
    226 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 6/29/2021 2:13:02


  defined macros:
  ---------------

FINISH                                | GEMAINSDAC                           
GEMAINSFM                             | GEMAINSFM3                           
GEMAINSNULL                           | GEMAINSPSG                           
GEMAINSPSGN                           | ORG                                  
STRUCT                                | ZSMPL                                

     10 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 6/29/2021 2:13:02


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               |

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 6/29/2021 2:13:02


  codepages:
  ----------

STANDARD (0 changed characters)


0.27 seconds assembly time

  11787 lines source file
  12240 lines incl. macro expansions
      8 passes
      0 errors
      0 warnings
